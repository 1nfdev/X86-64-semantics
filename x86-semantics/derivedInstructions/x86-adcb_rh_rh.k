// Autogenerated using stratification.
requires "x86-configuration.k"

module ADCB-RH-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (adcb R1:Rh, R2:Rh,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56))), concatenateMInt(mi(8, 0), getFlag("CF", RSMap))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R1, RSMap), 48, 56)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap))), 0, 1) )

 "AF" |-> ((#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R1, RSMap), 48, 56)), addMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R1, RSMap), 48, 56)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap)))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R1, RSMap), 48, 56)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), extractMInt(getParentValue(R1, RSMap), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), extractMInt(addMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R1, RSMap), 48, 56)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), concatenateMInt(addMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R1, RSMap), 48, 56)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap))), extractMInt(getParentValue(R2, RSMap), 56, 64))) )

 "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R1, RSMap), 48, 56)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module ADCB-RH-RH-SEMANTICS
  imports ADCB-RH-RH
endmodule
/*
TargetInstr:
adcb %bh, %ah
RWSet:
maybe read:{ %ah %bh %cf }
must read:{ %ah %bh %cf }
maybe write:{ %ah %cf %pf %af %zf %sf %of }
must write:{ %ah %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movsbw %bh, %dx  #  1     0    4      OPC=movsbw_r16_rh
circuit:adcb %dl, %ah    #  2     0x4  2      OPC=adcb_rh_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

adcb %bh, %ah

  maybe read:      { %ah %bh %cf }
  must read:       { %ah %bh %cf }
  maybe write:     { %ah %cf %pf %af %zf %sf %of }
  must write:      { %ah %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for movb %ah, %cl

Final state:
%rcx/%cl: %rcx_movsbw_r16_rh[63:8] ∘ %rax_movsbw_r16_rh[15:8]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %cl, %ebx

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%rbx/%rbx: %rbx_movsbw_r16_rh

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rax_movsbw_r16_rh[15:8])[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(%rax_movsbw_r16_rh[15:8])[31:0]

=====================================
=====================================
Computing circuit for movsbw %bh, %dx

.target:
movb %ah, %cl
movsbl %cl, %ebx
retq 

Initial state:
%rdx/%dx: %rdx_adcb_rh_rh

State for specgen instruction: movsbw %ah, %bx:
%rbx/%bx: 0x0₃₂ ∘ sign-extend-64(%rax_movsbw_r16_rh[15:8])[31:0]

Register        -> %bx
  translates to => %dx
Value is               -> (0x0₃₂ ∘ sign-extend-64(%rax_movsbw_r16_rh[15:8])[31:0])[15:0]
  after renaming it is => sign-extend-64(%rbx_adcb_rh_rh[15:8])[15:0]

Final state
%rdx/%dx: %rdx_adcb_rh_rh[63:16] ∘ sign-extend-64(%rbx_adcb_rh_rh[15:8])[15:0]

=====================================
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %edi

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rdi/%rdi: %rdi_adcb_rh_r8

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rdi
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_adcb_rh_r8[15:8]

Final state
%rdi/%rdi: 0x0₅₆ ∘ %rax_adcb_rh_r8[15:8]

=====================================
-------------------------------------
Getting base circuit for adcb %dil, %bl

Final state:
%rbx/%bl: %rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0]

%cf: ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[8:8] = 0x1₁
%pf: !(((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0][3:0] + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0][3:0])[4:4] = 0x1₁
%zf: ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0] = 0x0₈
%sf: ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0][7:7] = 0x1₁
%of: ((0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0][7:7] = 0x1₁ ↔ %rbx_adcb_rh_r8[7:0][7:7] = 0x1₁) ∧ !((0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0][7:7] = 0x1₁ ↔ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_adcb_rh_r8
%rdx/%rdx: %rdx_adcb_rh_r8

%xmm0: %ymm0_adcb_rh_r8[127:0]
%xmm1: %ymm1_adcb_rh_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %bl, %ah

Final state:
%rax/%ah: %rax_adcb_rh_r8[63:16] ∘ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0] ∘ %rax_adcb_rh_r8[7:0]

-------------------------------------
=====================================
Computing circuit for adcb %dl, %ah

.target:
movzbl %ah, %edi
adcb %dil, %bl
callq .set_szp_for_bl
movb %bl, %ah
retq 

Initial state:
%rax/%ah: %rax_adcb_rh_rh

%cf: %cf_adcb_rh_rh
%pf: %pf_adcb_rh_rh
%af: %af_adcb_rh_rh
%zf: %zf_adcb_rh_rh
%sf: %sf_adcb_rh_rh
%of: %of_adcb_rh_rh

State for specgen instruction: adcb %bl, %ah:
%rax/%ah: %rax_adcb_rh_r8[63:16] ∘ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0] ∘ %rax_adcb_rh_r8[7:0]

%cf: ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[8:8] = 0x1₁
%pf: !((%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0][3:0] + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0] = 0x0₈
%sf: (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0][7:7] = 0x1₁
%of: ((0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0][7:7] = 0x1₁ ↔ %rbx_adcb_rh_r8[7:0][7:7] = 0x1₁) ∧ !((0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0][7:7] = 0x1₁ ↔ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:7] = 0x1₁)

Register        -> %ah
  translates to => %ah
Value is               -> (%rax_adcb_rh_r8[63:16] ∘ (%rbx_adcb_rh_r8[63:8] ∘ ((%cf_adcb_rh_r8 ? 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rax_adcb_rh_r8[15:8])[7:0]) + 0x0₁ ∘ %rbx_adcb_rh_r8[7:0])[7:0])[7:0] ∘ %rax_adcb_rh_r8[7:0])[15:8]
  after renaming it is => ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[7:0]

Final state
%rax/%ah: %rax_adcb_rh_rh[63:16] ∘ ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[7:0] ∘ %rax_adcb_rh_rh[7:0]

%cf: ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[8:8] = 0x1₁
%pf: !(((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[0:0] = 0x1₁ ⊕ ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[1:1] = 0x1₁ ⊕ ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[2:2] = 0x1₁ ⊕ ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[3:3] = 0x1₁ ⊕ ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[4:4] = 0x1₁ ⊕ ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[5:5] = 0x1₁ ⊕ ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[6:6] = 0x1₁ ⊕ ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax_adcb_rh_rh[11:8] + 0x0₁ ∘ %rbx_adcb_rh_rh[11:8])[4:4] = 0x1₁
%zf: ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[7:0] = 0x0₈
%sf: ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[7:7] = 0x1₁
%of: (%rax_adcb_rh_rh[15:15] = 0x1₁ ↔ %rbx_adcb_rh_rh[15:15] = 0x1₁) ∧ !(%rax_adcb_rh_rh[15:15] = 0x1₁ ↔ ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[7:7] = 0x1₁)

=====================================
=====================================
Computing circuit for adcb %bh, %ah

.target:
movsbw %bh, %dx
adcb %dl, %ah
retq 

Initial state:
%rax/%ah: %rax

%cf: %cf
%pf: %pf
%af: %af
%zf: %zf
%sf: %sf
%of: %of

State for specgen instruction: adcb %bh, %ah:
%rax/%ah: %rax_adcb_rh_rh[63:16] ∘ ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[7:0] ∘ %rax_adcb_rh_rh[7:0]

%cf: ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[8:8] = 0x1₁
%pf: !(((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[0:0] = 0x1₁ ⊕ ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[1:1] = 0x1₁ ⊕ ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[2:2] = 0x1₁ ⊕ ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[3:3] = 0x1₁ ⊕ ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[4:4] = 0x1₁ ⊕ ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[5:5] = 0x1₁ ⊕ ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[6:6] = 0x1₁ ⊕ ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax_adcb_rh_rh[11:8] + 0x0₁ ∘ %rbx_adcb_rh_rh[11:8])[4:4] = 0x1₁
%zf: ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[7:0] = 0x0₈
%sf: ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[7:7] = 0x1₁
%of: (%rax_adcb_rh_rh[15:15] = 0x1₁ ↔ %rbx_adcb_rh_rh[15:15] = 0x1₁) ∧ !(%rax_adcb_rh_rh[15:15] = 0x1₁ ↔ ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[7:7] = 0x1₁)

Register        -> %ah
  translates to => %ah
Value is               -> (%rax_adcb_rh_rh[63:16] ∘ ((%cf_adcb_rh_rh ? 0x0₁ ∘ %rax_adcb_rh_rh[15:8] + 0x1₉ : 0x0₁ ∘ %rax_adcb_rh_rh[15:8]) + 0x0₁ ∘ %rbx_adcb_rh_rh[15:8])[7:0] ∘ %rax_adcb_rh_rh[7:0])[15:8]
  after renaming it is => ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[7:0]

Final state
%rax/%ah: %rax[63:16] ∘ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[7:0] ∘ %rax[7:0]

%cf: ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[8:8] = 0x1₁
%pf: !(((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[0:0] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[1:1] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[2:2] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[3:3] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[4:4] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[5:5] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[6:6] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax[11:8] + 0x0₁ ∘ %rbx[11:8])[4:4] = 0x1₁
%zf: ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[7:0] = 0x0₈
%sf: ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[7:7] = 0x1₁
%of: (%rax[15:15] = 0x1₁ ↔ %rbx[15:15] = 0x1₁) ∧ !(%rax[15:15] = 0x1₁ ↔ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[7:7] = 0x1₁)

=====================================
Circuits:

%rax   : %rax[63:16] ∘ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[7:0] ∘ %rax[7:0]

%cf    : ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[8:8] = 0x1₁
%pf    : !(((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[0:0] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[1:1] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[2:2] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[3:3] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[4:4] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[5:5] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[6:6] = 0x1₁ ⊕ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[7:7] = 0x1₁)
%af    : (0x0₁ ∘ %rax[11:8] + 0x0₁ ∘ %rbx[11:8])[4:4] = 0x1₁
%zf    : ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[7:0] = 0x0₈
%sf    : ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[7:7] = 0x1₁
%of    : (%rax[15:15] = 0x1₁ ↔ %rbx[15:15] = 0x1₁) ∧ !(%rax[15:15] = 0x1₁ ↔ ((%cf ? 0x0₁ ∘ %rax[15:8] + 0x1₉ : 0x0₁ ∘ %rax[15:8]) + 0x0₁ ∘ %rbx[15:8])[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/