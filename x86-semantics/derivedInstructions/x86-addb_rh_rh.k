// Autogenerated using stratification.
requires "x86-configuration.k"

module ADDB-RH-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (addb R1:Rh, R2:Rh,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56))), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R1, RSMap), 48, 56)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), extractMInt(getParentValue(R1, RSMap), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56))), 1, 9), extractMInt(getParentValue(R2, RSMap), 56, 64))) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module ADDB-RH-RH-SEMANTICS
  imports ADDB-RH-RH
endmodule
/*
TargetInstr:
addb %bh, %ah
RWSet:
maybe read:{ %ah %bh }
must read:{ %ah %bh }
maybe write:{ %ah %cf %pf %af %zf %sf %of }
must write:{ %ah %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movzbl %bh, %edx  #  1     0    3      OPC=movzbl_r32_rh
circuit:addb %dl, %ah     #  2     0x3  2      OPC=addb_rh_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

addb %bh, %ah

  maybe read:      { %ah %bh }
  must read:       { %ah %bh }
  maybe write:     { %ah %cf %pf %af %zf %sf %of }
  must write:      { %ah %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %bh, %edx

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rdx/%rdx: %rdx_addb_rh_rh

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rdx
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rbx_addb_rh_rh[15:8]

Final state
%rdx/%rdx: 0x0₅₆ ∘ %rbx_addb_rh_rh[15:8]

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rcx

Final state:
%rcx/%rcx: %rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh

%cf: false
%pf: !((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][0:0] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][1:1] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][2:2] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][3:3] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][4:4] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][5:5] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][6:6] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][7:7] = 0x1₁)
%zf: (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh) = 0x0₆₄
%sf: (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_sf_into_rbx

Final state:
%rax/%rax: %rax_movzbw_r16_rh
%rdx/%rdx: %rdx_movzbw_r16_rh

%xmm0: %ymm0_movzbw_r16_rh[127:0]
%xmm1: %ymm1_movzbw_r16_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: (0x0₆₃ ∘ ((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁ ? 0x1₁ : 0x0₁))[63:8] ∘ %rax_movzbw_r16_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbw %ah, %si

.target:
xorq %rcx, %rcx
callq .read_sf_into_rbx
movb %ah, %bl
retq 

Initial state:
%rsi/%si: %rsi_xaddb_r8_rh

State for specgen instruction: movzbw %ah, %bx:
%rbx/%bx: (0x0₆₃ ∘ ((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁ ? 0x1₁ : 0x0₁))[63:8] ∘ %rax_movzbw_r16_rh[15:8]

Register        -> %bx
  translates to => %si
Value is               -> ((0x0₆₃ ∘ ((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁ ? 0x1₁ : 0x0₁))[63:8] ∘ %rax_movzbw_r16_rh[15:8])[15:0]
  after renaming it is => 0x0₈ ∘ %rax_xaddb_r8_rh[15:8]

Final state
%rsi/%si: %rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8])

=====================================
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_movzbq_r64_r8

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for movsbq %cl, %rdi

Final state:
%rdi/%rdi: sign-extend-64(%rcx_movzbq_r64_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %dil, %bl

Final state:
%rbx/%bl: 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][3:0] + 0x0₁ ∘ 0x0₆₄[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][7:7] = 0x1₁ ↔ 0x0₆₄[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for movzbq %bl, %r12

.target:
movq $0x0, %rbx
clc 
movsbq %cl, %rdi
adcb %dil, %bl
retq 

Initial state:
%r12/%r12: %r12_xaddb_r8_rh

State for specgen instruction: movzbq %cl, %rbx:
%rbx/%rbx: 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]

Register        -> %rbx
  translates to => %r12
Value is               -> 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]
  after renaming it is => 0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0]

Final state
%r12/%r12: 0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for movslq %r12d, %rdx

Final state:
%rdx/%rdx: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_dx_r8b_r9b

Final state:
%rax/%rax: %rax_xaddb_r8_rh
%rdx/%rdx: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])

%xmm0: %ymm0_xaddb_r8_rh[127:0]
%xmm1: %ymm1_xaddb_r8_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %r12b, %ebx

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%rbx/%rbx: %rbx_xaddb_r8_rh

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for movb %dl, %ah

Final state:
%rax/%ah: %rax_xaddb_r8_rh[63:16] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[7:0] ∘ %rax_xaddb_r8_rh[7:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r9b_to_byte_6_of_rbx

Final state:
%rax/%rax: %rax_xaddb_r8_rh[63:16] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[7:0] ∘ %rax_xaddb_r8_rh[7:0]
%rdx/%rdx: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])

%xmm0: %ymm0_xaddb_r8_rh[127:0]
%xmm1: %ymm1_xaddb_r8_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for popcntq %rdx, %r9

Final state:
%r9/%r9: 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][1:0][0:0])))))

%cf: false
%pf: false
%af: false
%zf: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0]) = 0x0₆₄
%sf: false
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %sil, %bl

Final state:
%rbx/%bl: ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[63:8] ∘ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][3:0] + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:7] = 0x1₁
%of: ((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][7:7] = 0x1₁) ∧ !((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddb %ah, %bl

.target:
movzbw %ah, %si
movzbq %bl, %r12
movslq %r12d, %rdx
callq .move_016_008_dx_r8b_r9b
movsbl %r12b, %ebx
movb %dl, %ah
callq .move_r9b_to_byte_6_of_rbx
popcntq %rdx, %r9
adcb %sil, %bl
retq 

Initial state:
%rax/%ah: %rax_addb_rh_r8
%rbx/%bl: %rbx_addb_rh_r8

%cf: %cf_addb_rh_r8
%pf: %pf_addb_rh_r8
%af: %af_addb_rh_r8
%zf: %zf_addb_rh_r8
%sf: %sf_addb_rh_r8
%of: %of_addb_rh_r8

State for specgen instruction: xaddb %ah, %bl:
%rax/%ah: %rax_xaddb_r8_rh[63:16] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[7:0] ∘ %rax_xaddb_r8_rh[7:0]
%rbx/%bl: ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[63:8] ∘ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][3:0] + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:7] = 0x1₁
%of: ((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][7:7] = 0x1₁) ∧ !((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:7] = 0x1₁)

Final state
%rax/%ah: %rax_addb_rh_r8[63:16] ∘ %rbx_addb_rh_r8[7:0] ∘ %rax_addb_rh_r8[7:0]
%rbx/%bl: %rbx_addb_rh_r8[63:8] ∘ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[7:0]

%cf: (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax_addb_rh_r8[11:8] + 0x0₁ ∘ %rbx_addb_rh_r8[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[7:7] = 0x1₁
%of: (%rax_addb_rh_r8[15:15] = 0x1₁ ↔ %rbx_addb_rh_r8[7:7] = 0x1₁) ∧ !(%rax_addb_rh_r8[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_addb_rh_r8[63:16] ∘ %rbx_addb_rh_r8[7:0] ∘ %rax_addb_rh_r8[7:0]
%rdx/%rdx: %rdx_addb_rh_r8

%xmm0: %ymm0_addb_rh_r8[127:0]
%xmm1: %ymm1_addb_rh_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %bl, %ah

Final state:
%rax/%ah: (%rax_addb_rh_r8[63:16] ∘ %rbx_addb_rh_r8[7:0] ∘ %rax_addb_rh_r8[7:0])[63:16] ∘ (%rbx_addb_rh_r8[63:8] ∘ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[7:0])[7:0] ∘ (%rax_addb_rh_r8[63:16] ∘ %rbx_addb_rh_r8[7:0] ∘ %rax_addb_rh_r8[7:0])[7:0]

-------------------------------------
=====================================
Computing circuit for addb %dl, %ah

.target:
xaddb %ah, %bl
callq .set_szp_for_bl
movb %bl, %ah
retq 

Initial state:
%rax/%ah: %rax_addb_rh_rh

%cf: %cf_addb_rh_rh
%pf: %pf_addb_rh_rh
%af: %af_addb_rh_rh
%zf: %zf_addb_rh_rh
%sf: %sf_addb_rh_rh
%of: %of_addb_rh_rh

State for specgen instruction: addb %bl, %ah:
%rax/%ah: (%rax_addb_rh_r8[63:16] ∘ %rbx_addb_rh_r8[7:0] ∘ %rax_addb_rh_r8[7:0])[63:16] ∘ (%rbx_addb_rh_r8[63:8] ∘ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[7:0])[7:0] ∘ (%rax_addb_rh_r8[63:16] ∘ %rbx_addb_rh_r8[7:0] ∘ %rax_addb_rh_r8[7:0])[7:0]

%cf: (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[8:8] = 0x1₁
%pf: !((%rbx_addb_rh_r8[63:8] ∘ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addb_rh_r8[63:8] ∘ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addb_rh_r8[63:8] ∘ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addb_rh_r8[63:8] ∘ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addb_rh_r8[63:8] ∘ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addb_rh_r8[63:8] ∘ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addb_rh_r8[63:8] ∘ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addb_rh_r8[63:8] ∘ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax_addb_rh_r8[11:8] + 0x0₁ ∘ %rbx_addb_rh_r8[3:0])[4:4] = 0x1₁
%zf: (%rbx_addb_rh_r8[63:8] ∘ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[7:0])[7:0] = 0x0₈
%sf: (%rbx_addb_rh_r8[63:8] ∘ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[7:0])[7:0][7:7] = 0x1₁
%of: (%rax_addb_rh_r8[15:15] = 0x1₁ ↔ %rbx_addb_rh_r8[7:7] = 0x1₁) ∧ !(%rax_addb_rh_r8[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[7:7] = 0x1₁)

Register        -> %ah
  translates to => %ah
Value is               -> ((%rax_addb_rh_r8[63:16] ∘ %rbx_addb_rh_r8[7:0] ∘ %rax_addb_rh_r8[7:0])[63:16] ∘ (%rbx_addb_rh_r8[63:8] ∘ (0x0₁ ∘ %rax_addb_rh_r8[15:8] + 0x0₁ ∘ %rbx_addb_rh_r8[7:0])[7:0])[7:0] ∘ (%rax_addb_rh_r8[63:16] ∘ %rbx_addb_rh_r8[7:0] ∘ %rax_addb_rh_r8[7:0])[7:0])[15:8]
  after renaming it is => (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[7:0]

Final state
%rax/%ah: %rax_addb_rh_rh[63:16] ∘ (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[7:0] ∘ %rax_addb_rh_rh[7:0]

%cf: (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax_addb_rh_rh[11:8] + 0x0₁ ∘ %rbx_addb_rh_rh[11:8])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[7:7] = 0x1₁
%of: (%rax_addb_rh_rh[15:15] = 0x1₁ ↔ %rbx_addb_rh_rh[15:15] = 0x1₁) ∧ !(%rax_addb_rh_rh[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[7:7] = 0x1₁)

=====================================
=====================================
Computing circuit for addb %bh, %ah

.target:
movzbl %bh, %edx
addb %dl, %ah
retq 

Initial state:
%rax/%ah: %rax

%cf: %cf
%pf: %pf
%af: %af
%zf: %zf
%sf: %sf
%of: %of

State for specgen instruction: addb %bh, %ah:
%rax/%ah: %rax_addb_rh_rh[63:16] ∘ (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[7:0] ∘ %rax_addb_rh_rh[7:0]

%cf: (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax_addb_rh_rh[11:8] + 0x0₁ ∘ %rbx_addb_rh_rh[11:8])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[7:7] = 0x1₁
%of: (%rax_addb_rh_rh[15:15] = 0x1₁ ↔ %rbx_addb_rh_rh[15:15] = 0x1₁) ∧ !(%rax_addb_rh_rh[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[7:7] = 0x1₁)

Register        -> %ah
  translates to => %ah
Value is               -> (%rax_addb_rh_rh[63:16] ∘ (0x0₁ ∘ %rax_addb_rh_rh[15:8] + 0x0₁ ∘ %rbx_addb_rh_rh[15:8])[7:0] ∘ %rax_addb_rh_rh[7:0])[15:8]
  after renaming it is => (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[7:0]

Final state
%rax/%ah: %rax[63:16] ∘ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[7:0] ∘ %rax[7:0]

%cf: (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax[11:8] + 0x0₁ ∘ %rbx[11:8])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[7:7] = 0x1₁
%of: (%rax[15:15] = 0x1₁ ↔ %rbx[15:15] = 0x1₁) ∧ !(%rax[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[7:7] = 0x1₁)

=====================================
Circuits:

%rax   : %rax[63:16] ∘ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[7:0] ∘ %rax[7:0]

%cf    : (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[8:8] = 0x1₁
%pf    : !((0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[7:7] = 0x1₁)
%af    : (0x0₁ ∘ %rax[11:8] + 0x0₁ ∘ %rbx[11:8])[4:4] = 0x1₁
%zf    : (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[7:0] = 0x0₈
%sf    : (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[7:7] = 0x1₁
%of    : (%rax[15:15] = 0x1₁ ↔ %rbx[15:15] = 0x1₁) ∧ !(%rax[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rbx[15:8])[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/