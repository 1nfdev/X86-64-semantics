// Autogenerated using stratification.
requires "x86-configuration.k"

module ADDQ-R64-IMM32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (addq I1_32:Imm, R2:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), handleImmediateWithSignExtend(I1_32, 32, 64 )), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(R2, RSMap)), 0, 1) )

 "AF" |-> ((#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(R2, RSMap)), addMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(R2, RSMap))), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(xorMInt(andMInt(mi(64, countOnes(extractMInt(addMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(R2, RSMap)), 56, 64), 0)), mi(64, 1)), mi(64, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), 0, 1), extractMInt(getParentValue(R2, RSMap), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), 0, 1), extractMInt(addMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(R2, RSMap)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (addMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(R2, RSMap)) )

 "ZF" |-> ((#ifMInt (eqMInt(addMInt(handleImmediateWithSignExtend(I1_32, 32, 64 ), getParentValue(R2, RSMap)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule
