// Autogenerated using stratification.
requires "x86-configuration.k"

module ADDW-R16-IMM8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (addw I1_8:Imm, R2:R16,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> ((#ifMInt ( ( ultMInt(addMInt(handleImmediateWithSignExtend(I1_8, 8, 16 ), extractMInt(getParentValue(R2, RSMap), 48, 64)), handleImmediateWithSignExtend(I1_8, 8, 16 ))  orBool  ultMInt(addMInt(handleImmediateWithSignExtend(I1_8, 8, 16 ), extractMInt(getParentValue(R2, RSMap), 48, 64)), extractMInt(getParentValue(R2, RSMap), 48, 64)) )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "SF" |-> ((#ifMInt (eqMInt(mi(16, 1), lshrMInt(addMInt(handleImmediateWithSignExtend(I1_8, 8, 16 ), extractMInt(getParentValue(R2, RSMap), 48, 64)), 15)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "AF" |-> ((#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(handleImmediateWithSignExtend(I1_8, 8, 16 ), extractMInt(getParentValue(R2, RSMap), 48, 64)), addMInt(handleImmediateWithSignExtend(I1_8, 8, 16 ), extractMInt(getParentValue(R2, RSMap), 48, 64))), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(xorMInt(andMInt(mi(64, countOnes(extractMInt(addMInt(handleImmediateWithSignExtend(I1_8, 8, 16 ), extractMInt(getParentValue(R2, RSMap), 48, 64)), 8, 16), 0)), mi(64, 1)), mi(64, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt (eqMInt(mi(16, 2), addMInt(xorMInt(lshrMInt(handleImmediateWithSignExtend(I1_8, 8, 16 ), 15), lshrMInt(addMInt(handleImmediateWithSignExtend(I1_8, 8, 16 ), extractMInt(getParentValue(R2, RSMap), 48, 64)), 15)), xorMInt(lshrMInt(extractMInt(getParentValue(R2, RSMap), 48, 64), 15), lshrMInt(addMInt(handleImmediateWithSignExtend(I1_8, 8, 16 ), extractMInt(getParentValue(R2, RSMap), 48, 64)), 15)))) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), addMInt(handleImmediateWithSignExtend(I1_8, 8, 16 ), extractMInt(getParentValue(R2, RSMap), 48, 64))) )

 "ZF" |-> ((#ifMInt (eqMInt(addMInt(handleImmediateWithSignExtend(I1_8, 8, 16 ), extractMInt(getParentValue(R2, RSMap), 48, 64)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule
