// Autogenerated using stratification.
requires "x86-configuration.k"

module ANDNL-R32-R32-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (andnl R1:R32, R2:R32, R3:R32,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )

 "AF" |-> (undef)

convToRegKeys(R3) |-> (concatenateMInt(mi(32, 0), xorMInt(extractMInt(getParentValue(R2, RSMap), 32, 64), orMInt(extractMInt(getParentValue(R2, RSMap), 32, 64), extractMInt(getParentValue(R1, RSMap), 32, 64)))) )

 "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 32, 64), orMInt(extractMInt(getParentValue(R2, RSMap), 32, 64), extractMInt(getParentValue(R1, RSMap), 32, 64))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "SF" |-> (xorMInt(extractMInt(getParentValue(R2, RSMap), 32, 33), orMInt(extractMInt(getParentValue(R2, RSMap), 32, 33), extractMInt(getParentValue(R1, RSMap), 32, 33))) )

 "PF" |-> (undef)

 "OF" |-> (mi(1, 0) )


)

    </regstate>
endmodule

module ANDNL-R32-R32-R32-SEMANTICS
  imports ANDNL-R32-R32-R32
endmodule
/*
TargetInstr:
andnl %edx, %ecx, %ebx
RWSet:
maybe read:{ %ecx %edx }
must read:{ %ecx %edx }
maybe write:{ %rbx %cf %zf %sf %of }
must write:{ %rbx %cf %zf %sf %of }
maybe undef:{ %pf %af }
must undef:{ %pf %af }
required flags:{ bmi1 }

Circuit:
circuit:movslq %edx, %rbx                  #  1     0     3      OPC=movslq_r64_r32
circuit:orl %ecx, %edx                     #  2     0x3   2      OPC=orl_r32_r32
circuit:callq .move_032_016_ecx_r12w_r13w  #  3     0x5   5      OPC=callq_label
circuit:callq .move_016_032_r12w_r13w_ecx  #  4     0xa   5      OPC=callq_label
circuit:xorl %edx, %ecx                    #  5     0xf   2      OPC=xorl_r32_r32
circuit:xchgl %ebx, %ecx                   #  6     0x11  2      OPC=xchgl_r32_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

andnl %edx, %ecx, %ebx

  maybe read:      { %ecx %edx }
  must read:       { %ecx %edx }
  maybe write:     { %rbx %cf %zf %sf %of }
  must write:      { %rbx %cf %zf %sf %of }
  maybe undef:     { %pf %af }
  must undef:      { %pf %af }
  required flags:  { bmi1 }

Circuits:

%rbx   : 0x0₃₂ ∘ ((%rdx[31:0] | %rcx[31:0]) ⊕ %rcx[31:0])

%cf    : false
%zf    : ((%rdx[31:0] | %rcx[31:0]) ⊕ %rcx[31:0]) = 0x0₃₂
%sf    : ((%rdx[31:31] | %rcx[31:31]) ⊕ %rcx[31:31]) = 0x1₁
%of    : false

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/