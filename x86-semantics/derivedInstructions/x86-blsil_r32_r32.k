// Autogenerated using stratification.
requires "x86-configuration.k"

module BLSIL-R32-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (blsil R1:R32, R2:R32,  .Typedoperands) => .
  ...</k>
endmodule

module BLSIL-R32-R32-SEMANTICS
  imports BLSIL-R32-R32
endmodule
/*
TargetInstr:
blsil %ecx, %ebx
RWSet:
maybe read:{ %ecx %ebx }
must read:{ %ecx %ebx }
maybe write:{ %rbx %cf %zf %sf %of }
must write:{ %rbx %cf %zf %sf %of }
maybe undef:{ %pf %af }
must undef:{ %pf %af }
required flags:{ bmi1 }

Circuit:
circuit:blsrl %ecx, %ebx                #  1     0     5      OPC=blsrl_r32_r32
circuit:xorl %ecx, %ebx                 #  2     0x5   2      OPC=xorl_r32_r32
circuit:movq $0xfffffffffffffff9, %rcx  #  3     0x7   10     OPC=movq_r64_imm64
circuit:cmovnaq %rbx, %rcx              #  4     0x11  4      OPC=cmovnaq_r64_r64
circuit:rorb $0x1, %cl                  #  5     0x15  2      OPC=rorb_r8_one
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

blsil %ecx, %ebx

  maybe read:      { %ecx %ebx }
  must read:       { %ecx %ebx }
  maybe write:     { %rbx %cf %zf %sf %of }
  must write:      { %rbx %cf %zf %sf %of }
  maybe undef:     { %pf %af }
  must undef:      { %pf %af }
  required flags:  { bmi1 }

-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %ebx, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_movl_r32_r32
%rbx/%rbx: 0x0₆₄

%cf: %cf_movl_r32_r32
%pf: %pf_movl_r32_r32
%af: %af_movl_r32_r32
%zf: %zf_movl_r32_r32
%sf: %sf_movl_r32_r32
%of: %of_movl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

%cf: false
%pf: !(%rcx_movl_r32_r32[0:0] = 0x1₁ ⊕ %rcx_movl_r32_r32[1:1] = 0x1₁ ⊕ %rcx_movl_r32_r32[2:2] = 0x1₁ ⊕ %rcx_movl_r32_r32[3:3] = 0x1₁ ⊕ %rcx_movl_r32_r32[4:4] = 0x1₁ ⊕ %rcx_movl_r32_r32[5:5] = 0x1₁ ⊕ %rcx_movl_r32_r32[6:6] = 0x1₁ ⊕ %rcx_movl_r32_r32[7:7] = 0x1₁)
%af: false
%zf: %rcx_movl_r32_r32[31:0] = 0x0₃₂
%sf: %rcx_movl_r32_r32[31:31] = 0x1₁
%of: (%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ false) ∧ !(%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ %rcx_movl_r32_r32[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for movl %ecx, %ebx

.target:
movq $0x0, %rbx
xaddl %ebx, %ecx
retq 

Initial state:
%rbx/%rbx: %rbx_blsrl_r32_r32

State for specgen instruction: movl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %rax

Final state:
%rax/%rax: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for orq %rbx, %rbx

Final state:
%rbx/%rbx: %rbx_addq_r64_r64 | %rbx_addq_r64_r64

%cf: false
%pf: !((%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][0:0] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][1:1] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][2:2] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][3:3] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][4:4] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][5:5] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][6:6] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][7:7] = 0x1₁)
%zf: (%rbx_addq_r64_r64 | %rbx_addq_r64_r64) = 0x0₆₄
%sf: (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcq %rcx, %rbx

Final state:
%rbx/%rbx: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[64:64] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addq_r64_r64[3:0] + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0] = 0x0₆₄
%sf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][63:63] = 0x1₁
%of: (%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[63:63] = 0x1₁) ∧ !(%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:63] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for addq %rax, %rbx

.target:
orq %rbx, %rbx
adcq %rcx, %rbx
retq 

Initial state:
%rbx/%rbx: %rbx_decq_r64

%cf: %cf_decq_r64
%pf: %pf_decq_r64
%af: %af_decq_r64
%zf: %zf_decq_r64
%sf: %sf_decq_r64
%of: %of_decq_r64

State for specgen instruction: addq %rcx, %rbx:
%rbx/%rbx: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[64:64] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addq_r64_r64[3:0] + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0] = 0x0₆₄
%sf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][63:63] = 0x1₁
%of: (%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[63:63] = 0x1₁) ∧ !(%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:63] = 0x1₁)

Register        -> %rbx
  translates to => %rbx
Value is               -> ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0]
  after renaming it is => (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0]

Final state
%rbx/%rbx: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0]

%cf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[64:64] = 0x1₁
%pf: !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[7:7] = 0x1₁)
%af: (0xf₅ + 0x0₁ ∘ %rbx_decq_r64[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:63] = 0x1₁
%of: (true ↔ %rbx_decq_r64[63:63] = 0x1₁) ∧ !(true ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:63] = 0x1₁)

=====================================
=====================================
Computing circuit for decq %rbx

.target:
movq $0xffffffffffffffff, %rax
addq %rax, %rbx
retq 

Initial state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]

%pf: %pf_blsrl_r32_r32
%af: %af_blsrl_r32_r32
%zf: %zf_blsrl_r32_r32
%sf: %sf_blsrl_r32_r32
%of: %of_blsrl_r32_r32

State for specgen instruction: decq %rbx:
%rbx/%rbx: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0]

%pf: !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[7:7] = 0x1₁)
%af: (0xf₅ + 0x0₁ ∘ %rbx_decq_r64[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:63] = 0x1₁
%of: (true ↔ %rbx_decq_r64[63:63] = 0x1₁) ∧ !(true ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:63] = 0x1₁)

Register        -> %rbx
  translates to => %rbx
Value is               -> (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0]
  after renaming it is => (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[63:0]

Final state
%rbx/%rbx: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[63:0]

%pf: !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[0:0] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[1:1] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[2:2] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[3:3] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[4:4] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[5:5] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[6:6] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[7:7] = 0x1₁)
%af: (0xf₅ + 0x0₁ ∘ %rcx_blsrl_r32_r32[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[63:63] = 0x1₁
%of: false ∧ !(true ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[63:63] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movslq %edx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rdx_andnl_r32_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %ebx, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_movl_r32_r32
%rbx/%rbx: 0x0₆₄

%cf: %cf_movl_r32_r32
%pf: %pf_movl_r32_r32
%af: %af_movl_r32_r32
%zf: %zf_movl_r32_r32
%sf: %sf_movl_r32_r32
%of: %of_movl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

%cf: false
%pf: !(%rcx_movl_r32_r32[0:0] = 0x1₁ ⊕ %rcx_movl_r32_r32[1:1] = 0x1₁ ⊕ %rcx_movl_r32_r32[2:2] = 0x1₁ ⊕ %rcx_movl_r32_r32[3:3] = 0x1₁ ⊕ %rcx_movl_r32_r32[4:4] = 0x1₁ ⊕ %rcx_movl_r32_r32[5:5] = 0x1₁ ⊕ %rcx_movl_r32_r32[6:6] = 0x1₁ ⊕ %rcx_movl_r32_r32[7:7] = 0x1₁)
%af: false
%zf: %rcx_movl_r32_r32[31:0] = 0x0₃₂
%sf: %rcx_movl_r32_r32[31:31] = 0x1₁
%of: (%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ false) ∧ !(%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ %rcx_movl_r32_r32[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for movl %ebx, %r8d

.target:
movq $0x0, %rbx
xaddl %ebx, %ecx
retq 

Initial state:
%r8/%r8: %r8_orl_r32_r32

State for specgen instruction: movl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

Register        -> %rbx
  translates to => %r8
Value is               -> 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0]

Final state
%r8/%r8: 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for movswq %cx, %r11

Final state:
%r11/%r11: sign-extend-64(%rcx_orl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %r11d, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_orl_r32_r32
%r11/%r11: sign-extend-64(%rcx_orl_r32_r32[15:0])

%cf: %cf_orl_r32_r32
%pf: %pf_orl_r32_r32
%af: %af_orl_r32_r32
%zf: %zf_orl_r32_r32
%sf: %sf_orl_r32_r32
%of: %of_orl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[31:0]
%r11/%r11: 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0]

%cf: (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[32:32] = 0x1₁
%pf: !((0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_orl_r32_r32[3:0] + 0x0₁ ∘ %rcx_orl_r32_r32[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[31:0] = 0x0₃₂
%sf: (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[31:31] = 0x1₁
%of: (%rcx_orl_r32_r32[31:31] = 0x1₁ ↔ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:31] = 0x1₁) ∧ !(%rcx_orl_r32_r32[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[31:31] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for orq %r11, %r8

Final state:
%r8/%r8: 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %r8d

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rbx/%rbx: %rbx_orl_r32_r32
%r8/%r8: 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0]

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0])

Register        -> %rbx
  translates to => %r8
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0])
%r8/%r8: 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_orl_r32_r32
%rdx/%rdx: %rdx_orl_r32_r32

%xmm0: %ymm0_orl_r32_r32[127:0]
%xmm1: %ymm1_orl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for orl %ecx, %edx

.target:
movl %ebx, %r8d
movswq %cx, %r11
xaddl %r11d, %ecx
orq %r11, %r8
xchgl %ebx, %r8d
callq .set_szp_for_ebx
retq 

Initial state:
%rdx/%rdx: %rdx_andnl_r32_r32_r32

%cf: %cf_andnl_r32_r32_r32
%pf: %pf_andnl_r32_r32_r32
%zf: %zf_andnl_r32_r32_r32
%sf: %sf_andnl_r32_r32_r32
%of: %of_andnl_r32_r32_r32

State for specgen instruction: orl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0])

%cf: false
%pf: !((0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rdx
Value is               -> 0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0])

Final state
%rdx/%rdx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0])

%cf: false
%pf: !((%rdx_andnl_r32_r32_r32[0:0] | %rcx_andnl_r32_r32_r32[0:0]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[1:1] | %rcx_andnl_r32_r32_r32[1:1]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[2:2] | %rcx_andnl_r32_r32_r32[2:2]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[3:3] | %rcx_andnl_r32_r32_r32[3:3]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[4:4] | %rcx_andnl_r32_r32_r32[4:4]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[5:5] | %rcx_andnl_r32_r32_r32[5:5]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[6:6] | %rcx_andnl_r32_r32_r32[6:6]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[7:7] | %rcx_andnl_r32_r32_r32[7:7]) = 0x1₁)
%zf: (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) = 0x0₃₂
%sf: (%rdx_andnl_r32_r32_r32[31:31] | %rcx_andnl_r32_r32_r32[31:31]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r12w_r13w

Final state:
%rax/%rax: %rax_andnl_r32_r32_r32
%rdx/%rdx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0])

%xmm0: %ymm0_andnl_r32_r32_r32[127:0]
%xmm1: %ymm1_andnl_r32_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r12w_r13w_ecx

Final state:
%rax/%rax: %rax_andnl_r32_r32_r32
%rdx/%rdx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0])

%xmm0: %ymm0_andnl_r32_r32_r32[127:0]
%xmm1: %ymm1_andnl_r32_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xorl_r32_r32
%rbx/%rbx: %rbx_xorl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_xorl_r32_r32
%rdx/%rdx: %rdx_xorl_r32_r32

%xmm0: %ymm0_xorl_r32_r32[127:0]
%xmm1: %ymm1_xorl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xorl %edx, %ecx

.target:
xchgl %ebx, %ecx
xorq %rcx, %rbx
callq .set_szp_for_ebx
retq 

Initial state:
%rcx/%rcx: 0x0₃₂ ∘ ((%r13_andnl_r32_r32_r32[63:16] ∘ %rcx_andnl_r32_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r12_andnl_r32_r32_r32[63:16] ∘ %rcx_andnl_r32_r32_r32[31:0][15:0])[15:0][15:0])

%cf: false
%pf: !((%rdx_andnl_r32_r32_r32[0:0] | %rcx_andnl_r32_r32_r32[0:0]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[1:1] | %rcx_andnl_r32_r32_r32[1:1]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[2:2] | %rcx_andnl_r32_r32_r32[2:2]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[3:3] | %rcx_andnl_r32_r32_r32[3:3]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[4:4] | %rcx_andnl_r32_r32_r32[4:4]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[5:5] | %rcx_andnl_r32_r32_r32[5:5]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[6:6] | %rcx_andnl_r32_r32_r32[6:6]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[7:7] | %rcx_andnl_r32_r32_r32[7:7]) = 0x1₁)
%zf: (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) = 0x0₃₂
%sf: (%rdx_andnl_r32_r32_r32[31:31] | %rcx_andnl_r32_r32_r32[31:31]) = 0x1₁
%of: false

State for specgen instruction: xorl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ 0x0₃₂ ∘ %rcx_andnl_r32_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ 0x0₃₂ ∘ %rcx_andnl_r32_r32_r32[31:0]

%cf: false
%pf: !(((%rdx_andnl_r32_r32_r32[0:0] | %rcx_andnl_r32_r32_r32[0:0]) ⊕ %rcx_andnl_r32_r32_r32[0:0]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[1:1] | %rcx_andnl_r32_r32_r32[1:1]) ⊕ %rcx_andnl_r32_r32_r32[1:1]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[2:2] | %rcx_andnl_r32_r32_r32[2:2]) ⊕ %rcx_andnl_r32_r32_r32[2:2]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[3:3] | %rcx_andnl_r32_r32_r32[3:3]) ⊕ %rcx_andnl_r32_r32_r32[3:3]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[4:4] | %rcx_andnl_r32_r32_r32[4:4]) ⊕ %rcx_andnl_r32_r32_r32[4:4]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[5:5] | %rcx_andnl_r32_r32_r32[5:5]) ⊕ %rcx_andnl_r32_r32_r32[5:5]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[6:6] | %rcx_andnl_r32_r32_r32[6:6]) ⊕ %rcx_andnl_r32_r32_r32[6:6]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[7:7] | %rcx_andnl_r32_r32_r32[7:7]) ⊕ %rcx_andnl_r32_r32_r32[7:7]) = 0x1₁)
%zf: ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0]) = 0x0₃₂
%sf: ((%rdx_andnl_r32_r32_r32[31:31] | %rcx_andnl_r32_r32_r32[31:31]) ⊕ %rcx_andnl_r32_r32_r32[31:31]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ 0x0₃₂ ∘ %rcx_andnl_r32_r32_r32[31:0]
%rbx/%rbx: sign-extend-64(%rdx_andnl_r32_r32_r32[31:0])

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0])

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rdx_andnl_r32_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rdx_andnl_r32_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0])

=====================================
=====================================
Computing circuit for andnl %ecx, %ebx, %r13d

.target:
movslq %edx, %rbx
orl %ecx, %edx
callq .move_032_016_ecx_r12w_r13w
callq .move_016_032_r12w_r13w_ecx
xorl %edx, %ecx
xchgl %ebx, %ecx
retq 

Initial state:
%r13/%r13: %r13_andl_r32_r32

%cf: %cf_andl_r32_r32
%zf: %zf_andl_r32_r32
%sf: %sf_andl_r32_r32
%of: %of_andl_r32_r32

State for specgen instruction: andnl %edx, %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0])

%cf: false
%zf: ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0]) = 0x0₃₂
%sf: ((%rdx_andnl_r32_r32_r32[31:31] | %rcx_andnl_r32_r32_r32[31:31]) ⊕ %rcx_andnl_r32_r32_r32[31:31]) = 0x1₁
%of: false

Register        -> %rbx
  translates to => %r13
Value is               -> 0x0₃₂ ∘ ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ ((%rcx_andl_r32_r32[31:0] | %rbx_andl_r32_r32[31:0]) ⊕ %rbx_andl_r32_r32[31:0])

Final state
%r13/%r13: 0x0₃₂ ∘ ((%rcx_andl_r32_r32[31:0] | %rbx_andl_r32_r32[31:0]) ⊕ %rbx_andl_r32_r32[31:0])

%cf: false
%zf: ((%rcx_andl_r32_r32[31:0] | %rbx_andl_r32_r32[31:0]) ⊕ %rbx_andl_r32_r32[31:0]) = 0x0₃₂
%sf: ((%rcx_andl_r32_r32[31:31] | %rbx_andl_r32_r32[31:31]) ⊕ %rbx_andl_r32_r32[31:31]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %bh, %ebx

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rbx/%rbx: %rbx_andl_r32_r32

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rbx_andl_r32_r32[15:8]

Final state
%rbx/%rbx: 0x0₅₆ ∘ %rbx_andl_r32_r32[15:8]

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xorl_r32_r32
%rbx/%rbx: %rbx_xorl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_xorl_r32_r32
%rdx/%rdx: %rdx_xorl_r32_r32

%xmm0: %ymm0_xorl_r32_r32[127:0]
%xmm1: %ymm1_xorl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xorl %r13d, %ecx

.target:
xchgl %ebx, %ecx
xorq %rcx, %rbx
callq .set_szp_for_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_andl_r32_r32

%cf: false
%pf: %pf_andl_r32_r32
%zf: ((%rcx_andl_r32_r32[31:0] | %rbx_andl_r32_r32[31:0]) ⊕ %rbx_andl_r32_r32[31:0]) = 0x0₃₂
%sf: ((%rcx_andl_r32_r32[31:31] | %rbx_andl_r32_r32[31:31]) ⊕ %rbx_andl_r32_r32[31:31]) = 0x1₁
%of: false

State for specgen instruction: xorl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ ((%rcx_andl_r32_r32[31:0] | %rbx_andl_r32_r32[31:0]) ⊕ %rbx_andl_r32_r32[31:0]) ⊕ 0x0₃₂ ∘ %rcx_andl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ ((%rcx_andl_r32_r32[31:0] | %rbx_andl_r32_r32[31:0]) ⊕ %rbx_andl_r32_r32[31:0]) ⊕ 0x0₃₂ ∘ %rcx_andl_r32_r32[31:0]

%cf: false
%pf: !(((%rcx_andl_r32_r32[0:0] | %rbx_andl_r32_r32[0:0]) ⊕ %rbx_andl_r32_r32[0:0] ⊕ %rcx_andl_r32_r32[0:0]) = 0x1₁ ⊕ ((%rcx_andl_r32_r32[1:1] | %rbx_andl_r32_r32[1:1]) ⊕ %rbx_andl_r32_r32[1:1] ⊕ %rcx_andl_r32_r32[1:1]) = 0x1₁ ⊕ ((%rcx_andl_r32_r32[2:2] | %rbx_andl_r32_r32[2:2]) ⊕ %rbx_andl_r32_r32[2:2] ⊕ %rcx_andl_r32_r32[2:2]) = 0x1₁ ⊕ ((%rcx_andl_r32_r32[3:3] | %rbx_andl_r32_r32[3:3]) ⊕ %rbx_andl_r32_r32[3:3] ⊕ %rcx_andl_r32_r32[3:3]) = 0x1₁ ⊕ ((%rcx_andl_r32_r32[4:4] | %rbx_andl_r32_r32[4:4]) ⊕ %rbx_andl_r32_r32[4:4] ⊕ %rcx_andl_r32_r32[4:4]) = 0x1₁ ⊕ ((%rcx_andl_r32_r32[5:5] | %rbx_andl_r32_r32[5:5]) ⊕ %rbx_andl_r32_r32[5:5] ⊕ %rcx_andl_r32_r32[5:5]) = 0x1₁ ⊕ ((%rcx_andl_r32_r32[6:6] | %rbx_andl_r32_r32[6:6]) ⊕ %rbx_andl_r32_r32[6:6] ⊕ %rcx_andl_r32_r32[6:6]) = 0x1₁ ⊕ ((%rcx_andl_r32_r32[7:7] | %rbx_andl_r32_r32[7:7]) ⊕ %rbx_andl_r32_r32[7:7] ⊕ %rcx_andl_r32_r32[7:7]) = 0x1₁)
%zf: ((%rcx_andl_r32_r32[31:0] | %rbx_andl_r32_r32[31:0]) ⊕ %rbx_andl_r32_r32[31:0] ⊕ %rcx_andl_r32_r32[31:0]) = 0x0₃₂
%sf: ((%rcx_andl_r32_r32[31:31] | %rbx_andl_r32_r32[31:31]) ⊕ %rbx_andl_r32_r32[31:31] ⊕ %rcx_andl_r32_r32[31:31]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: 0x0₃₂ ∘ ((%rcx_andl_r32_r32[31:0] | %rbx_andl_r32_r32[31:0]) ⊕ %rbx_andl_r32_r32[31:0]) ⊕ 0x0₃₂ ∘ %rcx_andl_r32_r32[31:0]
%rbx/%rbx: 0x0₅₆ ∘ %rbx_andl_r32_r32[15:8]

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ ((%rcx_andl_r32_r32[31:0] | %rbx_andl_r32_r32[31:0]) ⊕ %rbx_andl_r32_r32[31:0] ⊕ %rcx_andl_r32_r32[31:0])

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ %rbx_andl_r32_r32[15:8]))

Final state
%rcx/%rcx: 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ %rbx_andl_r32_r32[15:8]))
%rbx/%rbx: 0x0₃₂ ∘ ((%rcx_andl_r32_r32[31:0] | %rbx_andl_r32_r32[31:0]) ⊕ %rbx_andl_r32_r32[31:0] ⊕ %rcx_andl_r32_r32[31:0])

=====================================
=====================================
Computing circuit for andl %ecx, %ebx

.target:
andnl %ecx, %ebx, %r13d
movzbl %bh, %ebx
xorl %r13d, %ecx
xchgl %ebx, %ecx
retq 

Initial state:
%rbx/%rbx: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[63:0]

%cf: %cf_blsrl_r32_r32
%pf: !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[0:0] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[1:1] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[2:2] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[3:3] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[4:4] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[5:5] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[6:6] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[7:7] = 0x1₁)
%zf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[63:63] = 0x1₁
%of: false ∧ !(true ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[63:63] = 0x1₁)

State for specgen instruction: andl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%rcx_andl_r32_r32[31:0] | %rbx_andl_r32_r32[31:0]) ⊕ %rbx_andl_r32_r32[31:0] ⊕ %rcx_andl_r32_r32[31:0])

%cf: false
%pf: !(((%rcx_andl_r32_r32[0:0] | %rbx_andl_r32_r32[0:0]) ⊕ %rbx_andl_r32_r32[0:0] ⊕ %rcx_andl_r32_r32[0:0]) = 0x1₁ ⊕ ((%rcx_andl_r32_r32[1:1] | %rbx_andl_r32_r32[1:1]) ⊕ %rbx_andl_r32_r32[1:1] ⊕ %rcx_andl_r32_r32[1:1]) = 0x1₁ ⊕ ((%rcx_andl_r32_r32[2:2] | %rbx_andl_r32_r32[2:2]) ⊕ %rbx_andl_r32_r32[2:2] ⊕ %rcx_andl_r32_r32[2:2]) = 0x1₁ ⊕ ((%rcx_andl_r32_r32[3:3] | %rbx_andl_r32_r32[3:3]) ⊕ %rbx_andl_r32_r32[3:3] ⊕ %rcx_andl_r32_r32[3:3]) = 0x1₁ ⊕ ((%rcx_andl_r32_r32[4:4] | %rbx_andl_r32_r32[4:4]) ⊕ %rbx_andl_r32_r32[4:4] ⊕ %rcx_andl_r32_r32[4:4]) = 0x1₁ ⊕ ((%rcx_andl_r32_r32[5:5] | %rbx_andl_r32_r32[5:5]) ⊕ %rbx_andl_r32_r32[5:5] ⊕ %rcx_andl_r32_r32[5:5]) = 0x1₁ ⊕ ((%rcx_andl_r32_r32[6:6] | %rbx_andl_r32_r32[6:6]) ⊕ %rbx_andl_r32_r32[6:6] ⊕ %rcx_andl_r32_r32[6:6]) = 0x1₁ ⊕ ((%rcx_andl_r32_r32[7:7] | %rbx_andl_r32_r32[7:7]) ⊕ %rbx_andl_r32_r32[7:7] ⊕ %rcx_andl_r32_r32[7:7]) = 0x1₁)
%zf: ((%rcx_andl_r32_r32[31:0] | %rbx_andl_r32_r32[31:0]) ⊕ %rbx_andl_r32_r32[31:0] ⊕ %rcx_andl_r32_r32[31:0]) = 0x0₃₂
%sf: ((%rcx_andl_r32_r32[31:31] | %rbx_andl_r32_r32[31:31]) ⊕ %rbx_andl_r32_r32[31:31] ⊕ %rcx_andl_r32_r32[31:31]) = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ ((%rcx_andl_r32_r32[31:0] | %rbx_andl_r32_r32[31:0]) ⊕ %rbx_andl_r32_r32[31:0] ⊕ %rcx_andl_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ ((%rcx_blsrl_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:0] ⊕ %rcx_blsrl_r32_r32[31:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ ((%rcx_blsrl_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:0] ⊕ %rcx_blsrl_r32_r32[31:0])

%cf: false
%pf: !(((%rcx_blsrl_r32_r32[0:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[0:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[0:0] ⊕ %rcx_blsrl_r32_r32[0:0]) = 0x1₁ ⊕ ((%rcx_blsrl_r32_r32[1:1] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[1:1]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[1:1] ⊕ %rcx_blsrl_r32_r32[1:1]) = 0x1₁ ⊕ ((%rcx_blsrl_r32_r32[2:2] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[2:2]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[2:2] ⊕ %rcx_blsrl_r32_r32[2:2]) = 0x1₁ ⊕ ((%rcx_blsrl_r32_r32[3:3] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[3:3]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[3:3] ⊕ %rcx_blsrl_r32_r32[3:3]) = 0x1₁ ⊕ ((%rcx_blsrl_r32_r32[4:4] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[4:4]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[4:4] ⊕ %rcx_blsrl_r32_r32[4:4]) = 0x1₁ ⊕ ((%rcx_blsrl_r32_r32[5:5] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[5:5]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[5:5] ⊕ %rcx_blsrl_r32_r32[5:5]) = 0x1₁ ⊕ ((%rcx_blsrl_r32_r32[6:6] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[6:6]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[6:6] ⊕ %rcx_blsrl_r32_r32[6:6]) = 0x1₁ ⊕ ((%rcx_blsrl_r32_r32[7:7] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[7:7]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[7:7] ⊕ %rcx_blsrl_r32_r32[7:7]) = 0x1₁)
%zf: ((%rcx_blsrl_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:0] ⊕ %rcx_blsrl_r32_r32[31:0]) = 0x0₃₂
%sf: ((%rcx_blsrl_r32_r32[31:31] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:31]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:31] ⊕ %rcx_blsrl_r32_r32[31:31]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %ebx, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_movl_r32_r32
%rbx/%rbx: 0x0₆₄

%cf: %cf_movl_r32_r32
%pf: %pf_movl_r32_r32
%af: %af_movl_r32_r32
%zf: %zf_movl_r32_r32
%sf: %sf_movl_r32_r32
%of: %of_movl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

%cf: false
%pf: !(%rcx_movl_r32_r32[0:0] = 0x1₁ ⊕ %rcx_movl_r32_r32[1:1] = 0x1₁ ⊕ %rcx_movl_r32_r32[2:2] = 0x1₁ ⊕ %rcx_movl_r32_r32[3:3] = 0x1₁ ⊕ %rcx_movl_r32_r32[4:4] = 0x1₁ ⊕ %rcx_movl_r32_r32[5:5] = 0x1₁ ⊕ %rcx_movl_r32_r32[6:6] = 0x1₁ ⊕ %rcx_movl_r32_r32[7:7] = 0x1₁)
%af: false
%zf: %rcx_movl_r32_r32[31:0] = 0x0₃₂
%sf: %rcx_movl_r32_r32[31:31] = 0x1₁
%of: (%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ false) ∧ !(%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ %rcx_movl_r32_r32[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for movl %ecx, %ebx

.target:
movq $0x0, %rbx
xaddl %ebx, %ecx
retq 

Initial state:
%rbx/%rbx: %rbx_blsmskl_r32_r32

State for specgen instruction: movl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %rax

Final state:
%rax/%rax: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for orq %rbx, %rbx

Final state:
%rbx/%rbx: %rbx_addq_r64_r64 | %rbx_addq_r64_r64

%cf: false
%pf: !((%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][0:0] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][1:1] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][2:2] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][3:3] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][4:4] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][5:5] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][6:6] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][7:7] = 0x1₁)
%zf: (%rbx_addq_r64_r64 | %rbx_addq_r64_r64) = 0x0₆₄
%sf: (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcq %rcx, %rbx

Final state:
%rbx/%rbx: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[64:64] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addq_r64_r64[3:0] + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0] = 0x0₆₄
%sf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][63:63] = 0x1₁
%of: (%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[63:63] = 0x1₁) ∧ !(%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:63] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for addq %rax, %rbx

.target:
orq %rbx, %rbx
adcq %rcx, %rbx
retq 

Initial state:
%rbx/%rbx: %rbx_decq_r64

%cf: %cf_decq_r64
%pf: %pf_decq_r64
%af: %af_decq_r64
%zf: %zf_decq_r64
%sf: %sf_decq_r64
%of: %of_decq_r64

State for specgen instruction: addq %rcx, %rbx:
%rbx/%rbx: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[64:64] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addq_r64_r64[3:0] + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0] = 0x0₆₄
%sf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][63:63] = 0x1₁
%of: (%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[63:63] = 0x1₁) ∧ !(%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:63] = 0x1₁)

Register        -> %rbx
  translates to => %rbx
Value is               -> ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0]
  after renaming it is => (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0]

Final state
%rbx/%rbx: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0]

%cf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[64:64] = 0x1₁
%pf: !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[7:7] = 0x1₁)
%af: (0xf₅ + 0x0₁ ∘ %rbx_decq_r64[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:63] = 0x1₁
%of: (true ↔ %rbx_decq_r64[63:63] = 0x1₁) ∧ !(true ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:63] = 0x1₁)

=====================================
=====================================
Computing circuit for decq %rbx

.target:
movq $0xffffffffffffffff, %rax
addq %rax, %rbx
retq 

Initial state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]

%pf: %pf_blsmskl_r32_r32
%af: %af_blsmskl_r32_r32
%zf: %zf_blsmskl_r32_r32
%sf: %sf_blsmskl_r32_r32
%of: %of_blsmskl_r32_r32

State for specgen instruction: decq %rbx:
%rbx/%rbx: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0]

%pf: !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[7:7] = 0x1₁)
%af: (0xf₅ + 0x0₁ ∘ %rbx_decq_r64[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:63] = 0x1₁
%of: (true ↔ %rbx_decq_r64[63:63] = 0x1₁) ∧ !(true ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:63] = 0x1₁)

Register        -> %rbx
  translates to => %rbx
Value is               -> (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0]
  after renaming it is => (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[63:0]

Final state
%rbx/%rbx: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[63:0]

%pf: !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[0:0] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[1:1] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[2:2] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[3:3] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[4:4] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[5:5] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[6:6] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[7:7] = 0x1₁)
%af: (0xf₅ + 0x0₁ ∘ %rcx_blsmskl_r32_r32[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[63:63] = 0x1₁
%of: false ∧ !(true ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[63:63] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for callq .move_byte_5_of_rbx_to_r9b

Final state:
%rax/%rax: %rax_blsmskl_r32_r32
%rdx/%rdx: %rdx_blsmskl_r32_r32

%xmm0: %ymm0_blsmskl_r32_r32[127:0]
%xmm1: %ymm1_blsmskl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xorl_r32_r32
%rbx/%rbx: %rbx_xorl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_xorl_r32_r32
%rdx/%rdx: %rdx_xorl_r32_r32

%xmm0: %ymm0_xorl_r32_r32[127:0]
%xmm1: %ymm1_xorl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xorl %ecx, %ebx

.target:
xchgl %ebx, %ecx
xorq %rcx, %rbx
callq .set_szp_for_ebx
retq 

Initial state:
%rbx/%rbx: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[63:0]

%cf: %cf_blsmskl_r32_r32
%pf: !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[0:0] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[1:1] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[2:2] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[3:3] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[4:4] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[5:5] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[6:6] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[7:7] = 0x1₁)
%zf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[63:63] = 0x1₁
%of: false ∧ !(true ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[63:63] = 0x1₁)

State for specgen instruction: xorl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[31:0]

%cf: false
%pf: !((%rcx_blsmskl_r32_r32[0:0] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[0:0]) = 0x1₁ ⊕ (%rcx_blsmskl_r32_r32[1:1] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[1:1]) = 0x1₁ ⊕ (%rcx_blsmskl_r32_r32[2:2] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[2:2]) = 0x1₁ ⊕ (%rcx_blsmskl_r32_r32[3:3] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[3:3]) = 0x1₁ ⊕ (%rcx_blsmskl_r32_r32[4:4] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[4:4]) = 0x1₁ ⊕ (%rcx_blsmskl_r32_r32[5:5] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[5:5]) = 0x1₁ ⊕ (%rcx_blsmskl_r32_r32[6:6] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[6:6]) = 0x1₁ ⊕ (%rcx_blsmskl_r32_r32[7:7] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[7:7]) = 0x1₁)
%zf: (%rcx_blsmskl_r32_r32[31:0] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[31:0]) = 0x0₃₂
%sf: (%rcx_blsmskl_r32_r32[31:31] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[31:31]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for movq $0x8, %rbx

Final state:
%rbx/%rbx: 0x8₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ebx_r10w_r11w

Final state:
%rax/%rax: %rax_movzbl_r32_r8
%rdx/%rdx: %rdx_movzbl_r32_r8

%xmm0: %ymm0_movzbl_r32_r8[127:0]
%xmm1: %ymm1_movzbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_addw_r16_r16

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %bx

Final state:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_addw_r16_r16
%rdx/%rdx: %rdx_addw_r16_r16

%xmm0: %ymm0_addw_r16_r16[127:0]
%xmm1: %ymm1_addw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for addw %bx, %r10w

.target:
clc 
adcw %cx, %bx
callq .set_szp_for_bx
retq 

Initial state:
%r10/%r10w: %r10_movzbl_r32_r8[63:16] ∘ 0x8₆₄[31:0][15:0]

%cf: %cf_movzbl_r32_r8
%pf: %pf_movzbl_r32_r8
%af: %af_movzbl_r32_r8
%zf: %zf_movzbl_r32_r8
%sf: %sf_movzbl_r32_r8
%of: %of_movzbl_r32_r8

State for specgen instruction: addw %cx, %bx:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %r10w
Value is               -> (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0]
  after renaming it is => 0x10₁₆

Final state
%r10/%r10w: (%r10_movzbl_r32_r8[63:16] ∘ 0x8₆₄[31:0][15:0])[63:16] ∘ 0x10₁₆

%cf: false
%pf: false
%af: true
%zf: false
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .read_pf_into_rbx

Final state:
%rax/%rax: %rax_movzbl_r32_r8
%rdx/%rdx: %rdx_movzbl_r32_r8

%xmm0: %ymm0_movzbl_r32_r8[127:0]
%xmm1: %ymm1_movzbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcb %cl, %bl

Final state:
%rbx/%bl: (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[63:8] ∘ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_movzbl_r32_r8[7:0][3:0] + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:7] = 0x1₁
%of: (%rcx_movzbl_r32_r8[7:0][7:7] = 0x1₁ ↔ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ∧ !(%rcx_movzbl_r32_r8[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for movzbl %bl, %eax

.target:
movq $0x8, %rbx
callq .move_032_016_ebx_r10w_r11w
addw %bx, %r10w
callq .read_pf_into_rbx
adcb %cl, %bl
retq 

Initial state:
%rax/%rax: %rax_rclb_r8_one

State for specgen instruction: movzbl %cl, %ebx:
%rbx/%rbx: (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[63:8] ∘ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0]

Register        -> %rbx
  translates to => %rax
Value is               -> (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[63:8] ∘ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0]
  after renaming it is => 0x0₅₆ ∘ %rbx_rclb_r8_one[7:0]

Final state
%rax/%rax: 0x0₅₆ ∘ %rbx_rclb_r8_one[7:0]

=====================================
-------------------------------------
Getting base circuit for movq %rax, %rbx

Final state:
%rbx/%rbx: 0x0₅₆ ∘ %rbx_rclb_r8_one[7:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcb %bl, %bl

Final state:
%rbx/%bl: (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[63:8] ∘ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0]

%cf: ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[8:8] = 0x1₁
%pf: !(((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0] = 0x0₈
%sf: ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:7] = 0x1₁
%of: ((0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][7:7] = 0x1₁) ∧ !((0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][7:7] = 0x1₁ ↔ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for rclb $0x1, %r9b

.target:
movzbl %bl, %eax
movq %rax, %rbx
adcb %bl, %bl
retq 

Initial state:
%r9/%r9b: %r9_blsmskl_r32_r32[63:8] ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[63:0][47:40]

%cf: false
%of: false

State for specgen instruction: rclb $0x1, %bl:
%rbx/%bl: (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[63:8] ∘ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0]

%cf: ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[8:8] = 0x1₁
%of: ((0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][7:7] = 0x1₁) ∧ !((0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][7:7] = 0x1₁ ↔ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %r9b
Value is               -> ((0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[63:8] ∘ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0])[7:0]
  after renaming it is => (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40])[7:0]

Final state
%r9/%r9b: (%r9_blsmskl_r32_r32[63:8] ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[63:0][47:40])[63:8] ∘ (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40])[7:0]

%cf: (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40])[8:8] = 0x1₁
%of: ((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:47] = 0x1₁ ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:47] = 0x1₁) ∧ !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:47] = 0x1₁ ↔ (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40])[7:7] = 0x1₁)

=====================================
=====================================
Computing circuit for blsmskl %ecx, %ecx

.target:
movl %ecx, %ebx
decq %rbx
callq .move_byte_5_of_rbx_to_r9b
xorl %ecx, %ebx
rclb $0x1, %r9b
retq 

Initial state:
%rcx/%rcx: %rcx_blsrl_r32_r32

%cf: false
%zf: ((%rcx_blsrl_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:0] ⊕ %rcx_blsrl_r32_r32[31:0]) = 0x0₃₂
%sf: ((%rcx_blsrl_r32_r32[31:31] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:31]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:31] ⊕ %rcx_blsrl_r32_r32[31:31]) = 0x1₁
%of: false

State for specgen instruction: blsmskl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[31:0]

%cf: (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40])[8:8] = 0x1₁
%zf: (%rcx_blsmskl_r32_r32[31:0] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[31:0]) = 0x0₃₂
%sf: (%rcx_blsmskl_r32_r32[31:31] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[31:31]) = 0x1₁
%of: ((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:47] = 0x1₁ ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:47] = 0x1₁) ∧ !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:47] = 0x1₁ ↔ (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40])[7:7] = 0x1₁)

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:0]

%cf: (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[47:40])[8:8] = 0x1₁
%zf: (%rcx_blsrl_r32_r32[31:0] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:0]) = 0x0₃₂
%sf: (%rcx_blsrl_r32_r32[31:31] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:31]) = 0x1₁
%of: ((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[47:47] = 0x1₁ ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[47:47] = 0x1₁) ∧ !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[47:47] = 0x1₁ ↔ (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[47:40])[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_blsrl_r32_r32
%rdx/%rdx: %rdx_blsrl_r32_r32

%xmm0: %ymm0_blsrl_r32_r32[127:0]
%xmm1: %ymm1_blsrl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for blsrl %ecx, %ebx

.target:
movl %ecx, %ebx
decq %rbx
andl %ecx, %ebx
blsmskl %ecx, %ecx
callq .set_szp_for_ebx
retq 

Initial state:
%rbx/%rbx: %rbx_blsil_r32_r32

%cf: %cf_blsil_r32_r32
%zf: %zf_blsil_r32_r32
%sf: %sf_blsil_r32_r32
%of: %of_blsil_r32_r32

State for specgen instruction: blsrl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%rcx_blsrl_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:0] ⊕ %rcx_blsrl_r32_r32[31:0])

%cf: (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[47:40])[8:8] = 0x1₁
%zf: (0x0₃₂ ∘ ((%rcx_blsrl_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:0] ⊕ %rcx_blsrl_r32_r32[31:0]))[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ ((%rcx_blsrl_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:0] ⊕ %rcx_blsrl_r32_r32[31:0]))[31:0][31:31] = 0x1₁
%of: ((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[47:47] = 0x1₁ ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[47:47] = 0x1₁) ∧ !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[47:47] = 0x1₁ ↔ (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[47:40])[7:7] = 0x1₁)

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ ((%rcx_blsrl_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsrl_r32_r32[31:0]))[31:0] ⊕ %rcx_blsrl_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])

%cf: (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[47:40])[8:8] = 0x1₁
%zf: ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0]) = 0x0₃₂
%sf: ((%rcx_blsil_r32_r32[31:31] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:31]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:31] ⊕ %rcx_blsil_r32_r32[31:31]) = 0x1₁
%of: ((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[47:47] = 0x1₁ ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[47:47] = 0x1₁) ∧ !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[47:47] = 0x1₁ ↔ (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[47:40])[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xorl_r32_r32
%rbx/%rbx: %rbx_xorl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_xorl_r32_r32
%rdx/%rdx: %rdx_xorl_r32_r32

%xmm0: %ymm0_xorl_r32_r32[127:0]
%xmm1: %ymm1_xorl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xorl %ecx, %ebx

.target:
xchgl %ebx, %ecx
xorq %rcx, %rbx
callq .set_szp_for_ebx
retq 

Initial state:
%rbx/%rbx: 0x0₃₂ ∘ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])

%cf: (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[47:40])[8:8] = 0x1₁
%pf: %pf_blsil_r32_r32
%zf: ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0]) = 0x0₃₂
%sf: ((%rcx_blsil_r32_r32[31:31] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:31]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:31] ⊕ %rcx_blsil_r32_r32[31:31]) = 0x1₁
%of: ((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[47:47] = 0x1₁ ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[47:47] = 0x1₁) ∧ !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[47:47] = 0x1₁ ↔ (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[47:40])[7:7] = 0x1₁)

State for specgen instruction: xorl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0] ⊕ 0x0₃₂ ∘ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0] ⊕ 0x0₃₂ ∘ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])

%cf: false
%pf: !((%rcx_blsil_r32_r32[0:0] ⊕ ((%rcx_blsil_r32_r32[0:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[0:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[0:0] ⊕ %rcx_blsil_r32_r32[0:0])) = 0x1₁ ⊕ (%rcx_blsil_r32_r32[1:1] ⊕ ((%rcx_blsil_r32_r32[1:1] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[1:1]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[1:1] ⊕ %rcx_blsil_r32_r32[1:1])) = 0x1₁ ⊕ (%rcx_blsil_r32_r32[2:2] ⊕ ((%rcx_blsil_r32_r32[2:2] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[2:2]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[2:2] ⊕ %rcx_blsil_r32_r32[2:2])) = 0x1₁ ⊕ (%rcx_blsil_r32_r32[3:3] ⊕ ((%rcx_blsil_r32_r32[3:3] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[3:3]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[3:3] ⊕ %rcx_blsil_r32_r32[3:3])) = 0x1₁ ⊕ (%rcx_blsil_r32_r32[4:4] ⊕ ((%rcx_blsil_r32_r32[4:4] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[4:4]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[4:4] ⊕ %rcx_blsil_r32_r32[4:4])) = 0x1₁ ⊕ (%rcx_blsil_r32_r32[5:5] ⊕ ((%rcx_blsil_r32_r32[5:5] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[5:5]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[5:5] ⊕ %rcx_blsil_r32_r32[5:5])) = 0x1₁ ⊕ (%rcx_blsil_r32_r32[6:6] ⊕ ((%rcx_blsil_r32_r32[6:6] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[6:6]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[6:6] ⊕ %rcx_blsil_r32_r32[6:6])) = 0x1₁ ⊕ (%rcx_blsil_r32_r32[7:7] ⊕ ((%rcx_blsil_r32_r32[7:7] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:7]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:7] ⊕ %rcx_blsil_r32_r32[7:7])) = 0x1₁)
%zf: (%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂
%sf: (%rcx_blsil_r32_r32[31:31] ⊕ ((%rcx_blsil_r32_r32[31:31] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:31]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:31] ⊕ %rcx_blsil_r32_r32[31:31])) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for movq $0xfffffffffffffff9, %rcx

Final state:
%rcx/%rcx: 0xfffffffffffffff9₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_zf_into_rbx

Final state:
%rax/%rax: %rax_setnbe_r8
%rdx/%rdx: %rdx_setnbe_r8

%xmm0: %ymm0_setnbe_r8[127:0]
%xmm1: %ymm1_setnbe_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rbx

Final state:
%rax/%rax: %rax_setnae_rh
%rdx/%rdx: %rdx_setnae_rh

%xmm0: %ymm0_setnae_rh[127:0]
%xmm1: %ymm1_setnae_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %bl, %ah

Final state:
%rax/%ah: %rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setnae %bh

.target:
callq .read_cf_into_rbx
movb %bl, %ah
retq 

Initial state:
%rbx/%bh: 0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁)

State for specgen instruction: setnae %ah:
%rax/%ah: %rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0]

Register        -> %ah
  translates to => %bh
Value is               -> (%rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0])[15:8]
  after renaming it is => %cf_setnbe_r8 ? 0x1₈ : 0x0₈

Final state
%rbx/%bh: (0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[63:16] ∘ (%cf_setnbe_r8 ? 0x1₈ : 0x0₈) ∘ (0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[7:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r12d_r13d

Final state:
%rax/%rax: %rax_setnbe_r8
%rdx/%rdx: %rdx_setnbe_r8

%xmm0: %ymm0_setnbe_r8[127:0]
%xmm1: %ymm1_setnbe_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r12d_r13d_rbx

Final state:
%rax/%rax: %rax_setnbe_r8
%rdx/%rdx: %rdx_setnbe_r8

%xmm0: %ymm0_setnbe_r8[127:0]
%xmm1: %ymm1_setnbe_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %r13d, %ebx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rbx/%rbx: (0x0₃₂ ∘ ((0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[63:16] ∘ (%cf_setnbe_r8 ? 0x1₈ : 0x0₈) ∘ (0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[7:0])[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ ((0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[63:16] ∘ (%cf_setnbe_r8 ? 0x1₈ : 0x0₈) ∘ (0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[7:0])[31:0])[31:0][31:0]
%r13/%r13: 0x0₃₂ ∘ ((0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[63:16] ∘ (%cf_setnbe_r8 ? 0x1₈ : 0x0₈) ∘ (0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[7:0])[63:32]

%cf: %cf_setnbe_r8
%pf: %pf_setnbe_r8
%af: %af_setnbe_r8
%zf: %zf_setnbe_r8
%sf: %sf_setnbe_r8
%of: %of_setnbe_r8

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_setnbe_r8 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_setnbe_r8 ? 0x1₈ : 0x0₈))
%r13/%r13: 0x0₃₂ ∘ ((%cf_setnbe_r8 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_setnbe_r8 ? 0x1₈ : 0x0₈))

%cf: false
%pf: !((%zf_setnbe_r8 ? 0x1₁ : 0x0₁) = 0x1₁ ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false)
%af: false
%zf: (%cf_setnbe_r8 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_setnbe_r8 ? 0x1₈ : 0x0₈) = 0x0₃₂
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .read_zf_into_rbx

Final state:
%rax/%rax: %rax_setnbe_r8
%rdx/%rdx: %rdx_setnbe_r8

%xmm0: %ymm0_setnbe_r8[127:0]
%xmm1: %ymm1_setnbe_r8[127:0]

-------------------------------------
=====================================
Computing circuit for setnbe %al

.target:
callq .read_zf_into_rbx
setnae %bh
callq .move_064_032_rbx_r12d_r13d
callq .move_032_064_r12d_r13d_rbx
xaddl %r13d, %ebx
callq .read_zf_into_rbx
retq 

Initial state:
%rax/%al: %rax_cmovbeq_r64_r64

State for specgen instruction: setnbe %bl:
%rbx/%bl: 0x0₆₃ ∘ ((%cf_setnbe_r8 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_setnbe_r8 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₁ : 0x0₁)

Register        -> %bl
  translates to => %al
Value is               -> (0x0₆₃ ∘ ((%cf_setnbe_r8 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_setnbe_r8 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₁ : 0x0₁))[7:0]
  after renaming it is => (%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₈ : 0x0₈

Final state
%rax/%al: %rax_cmovbeq_r64_r64[63:8] ∘ ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₈ : 0x0₈)

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddb_r8_r8
%rdx/%rdx: %rdx_xaddb_r8_r8

%xmm0: %ymm0_xaddb_r8_r8[127:0]
%xmm1: %ymm1_xaddb_r8_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %cl, %r13d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r13/%r13: %r13_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r13
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

Final state
%r13/%r13: 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %bl, %r15d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r15/%r15: %r15_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r15
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

Final state
%r15/%r15: 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for movsbq %r15b, %rcx

Final state:
%rcx/%rcx: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %cl, %r13b

Final state:
%r13/%r13b: (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for movslq %r13d, %rbx

Final state:
%rbx/%rbx: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

-------------------------------------
=====================================
Computing circuit for xaddb %al, %al

.target:
callq .clear_cf
movsbl %cl, %r13d
movsbl %bl, %r15d
movsbq %r15b, %rcx
adcb %cl, %r13b
movslq %r13d, %rbx
retq 

Initial state:
%rax/%al: %rax_cmovbeq_r64_r64[63:8] ∘ ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₈ : 0x0₈)

%cf: %cf_cmovbeq_r64_r64
%pf: %pf_cmovbeq_r64_r64
%af: %af_cmovbeq_r64_r64
%zf: %zf_cmovbeq_r64_r64
%sf: %sf_cmovbeq_r64_r64
%of: %of_cmovbeq_r64_r64

State for specgen instruction: xaddb %cl, %bl:
%rcx/%cl: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])
%rbx/%bl: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

Final state
%rax/%al: ((%rax_cmovbeq_r64_r64[63:8] ∘ ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₈ : 0x0₈))[63:8] ∘ ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₈ : 0x0₈))[63:8] ∘ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0]

%cf: (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[8:8] = 0x1₁
%pf: !((((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[0:0] = 0x1₁ ⊕ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[1:1] = 0x1₁ ⊕ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[2:2] = 0x1₁ ⊕ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[3:3] = 0x1₁ ⊕ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[4:4] = 0x1₁ ⊕ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[5:5] = 0x1₁ ⊕ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[6:6] = 0x1₁ ⊕ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:7] = 0x1₁)
%af: (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₅ : 0x0₅) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₅ : 0x0₅))[4:4] = 0x1₁
%zf: (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈
%sf: (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:7] = 0x1₁
%of: true ∧ !(false ↔ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for cmoveq %rcx, %rbx

Final state:
%rbx/%rbx: (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovbeq_r64_r64 : %rbx_cmovbeq_r64_r64

-------------------------------------
=====================================
Computing circuit for cmovbeq %rcx, %rbx

.target:
setnbe %al
xaddb %al, %al
cmoveq %rcx, %rbx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovnaq_r64_r64

State for specgen instruction: cmovbeq %rcx, %rbx:
%rbx/%rbx: (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovbeq_r64_r64 : %rbx_cmovbeq_r64_r64

Register        -> %rbx
  translates to => %rbx
Value is               -> (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovbeq_r64_r64 : %rbx_cmovbeq_r64_r64
  after renaming it is => (((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovnaq_r64_r64 : %rbx_cmovnaq_r64_r64

Final state
%rbx/%rbx: (((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovnaq_r64_r64 : %rbx_cmovnaq_r64_r64

=====================================
=====================================
Computing circuit for cmovnaq %rbx, %rcx

.target:
cmovbeq %rcx, %rbx
retq 

Initial state:
%rcx/%rcx: 0xfffffffffffffff9₆₄

State for specgen instruction: cmovnaq %rcx, %rbx:
%rbx/%rbx: (((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovnaq_r64_r64 : %rbx_cmovnaq_r64_r64

Register        -> %rbx
  translates to => %rcx
Value is               -> (((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovnaq_r64_r64 : %rbx_cmovnaq_r64_r64
  after renaming it is => ((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? 0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0] ⊕ 0x0₃₂ ∘ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0]) : 0xfffffffffffffff9₆₄

Final state
%rcx/%rcx: ((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? 0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0] ⊕ 0x0₃₂ ∘ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0]) : 0xfffffffffffffff9₆₄

=====================================
-------------------------------------
Getting base circuit for movb %bl, %bh

Final state:
%rbx/%bh: %rbx_rorb_r8_one[63:16] ∘ %rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r12

Final state:
%r12/%r12: sign-extend-64(%rbx_sarw_r16_one[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %edx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rdx_andnl_r32_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %ebx, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_movl_r32_r32
%rbx/%rbx: 0x0₆₄

%cf: %cf_movl_r32_r32
%pf: %pf_movl_r32_r32
%af: %af_movl_r32_r32
%zf: %zf_movl_r32_r32
%sf: %sf_movl_r32_r32
%of: %of_movl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

%cf: false
%pf: !(%rcx_movl_r32_r32[0:0] = 0x1₁ ⊕ %rcx_movl_r32_r32[1:1] = 0x1₁ ⊕ %rcx_movl_r32_r32[2:2] = 0x1₁ ⊕ %rcx_movl_r32_r32[3:3] = 0x1₁ ⊕ %rcx_movl_r32_r32[4:4] = 0x1₁ ⊕ %rcx_movl_r32_r32[5:5] = 0x1₁ ⊕ %rcx_movl_r32_r32[6:6] = 0x1₁ ⊕ %rcx_movl_r32_r32[7:7] = 0x1₁)
%af: false
%zf: %rcx_movl_r32_r32[31:0] = 0x0₃₂
%sf: %rcx_movl_r32_r32[31:31] = 0x1₁
%of: (%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ false) ∧ !(%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ %rcx_movl_r32_r32[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for movl %ebx, %r8d

.target:
movq $0x0, %rbx
xaddl %ebx, %ecx
retq 

Initial state:
%r8/%r8: %r8_orl_r32_r32

State for specgen instruction: movl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

Register        -> %rbx
  translates to => %r8
Value is               -> 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0]

Final state
%r8/%r8: 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for movswq %cx, %r11

Final state:
%r11/%r11: sign-extend-64(%rcx_orl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %r11d, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_orl_r32_r32
%r11/%r11: sign-extend-64(%rcx_orl_r32_r32[15:0])

%cf: %cf_orl_r32_r32
%pf: %pf_orl_r32_r32
%af: %af_orl_r32_r32
%zf: %zf_orl_r32_r32
%sf: %sf_orl_r32_r32
%of: %of_orl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[31:0]
%r11/%r11: 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0]

%cf: (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[32:32] = 0x1₁
%pf: !((0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_orl_r32_r32[3:0] + 0x0₁ ∘ %rcx_orl_r32_r32[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[31:0] = 0x0₃₂
%sf: (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[31:31] = 0x1₁
%of: (%rcx_orl_r32_r32[31:31] = 0x1₁ ↔ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:31] = 0x1₁) ∧ !(%rcx_orl_r32_r32[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rcx_orl_r32_r32[31:0] + 0x0₁ ∘ sign-extend-64(%rcx_orl_r32_r32[15:0])[31:0])[31:31] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for orq %r11, %r8

Final state:
%r8/%r8: 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %r8d

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rbx/%rbx: %rbx_orl_r32_r32
%r8/%r8: 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0] | 0x0₃₂ ∘ %rcx_orl_r32_r32[31:0]

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0])

Register        -> %rbx
  translates to => %r8
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0])
%r8/%r8: 0x0₃₂ ∘ %rbx_orl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_orl_r32_r32
%rdx/%rdx: %rdx_orl_r32_r32

%xmm0: %ymm0_orl_r32_r32[127:0]
%xmm1: %ymm1_orl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for orl %ecx, %edx

.target:
movl %ebx, %r8d
movswq %cx, %r11
xaddl %r11d, %ecx
orq %r11, %r8
xchgl %ebx, %r8d
callq .set_szp_for_ebx
retq 

Initial state:
%rdx/%rdx: %rdx_andnl_r32_r32_r32

%cf: %cf_andnl_r32_r32_r32
%pf: %pf_andnl_r32_r32_r32
%zf: %zf_andnl_r32_r32_r32
%sf: %sf_andnl_r32_r32_r32
%of: %of_andnl_r32_r32_r32

State for specgen instruction: orl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0])

%cf: false
%pf: !((0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0]))[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rdx
Value is               -> 0x0₃₂ ∘ (%rbx_orl_r32_r32[31:0] | %rcx_orl_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0])

Final state
%rdx/%rdx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0])

%cf: false
%pf: !((%rdx_andnl_r32_r32_r32[0:0] | %rcx_andnl_r32_r32_r32[0:0]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[1:1] | %rcx_andnl_r32_r32_r32[1:1]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[2:2] | %rcx_andnl_r32_r32_r32[2:2]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[3:3] | %rcx_andnl_r32_r32_r32[3:3]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[4:4] | %rcx_andnl_r32_r32_r32[4:4]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[5:5] | %rcx_andnl_r32_r32_r32[5:5]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[6:6] | %rcx_andnl_r32_r32_r32[6:6]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[7:7] | %rcx_andnl_r32_r32_r32[7:7]) = 0x1₁)
%zf: (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) = 0x0₃₂
%sf: (%rdx_andnl_r32_r32_r32[31:31] | %rcx_andnl_r32_r32_r32[31:31]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r12w_r13w

Final state:
%rax/%rax: %rax_andnl_r32_r32_r32
%rdx/%rdx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0])

%xmm0: %ymm0_andnl_r32_r32_r32[127:0]
%xmm1: %ymm1_andnl_r32_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r12w_r13w_ecx

Final state:
%rax/%rax: %rax_andnl_r32_r32_r32
%rdx/%rdx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0])

%xmm0: %ymm0_andnl_r32_r32_r32[127:0]
%xmm1: %ymm1_andnl_r32_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xorl_r32_r32
%rbx/%rbx: %rbx_xorl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_xorl_r32_r32
%rdx/%rdx: %rdx_xorl_r32_r32

%xmm0: %ymm0_xorl_r32_r32[127:0]
%xmm1: %ymm1_xorl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xorl %edx, %ecx

.target:
xchgl %ebx, %ecx
xorq %rcx, %rbx
callq .set_szp_for_ebx
retq 

Initial state:
%rcx/%rcx: 0x0₃₂ ∘ ((%r13_andnl_r32_r32_r32[63:16] ∘ %rcx_andnl_r32_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r12_andnl_r32_r32_r32[63:16] ∘ %rcx_andnl_r32_r32_r32[31:0][15:0])[15:0][15:0])

%cf: false
%pf: !((%rdx_andnl_r32_r32_r32[0:0] | %rcx_andnl_r32_r32_r32[0:0]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[1:1] | %rcx_andnl_r32_r32_r32[1:1]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[2:2] | %rcx_andnl_r32_r32_r32[2:2]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[3:3] | %rcx_andnl_r32_r32_r32[3:3]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[4:4] | %rcx_andnl_r32_r32_r32[4:4]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[5:5] | %rcx_andnl_r32_r32_r32[5:5]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[6:6] | %rcx_andnl_r32_r32_r32[6:6]) = 0x1₁ ⊕ (%rdx_andnl_r32_r32_r32[7:7] | %rcx_andnl_r32_r32_r32[7:7]) = 0x1₁)
%zf: (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) = 0x0₃₂
%sf: (%rdx_andnl_r32_r32_r32[31:31] | %rcx_andnl_r32_r32_r32[31:31]) = 0x1₁
%of: false

State for specgen instruction: xorl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ 0x0₃₂ ∘ %rcx_andnl_r32_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ 0x0₃₂ ∘ %rcx_andnl_r32_r32_r32[31:0]

%cf: false
%pf: !(((%rdx_andnl_r32_r32_r32[0:0] | %rcx_andnl_r32_r32_r32[0:0]) ⊕ %rcx_andnl_r32_r32_r32[0:0]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[1:1] | %rcx_andnl_r32_r32_r32[1:1]) ⊕ %rcx_andnl_r32_r32_r32[1:1]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[2:2] | %rcx_andnl_r32_r32_r32[2:2]) ⊕ %rcx_andnl_r32_r32_r32[2:2]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[3:3] | %rcx_andnl_r32_r32_r32[3:3]) ⊕ %rcx_andnl_r32_r32_r32[3:3]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[4:4] | %rcx_andnl_r32_r32_r32[4:4]) ⊕ %rcx_andnl_r32_r32_r32[4:4]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[5:5] | %rcx_andnl_r32_r32_r32[5:5]) ⊕ %rcx_andnl_r32_r32_r32[5:5]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[6:6] | %rcx_andnl_r32_r32_r32[6:6]) ⊕ %rcx_andnl_r32_r32_r32[6:6]) = 0x1₁ ⊕ ((%rdx_andnl_r32_r32_r32[7:7] | %rcx_andnl_r32_r32_r32[7:7]) ⊕ %rcx_andnl_r32_r32_r32[7:7]) = 0x1₁)
%zf: ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0]) = 0x0₃₂
%sf: ((%rdx_andnl_r32_r32_r32[31:31] | %rcx_andnl_r32_r32_r32[31:31]) ⊕ %rcx_andnl_r32_r32_r32[31:31]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: 0x0₃₂ ∘ (%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ 0x0₃₂ ∘ %rcx_andnl_r32_r32_r32[31:0]
%rbx/%rbx: sign-extend-64(%rdx_andnl_r32_r32_r32[31:0])

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0])

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rdx_andnl_r32_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rdx_andnl_r32_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0])

=====================================
=====================================
Computing circuit for andnl %ebx, %ebx, %esi

.target:
movslq %edx, %rbx
orl %ecx, %edx
callq .move_032_016_ecx_r12w_r13w
callq .move_016_032_r12w_r13w_ecx
xorl %edx, %ecx
xchgl %ebx, %ecx
retq 

Initial state:
%rsi/%rsi: %rsi_sarq_r64_one

%cf: %cf_sarq_r64_one
%zf: %zf_sarq_r64_one
%sf: %sf_sarq_r64_one
%of: %of_sarq_r64_one

State for specgen instruction: andnl %edx, %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0])

%cf: false
%zf: ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0]) = 0x0₃₂
%sf: ((%rdx_andnl_r32_r32_r32[31:31] | %rcx_andnl_r32_r32_r32[31:31]) ⊕ %rcx_andnl_r32_r32_r32[31:31]) = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rsi
Value is               -> 0x0₃₂ ∘ ((%rdx_andnl_r32_r32_r32[31:0] | %rcx_andnl_r32_r32_r32[31:0]) ⊕ %rcx_andnl_r32_r32_r32[31:0])
  after renaming it is => 0x0₆₄

Final state
%rsi/%rsi: 0x0₆₄

%cf: false
%zf: true
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %ebx, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_movl_r32_r32
%rbx/%rbx: 0x0₆₄

%cf: %cf_movl_r32_r32
%pf: %pf_movl_r32_r32
%af: %af_movl_r32_r32
%zf: %zf_movl_r32_r32
%sf: %sf_movl_r32_r32
%of: %of_movl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

%cf: false
%pf: !(%rcx_movl_r32_r32[0:0] = 0x1₁ ⊕ %rcx_movl_r32_r32[1:1] = 0x1₁ ⊕ %rcx_movl_r32_r32[2:2] = 0x1₁ ⊕ %rcx_movl_r32_r32[3:3] = 0x1₁ ⊕ %rcx_movl_r32_r32[4:4] = 0x1₁ ⊕ %rcx_movl_r32_r32[5:5] = 0x1₁ ⊕ %rcx_movl_r32_r32[6:6] = 0x1₁ ⊕ %rcx_movl_r32_r32[7:7] = 0x1₁)
%af: false
%zf: %rcx_movl_r32_r32[31:0] = 0x0₃₂
%sf: %rcx_movl_r32_r32[31:31] = 0x1₁
%of: (%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ false) ∧ !(%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ %rcx_movl_r32_r32[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for movl %esi, %esi

.target:
movq $0x0, %rbx
xaddl %ebx, %ecx
retq 

Initial state:
%rsi/%rsi: 0x0₆₄

State for specgen instruction: movl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rsi
Value is               -> 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
  after renaming it is => 0x0₆₄

Final state
%rsi/%rsi: 0x0₆₄

=====================================
-------------------------------------
Getting base circuit for callq .read_sf_into_rcx

Final state:
%rax/%rax: %rax_setns_r8
%rdx/%rdx: %rdx_setns_r8

%xmm0: %ymm0_setns_r8[127:0]
%xmm1: %ymm1_setns_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r12w_r13w

Final state:
%rax/%rax: %rax_setns_r8
%rdx/%rdx: %rdx_setns_r8

%xmm0: %ymm0_setns_r8[127:0]
%xmm1: %ymm1_setns_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r12w_r13w_edx

Final state:
%rax/%rax: %rax_setns_r8
%rdx/%rdx: 0x0₃₂ ∘ ((%r13_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][31:16])[15:0][15:0] ∘ (%r12_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][15:0])[15:0][15:0])

%xmm0: %ymm0_setns_r8[127:0]
%xmm1: %ymm1_setns_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_edx_r10w_r11w

Final state:
%rax/%rax: %rax_setns_r8
%rdx/%rdx: 0x0₃₂ ∘ ((%r13_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][31:16])[15:0][15:0] ∘ (%r12_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][15:0])[15:0][15:0])

%xmm0: %ymm0_setns_r8[127:0]
%xmm1: %ymm1_setns_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16

%cf: false
%pf: !((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][0:0] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][1:1] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][2:2] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][3:3] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][4:4] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][5:5] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][6:6] = 0x1₁ ⊕ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[7:0][7:7] = 0x1₁)
%zf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16) = 0x0₆₄
%sf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: false

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %ax

Final state:
%rax/%ax: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_popcntw_r16_r16[15:0][3:0] + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_popcntw_r16_r16[15:0][15:15] = 0x1₁ ↔ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0][15:15] = 0x1₁) ∧ !(%rcx_popcntw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for popcntq %rax, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][0:0])))))

%cf: false
%pf: false
%af: false
%zf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0] = 0x0₆₄
%sf: false
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: false

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
=====================================
Computing circuit for popcntw %r10w, %r10w

.target:
xorq %rax, %rax
clc 
adcw %cx, %ax
popcntq %rax, %rbx
clc 
retq 

Initial state:
%r10/%r10w: %r10_setns_r8[63:16] ∘ (0x0₃₂ ∘ ((%r13_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][31:16])[15:0][15:0] ∘ (%r12_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][15:0])[15:0][15:0]))[31:0][15:0]

%cf: %cf_setns_r8
%pf: %pf_setns_r8
%af: %af_setns_r8
%zf: %zf_setns_r8
%sf: %sf_setns_r8
%of: %of_setns_r8

State for specgen instruction: popcntw %cx, %bx:
%rbx/%bx: 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][0:0])))))

%cf: false
%pf: false
%af: false
%zf: (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0] = 0x0₆₄
%sf: false
%of: false

Register        -> %bx
  translates to => %r10w
Value is               -> (0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ ((%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_popcntw_r16_r16[15:0]) + 0x0₁ ∘ (%rax_popcntw_r16_r16 ⊕ %rax_popcntw_r16_r16)[15:0])[15:0])[31:0][15:0][7:0][3:0][1:0][0:0]))))))[15:0]
  after renaming it is => %sf_setns_r8 ? 0x1₁₆ : 0x0₁₆

Final state
%r10/%r10w: (%r10_setns_r8[63:16] ∘ (0x0₃₂ ∘ ((%r13_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][31:16])[15:0][15:0] ∘ (%r12_setns_r8[63:16] ∘ (0x0₆₃ ∘ (%sf_setns_r8 ? 0x1₁ : 0x0₁))[31:0][15:0])[15:0][15:0]))[31:0][15:0])[63:16] ∘ (%sf_setns_r8 ? 0x1₁₆ : 0x0₁₆)

%cf: false
%pf: false
%af: false
%zf: (%sf_setns_r8 ? 0x1₆₄ : 0x0₆₄) = 0x0₆₄
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .read_zf_into_rbx

Final state:
%rax/%rax: %rax_sete_r8
%rdx/%rdx: %rdx_sete_r8

%xmm0: %ymm0_sete_r8[127:0]
%xmm1: %ymm1_sete_r8[127:0]

-------------------------------------
=====================================
Computing circuit for sete %bl

.target:
callq .read_zf_into_rbx
retq 

Initial state:
%rbx/%bl: %rbx_setns_r8

State for specgen instruction: sete %bl:
%rbx/%bl: 0x0₆₃ ∘ (%zf_sete_r8 ? 0x1₁ : 0x0₁)

Register        -> %bl
  translates to => %bl
Value is               -> (0x0₆₃ ∘ (%zf_sete_r8 ? 0x1₁ : 0x0₁))[7:0]
  after renaming it is => (%sf_setns_r8 ? 0x1₆₄ : 0x0₆₄) = 0x0₆₄ ? 0x1₈ : 0x0₈

Final state
%rbx/%bl: %rbx_setns_r8[63:8] ∘ ((%sf_setns_r8 ? 0x1₆₄ : 0x0₆₄) = 0x0₆₄ ? 0x1₈ : 0x0₈)

=====================================
=====================================
Computing circuit for setns %cl

.target:
callq .read_sf_into_rcx
callq .move_032_016_ecx_r12w_r13w
callq .move_016_032_r12w_r13w_edx
callq .move_032_016_edx_r10w_r11w
popcntw %r10w, %r10w
sete %bl
retq 

Initial state:
%rcx/%cl: %rcx_sarq_r64_one

State for specgen instruction: setns %bl:
%rbx/%bl: %rbx_setns_r8[63:8] ∘ ((%sf_setns_r8 ? 0x1₆₄ : 0x0₆₄) = 0x0₆₄ ? 0x1₈ : 0x0₈)

Register        -> %bl
  translates to => %cl
Value is               -> (%rbx_setns_r8[63:8] ∘ ((%sf_setns_r8 ? 0x1₆₄ : 0x0₆₄) = 0x0₆₄ ? 0x1₈ : 0x0₈))[7:0]
  after renaming it is => 0x1₈

Final state
%rcx/%cl: %rcx_sarq_r64_one[63:8] ∘ 0x1₈

=====================================
-------------------------------------
Getting base circuit for sarq %cl, %rbx

Final state:
%rbx/%rbx: (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1]

%cf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[0:0] = 0x1₁ ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ false
%pf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ !((%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][0:0] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][1:1] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][2:2] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][3:3] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][4:4] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][5:5] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][6:6] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][7:7] = 0x1₁) ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ %pf_sarq_r64_one
%zf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1] = 0x0₆₄ ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ true
%sf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][63:63] = 0x1₁ ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ false
%of: (0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x1₈ ∧ false ∨ !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x1₈) ∧ false

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x20, %rbx

Final state:
%rbx/%rbx: 0x20₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r12b_r13b

Final state:
%rax/%rax: %rax_movzwl_r32_r16
%rdx/%rdx: %rdx_movzwl_r32_r16

%xmm0: %ymm0_movzwl_r32_r16[127:0]
%xmm1: %ymm1_movzwl_r32_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r12b_r13b_bx

Final state:
%rax/%rax: %rax_movzwl_r32_r16
%rdx/%rdx: %rdx_movzwl_r32_r16

%xmm0: %ymm0_movzwl_r32_r16[127:0]
%xmm1: %ymm1_movzwl_r32_r16[127:0]

-------------------------------------
=====================================
Computing circuit for movzwl %si, %r12d

.target:
movq $0x20, %rbx
callq .move_016_008_cx_r12b_r13b
callq .move_008_016_r12b_r13b_bx
retq 

Initial state:
%r12/%r12: %r12_sarq_r64_one

State for specgen instruction: movzwl %cx, %ebx:
%rbx/%rbx: 0x20₆₄[63:16] ∘ ((%r13_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][15:8])[7:0][7:0] ∘ (%r12_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][7:0])[7:0][7:0])

Register        -> %rbx
  translates to => %r12
Value is               -> 0x20₆₄[63:16] ∘ ((%r13_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][15:8])[7:0][7:0] ∘ (%r12_movzwl_r32_r16[63:8] ∘ %rcx_movzwl_r32_r16[15:0][7:0])[7:0][7:0])
  after renaming it is => 0x0₆₄

Final state
%r12/%r12: 0x0₆₄

=====================================
-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %rcx

Final state:
%rcx/%rcx: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ebx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rbx/%rbx: %rbx_decl_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rbx_decl_r32[31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_decl_r32[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ %rbx_decl_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %ecx, %ebx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: 0xffffffffffffffff₆₄
%rbx/%rbx: 0x0₃₂ ∘ %rbx_decl_r32[31:0]

%cf: %cf_decl_r32
%pf: %pf_decl_r32
%af: %af_decl_r32
%zf: %zf_decl_r32
%sf: %sf_decl_r32
%of: %of_decl_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_decl_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:0]

%cf: (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[32:32] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_decl_r32[3:0] + 0xf₅)[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:0] = 0x0₃₂
%sf: (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:31] = 0x1₁
%of: (%rbx_decl_r32[31:31] = 0x1₁ ↔ true) ∧ !(%rbx_decl_r32[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for decl %r12d

.target:
movq $0xffffffffffffffff, %rcx
xchgl %ebx, %ebx
xaddl %ecx, %ebx
retq 

Initial state:
%r12/%r12: 0x0₆₄

%pf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ !((%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][0:0] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][1:1] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][2:2] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][3:3] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][4:4] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][5:5] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][6:6] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][7:7] = 0x1₁) ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ %pf_sarq_r64_one
%af: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ TMP_BOOL_13 ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ %af_sarq_r64_one
%zf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1] = 0x0₆₄ ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ true
%sf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][63:63] = 0x1₁ ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ false
%of: (0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x1₈ ∧ false ∨ !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x1₈) ∧ false

State for specgen instruction: decl %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:0]

%pf: !((0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_decl_r32[3:0] + 0xf₅)[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:0] = 0x0₃₂
%sf: (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:31] = 0x1₁
%of: (%rbx_decl_r32[31:31] = 0x1₁ ↔ true) ∧ !(%rbx_decl_r32[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:31] = 0x1₁)

Register        -> %rbx
  translates to => %r12
Value is               -> 0x0₃₂ ∘ (0x0₁ ∘ %rbx_decl_r32[31:0] + 0xffffffff₃₃)[31:0]
  after renaming it is => 0xffffffff₆₄

Final state
%r12/%r12: 0xffffffff₆₄

%pf: true
%af: false
%zf: false
%sf: true
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .set_szp_for_rbx

Final state:
%rax/%rax: %rax_sarq_r64_one
%rdx/%rdx: %rdx_sarq_r64_one

%xmm0: %ymm0_sarq_r64_one[127:0]
%xmm1: %ymm1_sarq_r64_one[127:0]

-------------------------------------
=====================================
Computing circuit for sarq $0x1, %r12

.target:
andnl %ebx, %ebx, %esi
movl %esi, %esi
setns %cl
sarq %cl, %rbx
movzwl %si, %r12d
decl %r12d
callq .set_szp_for_rbx
retq 

Initial state:
%r12/%r12: sign-extend-64(%rbx_sarw_r16_one[15:0])

%cf: %cf_sarw_r16_one
%pf: %pf_sarw_r16_one
%zf: %zf_sarw_r16_one
%sf: %sf_sarw_r16_one
%of: %of_sarw_r16_one

State for specgen instruction: sarq $0x1, %rbx:
%rbx/%rbx: (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1]

%cf: !((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[0:0] = 0x1₁ ∨ !(!((0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ false
%pf: !((%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][0:0] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][1:1] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][2:2] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][3:3] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][4:4] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][5:5] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][6:6] = 0x1₁ ⊕ (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][7:0][7:7] = 0x1₁)
%zf: (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1] = 0x0₆₄
%sf: (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1][63:63] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %r12
Value is               -> (%rbx_sarq_r64_one ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ ((%rcx_sarq_r64_one[63:8] ∘ 0x1₈)[7:0][7:0] & 0x3f₈))[64:1]
  after renaming it is => (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1]

Final state
%r12/%r12: (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1]

%cf: true ∧ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false
%pf: !((sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[1:1] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[2:2] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[3:3] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[4:4] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[5:5] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[6:6] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[7:7] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁)
%zf: (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1] = 0x0₆₄
%sf: (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:64] = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .move_016_008_bx_r10b_r11b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r10b_r11b_cx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xchgw %r12w, %bx

.target:
callq .move_016_008_bx_r10b_r11b
callq .move_016_008_cx_r8b_r9b
callq .move_008_016_r10b_r11b_cx
callq .move_008_016_r8b_r9b_bx
retq 

Initial state:
%rbx/%bx: %rbx_sarw_r16_one
%r12/%r12w: (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1]

State for specgen instruction: xchgw %cx, %bx:
%rcx/%cx: %rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])
%rbx/%bx: %rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])

Register        -> %cx
  translates to => %r12w
Value is               -> (%rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rbx_sarw_r16_one[15:0]

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[16:1]

Final state
%rbx/%bx: %rbx_sarw_r16_one[63:16] ∘ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[16:1]
%r12/%r12w: (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1][63:16] ∘ %rbx_sarw_r16_one[15:0]

=====================================
=====================================
Computing circuit for sarw $0x1, %bx

.target:
movswq %bx, %r12
sarq $0x1, %r12
xchgw %r12w, %bx
retq 

Initial state:
%rbx/%bx: %rbx_rorb_r8_one[63:16] ∘ %rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]

%cf: %cf_rorb_r8_one
%pf: %pf_rorb_r8_one
%zf: %zf_rorb_r8_one
%sf: %sf_rorb_r8_one
%of: %of_rorb_r8_one

State for specgen instruction: sarw $0x1, %bx:
%rbx/%bx: %rbx_sarw_r16_one[63:16] ∘ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[16:1]

%cf: true ∧ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false
%pf: !((sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[1:1] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[2:2] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[3:3] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[4:4] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[5:5] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[6:6] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[7:7] = 0x1₁ ⊕ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁)
%zf: (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1] = 0x0₆₄
%sf: (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:64] = 0x1₁
%of: false

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_sarw_r16_one[63:16] ∘ (sign-extend-64(%rbx_sarw_r16_one[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[16:1])[15:0]
  after renaming it is => (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[16:1]

Final state
%rbx/%bx: (%rbx_rorb_r8_one[63:16] ∘ %rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0])[63:16] ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[16:1]

%cf: true ∧ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false
%pf: !((sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[1:1] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[2:2] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[3:3] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[4:4] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[5:5] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[6:6] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[7:7] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁)
%zf: (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1] = 0x0₆₄
%sf: (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:64] = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %bl, %eax

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%rax/%rax: %rax_rorb_r8_one

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %rax
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64((sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[31:0]

Final state
%rax/%rax: 0x0₃₂ ∘ sign-extend-64((sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[31:0]

=====================================
-------------------------------------
Getting base circuit for movsbq %bl, %rbp

Final state:
%rbp/%rbp: sign-extend-64(%rbx_salb_r8_one[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %bpl, %rbx

Final state:
%rbx/%rbx: sign-extend-64(sign-extend-64(%rbx_salb_r8_one[7:0])[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_shlb_r8_one ⊕ %rax_shlb_r8_one

%cf: false
%pf: !((%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][0:0] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][1:1] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][2:2] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][3:3] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][4:4] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][5:5] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][6:6] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁)
%zf: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one) = 0x0₆₄
%sf: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: false

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][3:0] + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁ ↔ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁) ∧ !((%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for adcb %bl, %bl

Final state:
%rbx/%bl: %rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0]

%cf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[8:8] = 0x1₁
%pf: !(((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_shlb_r8_one[7:0][3:0] + 0x0₁ ∘ %rbx_shlb_r8_one[7:0][3:0])[4:4] = 0x1₁
%zf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0] = 0x0₈
%sf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:7] = 0x1₁
%of: (%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ %rbx_shlb_r8_one[7:0][7:7] = 0x1₁) ∧ !(%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0]
%rdx/%rdx: %rdx_shlb_r8_one

%xmm0: %ymm0_shlb_r8_one[127:0]
%xmm1: %ymm1_shlb_r8_one[127:0]

-------------------------------------
=====================================
Computing circuit for shlb $0x1, %bl

.target:
xorq %rax, %rax
clc 
adcb %al, %al
adcb %bl, %bl
callq .set_szp_for_bl
retq 

Initial state:
%rbx/%bl: sign-extend-64(sign-extend-64(%rbx_salb_r8_one[7:0])[7:0])

%cf: %cf_salb_r8_one
%pf: %pf_salb_r8_one
%zf: %zf_salb_r8_one
%sf: %sf_salb_r8_one
%of: %of_salb_r8_one

State for specgen instruction: shlb $0x1, %bl:
%rbx/%bl: %rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0]

%cf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[8:8] = 0x1₁
%pf: !((%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%zf: (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0] = 0x0₈
%sf: (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:7] = 0x1₁
%of: (%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ %rbx_shlb_r8_one[7:0][7:7] = 0x1₁) ∧ !(%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %bl
Value is               -> (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0]
  after renaming it is => (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:0]

Final state
%rbx/%bl: sign-extend-64(sign-extend-64(%rbx_salb_r8_one[7:0])[7:0])[63:8] ∘ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:0]

%cf: (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:7] = 0x1₁)
%zf: (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:7] = 0x1₁
%of: (%rbx_salb_r8_one[7:7] = 0x1₁ ↔ %rbx_salb_r8_one[7:7] = 0x1₁) ∧ !(%rbx_salb_r8_one[7:7] = 0x1₁ ↔ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:7] = 0x1₁)

=====================================
=====================================
Computing circuit for salb $0x1, %al

.target:
movsbq %bl, %rbp
movsbq %bpl, %rbx
shlb $0x1, %bl
retq 

Initial state:
%rax/%al: 0x0₃₂ ∘ sign-extend-64((sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[31:0]

%cf: true ∧ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false
%pf: !((sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[1:1] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[2:2] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[3:3] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[4:4] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[5:5] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[6:6] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[7:7] = 0x1₁ ⊕ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁)
%zf: (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1] = 0x0₆₄
%sf: (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:64] = 0x1₁
%of: false

State for specgen instruction: salb $0x1, %bl:
%rbx/%bl: sign-extend-64(sign-extend-64(%rbx_salb_r8_one[7:0])[7:0])[63:8] ∘ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:0]

%cf: (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:7] = 0x1₁)
%zf: (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:7] = 0x1₁
%of: (%rbx_salb_r8_one[7:7] = 0x1₁ ↔ %rbx_salb_r8_one[7:7] = 0x1₁) ∧ !(%rbx_salb_r8_one[7:7] = 0x1₁ ↔ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %al
Value is               -> (sign-extend-64(sign-extend-64(%rbx_salb_r8_one[7:0])[7:0])[63:8] ∘ (0x0₁ ∘ %rbx_salb_r8_one[7:0] + 0x0₁ ∘ %rbx_salb_r8_one[7:0])[7:0])[7:0]
  after renaming it is => (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[7:0]

Final state
%rax/%al: (0x0₃₂ ∘ sign-extend-64((sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[31:0])[63:8] ∘ (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[7:0]

%cf: (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[7:7] = 0x1₁)
%zf: (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[7:0] = 0x0₈
%sf: (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[7:7] = 0x1₁
%of: ((sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁) ∧ !((sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[7:7] = 0x1₁)

=====================================
=====================================
Computing circuit for rorb $0x1, %cl

.target:
movb %bl, %bh
sarw $0x1, %bx
movsbl %bl, %eax
salb $0x1, %al
retq 

Initial state:
%rcx/%cl: ((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? 0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0] ⊕ 0x0₃₂ ∘ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0]) : 0xfffffffffffffff9₆₄

%cf: false
%of: false

State for specgen instruction: rorb $0x1, %bl:
%rbx/%bl: (%rbx_rorb_r8_one[63:16] ∘ %rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0])[63:16] ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[16:1]

%cf: (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[8:8] = 0x1₁
%of: ((sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁) ∧ !((sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %cl
Value is               -> ((%rbx_rorb_r8_one[63:16] ∘ %rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0])[63:16] ∘ (sign-extend-64(%rbx_rorb_r8_one[7:0] ∘ %rbx_rorb_r8_one[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[16:1])[7:0]
  after renaming it is => (sign-extend-64((((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈) ∘ (((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1]

Final state
%rcx/%cl: (((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? 0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0] ⊕ 0x0₃₂ ∘ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0]) : 0xfffffffffffffff9₆₄)[63:8] ∘ (sign-extend-64((((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈) ∘ (((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1]

%cf: (0x0₁ ∘ (sign-extend-64((((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈) ∘ (((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64((((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈) ∘ (((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[8:8] = 0x1₁
%of: ((sign-extend-64((((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈) ∘ (((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (sign-extend-64((((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈) ∘ (((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁) ∧ !((sign-extend-64((((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈) ∘ (((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (0x0₁ ∘ (sign-extend-64((((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈) ∘ (((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64((((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈) ∘ (((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[7:7] = 0x1₁)

=====================================
=====================================
Computing circuit for blsil %ecx, %ebx

.target:
blsrl %ecx, %ebx
xorl %ecx, %ebx
movq $0xfffffffffffffff9, %rcx
cmovnaq %rbx, %rcx
rorb $0x1, %cl
retq 

Initial state:
%rbx/%rbx: %rbx

%cf: %cf
%zf: %zf
%sf: %sf
%of: %of

State for specgen instruction: blsil %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0] ⊕ 0x0₃₂ ∘ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])

%cf: (0x0₁ ∘ (sign-extend-64((((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈) ∘ (((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64((((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈) ∘ (((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[8:8] = 0x1₁
%zf: (%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂
%sf: (%rcx_blsil_r32_r32[31:31] ⊕ ((%rcx_blsil_r32_r32[31:31] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:31]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:31] ⊕ %rcx_blsil_r32_r32[31:31])) = 0x1₁
%of: ((sign-extend-64((((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈) ∘ (((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (sign-extend-64((((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈) ∘ (((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁) ∧ !((sign-extend-64((((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈) ∘ (((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (0x0₁ ∘ (sign-extend-64((((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈) ∘ (((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64((((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈) ∘ (((((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx_blsil_r32_r32[31:0] ⊕ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_blsil_r32_r32[7:0] ⊕ ((%rcx_blsil_r32_r32[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[7:0] ⊕ %rcx_blsil_r32_r32[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[7:7] = 0x1₁)

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0] ⊕ 0x0₃₂ ∘ ((%rcx_blsil_r32_r32[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsil_r32_r32[31:0]))[31:0] ⊕ %rcx_blsil_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ %rcx[31:0] ⊕ 0x0₃₂ ∘ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ %rcx[31:0] ⊕ 0x0₃₂ ∘ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])

%cf: (0x0₁ ∘ (sign-extend-64((((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈) ∘ (((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64((((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈) ∘ (((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[8:8] = 0x1₁
%zf: (%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂
%sf: (%rcx[31:31] ⊕ ((%rcx[31:31] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:31]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:31] ⊕ %rcx[31:31])) = 0x1₁
%of: ((sign-extend-64((((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈) ∘ (((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (sign-extend-64((((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈) ∘ (((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁) ∧ !((sign-extend-64((((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈) ∘ (((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (0x0₁ ∘ (sign-extend-64((((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈) ∘ (((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64((((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈) ∘ (((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[7:7] = 0x1₁)

=====================================
Circuits:

%rbx   : 0x0₃₂ ∘ %rcx[31:0] ⊕ 0x0₃₂ ∘ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])

%cf    : (0x0₁ ∘ (sign-extend-64((((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈) ∘ (((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64((((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈) ∘ (((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[8:8] = 0x1₁
%zf    : (%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂
%sf    : (%rcx[31:31] ⊕ ((%rcx[31:31] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:31]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:31] ⊕ %rcx[31:31])) = 0x1₁
%of    : ((sign-extend-64((((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈) ∘ (((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (sign-extend-64((((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈) ∘ (((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁) ∧ !((sign-extend-64((((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈) ∘ (((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (0x0₁ ∘ (sign-extend-64((((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈) ∘ (((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64((((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈) ∘ (((((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉) + (((%rcx[31:0] ⊕ ((%rcx[31:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0] ⊕ %rcx[31:0])) = 0x0₃₂ ? 0x1₃₂ : 0x0₃₂) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx[7:0] ⊕ ((%rcx[7:0] | (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0]) ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[7:0] ⊕ %rcx[7:0]) : 0xf9₈)) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/
