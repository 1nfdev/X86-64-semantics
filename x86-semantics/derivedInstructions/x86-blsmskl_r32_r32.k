// Autogenerated using stratification.
requires "x86-configuration.k"

module BLSMSKL-R32-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (blsmskl R1:R32, R2:R32,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> ((#ifMInt (ultMInt(addMInt(extractMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 16, 24), extractMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 16, 24)), extractMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 16, 24)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "SF" |-> ((#ifMInt (eqMInt(mi(32, 1), lshrMInt(xorMInt(extractMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 32, 64), extractMInt(getParentValue(R1, RSMap), 32, 64)), 31)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "AF" |-> (undef)

 "PF" |-> (undef)

 "OF" |-> ((#ifMInt (eqMInt(mi(8, 2), addMInt(xorMInt(lshrMInt(extractMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 16, 24), 7), lshrMInt(addMInt(extractMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 16, 24), extractMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 16, 24)), 7)), xorMInt(lshrMInt(extractMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 16, 24), 7), lshrMInt(addMInt(extractMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 16, 24), extractMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 16, 24)), 7)))) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))) )

 "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 32, 64), extractMInt(getParentValue(R1, RSMap), 32, 64)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module BLSMSKL-R32-R32-SEMANTICS
  imports BLSMSKL-R32-R32
endmodule
/*
TargetInstr:
blsmskl %ecx, %ebx
RWSet:
maybe read:{ %ecx %ebx }
must read:{ %ecx %ebx }
maybe write:{ %rbx %cf %zf %sf %of }
must write:{ %rbx %cf %zf %sf %of }
maybe undef:{ %pf %af }
must undef:{ %pf %af }
required flags:{ bmi1 }

Circuit:
circuit:movl %ecx, %ebx                   #  1     0    2      OPC=movl_r32_r32
circuit:decq %rbx                         #  2     0x2  3      OPC=decq_r64
circuit:callq .move_byte_5_of_rbx_to_r9b  #  3     0x5  5      OPC=callq_label
circuit:xorl %ecx, %ebx                   #  4     0xa  2      OPC=xorl_r32_r32
circuit:rclb $0x1, %r9b                   #  5     0xc  3      OPC=rclb_r8_one
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

blsmskl %ecx, %ebx

  maybe read:      { %ecx %ebx }
  must read:       { %ecx %ebx }
  maybe write:     { %rbx %cf %zf %sf %of }
  must write:      { %rbx %cf %zf %sf %of }
  maybe undef:     { %pf %af }
  must undef:      { %pf %af }
  required flags:  { bmi1 }

-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %ebx, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_movl_r32_r32
%rbx/%rbx: 0x0₆₄

%cf: %cf_movl_r32_r32
%pf: %pf_movl_r32_r32
%af: %af_movl_r32_r32
%zf: %zf_movl_r32_r32
%sf: %sf_movl_r32_r32
%of: %of_movl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

%cf: false
%pf: !(%rcx_movl_r32_r32[0:0] = 0x1₁ ⊕ %rcx_movl_r32_r32[1:1] = 0x1₁ ⊕ %rcx_movl_r32_r32[2:2] = 0x1₁ ⊕ %rcx_movl_r32_r32[3:3] = 0x1₁ ⊕ %rcx_movl_r32_r32[4:4] = 0x1₁ ⊕ %rcx_movl_r32_r32[5:5] = 0x1₁ ⊕ %rcx_movl_r32_r32[6:6] = 0x1₁ ⊕ %rcx_movl_r32_r32[7:7] = 0x1₁)
%af: false
%zf: %rcx_movl_r32_r32[31:0] = 0x0₃₂
%sf: %rcx_movl_r32_r32[31:31] = 0x1₁
%of: (%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ false) ∧ !(%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ %rcx_movl_r32_r32[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for movl %ecx, %ebx

.target:
movq $0x0, %rbx
xaddl %ebx, %ecx
retq 

Initial state:
%rbx/%rbx: %rbx_blsmskl_r32_r32

State for specgen instruction: movl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %rax

Final state:
%rax/%rax: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for orq %rbx, %rbx

Final state:
%rbx/%rbx: %rbx_addq_r64_r64 | %rbx_addq_r64_r64

%cf: false
%pf: !((%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][0:0] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][1:1] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][2:2] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][3:3] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][4:4] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][5:5] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][6:6] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][7:7] = 0x1₁)
%zf: (%rbx_addq_r64_r64 | %rbx_addq_r64_r64) = 0x0₆₄
%sf: (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcq %rcx, %rbx

Final state:
%rbx/%rbx: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[64:64] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addq_r64_r64[3:0] + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0] = 0x0₆₄
%sf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][63:63] = 0x1₁
%of: (%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[63:63] = 0x1₁) ∧ !(%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:63] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for addq %rax, %rbx

.target:
orq %rbx, %rbx
adcq %rcx, %rbx
retq 

Initial state:
%rbx/%rbx: %rbx_decq_r64

%cf: %cf_decq_r64
%pf: %pf_decq_r64
%af: %af_decq_r64
%zf: %zf_decq_r64
%sf: %sf_decq_r64
%of: %of_decq_r64

State for specgen instruction: addq %rcx, %rbx:
%rbx/%rbx: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[64:64] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addq_r64_r64[3:0] + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0] = 0x0₆₄
%sf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][63:63] = 0x1₁
%of: (%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[63:63] = 0x1₁) ∧ !(%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:63] = 0x1₁)

Register        -> %rbx
  translates to => %rbx
Value is               -> ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0]
  after renaming it is => (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0]

Final state
%rbx/%rbx: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0]

%cf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[64:64] = 0x1₁
%pf: !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[7:7] = 0x1₁)
%af: (0xf₅ + 0x0₁ ∘ %rbx_decq_r64[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:63] = 0x1₁
%of: (true ↔ %rbx_decq_r64[63:63] = 0x1₁) ∧ !(true ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:63] = 0x1₁)

=====================================
=====================================
Computing circuit for decq %rbx

.target:
movq $0xffffffffffffffff, %rax
addq %rax, %rbx
retq 

Initial state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]

%pf: %pf_blsmskl_r32_r32
%af: %af_blsmskl_r32_r32
%zf: %zf_blsmskl_r32_r32
%sf: %sf_blsmskl_r32_r32
%of: %of_blsmskl_r32_r32

State for specgen instruction: decq %rbx:
%rbx/%rbx: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0]

%pf: !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[7:7] = 0x1₁)
%af: (0xf₅ + 0x0₁ ∘ %rbx_decq_r64[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:63] = 0x1₁
%of: (true ↔ %rbx_decq_r64[63:63] = 0x1₁) ∧ !(true ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:63] = 0x1₁)

Register        -> %rbx
  translates to => %rbx
Value is               -> (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0]
  after renaming it is => (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[63:0]

Final state
%rbx/%rbx: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[63:0]

%pf: !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[0:0] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[1:1] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[2:2] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[3:3] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[4:4] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[5:5] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[6:6] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[7:7] = 0x1₁)
%af: (0xf₅ + 0x0₁ ∘ %rcx_blsmskl_r32_r32[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[63:63] = 0x1₁
%of: false ∧ !(true ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[63:63] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for callq .move_byte_5_of_rbx_to_r9b

Final state:
%rax/%rax: %rax_blsmskl_r32_r32
%rdx/%rdx: %rdx_blsmskl_r32_r32

%xmm0: %ymm0_blsmskl_r32_r32[127:0]
%xmm1: %ymm1_blsmskl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xorl_r32_r32
%rbx/%rbx: %rbx_xorl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_xorl_r32_r32
%rdx/%rdx: %rdx_xorl_r32_r32

%xmm0: %ymm0_xorl_r32_r32[127:0]
%xmm1: %ymm1_xorl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xorl %ecx, %ebx

.target:
xchgl %ebx, %ecx
xorq %rcx, %rbx
callq .set_szp_for_ebx
retq 

Initial state:
%rbx/%rbx: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[63:0]

%cf: %cf_blsmskl_r32_r32
%pf: !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[0:0] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[1:1] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[2:2] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[3:3] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[4:4] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[5:5] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[6:6] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[7:7] = 0x1₁)
%zf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[63:63] = 0x1₁
%of: false ∧ !(true ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[63:63] = 0x1₁)

State for specgen instruction: xorl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[31:0]

%cf: false
%pf: !((%rcx_blsmskl_r32_r32[0:0] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[0:0]) = 0x1₁ ⊕ (%rcx_blsmskl_r32_r32[1:1] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[1:1]) = 0x1₁ ⊕ (%rcx_blsmskl_r32_r32[2:2] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[2:2]) = 0x1₁ ⊕ (%rcx_blsmskl_r32_r32[3:3] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[3:3]) = 0x1₁ ⊕ (%rcx_blsmskl_r32_r32[4:4] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[4:4]) = 0x1₁ ⊕ (%rcx_blsmskl_r32_r32[5:5] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[5:5]) = 0x1₁ ⊕ (%rcx_blsmskl_r32_r32[6:6] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[6:6]) = 0x1₁ ⊕ (%rcx_blsmskl_r32_r32[7:7] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[7:7]) = 0x1₁)
%zf: (%rcx_blsmskl_r32_r32[31:0] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[31:0]) = 0x0₃₂
%sf: (%rcx_blsmskl_r32_r32[31:31] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[31:31]) = 0x1₁
%of: false

=====================================
-------------------------------------
Getting base circuit for movq $0x8, %rbx

Final state:
%rbx/%rbx: 0x8₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ebx_r10w_r11w

Final state:
%rax/%rax: %rax_movzbl_r32_r8
%rdx/%rdx: %rdx_movzbl_r32_r8

%xmm0: %ymm0_movzbl_r32_r8[127:0]
%xmm1: %ymm1_movzbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_addw_r16_r16

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %bx

Final state:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_addw_r16_r16
%rdx/%rdx: %rdx_addw_r16_r16

%xmm0: %ymm0_addw_r16_r16[127:0]
%xmm1: %ymm1_addw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for addw %bx, %r10w

.target:
clc 
adcw %cx, %bx
callq .set_szp_for_bx
retq 

Initial state:
%r10/%r10w: %r10_movzbl_r32_r8[63:16] ∘ 0x8₆₄[31:0][15:0]

%cf: %cf_movzbl_r32_r8
%pf: %pf_movzbl_r32_r8
%af: %af_movzbl_r32_r8
%zf: %zf_movzbl_r32_r8
%sf: %sf_movzbl_r32_r8
%of: %of_movzbl_r32_r8

State for specgen instruction: addw %cx, %bx:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %r10w
Value is               -> (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0]
  after renaming it is => 0x10₁₆

Final state
%r10/%r10w: (%r10_movzbl_r32_r8[63:16] ∘ 0x8₆₄[31:0][15:0])[63:16] ∘ 0x10₁₆

%cf: false
%pf: false
%af: true
%zf: false
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .read_pf_into_rbx

Final state:
%rax/%rax: %rax_movzbl_r32_r8
%rdx/%rdx: %rdx_movzbl_r32_r8

%xmm0: %ymm0_movzbl_r32_r8[127:0]
%xmm1: %ymm1_movzbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcb %cl, %bl

Final state:
%rbx/%bl: (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[63:8] ∘ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_movzbl_r32_r8[7:0][3:0] + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:7] = 0x1₁
%of: (%rcx_movzbl_r32_r8[7:0][7:7] = 0x1₁ ↔ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ∧ !(%rcx_movzbl_r32_r8[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for movzbl %bl, %eax

.target:
movq $0x8, %rbx
callq .move_032_016_ebx_r10w_r11w
addw %bx, %r10w
callq .read_pf_into_rbx
adcb %cl, %bl
retq 

Initial state:
%rax/%rax: %rax_rclb_r8_one

State for specgen instruction: movzbl %cl, %ebx:
%rbx/%rbx: (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[63:8] ∘ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0]

Register        -> %rbx
  translates to => %rax
Value is               -> (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[63:8] ∘ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0]
  after renaming it is => 0x0₅₆ ∘ %rbx_rclb_r8_one[7:0]

Final state
%rax/%rax: 0x0₅₆ ∘ %rbx_rclb_r8_one[7:0]

=====================================
-------------------------------------
Getting base circuit for movq %rax, %rbx

Final state:
%rbx/%rbx: 0x0₅₆ ∘ %rbx_rclb_r8_one[7:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcb %bl, %bl

Final state:
%rbx/%bl: (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[63:8] ∘ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0]

%cf: ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[8:8] = 0x1₁
%pf: !(((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0] = 0x0₈
%sf: ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:7] = 0x1₁
%of: ((0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][7:7] = 0x1₁) ∧ !((0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][7:7] = 0x1₁ ↔ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for rclb $0x1, %r9b

.target:
movzbl %bl, %eax
movq %rax, %rbx
adcb %bl, %bl
retq 

Initial state:
%r9/%r9b: %r9_blsmskl_r32_r32[63:8] ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[63:0][47:40]

%cf: false
%of: false

State for specgen instruction: rclb $0x1, %bl:
%rbx/%bl: (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[63:8] ∘ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0]

%cf: ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[8:8] = 0x1₁
%of: ((0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][7:7] = 0x1₁) ∧ !((0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][7:7] = 0x1₁ ↔ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %r9b
Value is               -> ((0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[63:8] ∘ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0])[7:0]
  after renaming it is => (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40])[7:0]

Final state
%r9/%r9b: (%r9_blsmskl_r32_r32[63:8] ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[63:0][47:40])[63:8] ∘ (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40])[7:0]

%cf: (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40])[8:8] = 0x1₁
%of: ((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:47] = 0x1₁ ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:47] = 0x1₁) ∧ !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:47] = 0x1₁ ↔ (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40])[7:7] = 0x1₁)

=====================================
=====================================
Computing circuit for blsmskl %ecx, %ebx

.target:
movl %ecx, %ebx
decq %rbx
callq .move_byte_5_of_rbx_to_r9b
xorl %ecx, %ebx
rclb $0x1, %r9b
retq 

Initial state:
%rbx/%rbx: %rbx

%cf: %cf
%zf: %zf
%sf: %sf
%of: %of

State for specgen instruction: blsmskl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[31:0]

%cf: (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40])[8:8] = 0x1₁
%zf: (%rcx_blsmskl_r32_r32[31:0] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[31:0]) = 0x0₃₂
%sf: (%rcx_blsmskl_r32_r32[31:31] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[31:31]) = 0x1₁
%of: ((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:47] = 0x1₁ ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:47] = 0x1₁) ∧ !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:47] = 0x1₁ ↔ (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[47:40])[7:7] = 0x1₁)

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_blsmskl_r32_r32[31:0]))[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx[31:0] ⊕ 0x0₃₂ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ %rcx[31:0] ⊕ 0x0₃₂ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]

%cf: (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[47:40])[8:8] = 0x1₁
%zf: (%rcx[31:0] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) = 0x0₃₂
%sf: (%rcx[31:31] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:31]) = 0x1₁
%of: ((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[47:47] = 0x1₁ ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[47:47] = 0x1₁) ∧ !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[47:47] = 0x1₁ ↔ (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[47:40])[7:7] = 0x1₁)

=====================================
Circuits:

%rbx   : 0x0₃₂ ∘ %rcx[31:0] ⊕ 0x0₃₂ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]

%cf    : (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[47:40])[8:8] = 0x1₁
%zf    : (%rcx[31:0] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:0]) = 0x0₃₂
%sf    : (%rcx[31:31] ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[31:31]) = 0x1₁
%of    : ((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[47:47] = 0x1₁ ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[47:47] = 0x1₁) ∧ !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[47:47] = 0x1₁ ↔ (0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[47:40] + 0x0₁ ∘ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ (0x0₃₂ ∘ %rcx[31:0]))[47:40])[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/