// Autogenerated using stratification.
requires "x86-configuration.k"

module BSWAP-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (bswap R1:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(concatenateMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 40, 48), extractMInt(getParentValue(R1, RSMap), 32, 40)))), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 24, 32), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 16, 24), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 8, 16), extractMInt(getParentValue(R1, RSMap), 0, 8))))) )


)

    </regstate>
endmodule

module BSWAP-R64-SEMANTICS
  imports BSWAP-R64
endmodule
/*
TargetInstr:
bswap %rbx
RWSet:
maybe read:{ %rbx }
must read:{ %rbx }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .move_064_032_rbx_r8d_r9d  #  1     0     5      OPC=callq_label
circuit:xchgl %r8d, %r9d                 #  2     0x5   3      OPC=xchgl_r32_r32
circuit:bswap %r9d                       #  3     0x8   3      OPC=bswap_r32
circuit:xorb %bh, %bh                    #  4     0xb   2      OPC=xorb_rh_rh
circuit:cmovew %r8w, %r8w                #  5     0xd   5      OPC=cmovew_r16_r16
circuit:bswap %r8d                       #  6     0x12  3      OPC=bswap_r32
circuit:callq .move_032_064_r8d_r9d_rbx  #  7     0x15  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

bswap %rbx

  maybe read:      { %rbx }
  must read:       { %rbx }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : %rbx[7:0] ∘ %rbx[15:8] ∘ (%rbx[23:16] ∘ %rbx[31:24]) ∘ (%rbx[39:32] ∘ %rbx[47:40] ∘ (%rbx[55:48] ∘ %rbx[63:56]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/