// Autogenerated using stratification.
requires "x86-configuration.k"

module CLTQ
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cltq  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "RAX" |-> (mi(64, svalueMInt(extractMInt(getParentValue(%rax, RSMap), 32, 64))) )


)

    </regstate>
endmodule

module CLTQ-SEMANTICS
  imports CLTQ
endmodule
/*
TargetInstr:
cltq
RWSet:
maybe read:{ %eax }
must read:{ %eax }
maybe write:{ %rax }
must write:{ %rax }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:xorq %rsi, %rsi    #  1     0    3      OPC=xorq_r64_r64
circuit:movslq %esi, %r9   #  2     0x3  3      OPC=movslq_r64_r32
circuit:adcl %r9d, %eax    #  3     0x6  3      OPC=adcl_r32_r32
circuit:movslq %eax, %rax  #  4     0x9  3      OPC=movslq_r64_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cltq 

  maybe read:      { %eax }
  must read:       { %eax }
  maybe write:     { %rax }
  must write:      { %rax }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : sign-extend-64(%rax[31:0])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/