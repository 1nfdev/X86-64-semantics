// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVAEQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovaeq R1:R64, R2:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(getParentValue(R1, RSMap), 48, 64)))), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17))), 0, 1))), 1, 17), mi(16, 0)) ) #then ( getParentValue(R1, RSMap) ) #else ( getParentValue(R2, RSMap) ) #fi)  )


)

    </regstate>
endmodule

module CMOVAEQ-R64-R64-SEMANTICS
  imports CMOVAEQ-R64-R64
endmodule
/*
TargetInstr:
cmovaeq %rcx, %rbx
RWSet:
maybe read:{ %rcx %cf }
must read:{ %rcx %cf }
maybe write:{ %rbx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:vmovd %ecx, %xmm1                         #  1     0     4      OPC=vmovd_xmm_r32
circuit:callq .move_128_032_xmm1_eax_edx_r8d_r9d  #  2     0x4   5      OPC=callq_label
circuit:sbbw %cx, %ax                             #  3     0x9   3      OPC=sbbw_r16_r16
circuit:cmoveq %rcx, %rbx                         #  4     0xc   4      OPC=cmoveq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovaeq %rcx, %rbx

  maybe read:      { %rcx %cf }
  must read:       { %rcx %cf }
  maybe write:     { %rbx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

Circuits:

%rbx   : ((((%cf ? 0x0₉ : 0xff₉) + (%cf ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ %rcx[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx[15:0]) + 0x0₁ ∘ (%rcx[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆ ? %rcx : %rbx

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/