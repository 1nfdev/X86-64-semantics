// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVBEL-R32-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovbel R1:R32, R2:R32,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ((#ifMInt (eqMInt(concatenateMInt(mi(7, 0), getFlag("CF", RSMap)), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(getParentValue(R2, RSMap), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64)) ) #fi) ) #else ( concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64)) ) #fi)  )


)

    </regstate>
endmodule

module CMOVBEL-R32-R32-SEMANTICS
  imports CMOVBEL-R32-R32
endmodule
/*
TargetInstr:
cmovbel %ecx, %ebx
RWSet:
maybe read:{ %ecx %cf %zf }
must read:{ %ecx %cf %zf }
maybe write:{ %rbx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:cmovnal %ecx, %ebx  #  1     0    3      OPC=cmovnal_r32_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovbel %ecx, %ebx

  maybe read:      { %ecx %cf %zf }
  must read:       { %ecx %cf %zf }
  maybe write:     { %rbx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

Circuits:

%rbx   : 0x0₃₂ ∘ ((%cf ? 0x1₈ : 0x0₈) = 0x0₈ ? %zf ? %rcx[31:0] : %rbx[31:0] : %rcx[31:0])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/