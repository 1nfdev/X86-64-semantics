// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVGEW-R16-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovgew R1:R16, R2:R16,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ((#ifMInt (eqMInt(concatenateMInt(mi(56, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), getFlag("SF", RSMap)), concatenateMInt(mi(7, 0), getFlag("OF", RSMap))), mi(8, 1))), mi(64, 0)) ) #then ( getParentValue(R2, RSMap) ) #else ( concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), extractMInt(getParentValue(R1, RSMap), 48, 64)) ) #fi)  )


)

    </regstate>
endmodule

module CMOVGEW-R16-R16-SEMANTICS
  imports CMOVGEW-R16-R16
endmodule
/*
TargetInstr:
cmovgew %cx, %bx
RWSet:
maybe read:{ %cx %sf %of }
must read:{ %cx %sf %of }
maybe write:{ %bx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:setge %bpl         #  1     0     4      OPC=setge_r8
circuit:movzbl %bpl, %r8d  #  2     0x4   4      OPC=movzbl_r32_r8
circuit:popcntq %r8, %rax  #  3     0x8   5      OPC=popcntq_r64_r64
circuit:cmovnew %cx, %bx   #  4     0xd   4      OPC=cmovnew_r16_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovgew %cx, %bx

  maybe read:      { %cx %sf %of }
  must read:       { %cx %sf %of }
  maybe write:     { %bx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

-------------------------------------
Getting base circuit for callq .set_cf

Final state:
%rax/%rax: %rax_setge_r8
%rdx/%rdx: %rdx_setge_r8

%xmm0: %ymm0_setge_r8[127:0]
%xmm1: %ymm1_setge_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rcx

Final state:
%rax/%rax: %rax_setnge_rh
%rdx/%rdx: %rdx_setnge_rh

%xmm0: %ymm0_setnge_rh[127:0]
%xmm1: %ymm1_setnge_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_sf_into_rbx

Final state:
%rax/%rax: %rax_setnge_rh
%rdx/%rdx: %rdx_setnge_rh

%xmm0: %ymm0_setnge_rh[127:0]
%xmm1: %ymm1_setnge_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r12

Final state:
%r12/%r12: sign-extend-64(%rbx_xorw_r16_r16[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_sf_into_rbx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rbx, %r12

Final state:
%r12/%r12: sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0])

%cf: false
%pf: !((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][0:0] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][1:1] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][2:2] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][3:3] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][4:4] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][5:5] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][6:6] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][7:7] = 0x1₁)
%zf: (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0])) = 0x0₆₄
%sf: (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movswq %r12w, %rbx

Final state:
%rbx/%rbx: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xorw %bx, %cx

.target:
callq .move_016_008_cx_r8b_r9b
movswq %bx, %r12
callq .move_008_016_r8b_r9b_bx
callq .set_szp_for_bx
callq .read_sf_into_rbx
callq .move_008_016_r8b_r9b_bx
xorq %rbx, %r12
movswq %r12w, %rbx
callq .set_szp_for_bx
retq 

Initial state:
%rcx/%cx: 0x0₆₃ ∘ (%of_setnge_rh ? 0x1₁ : 0x0₁)

%cf: %cf_setnge_rh
%pf: %pf_setnge_rh
%zf: %zf_setnge_rh
%sf: %sf_setnge_rh
%of: %of_setnge_rh

State for specgen instruction: xorw %cx, %bx:
%rbx/%bx: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])

%cf: false
%pf: !(sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][7:7] = 0x1₁)
%zf: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0] = 0x0₁₆
%sf: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][15:15] = 0x1₁
%of: false

Register        -> %bx
  translates to => %cx
Value is               -> sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0]
  after renaming it is => (%of_setnge_rh ? 0x1₁₆ : 0x0₁₆) ⊕ (%sf_setnge_rh ? 0x1₁₆ : 0x0₁₆)

Final state
%rcx/%cx: (0x0₆₃ ∘ (%of_setnge_rh ? 0x1₁ : 0x0₁))[63:16] ∘ ((%of_setnge_rh ? 0x1₁₆ : 0x0₁₆) ⊕ (%sf_setnge_rh ? 0x1₁₆ : 0x0₁₆))

%cf: false
%pf: !(((%of_setnge_rh ? 0x1₁ : 0x0₁) ⊕ (%sf_setnge_rh ? 0x1₁ : 0x0₁)) = 0x1₁ ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false)
%zf: ((%of_setnge_rh ? 0x1₁₆ : 0x0₁₆) ⊕ (%sf_setnge_rh ? 0x1₁₆ : 0x0₁₆)) = 0x0₁₆
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for movslq %ecx, %rdx

Final state:
%rdx/%rdx: sign-extend-64(((0x0₆₃ ∘ (%of_setnge_rh ? 0x1₁ : 0x0₁))[63:16] ∘ ((%of_setnge_rh ? 0x1₁₆ : 0x0₁₆) ⊕ (%sf_setnge_rh ? 0x1₁₆ : 0x0₁₆)))[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for movb %dl, %ah

Final state:
%rax/%ah: %rax_setnge_rh[63:16] ∘ sign-extend-64(((0x0₆₃ ∘ (%of_setnge_rh ? 0x1₁ : 0x0₁))[63:16] ∘ ((%of_setnge_rh ? 0x1₁₆ : 0x0₁₆) ⊕ (%sf_setnge_rh ? 0x1₁₆ : 0x0₁₆)))[31:0])[7:0] ∘ %rax_setnge_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setnge %dh

.target:
callq .read_of_into_rcx
callq .read_sf_into_rbx
xorw %bx, %cx
movslq %ecx, %rdx
movb %dl, %ah
retq 

Initial state:
%rdx/%dh: %rdx_setge_r8

State for specgen instruction: setnge %ah:
%rax/%ah: %rax_setnge_rh[63:16] ∘ sign-extend-64(((0x0₆₃ ∘ (%of_setnge_rh ? 0x1₁ : 0x0₁))[63:16] ∘ ((%of_setnge_rh ? 0x1₁₆ : 0x0₁₆) ⊕ (%sf_setnge_rh ? 0x1₁₆ : 0x0₁₆)))[31:0])[7:0] ∘ %rax_setnge_rh[7:0]

Register        -> %ah
  translates to => %dh
Value is               -> (%rax_setnge_rh[63:16] ∘ sign-extend-64(((0x0₆₃ ∘ (%of_setnge_rh ? 0x1₁ : 0x0₁))[63:16] ∘ ((%of_setnge_rh ? 0x1₁₆ : 0x0₁₆) ⊕ (%sf_setnge_rh ? 0x1₁₆ : 0x0₁₆)))[31:0])[7:0] ∘ %rax_setnge_rh[7:0])[15:8]
  after renaming it is => (%of_setge_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setge_r8 ? 0x1₈ : 0x0₈)

Final state
%rdx/%dh: %rdx_setge_r8[63:16] ∘ ((%of_setge_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setge_r8 ? 0x1₈ : 0x0₈)) ∘ %rdx_setge_r8[7:0]

=====================================
-------------------------------------
Getting base circuit for callq .read_cf_into_rcx

Final state:
%rax/%rax: %rax_setb_r8
%rdx/%rdx: %rdx_setb_r8

%xmm0: %ymm0_setb_r8[127:0]
%xmm1: %ymm1_setb_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %rbx

Final state:
%rbx/%rbx: sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for orq %rcx, %rbx

Final state:
%rbx/%rbx: sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁)

%cf: false
%pf: !((sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁)
%zf: (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁)) = 0x0₆₄
%sf: (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[63:63] = 0x1₁
%of: false

-------------------------------------
=====================================
Computing circuit for setb %bl

.target:
callq .read_cf_into_rcx
movsbq %cl, %rbx
orq %rcx, %rbx
retq 

Initial state:
%rbx/%bl: %rbx_setge_r8

State for specgen instruction: setb %bl:
%rbx/%bl: sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁)

Register        -> %bl
  translates to => %bl
Value is               -> (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]
  after renaming it is => 0x1₈

Final state
%rbx/%bl: %rbx_setge_r8[63:8] ∘ 0x1₈

=====================================
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %ebp

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rbp/%rbp: %rbp_xorb_r8_rh

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rbp
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

Final state
%rbp/%rbp: 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

=====================================
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh

%cf: false
%pf: !((%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][0:0] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][1:1] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][2:2] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][3:3] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][4:4] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][5:5] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][6:6] = 0x1₁ ⊕ (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[7:0][7:7] = 0x1₁)
%zf: (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh) = 0x0₆₄
%sf: (%rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rcx

Final state:
%rax/%rax: %rax_setc_rh
%rdx/%rdx: %rdx_setc_rh

%xmm0: %ymm0_setc_rh[127:0]
%xmm1: %ymm1_setc_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %cl, %ah

Final state:
%rax/%ah: %rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setc %bh

.target:
callq .read_cf_into_rcx
movb %cl, %ah
retq 

Initial state:
%rbx/%bh: %rbx_xorb_r8_rh

State for specgen instruction: setc %ah:
%rax/%ah: %rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0]

Register        -> %ah
  translates to => %bh
Value is               -> (%rax_setc_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setc_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setc_rh[7:0])[15:8]
  after renaming it is => 0x0₈

Final state
%rbx/%bh: %rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %rdx

Final state:
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rbp, %rdx

Final state:
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

%cf: false
%pf: !((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][0:0] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][1:1] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][2:2] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][3:3] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][4:4] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][5:5] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][6:6] = 0x1₁ ⊕ (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[7:0][7:7] = 0x1₁)
%zf: (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]) = 0x0₆₄
%sf: (sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movslq %edx, %rbx

Final state:
%rbx/%rbx: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: %rax_xorb_r8_rh ⊕ %rax_xorb_r8_rh
%rdx/%rdx: sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8]

%xmm0: %ymm0_xorb_r8_rh[127:0]
%xmm1: %ymm1_xorb_r8_rh[127:0]

-------------------------------------
=====================================
Computing circuit for xorb %dh, %bl

.target:
movzbl %ah, %ebp
xorq %rax, %rax
setc %bh
movswq %bx, %rdx
xorq %rbp, %rdx
movslq %edx, %rbx
callq .set_szp_for_bl
retq 

Initial state:
%rbx/%bl: %rbx_setge_r8[63:8] ∘ 0x1₈

%cf: true
%pf: %pf_setge_r8
%zf: %zf_setge_r8
%sf: %sf_setge_r8
%of: %of_setge_r8

State for specgen instruction: xorb %ah, %bl:
%rbx/%bl: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])

%cf: false
%pf: !(sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][0:0] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][1:1] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][2:2] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][3:3] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][4:4] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][5:5] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][6:6] = 0x1₁ ⊕ sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:0][7:7] = 0x1₁)
%zf: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0] = 0x0₈
%sf: sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0][7:7] = 0x1₁
%of: false

Register        -> %bl
  translates to => %bl
Value is               -> sign-extend-64((sign-extend-64((%rbx_xorb_r8_rh[63:16] ∘ 0x0₈ ∘ %rbx_xorb_r8_rh[7:0])[15:0]) ⊕ 0x0₅₆ ∘ %rax_xorb_r8_rh[15:8])[31:0])[7:0]
  after renaming it is => 0x1₈ ⊕ ((%of_setge_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setge_r8 ? 0x1₈ : 0x0₈))

Final state
%rbx/%bl: (%rbx_setge_r8[63:8] ∘ 0x1₈)[63:8] ∘ (0x1₈ ⊕ ((%of_setge_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setge_r8 ? 0x1₈ : 0x0₈)))

%cf: false
%pf: !((0x1₁ ⊕ ((%of_setge_r8 ? 0x1₁ : 0x0₁) ⊕ (%sf_setge_r8 ? 0x1₁ : 0x0₁))) = 0x1₁ ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false)
%zf: (0x1₈ ⊕ ((%of_setge_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setge_r8 ? 0x1₈ : 0x0₈))) = 0x0₈
%sf: false
%of: false

=====================================
=====================================
Computing circuit for setge %bpl

.target:
callq .set_cf
setnge %dh
setb %bl
xorb %dh, %bl
retq 

Initial state:
%rbp/%bpl: %rbp_cmovgew_r16_r16

State for specgen instruction: setge %bl:
%rbx/%bl: (%rbx_setge_r8[63:8] ∘ 0x1₈)[63:8] ∘ (0x1₈ ⊕ ((%of_setge_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setge_r8 ? 0x1₈ : 0x0₈)))

Register        -> %bl
  translates to => %bpl
Value is               -> ((%rbx_setge_r8[63:8] ∘ 0x1₈)[63:8] ∘ (0x1₈ ⊕ ((%of_setge_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setge_r8 ? 0x1₈ : 0x0₈))))[7:0]
  after renaming it is => 0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))

Final state
%rbp/%bpl: %rbp_cmovgew_r16_r16[63:8] ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈)))

=====================================
-------------------------------------
Getting base circuit for movq $0x8, %rbx

Final state:
%rbx/%rbx: 0x8₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ebx_r10w_r11w

Final state:
%rax/%rax: %rax_movzbl_r32_r8
%rdx/%rdx: %rdx_movzbl_r32_r8

%xmm0: %ymm0_movzbl_r32_r8[127:0]
%xmm1: %ymm1_movzbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_addw_r16_r16

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %bx

Final state:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_addw_r16_r16
%rdx/%rdx: %rdx_addw_r16_r16

%xmm0: %ymm0_addw_r16_r16[127:0]
%xmm1: %ymm1_addw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for addw %bx, %r10w

.target:
clc 
adcw %cx, %bx
callq .set_szp_for_bx
retq 

Initial state:
%r10/%r10w: %r10_movzbl_r32_r8[63:16] ∘ 0x8₆₄[31:0][15:0]

%cf: %cf_movzbl_r32_r8
%pf: %pf_movzbl_r32_r8
%af: %af_movzbl_r32_r8
%zf: %zf_movzbl_r32_r8
%sf: %sf_movzbl_r32_r8
%of: %of_movzbl_r32_r8

State for specgen instruction: addw %cx, %bx:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %r10w
Value is               -> (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0]
  after renaming it is => 0x10₁₆

Final state
%r10/%r10w: (%r10_movzbl_r32_r8[63:16] ∘ 0x8₆₄[31:0][15:0])[63:16] ∘ 0x10₁₆

%cf: false
%pf: false
%af: true
%zf: false
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .read_pf_into_rbx

Final state:
%rax/%rax: %rax_movzbl_r32_r8
%rdx/%rdx: %rdx_movzbl_r32_r8

%xmm0: %ymm0_movzbl_r32_r8[127:0]
%xmm1: %ymm1_movzbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcb %cl, %bl

Final state:
%rbx/%bl: (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[63:8] ∘ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_movzbl_r32_r8[7:0][3:0] + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:7] = 0x1₁
%of: (%rcx_movzbl_r32_r8[7:0][7:7] = 0x1₁ ↔ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ∧ !(%rcx_movzbl_r32_r8[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for movzbl %bpl, %r8d

.target:
movq $0x8, %rbx
callq .move_032_016_ebx_r10w_r11w
addw %bx, %r10w
callq .read_pf_into_rbx
adcb %cl, %bl
retq 

Initial state:
%r8/%r8: %r8_cmovgew_r16_r16

State for specgen instruction: movzbl %cl, %ebx:
%rbx/%rbx: (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[63:8] ∘ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0]

Register        -> %rbx
  translates to => %r8
Value is               -> (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[63:8] ∘ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0]
  after renaming it is => 0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈)))

Final state
%r8/%r8: 0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈)))

=====================================
-------------------------------------
Getting base circuit for popcntq %r8, %rax

Final state:
%rax/%rax: 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))))[31:0][15:0][7:0][3:0][1:0][0:0])))))

%cf: false
%pf: false
%af: false
%zf: 0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))) = 0x0₆₄
%sf: false
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_decw_r16 ⊕ %rax_decw_r16

%cf: false
%pf: !((%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][0:0] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][1:1] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][2:2] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][3:3] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][4:4] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][5:5] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][6:6] = 0x1₁ ⊕ (%rax_decw_r16 ⊕ %rax_decw_r16)[7:0][7:7] = 0x1₁)
%zf: (%rax_decw_r16 ⊕ %rax_decw_r16) = 0x0₆₄
%sf: (%rax_decw_r16 ⊕ %rax_decw_r16)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %rsi

Final state:
%rsi/%rsi: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_bx_r10b_r11b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r10b_r11b_cx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xchgw %ax, %bx

.target:
callq .move_016_008_bx_r10b_r11b
callq .move_016_008_cx_r8b_r9b
callq .move_008_016_r10b_r11b_cx
callq .move_008_016_r8b_r9b_bx
retq 

Initial state:
%rax/%ax: %rax_decw_r16 ⊕ %rax_decw_r16
%rbx/%bx: %rbx_decw_r16

State for specgen instruction: xchgw %cx, %bx:
%rcx/%cx: %rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])
%rbx/%bx: %rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])

Register        -> %cx
  translates to => %ax
Value is               -> (%rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rbx_decw_r16[15:0]

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => 0x0₁₆

Final state
%rax/%ax: (%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0]
%rbx/%bx: %rbx_decw_r16[63:16] ∘ 0x0₁₆

=====================================
-------------------------------------
Getting base circuit for callq .read_cf_into_rbx

Final state:
%rax/%rax: (%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0]
%rdx/%rdx: %rdx_decw_r16

%xmm0: %ymm0_decw_r16[127:0]
%xmm1: %ymm1_decw_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcw %bx, %ax

Final state:
%rax/%ax: ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[63:16] ∘ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][3:0] + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: ((0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][15:15] = 0x1₁ ↔ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0][15:15] = 0x1₁) ∧ !((0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_addw_r16_r16

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %bx

Final state:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_addw_r16_r16
%rdx/%rdx: %rdx_addw_r16_r16

%xmm0: %ymm0_addw_r16_r16[127:0]
%xmm1: %ymm1_addw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for addw %ax, %si

.target:
clc 
adcw %cx, %bx
callq .set_szp_for_bx
retq 

Initial state:
%rsi/%si: 0xffffffffffffffff₆₄

%cf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][3:0] + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: ((0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][15:15] = 0x1₁ ↔ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0][15:15] = 0x1₁) ∧ !((0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0] + 0x1₁₇ : 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[15:0]) + 0x0₁ ∘ ((%rax_decw_r16 ⊕ %rax_decw_r16)[63:16] ∘ %rbx_decw_r16[15:0])[15:0])[15:15] = 0x1₁)

State for specgen instruction: addw %cx, %bx:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %si
Value is               -> (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0]
  after renaming it is => (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0]

Final state
%rsi/%si: 0xffffffffffffffff₆₄[63:16] ∘ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0]

%cf: (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[16:16] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_decw_r16[3:0] + 0xf₅)[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:15] = 0x1₁
%of: (%rbx_decw_r16[15:15] = 0x1₁ ↔ true) ∧ !(%rbx_decw_r16[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:15] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movswq %si, %rbx

Final state:
%rbx/%rbx: sign-extend-64((0xffffffffffffffff₆₄[63:16] ∘ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0])[15:0])

-------------------------------------
=====================================
Computing circuit for decw %bx

.target:
xorq %rax, %rax
movq $0xffffffffffffffff, %rsi
xchgw %ax, %bx
callq .read_cf_into_rbx
adcw %bx, %ax
addw %ax, %si
movswq %si, %rbx
retq 

Initial state:
%rbx/%bx: 0x0₆₄

%pf: %pf_movzwq_r64_r16
%af: %af_movzwq_r64_r16
%zf: %zf_movzwq_r64_r16
%sf: %sf_movzwq_r64_r16
%of: %of_movzwq_r64_r16

State for specgen instruction: decw %bx:
%rbx/%bx: sign-extend-64((0xffffffffffffffff₆₄[63:16] ∘ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0])[15:0])

%pf: !((0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_decw_r16[3:0] + 0xf₅)[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:15] = 0x1₁
%of: (%rbx_decw_r16[15:15] = 0x1₁ ↔ true) ∧ !(%rbx_decw_r16[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:15] = 0x1₁)

Register        -> %bx
  translates to => %bx
Value is               -> sign-extend-64((0xffffffffffffffff₆₄[63:16] ∘ (0x0₁ ∘ %rbx_decw_r16[15:0] + 0xffff₁₇)[15:0])[15:0])[15:0]
  after renaming it is => 0xffff₁₆

Final state
%rbx/%bx: 0x0₆₄[63:16] ∘ 0xffff₁₆

%pf: true
%af: false
%zf: false
%sf: true
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .move_016_008_bx_r10b_r11b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r10b_r11b_cx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xchgw %cx, %bx

.target:
callq .move_016_008_bx_r10b_r11b
callq .move_016_008_cx_r8b_r9b
callq .move_008_016_r10b_r11b_cx
callq .move_008_016_r8b_r9b_bx
retq 

Initial state:
%rcx/%cx: %rcx_xaddw_r16_r16
%rbx/%bx: %rbx_xaddw_r16_r16

State for specgen instruction: xchgw %cx, %bx:
%rcx/%cx: %rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])
%rbx/%bx: %rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])

Register        -> %cx
  translates to => %cx
Value is               -> (%rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rbx_xaddw_r16_r16[15:0]

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rcx_xaddw_r16_r16[15:0]

Final state
%rcx/%cx: %rcx_xaddw_r16_r16[63:16] ∘ %rbx_xaddw_r16_r16[15:0]
%rbx/%bx: %rbx_xaddw_r16_r16[63:16] ∘ %rcx_xaddw_r16_r16[15:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_addw_r16_r16

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %bx

Final state:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_addw_r16_r16
%rdx/%rdx: %rdx_addw_r16_r16

%xmm0: %ymm0_addw_r16_r16[127:0]
%xmm1: %ymm1_addw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for addw %cx, %bx

.target:
clc 
adcw %cx, %bx
callq .set_szp_for_bx
retq 

Initial state:
%rbx/%bx: %rbx_xaddw_r16_r16[63:16] ∘ %rcx_xaddw_r16_r16[15:0]

%cf: %cf_xaddw_r16_r16
%pf: %pf_xaddw_r16_r16
%af: %af_xaddw_r16_r16
%zf: %zf_xaddw_r16_r16
%sf: %sf_xaddw_r16_r16
%of: %of_xaddw_r16_r16

State for specgen instruction: addw %cx, %bx:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0]
  after renaming it is => (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0]

Final state
%rbx/%bx: (%rbx_xaddw_r16_r16[63:16] ∘ %rcx_xaddw_r16_r16[15:0])[63:16] ∘ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0]

%cf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_xaddw_r16_r16[3:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:15] = 0x1₁
%of: (%rbx_xaddw_r16_r16[15:15] = 0x1₁ ↔ %rcx_xaddw_r16_r16[15:15] = 0x1₁) ∧ !(%rbx_xaddw_r16_r16[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:15] = 0x1₁)

=====================================
=====================================
Computing circuit for xaddw %bx, %cx

.target:
xchgw %cx, %bx
addw %cx, %bx
retq 

Initial state:
%rcx/%cx: %rcx_movzwq_r64_r16
%rbx/%bx: 0x0₆₄[63:16] ∘ 0xffff₁₆

%cf: %cf_movzwq_r64_r16
%pf: true
%af: false
%zf: false
%sf: true
%of: false

State for specgen instruction: xaddw %cx, %bx:
%rcx/%cx: %rcx_xaddw_r16_r16[63:16] ∘ %rbx_xaddw_r16_r16[15:0]
%rbx/%bx: (%rbx_xaddw_r16_r16[63:16] ∘ %rcx_xaddw_r16_r16[15:0])[63:16] ∘ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0]

%cf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_xaddw_r16_r16[3:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:15] = 0x1₁
%of: (%rbx_xaddw_r16_r16[15:15] = 0x1₁ ↔ %rcx_xaddw_r16_r16[15:15] = 0x1₁) ∧ !(%rbx_xaddw_r16_r16[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:15] = 0x1₁)

Final state
%rcx/%cx: %rcx_movzwq_r64_r16[63:16] ∘ (0x0₁ ∘ %rcx_movzwq_r64_r16[15:0] + 0xffff₁₇)[15:0]
%rbx/%bx: (0x0₆₄[63:16] ∘ 0xffff₁₆)[63:16] ∘ %rcx_movzwq_r64_r16[15:0]

%cf: (0x0₁ ∘ %rcx_movzwq_r64_r16[15:0] + 0xffff₁₇)[16:16] = 0x1₁
%pf: !((0x0₁ ∘ %rcx_movzwq_r64_r16[15:0] + 0xffff₁₇)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_movzwq_r64_r16[15:0] + 0xffff₁₇)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_movzwq_r64_r16[15:0] + 0xffff₁₇)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_movzwq_r64_r16[15:0] + 0xffff₁₇)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_movzwq_r64_r16[15:0] + 0xffff₁₇)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_movzwq_r64_r16[15:0] + 0xffff₁₇)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_movzwq_r64_r16[15:0] + 0xffff₁₇)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rcx_movzwq_r64_r16[15:0] + 0xffff₁₇)[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_movzwq_r64_r16[3:0] + 0xf₅)[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rcx_movzwq_r64_r16[15:0] + 0xffff₁₇)[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rcx_movzwq_r64_r16[15:0] + 0xffff₁₇)[15:15] = 0x1₁
%of: (%rcx_movzwq_r64_r16[15:15] = 0x1₁ ↔ true) ∧ !(%rcx_movzwq_r64_r16[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rcx_movzwq_r64_r16[15:0] + 0xffff₁₇)[15:15] = 0x1₁)

=====================================
=====================================
Computing circuit for movzwq %cx, %rsi

.target:
movq $0x0, %rbx
decw %bx
xaddw %bx, %cx
retq 

Initial state:
%rsi/%rsi: %rsi_cmovnew_r16_r16

State for specgen instruction: movzwq %cx, %rbx:
%rbx/%rbx: (0x0₆₄[63:16] ∘ 0xffff₁₆)[63:16] ∘ %rcx_movzwq_r64_r16[15:0]

Register        -> %rbx
  translates to => %rsi
Value is               -> (0x0₆₄[63:16] ∘ 0xffff₁₆)[63:16] ∘ %rcx_movzwq_r64_r16[15:0]
  after renaming it is => 0x0₄₈ ∘ %rcx_cmovnew_r16_r16[15:0]

Final state
%rsi/%rsi: 0x0₄₈ ∘ %rcx_cmovnew_r16_r16[15:0]

=====================================
-------------------------------------
Getting base circuit for cmoveq %rbx, %rcx

Final state:
%rcx/%rcx: %zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32 : %rcx_cmovnzl_r32_r32

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %ebx, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_movl_r32_r32
%rbx/%rbx: 0x0₆₄

%cf: %cf_movl_r32_r32
%pf: %pf_movl_r32_r32
%af: %af_movl_r32_r32
%zf: %zf_movl_r32_r32
%sf: %sf_movl_r32_r32
%of: %of_movl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

%cf: false
%pf: !(%rcx_movl_r32_r32[0:0] = 0x1₁ ⊕ %rcx_movl_r32_r32[1:1] = 0x1₁ ⊕ %rcx_movl_r32_r32[2:2] = 0x1₁ ⊕ %rcx_movl_r32_r32[3:3] = 0x1₁ ⊕ %rcx_movl_r32_r32[4:4] = 0x1₁ ⊕ %rcx_movl_r32_r32[5:5] = 0x1₁ ⊕ %rcx_movl_r32_r32[6:6] = 0x1₁ ⊕ %rcx_movl_r32_r32[7:7] = 0x1₁)
%af: false
%zf: %rcx_movl_r32_r32[31:0] = 0x0₃₂
%sf: %rcx_movl_r32_r32[31:31] = 0x1₁
%of: (%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ false) ∧ !(%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ %rcx_movl_r32_r32[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for movl %ecx, %ebx

.target:
movq $0x0, %rbx
xaddl %ebx, %ecx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovnzl_r32_r32

State for specgen instruction: movl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ (%zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32[31:0] : %rcx_cmovnzl_r32_r32[31:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ (%zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32[31:0] : %rcx_cmovnzl_r32_r32[31:0])

=====================================
=====================================
Computing circuit for cmovnzl %esi, %ebx

.target:
cmoveq %rbx, %rcx
movl %ecx, %ebx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovnew_r16_r16

State for specgen instruction: cmovnzl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (%zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32[31:0] : %rcx_cmovnzl_r32_r32[31:0])

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ (%zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32[31:0] : %rcx_cmovnzl_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ (%zf_cmovnew_r16_r16 ? %rbx_cmovnew_r16_r16[31:0] : 0x0₁₆ ∘ %rcx_cmovnew_r16_r16[15:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ (%zf_cmovnew_r16_r16 ? %rbx_cmovnew_r16_r16[31:0] : 0x0₁₆ ∘ %rcx_cmovnew_r16_r16[15:0])

=====================================
=====================================
Computing circuit for cmovnew %cx, %bx

.target:
movzwq %cx, %rsi
cmovnzl %esi, %ebx
retq 

Initial state:
%rbx/%bx: %rbx_cmovgew_r16_r16

State for specgen instruction: cmovnew %cx, %bx:
%rbx/%bx: 0x0₃₂ ∘ (%zf_cmovnew_r16_r16 ? %rbx_cmovnew_r16_r16[31:0] : 0x0₁₆ ∘ %rcx_cmovnew_r16_r16[15:0])

Register        -> %bx
  translates to => %bx
Value is               -> (0x0₃₂ ∘ (%zf_cmovnew_r16_r16 ? %rbx_cmovnew_r16_r16[31:0] : 0x0₁₆ ∘ %rcx_cmovnew_r16_r16[15:0]))[15:0]
  after renaming it is => 0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))) = 0x0₆₄ ? %rbx_cmovgew_r16_r16[15:0] : %rcx_cmovgew_r16_r16[15:0]

Final state
%rbx/%bx: %rbx_cmovgew_r16_r16[63:16] ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))) = 0x0₆₄ ? %rbx_cmovgew_r16_r16[15:0] : %rcx_cmovgew_r16_r16[15:0])

=====================================
=====================================
Computing circuit for cmovgew %cx, %bx

.target:
setge %bpl
movzbl %bpl, %r8d
popcntq %r8, %rax
cmovnew %cx, %bx
retq 

Initial state:
%rbx/%bx: %rbx

State for specgen instruction: cmovgew %cx, %bx:
%rbx/%bx: %rbx_cmovgew_r16_r16[63:16] ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))) = 0x0₆₄ ? %rbx_cmovgew_r16_r16[15:0] : %rcx_cmovgew_r16_r16[15:0])

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_cmovgew_r16_r16[63:16] ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of_cmovgew_r16_r16 ? 0x1₈ : 0x0₈) ⊕ (%sf_cmovgew_r16_r16 ? 0x1₈ : 0x0₈))) = 0x0₆₄ ? %rbx_cmovgew_r16_r16[15:0] : %rcx_cmovgew_r16_r16[15:0]))[15:0]
  after renaming it is => 0x0₅₆ ∘ (0x1₈ ⊕ ((%of ? 0x1₈ : 0x0₈) ⊕ (%sf ? 0x1₈ : 0x0₈))) = 0x0₆₄ ? %rbx[15:0] : %rcx[15:0]

Final state
%rbx/%bx: %rbx[63:16] ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of ? 0x1₈ : 0x0₈) ⊕ (%sf ? 0x1₈ : 0x0₈))) = 0x0₆₄ ? %rbx[15:0] : %rcx[15:0])

=====================================
Circuits:

%rbx   : %rbx[63:16] ∘ (0x0₅₆ ∘ (0x1₈ ⊕ ((%of ? 0x1₈ : 0x0₈) ⊕ (%sf ? 0x1₈ : 0x0₈))) = 0x0₆₄ ? %rbx[15:0] : %rcx[15:0])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/