// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVGW-R16-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovgw R1:R16, R2:R16,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ((#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(getFlag("SF", RSMap), getFlag("OF", RSMap)), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), extractMInt(getParentValue(R1, RSMap), 48, 64)) ) #else ( getParentValue(R2, RSMap) ) #fi) ) #else ( getParentValue(R2, RSMap) ) #fi)  )


)

    </regstate>
endmodule

module CMOVGW-R16-R16-SEMANTICS
  imports CMOVGW-R16-R16
endmodule
/*
TargetInstr:
cmovgw %cx, %bx
RWSet:
maybe read:{ %cx %zf %sf %of }
must read:{ %cx %zf %sf %of }
maybe write:{ %bx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:cmovlew %bx, %cx  #  1     0    4      OPC=cmovlew_r16_r16
circuit:xaddw %bx, %cx    #  2     0x4  4      OPC=xaddw_r16_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovgw %cx, %bx

  maybe read:      { %cx %zf %sf %of }
  must read:       { %cx %zf %sf %of }
  maybe write:     { %bx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

Circuits:

%rbx   : %rbx[63:16] ∘ (%zf ? %rbx[15:0] : ((%of ? 0x1₁ : 0x0₁) ⊕ (%sf ? 0x1₁ : 0x0₁)) = 0x1₁ ? %rbx[15:0] : %rcx[15:0])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/