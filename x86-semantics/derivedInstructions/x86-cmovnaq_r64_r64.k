// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVNAQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovnaq R1:R64, R2:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ((#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), getFlag("CF", RSMap)), concatenateMInt(mi(7, 0), getFlag("ZF", RSMap)))), mi(32, 0)) ) #then ( getParentValue(R2, RSMap) ) #else ( getParentValue(R1, RSMap) ) #fi)  )


)

    </regstate>
endmodule

module CMOVNAQ-R64-R64-SEMANTICS
  imports CMOVNAQ-R64-R64
endmodule
/*
TargetInstr:
cmovnaq %rcx, %rbx
RWSet:
maybe read:{ %rcx %cf %zf }
must read:{ %rcx %cf %zf }
maybe write:{ %rbx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:cmovbeq %rcx, %rbx  #  1     0    4      OPC=cmovbeq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovnaq %rcx, %rbx

  maybe read:      { %rcx %cf %zf }
  must read:       { %rcx %cf %zf }
  maybe write:     { %rbx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

-------------------------------------
Getting base circuit for callq .read_zf_into_rbx

Final state:
%rax/%rax: %rax_setnbe_r8
%rdx/%rdx: %rdx_setnbe_r8

%xmm0: %ymm0_setnbe_r8[127:0]
%xmm1: %ymm1_setnbe_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rbx

Final state:
%rax/%rax: %rax_setnae_rh
%rdx/%rdx: %rdx_setnae_rh

%xmm0: %ymm0_setnae_rh[127:0]
%xmm1: %ymm1_setnae_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %bl, %ah

Final state:
%rax/%ah: %rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setnae %bh

.target:
callq .read_cf_into_rbx
movb %bl, %ah
retq 

Initial state:
%rbx/%bh: 0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁)

State for specgen instruction: setnae %ah:
%rax/%ah: %rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0]

Register        -> %ah
  translates to => %bh
Value is               -> (%rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0])[15:8]
  after renaming it is => %cf_setnbe_r8 ? 0x1₈ : 0x0₈

Final state
%rbx/%bh: (0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[63:16] ∘ (%cf_setnbe_r8 ? 0x1₈ : 0x0₈) ∘ (0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[7:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r12d_r13d

Final state:
%rax/%rax: %rax_setnbe_r8
%rdx/%rdx: %rdx_setnbe_r8

%xmm0: %ymm0_setnbe_r8[127:0]
%xmm1: %ymm1_setnbe_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r12d_r13d_rbx

Final state:
%rax/%rax: %rax_setnbe_r8
%rdx/%rdx: %rdx_setnbe_r8

%xmm0: %ymm0_setnbe_r8[127:0]
%xmm1: %ymm1_setnbe_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %r13d, %ebx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rbx/%rbx: (0x0₃₂ ∘ ((0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[63:16] ∘ (%cf_setnbe_r8 ? 0x1₈ : 0x0₈) ∘ (0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[7:0])[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ ((0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[63:16] ∘ (%cf_setnbe_r8 ? 0x1₈ : 0x0₈) ∘ (0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[7:0])[31:0])[31:0][31:0]
%r13/%r13: 0x0₃₂ ∘ ((0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[63:16] ∘ (%cf_setnbe_r8 ? 0x1₈ : 0x0₈) ∘ (0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[7:0])[63:32]

%cf: %cf_setnbe_r8
%pf: %pf_setnbe_r8
%af: %af_setnbe_r8
%zf: %zf_setnbe_r8
%sf: %sf_setnbe_r8
%of: %of_setnbe_r8

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_setnbe_r8 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_setnbe_r8 ? 0x1₈ : 0x0₈))
%r13/%r13: 0x0₃₂ ∘ ((%cf_setnbe_r8 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_setnbe_r8 ? 0x1₈ : 0x0₈))

%cf: false
%pf: !((%zf_setnbe_r8 ? 0x1₁ : 0x0₁) = 0x1₁ ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false)
%af: false
%zf: (%cf_setnbe_r8 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_setnbe_r8 ? 0x1₈ : 0x0₈) = 0x0₃₂
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .read_zf_into_rbx

Final state:
%rax/%rax: %rax_setnbe_r8
%rdx/%rdx: %rdx_setnbe_r8

%xmm0: %ymm0_setnbe_r8[127:0]
%xmm1: %ymm1_setnbe_r8[127:0]

-------------------------------------
=====================================
Computing circuit for setnbe %al

.target:
callq .read_zf_into_rbx
setnae %bh
callq .move_064_032_rbx_r12d_r13d
callq .move_032_064_r12d_r13d_rbx
xaddl %r13d, %ebx
callq .read_zf_into_rbx
retq 

Initial state:
%rax/%al: %rax_cmovbeq_r64_r64

State for specgen instruction: setnbe %bl:
%rbx/%bl: 0x0₆₃ ∘ ((%cf_setnbe_r8 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_setnbe_r8 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₁ : 0x0₁)

Register        -> %bl
  translates to => %al
Value is               -> (0x0₆₃ ∘ ((%cf_setnbe_r8 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_setnbe_r8 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₁ : 0x0₁))[7:0]
  after renaming it is => (%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₈ : 0x0₈

Final state
%rax/%al: %rax_cmovbeq_r64_r64[63:8] ∘ ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₈ : 0x0₈)

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddb_r8_r8
%rdx/%rdx: %rdx_xaddb_r8_r8

%xmm0: %ymm0_xaddb_r8_r8[127:0]
%xmm1: %ymm1_xaddb_r8_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %cl, %r13d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r13/%r13: %r13_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r13
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

Final state
%r13/%r13: 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %bl, %r15d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r15/%r15: %r15_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r15
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

Final state
%r15/%r15: 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for movsbq %r15b, %rcx

Final state:
%rcx/%rcx: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %cl, %r13b

Final state:
%r13/%r13b: (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for movslq %r13d, %rbx

Final state:
%rbx/%rbx: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

-------------------------------------
=====================================
Computing circuit for xaddb %al, %al

.target:
callq .clear_cf
movsbl %cl, %r13d
movsbl %bl, %r15d
movsbq %r15b, %rcx
adcb %cl, %r13b
movslq %r13d, %rbx
retq 

Initial state:
%rax/%al: %rax_cmovbeq_r64_r64[63:8] ∘ ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₈ : 0x0₈)

%cf: %cf_cmovbeq_r64_r64
%pf: %pf_cmovbeq_r64_r64
%af: %af_cmovbeq_r64_r64
%zf: %zf_cmovbeq_r64_r64
%sf: %sf_cmovbeq_r64_r64
%of: %of_cmovbeq_r64_r64

State for specgen instruction: xaddb %cl, %bl:
%rcx/%cl: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])
%rbx/%bl: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

Final state
%rax/%al: ((%rax_cmovbeq_r64_r64[63:8] ∘ ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₈ : 0x0₈))[63:8] ∘ ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₈ : 0x0₈))[63:8] ∘ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0]

%cf: (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[8:8] = 0x1₁
%pf: !((((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[0:0] = 0x1₁ ⊕ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[1:1] = 0x1₁ ⊕ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[2:2] = 0x1₁ ⊕ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[3:3] = 0x1₁ ⊕ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[4:4] = 0x1₁ ⊕ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[5:5] = 0x1₁ ⊕ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[6:6] = 0x1₁ ⊕ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:7] = 0x1₁)
%af: (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₅ : 0x0₅) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₅ : 0x0₅))[4:4] = 0x1₁
%zf: (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈
%sf: (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:7] = 0x1₁
%of: true ∧ !(false ↔ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for cmoveq %rcx, %rbx

Final state:
%rbx/%rbx: (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovbeq_r64_r64 : %rbx_cmovbeq_r64_r64

-------------------------------------
=====================================
Computing circuit for cmovbeq %rcx, %rbx

.target:
setnbe %al
xaddb %al, %al
cmoveq %rcx, %rbx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovnaq_r64_r64

State for specgen instruction: cmovbeq %rcx, %rbx:
%rbx/%rbx: (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovbeq_r64_r64 : %rbx_cmovbeq_r64_r64

Register        -> %rbx
  translates to => %rbx
Value is               -> (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovbeq_r64_r64 : %rbx_cmovbeq_r64_r64
  after renaming it is => (((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovnaq_r64_r64 : %rbx_cmovnaq_r64_r64

Final state
%rbx/%rbx: (((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovnaq_r64_r64 : %rbx_cmovnaq_r64_r64

=====================================
=====================================
Computing circuit for cmovnaq %rcx, %rbx

.target:
cmovbeq %rcx, %rbx
retq 

Initial state:
%rbx/%rbx: %rbx

State for specgen instruction: cmovnaq %rcx, %rbx:
%rbx/%rbx: (((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovnaq_r64_r64 : %rbx_cmovnaq_r64_r64

Register        -> %rbx
  translates to => %rbx
Value is               -> (((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovnaq_r64_r64 : %rbx_cmovnaq_r64_r64
  after renaming it is => (((%cf ? 0x1₂₄ : 0x0₂₄) ∘ (%zf ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf ? 0x1₂₄ : 0x0₂₄) ∘ (%zf ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx : %rbx

Final state
%rbx/%rbx: (((%cf ? 0x1₂₄ : 0x0₂₄) ∘ (%zf ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf ? 0x1₂₄ : 0x0₂₄) ∘ (%zf ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx : %rbx

=====================================
Circuits:

%rbx   : (((%cf ? 0x1₂₄ : 0x0₂₄) ∘ (%zf ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf ? 0x1₂₄ : 0x0₂₄) ∘ (%zf ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx : %rbx

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/