// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVNZW-R16-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovnzw R1:R16, R2:R16,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ((#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), extractMInt(getParentValue(R1, RSMap), 48, 64)) ) #else ( getParentValue(R2, RSMap) ) #fi)  )


)

    </regstate>
endmodule

module CMOVNZW-R16-R16-SEMANTICS
  imports CMOVNZW-R16-R16
endmodule
/*
TargetInstr:
cmovnzw %cx, %bx
RWSet:
maybe read:{ %cx %zf }
must read:{ %cx %zf }
maybe write:{ %bx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:movzbl %ch, %ebp                #  1     0     3      OPC=movzbl_r32_rh
circuit:movw %bx, %bp                   #  2     0x3   3      OPC=movw_r16_r16
circuit:callq .move_016_008_cx_r8b_r9b  #  3     0x6   5      OPC=callq_label
circuit:callq .move_008_016_r8b_r9b_bx  #  4     0xb   5      OPC=callq_label
circuit:cmoveq %rbp, %rbx               #  5     0x10  4      OPC=cmoveq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovnzw %cx, %bx

  maybe read:      { %cx %zf }
  must read:       { %cx %zf }
  maybe write:     { %bx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ch, %ebp

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rbp/%rbp: %rbp_cmovnzw_r16_r16

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rbp
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rcx_cmovnzw_r16_r16[15:8]

Final state
%rbp/%rbp: 0x0₅₆ ∘ %rcx_cmovnzw_r16_r16[15:8]

=====================================
-------------------------------------
Getting base circuit for movswq %cx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rcx_movw_r16_r16[15:0])

-------------------------------------
=====================================
Computing circuit for movw %bx, %bp

.target:
movswq %cx, %rbx
retq 

Initial state:
%rbp/%bp: 0x0₅₆ ∘ %rcx_cmovnzw_r16_r16[15:8]

State for specgen instruction: movw %cx, %bx:
%rbx/%bx: sign-extend-64(%rcx_movw_r16_r16[15:0])

Register        -> %bx
  translates to => %bp
Value is               -> sign-extend-64(%rcx_movw_r16_r16[15:0])[15:0]
  after renaming it is => %rbx_cmovnzw_r16_r16[15:0]

Final state
%rbp/%bp: (0x0₅₆ ∘ %rcx_cmovnzw_r16_r16[15:8])[63:16] ∘ %rbx_cmovnzw_r16_r16[15:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_cmovnzw_r16_r16
%rdx/%rdx: %rdx_cmovnzw_r16_r16

%xmm0: %ymm0_cmovnzw_r16_r16[127:0]
%xmm1: %ymm1_cmovnzw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_cmovnzw_r16_r16
%rdx/%rdx: %rdx_cmovnzw_r16_r16

%xmm0: %ymm0_cmovnzw_r16_r16[127:0]
%xmm1: %ymm1_cmovnzw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for cmoveq %rbp, %rbx

Final state:
%rbx/%rbx: %zf_cmovnzw_r16_r16 ? (0x0₅₆ ∘ %rcx_cmovnzw_r16_r16[15:8])[63:16] ∘ %rbx_cmovnzw_r16_r16[15:0] : %rbx_cmovnzw_r16_r16[63:16] ∘ ((%r9_cmovnzw_r16_r16[63:8] ∘ %rcx_cmovnzw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_cmovnzw_r16_r16[63:8] ∘ %rcx_cmovnzw_r16_r16[15:0][7:0])[7:0][7:0])

-------------------------------------
=====================================
Computing circuit for cmovnzw %cx, %bx

.target:
movzbl %ch, %ebp
movw %bx, %bp
callq .move_016_008_cx_r8b_r9b
callq .move_008_016_r8b_r9b_bx
cmoveq %rbp, %rbx
retq 

Initial state:
%rbx/%bx: %rbx

State for specgen instruction: cmovnzw %cx, %bx:
%rbx/%bx: %zf_cmovnzw_r16_r16 ? (0x0₅₆ ∘ %rcx_cmovnzw_r16_r16[15:8])[63:16] ∘ %rbx_cmovnzw_r16_r16[15:0] : %rbx_cmovnzw_r16_r16[63:16] ∘ ((%r9_cmovnzw_r16_r16[63:8] ∘ %rcx_cmovnzw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_cmovnzw_r16_r16[63:8] ∘ %rcx_cmovnzw_r16_r16[15:0][7:0])[7:0][7:0])

Register        -> %bx
  translates to => %bx
Value is               -> (%zf_cmovnzw_r16_r16 ? (0x0₅₆ ∘ %rcx_cmovnzw_r16_r16[15:8])[63:16] ∘ %rbx_cmovnzw_r16_r16[15:0] : %rbx_cmovnzw_r16_r16[63:16] ∘ ((%r9_cmovnzw_r16_r16[63:8] ∘ %rcx_cmovnzw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_cmovnzw_r16_r16[63:8] ∘ %rcx_cmovnzw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %zf ? %rbx[15:0] : %rcx[15:0]

Final state
%rbx/%bx: %rbx[63:16] ∘ (%zf ? %rbx[15:0] : %rcx[15:0])

=====================================
Circuits:

%rbx   : %rbx[63:16] ∘ (%zf ? %rbx[15:0] : %rcx[15:0])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/