// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVOW-R16-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovow R1:R16, R2:R16,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), (#ifMInt (eqMInt((#ifMInt (eqMInt(addMInt(mi(8, 255), concatenateMInt(mi(7, 0), getFlag("OF", RSMap))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) , mi(1, 0)) ) #then ( extractMInt(getParentValue(R2, RSMap), 48, 64) ) #else ( extractMInt(getParentValue(R1, RSMap), 48, 64) ) #fi) ) )


)

    </regstate>
endmodule

module CMOVOW-R16-R16-SEMANTICS
  imports CMOVOW-R16-R16
endmodule
/*
TargetInstr:
cmovow %cx, %bx
RWSet:
maybe read:{ %cx %of }
must read:{ %cx %of }
maybe write:{ %bx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:movswq %cx, %r12    #  1     0    4      OPC=movswq_r64_r16
circuit:cmovol %r12d, %ebx  #  2     0x4  4      OPC=cmovol_r32_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovow %cx, %bx

  maybe read:      { %cx %of }
  must read:       { %cx %of }
  maybe write:     { %bx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

-------------------------------------
Getting base circuit for movswq %cx, %r12

Final state:
%r12/%r12: sign-extend-64(%rcx_cmovow_r16_r16[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_seto_r8
%rdx/%rdx: %rdx_seto_r8

%xmm0: %ymm0_seto_r8[127:0]
%xmm1: %ymm1_seto_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_byte_6_of_rbx_to_r9b

Final state:
%rax/%rax: %rax_seto_r8
%rdx/%rdx: %rdx_seto_r8

%xmm0: %ymm0_seto_r8[127:0]
%xmm1: %ymm1_seto_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r9b_to_byte_6_of_rbx

Final state:
%rax/%rax: %rax_seto_r8
%rdx/%rdx: %rdx_seto_r8

%xmm0: %ymm0_seto_r8[127:0]
%xmm1: %ymm1_seto_r8[127:0]

-------------------------------------
=====================================
Computing circuit for seto %r9b

.target:
callq .read_of_into_rbx
callq .move_byte_6_of_rbx_to_r9b
callq .move_r9b_to_byte_6_of_rbx
retq 

Initial state:
%r9/%r9b: %r9_cmovol_r32_r32

State for specgen instruction: seto %bl:
%rbx/%bl: (0x0₆₃ ∘ (%of_seto_r8 ? 0x1₁ : 0x0₁))[63:56] ∘ (%r9_seto_r8[63:8] ∘ (0x0₆₃ ∘ (%of_seto_r8 ? 0x1₁ : 0x0₁))[55:48])[7:0] ∘ (0x0₆₃ ∘ (%of_seto_r8 ? 0x1₁ : 0x0₁))[47:0]

Register        -> %bl
  translates to => %r9b
Value is               -> ((0x0₆₃ ∘ (%of_seto_r8 ? 0x1₁ : 0x0₁))[63:56] ∘ (%r9_seto_r8[63:8] ∘ (0x0₆₃ ∘ (%of_seto_r8 ? 0x1₁ : 0x0₁))[55:48])[7:0] ∘ (0x0₆₃ ∘ (%of_seto_r8 ? 0x1₁ : 0x0₁))[47:0])[7:0]
  after renaming it is => %of_cmovol_r32_r32 ? 0x1₈ : 0x0₈

Final state
%r9/%r9b: %r9_cmovol_r32_r32[63:8] ∘ (%of_cmovol_r32_r32 ? 0x1₈ : 0x0₈)

=====================================
-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %r9

Final state:
%r9/%r9: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rcx, %rcx

Final state:
%rcx/%rcx: %rcx_decb_r8 ⊕ %rcx_decb_r8

%cf: false
%pf: !((%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][0:0] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][1:1] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][2:2] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][3:3] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][4:4] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][5:5] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][6:6] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][7:7] = 0x1₁)
%zf: (%rcx_decb_r8 ⊕ %rcx_decb_r8) = 0x0₆₄
%sf: (%rcx_decb_r8 ⊕ %rcx_decb_r8)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %r9b, %bl

Final state:
%rbx/%bl: %rbx_decb_r8[63:8] ∘ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ 0xffffffffffffffff₆₄[7:0][3:0] + 0x0₁ ∘ %rbx_decb_r8[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:7] = 0x1₁
%of: (0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ %rbx_decb_r8[7:0][7:7] = 0x1₁) ∧ !(0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for decb %r9b

.target:
movq $0xffffffffffffffff, %r9
xorq %rcx, %rcx
adcb %r9b, %bl
retq 

Initial state:
%r9/%r9b: %r9_cmovol_r32_r32[63:8] ∘ (%of_cmovol_r32_r32 ? 0x1₈ : 0x0₈)

%pf: %pf_cmovol_r32_r32
%af: %af_cmovol_r32_r32
%zf: %zf_cmovol_r32_r32
%sf: %sf_cmovol_r32_r32
%of: %of_cmovol_r32_r32

State for specgen instruction: decb %bl:
%rbx/%bl: %rbx_decb_r8[63:8] ∘ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0]

%pf: !(((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ 0xffffffffffffffff₆₄[7:0][3:0] + 0x0₁ ∘ %rbx_decb_r8[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:7] = 0x1₁
%of: (0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ %rbx_decb_r8[7:0][7:7] = 0x1₁) ∧ !(0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %r9b
Value is               -> (%rbx_decb_r8[63:8] ∘ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0])[7:0]
  after renaming it is => %of_cmovol_r32_r32 ? 0x0₈ : 0xff₈

Final state
%r9/%r9b: (%r9_cmovol_r32_r32[63:8] ∘ (%of_cmovol_r32_r32 ? 0x1₈ : 0x0₈))[63:8] ∘ (%of_cmovol_r32_r32 ? 0x0₈ : 0xff₈)

%pf: !((%of_cmovol_r32_r32 ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%of_cmovol_r32_r32 ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%of_cmovol_r32_r32 ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%of_cmovol_r32_r32 ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%of_cmovol_r32_r32 ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%of_cmovol_r32_r32 ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%of_cmovol_r32_r32 ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%of_cmovol_r32_r32 ? 0x0₁ : 0x1₁) = 0x1₁)
%af: (%of_cmovol_r32_r32 ? 0x1₁ : 0x0₁) = 0x1₁
%zf: (%of_cmovol_r32_r32 ? 0x0₈ : 0xff₈) = 0x0₈
%sf: (%of_cmovol_r32_r32 ? 0x0₁ : 0x1₁) = 0x1₁
%of: false ∧ !(true ↔ (%of_cmovol_r32_r32 ? 0x0₁ : 0x1₁) = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %ebx, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_movl_r32_r32
%rbx/%rbx: 0x0₆₄

%cf: %cf_movl_r32_r32
%pf: %pf_movl_r32_r32
%af: %af_movl_r32_r32
%zf: %zf_movl_r32_r32
%sf: %sf_movl_r32_r32
%of: %of_movl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

%cf: false
%pf: !(%rcx_movl_r32_r32[0:0] = 0x1₁ ⊕ %rcx_movl_r32_r32[1:1] = 0x1₁ ⊕ %rcx_movl_r32_r32[2:2] = 0x1₁ ⊕ %rcx_movl_r32_r32[3:3] = 0x1₁ ⊕ %rcx_movl_r32_r32[4:4] = 0x1₁ ⊕ %rcx_movl_r32_r32[5:5] = 0x1₁ ⊕ %rcx_movl_r32_r32[6:6] = 0x1₁ ⊕ %rcx_movl_r32_r32[7:7] = 0x1₁)
%af: false
%zf: %rcx_movl_r32_r32[31:0] = 0x0₃₂
%sf: %rcx_movl_r32_r32[31:31] = 0x1₁
%of: (%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ false) ∧ !(%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ %rcx_movl_r32_r32[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for movl %ecx, %esi

.target:
movq $0x0, %rbx
xaddl %ebx, %ecx
retq 

Initial state:
%rsi/%rsi: %rsi_cmovzl_r32_r32

State for specgen instruction: movl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rsi
Value is               -> 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_cmovzl_r32_r32[31:0]

Final state
%rsi/%rsi: 0x0₃₂ ∘ %rcx_cmovzl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r12d_r13d

Final state:
%rax/%rax: %rax_cmovel_r32_r32
%rdx/%rdx: %rdx_cmovel_r32_r32

%xmm0: %ymm0_cmovel_r32_r32[127:0]
%xmm1: %ymm1_cmovel_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_cmovel_r32_r32
%rbx/%rbx: %rbx_cmovel_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_cmovel_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_cmovel_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_cmovel_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_cmovel_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for cmoveq %rbx, %rcx

Final state:
%rcx/%rcx: %zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32 : %rcx_cmovnzl_r32_r32

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %ebx, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_movl_r32_r32
%rbx/%rbx: 0x0₆₄

%cf: %cf_movl_r32_r32
%pf: %pf_movl_r32_r32
%af: %af_movl_r32_r32
%zf: %zf_movl_r32_r32
%sf: %sf_movl_r32_r32
%of: %of_movl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

%cf: false
%pf: !(%rcx_movl_r32_r32[0:0] = 0x1₁ ⊕ %rcx_movl_r32_r32[1:1] = 0x1₁ ⊕ %rcx_movl_r32_r32[2:2] = 0x1₁ ⊕ %rcx_movl_r32_r32[3:3] = 0x1₁ ⊕ %rcx_movl_r32_r32[4:4] = 0x1₁ ⊕ %rcx_movl_r32_r32[5:5] = 0x1₁ ⊕ %rcx_movl_r32_r32[6:6] = 0x1₁ ⊕ %rcx_movl_r32_r32[7:7] = 0x1₁)
%af: false
%zf: %rcx_movl_r32_r32[31:0] = 0x0₃₂
%sf: %rcx_movl_r32_r32[31:31] = 0x1₁
%of: (%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ false) ∧ !(%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ %rcx_movl_r32_r32[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for movl %ecx, %ebx

.target:
movq $0x0, %rbx
xaddl %ebx, %ecx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovnzl_r32_r32

State for specgen instruction: movl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ (%zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32[31:0] : %rcx_cmovnzl_r32_r32[31:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ (%zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32[31:0] : %rcx_cmovnzl_r32_r32[31:0])

=====================================
=====================================
Computing circuit for cmovnzl %ecx, %ebx

.target:
cmoveq %rbx, %rcx
movl %ecx, %ebx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovnel_r32_r32

State for specgen instruction: cmovnzl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (%zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32[31:0] : %rcx_cmovnzl_r32_r32[31:0])

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ (%zf_cmovnzl_r32_r32 ? %rbx_cmovnzl_r32_r32[31:0] : %rcx_cmovnzl_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ (%zf_cmovnel_r32_r32 ? %rbx_cmovnel_r32_r32[31:0] : %rcx_cmovnel_r32_r32[31:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ (%zf_cmovnel_r32_r32 ? %rbx_cmovnel_r32_r32[31:0] : %rcx_cmovnel_r32_r32[31:0])

=====================================
=====================================
Computing circuit for cmovnel %r12d, %ebx

.target:
cmovnzl %ecx, %ebx
retq 

Initial state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_cmovel_r32_r32[31:0]

State for specgen instruction: cmovnel %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (%zf_cmovnel_r32_r32 ? %rbx_cmovnel_r32_r32[31:0] : %rcx_cmovnel_r32_r32[31:0])

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ (%zf_cmovnel_r32_r32 ? %rbx_cmovnel_r32_r32[31:0] : %rcx_cmovnel_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ (%zf_cmovel_r32_r32 ? %rcx_cmovel_r32_r32[31:0] : %rbx_cmovel_r32_r32[31:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ (%zf_cmovel_r32_r32 ? %rcx_cmovel_r32_r32[31:0] : %rbx_cmovel_r32_r32[31:0])

=====================================
=====================================
Computing circuit for cmovel %esi, %ebx

.target:
callq .move_064_032_rbx_r12d_r13d
xchgl %ebx, %ecx
cmovnel %r12d, %ebx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovzl_r32_r32

State for specgen instruction: cmovel %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (%zf_cmovel_r32_r32 ? %rcx_cmovel_r32_r32[31:0] : %rbx_cmovel_r32_r32[31:0])

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ (%zf_cmovel_r32_r32 ? %rcx_cmovel_r32_r32[31:0] : %rbx_cmovel_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ (%zf_cmovzl_r32_r32 ? %rcx_cmovzl_r32_r32[31:0] : %rbx_cmovzl_r32_r32[31:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ (%zf_cmovzl_r32_r32 ? %rcx_cmovzl_r32_r32[31:0] : %rbx_cmovzl_r32_r32[31:0])

=====================================
=====================================
Computing circuit for cmovzl %ecx, %ebx

.target:
movl %ecx, %esi
cmovel %esi, %ebx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovol_r32_r32

State for specgen instruction: cmovzl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (%zf_cmovzl_r32_r32 ? %rcx_cmovzl_r32_r32[31:0] : %rbx_cmovzl_r32_r32[31:0])

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ (%zf_cmovzl_r32_r32 ? %rcx_cmovzl_r32_r32[31:0] : %rbx_cmovzl_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ ((%of_cmovol_r32_r32 ? 0x0₈ : 0xff₈) = 0x0₈ ? %rcx_cmovol_r32_r32[31:0] : %rbx_cmovol_r32_r32[31:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ ((%of_cmovol_r32_r32 ? 0x0₈ : 0xff₈) = 0x0₈ ? %rcx_cmovol_r32_r32[31:0] : %rbx_cmovol_r32_r32[31:0])

=====================================
=====================================
Computing circuit for cmovol %r12d, %ebx

.target:
seto %r9b
decb %r9b
cmovzl %ecx, %ebx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovow_r16_r16

State for specgen instruction: cmovol %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%of_cmovol_r32_r32 ? 0x0₈ : 0xff₈) = 0x0₈ ? %rcx_cmovol_r32_r32[31:0] : %rbx_cmovol_r32_r32[31:0])

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ ((%of_cmovol_r32_r32 ? 0x0₈ : 0xff₈) = 0x0₈ ? %rcx_cmovol_r32_r32[31:0] : %rbx_cmovol_r32_r32[31:0])
  after renaming it is => 0x0₃₂ ∘ ((%of_cmovow_r16_r16 ? 0x0₈ : 0xff₈) = 0x0₈ ? sign-extend-64(%rcx_cmovow_r16_r16[15:0])[31:0] : %rbx_cmovow_r16_r16[31:0])

Final state
%rbx/%rbx: 0x0₃₂ ∘ ((%of_cmovow_r16_r16 ? 0x0₈ : 0xff₈) = 0x0₈ ? sign-extend-64(%rcx_cmovow_r16_r16[15:0])[31:0] : %rbx_cmovow_r16_r16[31:0])

=====================================
=====================================
Computing circuit for cmovow %cx, %bx

.target:
movswq %cx, %r12
cmovol %r12d, %ebx
retq 

Initial state:
%rbx/%bx: %rbx

State for specgen instruction: cmovow %cx, %bx:
%rbx/%bx: 0x0₃₂ ∘ ((%of_cmovow_r16_r16 ? 0x0₈ : 0xff₈) = 0x0₈ ? sign-extend-64(%rcx_cmovow_r16_r16[15:0])[31:0] : %rbx_cmovow_r16_r16[31:0])

Register        -> %bx
  translates to => %bx
Value is               -> (0x0₃₂ ∘ ((%of_cmovow_r16_r16 ? 0x0₈ : 0xff₈) = 0x0₈ ? sign-extend-64(%rcx_cmovow_r16_r16[15:0])[31:0] : %rbx_cmovow_r16_r16[31:0]))[15:0]
  after renaming it is => (%of ? 0x0₈ : 0xff₈) = 0x0₈ ? %rcx[15:0] : %rbx[15:0]

Final state
%rbx/%bx: %rbx[63:16] ∘ ((%of ? 0x0₈ : 0xff₈) = 0x0₈ ? %rcx[15:0] : %rbx[15:0])

=====================================
Circuits:

%rbx   : %rbx[63:16] ∘ ((%of ? 0x0₈ : 0xff₈) = 0x0₈ ? %rcx[15:0] : %rbx[15:0])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/