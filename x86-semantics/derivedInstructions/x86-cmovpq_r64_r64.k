// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVPQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovpq R1:R64, R2:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ((#ifMInt (eqMInt((#ifMInt (eqMInt(addMInt(concatenateMInt(mi(7, 0), (#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), (#ifMInt (ultMInt(addMInt(xorMInt(concatenateMInt(mi(7, 0), getFlag("PF", RSMap)), mi(8, 1)), xorMInt(concatenateMInt(mi(7, 0), getFlag("PF", RSMap)), mi(8, 1))), xorMInt(concatenateMInt(mi(7, 0), getFlag("PF", RSMap)), mi(8, 1))) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ), concatenateMInt(mi(7, 0), (#ifMInt (eqMInt(addMInt(xorMInt(concatenateMInt(mi(7, 0), getFlag("PF", RSMap)), mi(8, 1)), xorMInt(concatenateMInt(mi(7, 0), getFlag("PF", RSMap)), mi(8, 1))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ), concatenateMInt(mi(7, 0), (#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), (#ifMInt (ultMInt(addMInt(xorMInt(concatenateMInt(mi(7, 0), getFlag("PF", RSMap)), mi(8, 1)), xorMInt(concatenateMInt(mi(7, 0), getFlag("PF", RSMap)), mi(8, 1))), xorMInt(concatenateMInt(mi(7, 0), getFlag("PF", RSMap)), mi(8, 1))) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ), concatenateMInt(mi(7, 0), (#ifMInt (eqMInt(addMInt(xorMInt(concatenateMInt(mi(7, 0), getFlag("PF", RSMap)), mi(8, 1)), xorMInt(concatenateMInt(mi(7, 0), getFlag("PF", RSMap)), mi(8, 1))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) , mi(1, 0)) ) #then ( getParentValue(R2, RSMap) ) #else ( getParentValue(R1, RSMap) ) #fi)  )


)

    </regstate>
endmodule

module CMOVPQ-R64-R64-SEMANTICS
  imports CMOVPQ-R64-R64
endmodule
/*
TargetInstr:
cmovpq %rcx, %rbx
RWSet:
maybe read:{ %rcx %pf }
must read:{ %rcx %pf }
maybe write:{ %rbx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:cmovpeq %rcx, %rbx  #  1     0    4      OPC=cmovpeq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovpq %rcx, %rbx

  maybe read:      { %rcx %pf }
  must read:       { %rcx %pf }
  maybe write:     { %rbx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

-------------------------------------
Getting base circuit for callq .read_pf_into_rbx

Final state:
%rax/%rax: %rax_setpo_r8
%rdx/%rdx: %rdx_setpo_r8

%xmm0: %ymm0_setpo_r8[127:0]
%xmm1: %ymm1_setpo_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r8d_r9d

Final state:
%rax/%rax: %rax_setpo_r8
%rdx/%rdx: %rdx_setpo_r8

%xmm0: %ymm0_setpo_r8[127:0]
%xmm1: %ymm1_setpo_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_byte_3_of_rbx_to_r9b

Final state:
%rax/%rax: %rax_setpo_r8
%rdx/%rdx: %rdx_setpo_r8

%xmm0: %ymm0_setpo_r8[127:0]
%xmm1: %ymm1_setpo_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %r8d, %r9d

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%r8/%r8: 0x0₃₂ ∘ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[31:0]
%r9/%r9: (0x0₃₂ ∘ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[63:32])[63:8] ∘ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[31:24]

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %r8
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₆₄

Register        -> %rbx
  translates to => %r9
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => %pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄

Final state
%r8/%r8: 0x0₆₄
%r9/%r9: %pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄

=====================================
-------------------------------------
Getting base circuit for xorq %rbx, %rbx

Final state:
%rbx/%rbx: 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁)

%cf: false
%pf: !((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁)
%zf: (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁)) = 0x0₆₄
%sf: (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_pf_into_rbx

Final state:
%rax/%rax: %rax_setpo_r8
%rdx/%rdx: %rdx_setpo_r8

%xmm0: %ymm0_setpo_r8[127:0]
%xmm1: %ymm1_setpo_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %r9, %rbx

Final state:
%rbx/%rbx: 0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄)

%cf: false
%pf: !((0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄))[7:0][7:7] = 0x1₁)
%zf: (0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄)) = 0x0₆₄
%sf: (0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄))[63:63] = 0x1₁
%of: false

-------------------------------------
=====================================
Computing circuit for setpo %r14b

.target:
callq .read_pf_into_rbx
callq .move_064_032_rbx_r8d_r9d
callq .move_byte_3_of_rbx_to_r9b
xchgl %r8d, %r9d
xorq %rbx, %rbx
callq .read_pf_into_rbx
xorq %r9, %rbx
retq 

Initial state:
%r14/%r14b: %r14_setpo_rh

State for specgen instruction: setpo %bl:
%rbx/%bl: 0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄)

Register        -> %bl
  translates to => %r14b
Value is               -> (0x0₆₃ ∘ (!((0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁) ⊕ 0x0₆₃ ∘ (%pf_setpo_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ? 0x1₁ : 0x0₁) ⊕ (%pf_setpo_r8 ? 0x1₆₄ : 0x0₆₄))[7:0]
  after renaming it is => %pf_setpo_rh ? 0x0₈ : 0x1₈

Final state
%r14/%r14b: %r14_setpo_rh[63:8] ∘ (%pf_setpo_rh ? 0x0₈ : 0x1₈)

=====================================
-------------------------------------
Getting base circuit for movq $0x8, %rbx

Final state:
%rbx/%rbx: 0x8₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ebx_r10w_r11w

Final state:
%rax/%rax: %rax_movzbl_r32_r8
%rdx/%rdx: %rdx_movzbl_r32_r8

%xmm0: %ymm0_movzbl_r32_r8[127:0]
%xmm1: %ymm1_movzbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_addw_r16_r16

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %bx

Final state:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_addw_r16_r16
%rdx/%rdx: %rdx_addw_r16_r16

%xmm0: %ymm0_addw_r16_r16[127:0]
%xmm1: %ymm1_addw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for addw %bx, %r10w

.target:
clc 
adcw %cx, %bx
callq .set_szp_for_bx
retq 

Initial state:
%r10/%r10w: %r10_movzbl_r32_r8[63:16] ∘ 0x8₆₄[31:0][15:0]

%cf: %cf_movzbl_r32_r8
%pf: %pf_movzbl_r32_r8
%af: %af_movzbl_r32_r8
%zf: %zf_movzbl_r32_r8
%sf: %sf_movzbl_r32_r8
%of: %of_movzbl_r32_r8

State for specgen instruction: addw %cx, %bx:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %r10w
Value is               -> (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0]
  after renaming it is => 0x10₁₆

Final state
%r10/%r10w: (%r10_movzbl_r32_r8[63:16] ∘ 0x8₆₄[31:0][15:0])[63:16] ∘ 0x10₁₆

%cf: false
%pf: false
%af: true
%zf: false
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .read_pf_into_rbx

Final state:
%rax/%rax: %rax_movzbl_r32_r8
%rdx/%rdx: %rdx_movzbl_r32_r8

%xmm0: %ymm0_movzbl_r32_r8[127:0]
%xmm1: %ymm1_movzbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcb %cl, %bl

Final state:
%rbx/%bl: (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[63:8] ∘ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_movzbl_r32_r8[7:0][3:0] + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:7] = 0x1₁
%of: (%rcx_movzbl_r32_r8[7:0][7:7] = 0x1₁ ↔ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ∧ !(%rcx_movzbl_r32_r8[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for movzbl %r14b, %ecx

.target:
movq $0x8, %rbx
callq .move_032_016_ebx_r10w_r11w
addw %bx, %r10w
callq .read_pf_into_rbx
adcb %cl, %bl
retq 

Initial state:
%rcx/%rcx: %rcx_setpo_rh

State for specgen instruction: movzbl %cl, %ebx:
%rbx/%rbx: (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[63:8] ∘ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[63:8] ∘ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0]
  after renaming it is => %pf_setpo_rh ? 0x0₆₄ : 0x1₆₄

Final state
%rcx/%rcx: %pf_setpo_rh ? 0x0₆₄ : 0x1₆₄

=====================================
-------------------------------------
Getting base circuit for movq $0xfffffffffffffff0, %rax

Final state:
%rax/%rax: 0xfffffffffffffff0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rcx, %rcx

Final state:
%rcx/%rcx: %rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh

%cf: false
%pf: !((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][0:0] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][1:1] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][2:2] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][3:3] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][4:4] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][5:5] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][6:6] = 0x1₁ ⊕ (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[7:0][7:7] = 0x1₁)
%zf: (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh) = 0x0₆₄
%sf: (%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_sf_into_rbx

Final state:
%rax/%rax: %rax_movzbw_r16_rh
%rdx/%rdx: %rdx_movzbw_r16_rh

%xmm0: %ymm0_movzbw_r16_rh[127:0]
%xmm1: %ymm1_movzbw_r16_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: (0x0₆₃ ∘ ((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁ ? 0x1₁ : 0x0₁))[63:8] ∘ %rax_movzbw_r16_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbw %ah, %si

.target:
xorq %rcx, %rcx
callq .read_sf_into_rbx
movb %ah, %bl
retq 

Initial state:
%rsi/%si: %rsi_xaddb_r8_rh

State for specgen instruction: movzbw %ah, %bx:
%rbx/%bx: (0x0₆₃ ∘ ((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁ ? 0x1₁ : 0x0₁))[63:8] ∘ %rax_movzbw_r16_rh[15:8]

Register        -> %bx
  translates to => %si
Value is               -> ((0x0₆₃ ∘ ((%rcx_movzbw_r16_rh ⊕ %rcx_movzbw_r16_rh)[63:63] = 0x1₁ ? 0x1₁ : 0x0₁))[63:8] ∘ %rax_movzbw_r16_rh[15:8])[15:0]
  after renaming it is => 0x0₈ ∘ %rax_xaddb_r8_rh[15:8]

Final state
%rsi/%si: %rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8])

=====================================
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_movzbq_r64_r8

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for movsbq %cl, %rdi

Final state:
%rdi/%rdi: sign-extend-64(%rcx_movzbq_r64_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %dil, %bl

Final state:
%rbx/%bl: 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][3:0] + 0x0₁ ∘ 0x0₆₄[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][7:7] = 0x1₁ ↔ 0x0₆₄[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for movzbq %bl, %r12

.target:
movq $0x0, %rbx
clc 
movsbq %cl, %rdi
adcb %dil, %bl
retq 

Initial state:
%r12/%r12: %r12_xaddb_r8_rh

State for specgen instruction: movzbq %cl, %rbx:
%rbx/%rbx: 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]

Register        -> %rbx
  translates to => %r12
Value is               -> 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]
  after renaming it is => 0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0]

Final state
%r12/%r12: 0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for movslq %r12d, %rdx

Final state:
%rdx/%rdx: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_dx_r8b_r9b

Final state:
%rax/%rax: %rax_xaddb_r8_rh
%rdx/%rdx: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])

%xmm0: %ymm0_xaddb_r8_rh[127:0]
%xmm1: %ymm1_xaddb_r8_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %r12b, %ebx

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%rbx/%rbx: %rbx_xaddb_r8_rh

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for movb %dl, %ah

Final state:
%rax/%ah: %rax_xaddb_r8_rh[63:16] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[7:0] ∘ %rax_xaddb_r8_rh[7:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r9b_to_byte_6_of_rbx

Final state:
%rax/%rax: %rax_xaddb_r8_rh[63:16] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[7:0] ∘ %rax_xaddb_r8_rh[7:0]
%rdx/%rdx: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])

%xmm0: %ymm0_xaddb_r8_rh[127:0]
%xmm1: %ymm1_xaddb_r8_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for popcntq %rdx, %r9

Final state:
%r9/%r9: 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[63:32][15:0][7:0][3:0][1:0][0:0]))))) + 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][31:16][7:0][3:0][1:0][0:0])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][15:8][3:0][1:0][0:0]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][7:4][1:0][0:0])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][3:2][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][3:2][0:0]) + 0x0₂ ∘ (0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][1:0][1:1] + 0x0₁ ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[31:0][15:0][7:0][3:0][1:0][0:0])))))

%cf: false
%pf: false
%af: false
%zf: sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0]) = 0x0₆₄
%sf: false
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %sil, %bl

Final state:
%rbx/%bl: ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[63:8] ∘ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][3:0] + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:7] = 0x1₁
%of: ((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][7:7] = 0x1₁) ∧ !((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddb %ah, %cl

.target:
movzbw %ah, %si
movzbq %bl, %r12
movslq %r12d, %rdx
callq .move_016_008_dx_r8b_r9b
movsbl %r12b, %ebx
movb %dl, %ah
callq .move_r9b_to_byte_6_of_rbx
popcntq %rdx, %r9
adcb %sil, %bl
retq 

Initial state:
%rax/%ah: 0xfffffffffffffff0₆₄
%rcx/%cl: %pf_setpo_rh ? 0x0₆₄ : 0x1₆₄

%cf: %cf_setpo_rh
%pf: %pf_setpo_rh
%af: %af_setpo_rh
%zf: %zf_setpo_rh
%sf: %sf_setpo_rh
%of: %of_setpo_rh

State for specgen instruction: xaddb %ah, %bl:
%rax/%ah: %rax_xaddb_r8_rh[63:16] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[7:0] ∘ %rax_xaddb_r8_rh[7:0]
%rbx/%bl: ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[63:8] ∘ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][3:0] + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:0][7:7] = 0x1₁
%of: ((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0][7:7] = 0x1₁) ∧ !((%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0] + 0x1₉ : 0x0₁ ∘ (%rsi_xaddb_r8_rh[63:16] ∘ (0x0₈ ∘ %rax_xaddb_r8_rh[15:8]))[7:0]) + 0x0₁ ∘ ((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[63:56] ∘ (%r9_xaddb_r8_rh[63:8] ∘ sign-extend-64((0x0₅₆ ∘ %rbx_xaddb_r8_rh[7:0])[31:0])[15:0][15:8])[7:0] ∘ (0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_rh[7:0])[31:0])[47:0])[7:0])[7:7] = 0x1₁)

Final state
%rax/%ah: 0xfffffffffffffff0₆₄[63:16] ∘ (%pf_setpo_rh ? 0x0₈ : 0x1₈) ∘ 0xfffffffffffffff0₆₄[7:0]
%rcx/%cl: (%pf_setpo_rh ? 0x0₆₄ : 0x1₆₄)[63:8] ∘ (%pf_setpo_rh ? 0xff₈ : 0x0₈)

%cf: (%pf_setpo_rh ? 0x0₁ : 0x1₁) = 0x1₁
%pf: !((%pf_setpo_rh ? 0x1₁ : 0x0₁) = 0x1₁ ⊕ (%pf_setpo_rh ? 0x1₁ : 0x0₁) = 0x1₁ ⊕ (%pf_setpo_rh ? 0x1₁ : 0x0₁) = 0x1₁ ⊕ (%pf_setpo_rh ? 0x1₁ : 0x0₁) = 0x1₁ ⊕ (%pf_setpo_rh ? 0x1₁ : 0x0₁) = 0x1₁ ⊕ (%pf_setpo_rh ? 0x1₁ : 0x0₁) = 0x1₁ ⊕ (%pf_setpo_rh ? 0x1₁ : 0x0₁) = 0x1₁ ⊕ (%pf_setpo_rh ? 0x1₁ : 0x0₁) = 0x1₁)
%af: (%pf_setpo_rh ? 0x0₁ : 0x1₁) = 0x1₁
%zf: (%pf_setpo_rh ? 0xff₈ : 0x0₈) = 0x0₈
%sf: (%pf_setpo_rh ? 0x1₁ : 0x0₁) = 0x1₁
%of: false ∧ !(true ↔ (%pf_setpo_rh ? 0x1₁ : 0x0₁) = 0x1₁)

=====================================
=====================================
Computing circuit for setpo %dh

.target:
setpo %r14b
movzbl %r14b, %ecx
movq $0xfffffffffffffff0, %rax
xaddb %ah, %cl
retq 

Initial state:
%rdx/%dh: %rdx_cmovpeq_r64_r64

State for specgen instruction: setpo %ah:
%rax/%ah: 0xfffffffffffffff0₆₄[63:16] ∘ (%pf_setpo_rh ? 0x0₈ : 0x1₈) ∘ 0xfffffffffffffff0₆₄[7:0]

Register        -> %ah
  translates to => %dh
Value is               -> (0xfffffffffffffff0₆₄[63:16] ∘ (%pf_setpo_rh ? 0x0₈ : 0x1₈) ∘ 0xfffffffffffffff0₆₄[7:0])[15:8]
  after renaming it is => %pf_cmovpeq_r64_r64 ? 0x0₈ : 0x1₈

Final state
%rdx/%dh: %rdx_cmovpeq_r64_r64[63:16] ∘ (%pf_cmovpeq_r64_r64 ? 0x0₈ : 0x1₈) ∘ %rdx_cmovpeq_r64_r64[7:0]

=====================================
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: %rbx_shlb_rh_one[63:8] ∘ %rax_shlb_rh_one[15:8]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_shlb_r8_one ⊕ %rax_shlb_r8_one

%cf: false
%pf: !((%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][0:0] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][1:1] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][2:2] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][3:3] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][4:4] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][5:5] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][6:6] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁)
%zf: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one) = 0x0₆₄
%sf: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: false

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][3:0] + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁ ↔ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁) ∧ !((%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for adcb %bl, %bl

Final state:
%rbx/%bl: %rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0]

%cf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[8:8] = 0x1₁
%pf: !(((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_shlb_r8_one[7:0][3:0] + 0x0₁ ∘ %rbx_shlb_r8_one[7:0][3:0])[4:4] = 0x1₁
%zf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0] = 0x0₈
%sf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:7] = 0x1₁
%of: (%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ %rbx_shlb_r8_one[7:0][7:7] = 0x1₁) ∧ !(%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0]
%rdx/%rdx: %rdx_shlb_r8_one

%xmm0: %ymm0_shlb_r8_one[127:0]
%xmm1: %ymm1_shlb_r8_one[127:0]

-------------------------------------
=====================================
Computing circuit for shlb $0x1, %bl

.target:
xorq %rax, %rax
clc 
adcb %al, %al
adcb %bl, %bl
callq .set_szp_for_bl
retq 

Initial state:
%rbx/%bl: %rbx_shlb_rh_one[63:8] ∘ %rax_shlb_rh_one[15:8]

%cf: %cf_shlb_rh_one
%pf: %pf_shlb_rh_one
%zf: %zf_shlb_rh_one
%sf: %sf_shlb_rh_one
%of: %of_shlb_rh_one

State for specgen instruction: shlb $0x1, %bl:
%rbx/%bl: %rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0]

%cf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[8:8] = 0x1₁
%pf: !((%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%zf: (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0] = 0x0₈
%sf: (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:7] = 0x1₁
%of: (%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ %rbx_shlb_r8_one[7:0][7:7] = 0x1₁) ∧ !(%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %bl
Value is               -> (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0]
  after renaming it is => (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:0]

Final state
%rbx/%bl: (%rbx_shlb_rh_one[63:8] ∘ %rax_shlb_rh_one[15:8])[63:8] ∘ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:0]

%cf: (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:7] = 0x1₁)
%zf: (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:7] = 0x1₁
%of: (%rax_shlb_rh_one[15:15] = 0x1₁ ↔ %rax_shlb_rh_one[15:15] = 0x1₁) ∧ !(%rax_shlb_rh_one[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_movzbq_r64_r8

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for movsbq %cl, %rdi

Final state:
%rdi/%rdi: sign-extend-64(%rcx_movzbq_r64_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %dil, %bl

Final state:
%rbx/%bl: 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][3:0] + 0x0₁ ∘ 0x0₆₄[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][7:7] = 0x1₁ ↔ 0x0₆₄[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for movzbq %bl, %rcx

.target:
movq $0x0, %rbx
clc 
movsbq %cl, %rdi
adcb %dil, %bl
retq 

Initial state:
%rcx/%rcx: %rcx_shlb_rh_one

State for specgen instruction: movzbq %cl, %rbx:
%rbx/%rbx: 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]
  after renaming it is => 0x0₅₆ ∘ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:0]

Final state
%rcx/%rcx: 0x0₅₆ ∘ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:0]

=====================================
-------------------------------------
Getting base circuit for movb %cl, %ah

Final state:
%rax/%ah: %rax_shlb_rh_one[63:16] ∘ (0x0₅₆ ∘ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:0])[7:0] ∘ %rax_shlb_rh_one[7:0]

-------------------------------------
=====================================
Computing circuit for shlb $0x1, %ah

.target:
movb %ah, %bl
shlb $0x1, %bl
movzbq %bl, %rcx
movb %cl, %ah
retq 

Initial state:
%rax/%ah: %rax_salb_rh_one

%cf: %cf_salb_rh_one
%pf: %pf_salb_rh_one
%zf: %zf_salb_rh_one
%sf: %sf_salb_rh_one
%of: %of_salb_rh_one

State for specgen instruction: shlb $0x1, %ah:
%rax/%ah: %rax_shlb_rh_one[63:16] ∘ (0x0₅₆ ∘ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:0])[7:0] ∘ %rax_shlb_rh_one[7:0]

%cf: (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:7] = 0x1₁)
%zf: (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:7] = 0x1₁
%of: (%rax_shlb_rh_one[15:15] = 0x1₁ ↔ %rax_shlb_rh_one[15:15] = 0x1₁) ∧ !(%rax_shlb_rh_one[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:7] = 0x1₁)

Register        -> %ah
  translates to => %ah
Value is               -> (%rax_shlb_rh_one[63:16] ∘ (0x0₅₆ ∘ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:0])[7:0] ∘ %rax_shlb_rh_one[7:0])[15:8]
  after renaming it is => (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[7:0]

Final state
%rax/%ah: %rax_salb_rh_one[63:16] ∘ (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[7:0] ∘ %rax_salb_rh_one[7:0]

%cf: (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[7:7] = 0x1₁)
%zf: (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[7:7] = 0x1₁
%of: (%rax_salb_rh_one[15:15] = 0x1₁ ↔ %rax_salb_rh_one[15:15] = 0x1₁) ∧ !(%rax_salb_rh_one[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[7:7] = 0x1₁)

=====================================
=====================================
Computing circuit for salb $0x1, %dh

.target:
shlb $0x1, %ah
retq 

Initial state:
%rdx/%dh: %rdx_cmovpeq_r64_r64[63:16] ∘ (%pf_cmovpeq_r64_r64 ? 0x0₈ : 0x1₈) ∘ %rdx_cmovpeq_r64_r64[7:0]

%cf: %cf_cmovpeq_r64_r64
%pf: %pf_cmovpeq_r64_r64
%zf: %zf_cmovpeq_r64_r64
%sf: %sf_cmovpeq_r64_r64
%of: %of_cmovpeq_r64_r64

State for specgen instruction: salb $0x1, %ah:
%rax/%ah: %rax_salb_rh_one[63:16] ∘ (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[7:0] ∘ %rax_salb_rh_one[7:0]

%cf: (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[7:7] = 0x1₁)
%zf: (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[7:7] = 0x1₁
%of: (%rax_salb_rh_one[15:15] = 0x1₁ ↔ %rax_salb_rh_one[15:15] = 0x1₁) ∧ !(%rax_salb_rh_one[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[7:7] = 0x1₁)

Register        -> %ah
  translates to => %dh
Value is               -> (%rax_salb_rh_one[63:16] ∘ (0x0₁ ∘ %rax_salb_rh_one[15:8] + 0x0₁ ∘ %rax_salb_rh_one[15:8])[7:0] ∘ %rax_salb_rh_one[7:0])[15:8]
  after renaming it is => ((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[7:0]

Final state
%rdx/%dh: (%rdx_cmovpeq_r64_r64[63:16] ∘ (%pf_cmovpeq_r64_r64 ? 0x0₈ : 0x1₈) ∘ %rdx_cmovpeq_r64_r64[7:0])[63:16] ∘ ((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[7:0] ∘ (%rdx_cmovpeq_r64_r64[63:16] ∘ (%pf_cmovpeq_r64_r64 ? 0x0₈ : 0x1₈) ∘ %rdx_cmovpeq_r64_r64[7:0])[7:0]

%cf: ((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[8:8] = 0x1₁
%pf: !(((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[0:0] = 0x1₁ ⊕ ((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[1:1] = 0x1₁ ⊕ ((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[2:2] = 0x1₁ ⊕ ((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[3:3] = 0x1₁ ⊕ ((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[4:4] = 0x1₁ ⊕ ((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[5:5] = 0x1₁ ⊕ ((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[6:6] = 0x1₁ ⊕ ((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[7:7] = 0x1₁)
%zf: ((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[7:0] = 0x0₈
%sf: ((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[7:7] = 0x1₁
%of: true ∧ !(false ↔ ((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for callq .read_zf_into_rbx

Final state:
%rax/%rax: %rax_setnbe_r8
%rdx/%rdx: %rdx_setnbe_r8

%xmm0: %ymm0_setnbe_r8[127:0]
%xmm1: %ymm1_setnbe_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rbx

Final state:
%rax/%rax: %rax_setnae_rh
%rdx/%rdx: %rdx_setnae_rh

%xmm0: %ymm0_setnae_rh[127:0]
%xmm1: %ymm1_setnae_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %bl, %ah

Final state:
%rax/%ah: %rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setnae %bh

.target:
callq .read_cf_into_rbx
movb %bl, %ah
retq 

Initial state:
%rbx/%bh: 0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁)

State for specgen instruction: setnae %ah:
%rax/%ah: %rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0]

Register        -> %ah
  translates to => %bh
Value is               -> (%rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0])[15:8]
  after renaming it is => %cf_setnbe_r8 ? 0x1₈ : 0x0₈

Final state
%rbx/%bh: (0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[63:16] ∘ (%cf_setnbe_r8 ? 0x1₈ : 0x0₈) ∘ (0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[7:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r12d_r13d

Final state:
%rax/%rax: %rax_setnbe_r8
%rdx/%rdx: %rdx_setnbe_r8

%xmm0: %ymm0_setnbe_r8[127:0]
%xmm1: %ymm1_setnbe_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r12d_r13d_rbx

Final state:
%rax/%rax: %rax_setnbe_r8
%rdx/%rdx: %rdx_setnbe_r8

%xmm0: %ymm0_setnbe_r8[127:0]
%xmm1: %ymm1_setnbe_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %r13d, %ebx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rbx/%rbx: (0x0₃₂ ∘ ((0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[63:16] ∘ (%cf_setnbe_r8 ? 0x1₈ : 0x0₈) ∘ (0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[7:0])[63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ ((0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[63:16] ∘ (%cf_setnbe_r8 ? 0x1₈ : 0x0₈) ∘ (0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[7:0])[31:0])[31:0][31:0]
%r13/%r13: 0x0₃₂ ∘ ((0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[63:16] ∘ (%cf_setnbe_r8 ? 0x1₈ : 0x0₈) ∘ (0x0₆₃ ∘ (%zf_setnbe_r8 ? 0x1₁ : 0x0₁))[7:0])[63:32]

%cf: %cf_setnbe_r8
%pf: %pf_setnbe_r8
%af: %af_setnbe_r8
%zf: %zf_setnbe_r8
%sf: %sf_setnbe_r8
%of: %of_setnbe_r8

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_setnbe_r8 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_setnbe_r8 ? 0x1₈ : 0x0₈))
%r13/%r13: 0x0₃₂ ∘ ((%cf_setnbe_r8 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_setnbe_r8 ? 0x1₈ : 0x0₈))

%cf: false
%pf: !((%zf_setnbe_r8 ? 0x1₁ : 0x0₁) = 0x1₁ ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false)
%af: false
%zf: (%cf_setnbe_r8 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_setnbe_r8 ? 0x1₈ : 0x0₈) = 0x0₃₂
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .read_zf_into_rbx

Final state:
%rax/%rax: %rax_setnbe_r8
%rdx/%rdx: %rdx_setnbe_r8

%xmm0: %ymm0_setnbe_r8[127:0]
%xmm1: %ymm1_setnbe_r8[127:0]

-------------------------------------
=====================================
Computing circuit for setnbe %al

.target:
callq .read_zf_into_rbx
setnae %bh
callq .move_064_032_rbx_r12d_r13d
callq .move_032_064_r12d_r13d_rbx
xaddl %r13d, %ebx
callq .read_zf_into_rbx
retq 

Initial state:
%rax/%al: %rax_cmovbeq_r64_r64

State for specgen instruction: setnbe %bl:
%rbx/%bl: 0x0₆₃ ∘ ((%cf_setnbe_r8 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_setnbe_r8 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₁ : 0x0₁)

Register        -> %bl
  translates to => %al
Value is               -> (0x0₆₃ ∘ ((%cf_setnbe_r8 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_setnbe_r8 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₁ : 0x0₁))[7:0]
  after renaming it is => (%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₈ : 0x0₈

Final state
%rax/%al: %rax_cmovbeq_r64_r64[63:8] ∘ ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₈ : 0x0₈)

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddb_r8_r8
%rdx/%rdx: %rdx_xaddb_r8_r8

%xmm0: %ymm0_xaddb_r8_r8[127:0]
%xmm1: %ymm1_xaddb_r8_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %cl, %r13d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r13/%r13: %r13_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r13
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

Final state
%r13/%r13: 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %bl, %r15d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r15/%r15: %r15_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r15
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

Final state
%r15/%r15: 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for movsbq %r15b, %rcx

Final state:
%rcx/%rcx: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %cl, %r13b

Final state:
%r13/%r13b: (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for movslq %r13d, %rbx

Final state:
%rbx/%rbx: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

-------------------------------------
=====================================
Computing circuit for xaddb %al, %al

.target:
callq .clear_cf
movsbl %cl, %r13d
movsbl %bl, %r15d
movsbq %r15b, %rcx
adcb %cl, %r13b
movslq %r13d, %rbx
retq 

Initial state:
%rax/%al: %rax_cmovbeq_r64_r64[63:8] ∘ ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₈ : 0x0₈)

%cf: %cf_cmovbeq_r64_r64
%pf: %pf_cmovbeq_r64_r64
%af: %af_cmovbeq_r64_r64
%zf: %zf_cmovbeq_r64_r64
%sf: %sf_cmovbeq_r64_r64
%of: %of_cmovbeq_r64_r64

State for specgen instruction: xaddb %cl, %bl:
%rcx/%cl: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])
%rbx/%bl: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

Final state
%rax/%al: ((%rax_cmovbeq_r64_r64[63:8] ∘ ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₈ : 0x0₈))[63:8] ∘ ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₈ : 0x0₈))[63:8] ∘ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0]

%cf: (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[8:8] = 0x1₁
%pf: !((((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[0:0] = 0x1₁ ⊕ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[1:1] = 0x1₁ ⊕ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[2:2] = 0x1₁ ⊕ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[3:3] = 0x1₁ ⊕ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[4:4] = 0x1₁ ⊕ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[5:5] = 0x1₁ ⊕ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[6:6] = 0x1₁ ⊕ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:7] = 0x1₁)
%af: (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₅ : 0x0₅) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₅ : 0x0₅))[4:4] = 0x1₁
%zf: (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈
%sf: (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:7] = 0x1₁
%of: true ∧ !(false ↔ (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for cmoveq %rcx, %rbx

Final state:
%rbx/%rbx: (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovbeq_r64_r64 : %rbx_cmovbeq_r64_r64

-------------------------------------
=====================================
Computing circuit for cmovbeq %rcx, %rbx

.target:
setnbe %al
xaddb %al, %al
cmoveq %rcx, %rbx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovnaq_r64_r64

State for specgen instruction: cmovbeq %rcx, %rbx:
%rbx/%rbx: (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovbeq_r64_r64 : %rbx_cmovbeq_r64_r64

Register        -> %rbx
  translates to => %rbx
Value is               -> (((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovbeq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovbeq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovbeq_r64_r64 : %rbx_cmovbeq_r64_r64
  after renaming it is => (((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovnaq_r64_r64 : %rbx_cmovnaq_r64_r64

Final state
%rbx/%rbx: (((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovnaq_r64_r64 : %rbx_cmovnaq_r64_r64

=====================================
=====================================
Computing circuit for cmovnaq %rcx, %rbx

.target:
cmovbeq %rcx, %rbx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovpeq_r64_r64

State for specgen instruction: cmovnaq %rcx, %rbx:
%rbx/%rbx: (((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovnaq_r64_r64 : %rbx_cmovnaq_r64_r64

Register        -> %rbx
  translates to => %rbx
Value is               -> (((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((%cf_cmovnaq_r64_r64 ? 0x1₂₄ : 0x0₂₄) ∘ (%zf_cmovnaq_r64_r64 ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovnaq_r64_r64 : %rbx_cmovnaq_r64_r64
  after renaming it is => (((((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[8:8] = 0x1₁ ? 0x1₂₄ : 0x0₂₄) ∘ (((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[7:0] = 0x0₈ ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[8:8] = 0x1₁ ? 0x1₂₄ : 0x0₂₄) ∘ (((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[7:0] = 0x0₈ ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovpeq_r64_r64 : %rbx_cmovpeq_r64_r64

Final state
%rbx/%rbx: (((((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[8:8] = 0x1₁ ? 0x1₂₄ : 0x0₂₄) ∘ (((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[7:0] = 0x0₈ ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[8:8] = 0x1₁ ? 0x1₂₄ : 0x0₂₄) ∘ (((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[7:0] = 0x0₈ ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovpeq_r64_r64 : %rbx_cmovpeq_r64_r64

=====================================
=====================================
Computing circuit for cmovpeq %rcx, %rbx

.target:
setpo %dh
salb $0x1, %dh
cmovnaq %rcx, %rbx
retq 

Initial state:
%rbx/%rbx: %rbx_cmovpq_r64_r64

State for specgen instruction: cmovpeq %rcx, %rbx:
%rbx/%rbx: (((((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[8:8] = 0x1₁ ? 0x1₂₄ : 0x0₂₄) ∘ (((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[7:0] = 0x0₈ ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[8:8] = 0x1₁ ? 0x1₂₄ : 0x0₂₄) ∘ (((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[7:0] = 0x0₈ ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovpeq_r64_r64 : %rbx_cmovpeq_r64_r64

Register        -> %rbx
  translates to => %rbx
Value is               -> (((((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[8:8] = 0x1₁ ? 0x1₂₄ : 0x0₂₄) ∘ (((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[7:0] = 0x0₈ ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[8:8] = 0x1₁ ? 0x1₂₄ : 0x0₂₄) ∘ (((%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpeq_r64_r64 ? 0x0₉ : 0x1₉))[7:0] = 0x0₈ ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovpeq_r64_r64 : %rbx_cmovpeq_r64_r64
  after renaming it is => (((((%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉))[8:8] = 0x1₁ ? 0x1₂₄ : 0x0₂₄) ∘ (((%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉))[7:0] = 0x0₈ ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((((%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉))[8:8] = 0x1₁ ? 0x1₂₄ : 0x0₂₄) ∘ (((%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉))[7:0] = 0x0₈ ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovpq_r64_r64 : %rbx_cmovpq_r64_r64

Final state
%rbx/%rbx: (((((%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉))[8:8] = 0x1₁ ? 0x1₂₄ : 0x0₂₄) ∘ (((%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉))[7:0] = 0x0₈ ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((((%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉))[8:8] = 0x1₁ ? 0x1₂₄ : 0x0₂₄) ∘ (((%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉))[7:0] = 0x0₈ ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovpq_r64_r64 : %rbx_cmovpq_r64_r64

=====================================
=====================================
Computing circuit for cmovpq %rcx, %rbx

.target:
cmovpeq %rcx, %rbx
retq 

Initial state:
%rbx/%rbx: %rbx

State for specgen instruction: cmovpq %rcx, %rbx:
%rbx/%rbx: (((((%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉))[8:8] = 0x1₁ ? 0x1₂₄ : 0x0₂₄) ∘ (((%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉))[7:0] = 0x0₈ ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((((%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉))[8:8] = 0x1₁ ? 0x1₂₄ : 0x0₂₄) ∘ (((%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉))[7:0] = 0x0₈ ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovpq_r64_r64 : %rbx_cmovpq_r64_r64

Register        -> %rbx
  translates to => %rbx
Value is               -> (((((%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉))[8:8] = 0x1₁ ? 0x1₂₄ : 0x0₂₄) ∘ (((%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉))[7:0] = 0x0₈ ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((((%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉))[8:8] = 0x1₁ ? 0x1₂₄ : 0x0₂₄) ∘ (((%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉) + (%pf_cmovpq_r64_r64 ? 0x0₉ : 0x1₉))[7:0] = 0x0₈ ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx_cmovpq_r64_r64 : %rbx_cmovpq_r64_r64
  after renaming it is => (((((%pf ? 0x0₉ : 0x1₉) + (%pf ? 0x0₉ : 0x1₉))[8:8] = 0x1₁ ? 0x1₂₄ : 0x0₂₄) ∘ (((%pf ? 0x0₉ : 0x1₉) + (%pf ? 0x0₉ : 0x1₉))[7:0] = 0x0₈ ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((((%pf ? 0x0₉ : 0x1₉) + (%pf ? 0x0₉ : 0x1₉))[8:8] = 0x1₁ ? 0x1₂₄ : 0x0₂₄) ∘ (((%pf ? 0x0₉ : 0x1₉) + (%pf ? 0x0₉ : 0x1₉))[7:0] = 0x0₈ ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx : %rbx

Final state
%rbx/%rbx: (((((%pf ? 0x0₉ : 0x1₉) + (%pf ? 0x0₉ : 0x1₉))[8:8] = 0x1₁ ? 0x1₂₄ : 0x0₂₄) ∘ (((%pf ? 0x0₉ : 0x1₉) + (%pf ? 0x0₉ : 0x1₉))[7:0] = 0x0₈ ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((((%pf ? 0x0₉ : 0x1₉) + (%pf ? 0x0₉ : 0x1₉))[8:8] = 0x1₁ ? 0x1₂₄ : 0x0₂₄) ∘ (((%pf ? 0x0₉ : 0x1₉) + (%pf ? 0x0₉ : 0x1₉))[7:0] = 0x0₈ ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx : %rbx

=====================================
Circuits:

%rbx   : (((((%pf ? 0x0₉ : 0x1₉) + (%pf ? 0x0₉ : 0x1₉))[8:8] = 0x1₁ ? 0x1₂₄ : 0x0₂₄) ∘ (((%pf ? 0x0₉ : 0x1₉) + (%pf ? 0x0₉ : 0x1₉))[7:0] = 0x0₈ ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉) + ((((%pf ? 0x0₉ : 0x1₉) + (%pf ? 0x0₉ : 0x1₉))[8:8] = 0x1₁ ? 0x1₂₄ : 0x0₂₄) ∘ (((%pf ? 0x0₉ : 0x1₉) + (%pf ? 0x0₉ : 0x1₉))[7:0] = 0x0₈ ? 0x1₈ : 0x0₈) = 0x0₃₂ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rcx : %rbx

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/