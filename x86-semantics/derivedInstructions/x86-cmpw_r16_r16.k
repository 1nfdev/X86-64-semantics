// Autogenerated using stratification.
requires "x86-configuration.k"

module CMPW-R16-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmpw R1:R16, R2:R16,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(getParentValue(R1, RSMap), 48, 64)))), mi(17, 1)), 0, 1)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(getParentValue(R1, RSMap), 48, 64)))), mi(17, 1)), 0, 1)), mi(17, 65535)), 9, 17))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(getParentValue(R1, RSMap), 48, 64)))), mi(17, 1)), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 48, 64), xorMInt(mi(16, 65535), extractMInt(getParentValue(R1, RSMap), 48, 64))), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(getParentValue(R1, RSMap), 48, 64)))), mi(17, 1)), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(getParentValue(R1, RSMap), 48, 64)))), mi(17, 1)), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), xorMInt(mi(1, 1), extractMInt(getParentValue(R1, RSMap), 48, 49)))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(getParentValue(R1, RSMap), 48, 64)))), mi(17, 1)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(getParentValue(R1, RSMap), 48, 64)))), mi(17, 1)), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module CMPW-R16-R16-SEMANTICS
  imports CMPW-R16-R16
endmodule
/*
TargetInstr:
cmpw %cx, %bx
RWSet:
maybe read:{ %cx %bx }
must read:{ %cx %bx }
maybe write:{ %cf %pf %af %zf %sf %of }
must write:{ %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:subw %cx, %bx  #  1     0    3      OPC=subw_r16_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmpw %cx, %bx

  maybe read:      { %cx %bx }
  must read:       { %cx %bx }
  maybe write:     { %cf %pf %af %zf %sf %of }
  must write:      { %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%cf    : (((0x0₁ ∘ %rbx[15:0] + 0x1₁₇ + 0x0₁ ∘ (%rcx[15:0] ⊕ 0xffff₁₆))[16:16] = 0x1₁ ? 0x0₉ : 0xff₉) + ((0x0₁ ∘ %rbx[15:0] + 0x1₁₇ + 0x0₁ ∘ (%rcx[15:0] ⊕ 0xffff₁₆))[16:16] = 0x1₁ ? 0x0₉ : 0xff₉))[8:8] = 0x1₁
%pf    : !((0x0₁ ∘ %rbx[15:0] + 0x1₁₇ + 0x0₁ ∘ (%rcx[15:0] ⊕ 0xffff₁₆))[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x1₁₇ + 0x0₁ ∘ (%rcx[15:0] ⊕ 0xffff₁₆))[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x1₁₇ + 0x0₁ ∘ (%rcx[15:0] ⊕ 0xffff₁₆))[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x1₁₇ + 0x0₁ ∘ (%rcx[15:0] ⊕ 0xffff₁₆))[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x1₁₇ + 0x0₁ ∘ (%rcx[15:0] ⊕ 0xffff₁₆))[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x1₁₇ + 0x0₁ ∘ (%rcx[15:0] ⊕ 0xffff₁₆))[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x1₁₇ + 0x0₁ ∘ (%rcx[15:0] ⊕ 0xffff₁₆))[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x1₁₇ + 0x0₁ ∘ (%rcx[15:0] ⊕ 0xffff₁₆))[7:7] = 0x1₁)
%af    : (0x0₁ ∘ %rbx[3:0] + 0x0₁ ∘ (%rcx[3:0] ⊕ 0xf₄))[4:4] = 0x1₁
%zf    : (0x0₁ ∘ %rbx[15:0] + 0x1₁₇ + 0x0₁ ∘ (%rcx[15:0] ⊕ 0xffff₁₆))[15:0] = 0x0₁₆
%sf    : (0x0₁ ∘ %rbx[15:0] + 0x1₁₇ + 0x0₁ ∘ (%rcx[15:0] ⊕ 0xffff₁₆))[15:15] = 0x1₁
%of    : (%rbx[15:15] = 0x1₁ ↔ (%rcx[15:15] ⊕ 0x1₁) = 0x1₁) ∧ !(%rbx[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx[15:0] + 0x1₁₇ + 0x0₁ ∘ (%rcx[15:0] ⊕ 0xffff₁₆))[15:15] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/