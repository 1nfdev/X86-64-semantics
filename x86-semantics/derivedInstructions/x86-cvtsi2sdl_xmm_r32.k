// Autogenerated using stratification.
requires "x86-configuration.k"

module CVTSI2SDL-XMM-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cvtsi2sdl R1:R32, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 192), Float2MInt(Int2Float(svalueMInt(extractMInt(getParentValue(R1, RSMap), 32, 64)), 53, 11), 64)) )


)

    </regstate>
endmodule

module CVTSI2SDL-XMM-R32-SEMANTICS
  imports CVTSI2SDL-XMM-R32
endmodule
/*
TargetInstr:
cvtsi2sdl %ebx, %xmm1
RWSet:
maybe read:{ %ebx %xmm1 %mxcsr::rc[0] }
must read:{ %ebx %xmm1 %mxcsr::rc[0] }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse2 }

Circuit:
circuit:vcvtsi2sdl %ebx, %xmm1, %xmm12  #  1     0    4      OPC=vcvtsi2sdl_xmm_xmm_r32
circuit:movsd %xmm12, %xmm1             #  2     0x4  5      OPC=movsd_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cvtsi2sdl %ebx, %xmm1

  maybe read:      { %ebx %xmm1 %mxcsr::rc[0] }
  must read:       { %ebx %xmm1 %mxcsr::rc[0] }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse2 }

Circuits:

%ymm1  : %ymm1[255:128] ∘ (%ymm1[127:64] ∘ cvt_int32_to_double(%rbx[31:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/