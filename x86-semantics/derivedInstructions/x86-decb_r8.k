// Autogenerated using stratification.
requires "x86-configuration.k"

module DECB-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (decb R1:R8,  .Typedoperands) => .
  ...</k>
    <regstate> ...
 "SF" |-> ( _ => (#ifMInt (eqMInt(mi(8, 1), lshrMInt(addMInt(mi(8, 255), extractMInt(MI445, 56, 64)), 7)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "AF" |-> ( _ => (#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 1), extractMInt(MI445, 56, 64)), addMInt(mi(8, 255), extractMInt(MI445, 56, 64))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ( _ => (#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(xorMInt(andMInt(mi(64, countOnes(addMInt(mi(8, 255), extractMInt(MI445, 56, 64)), 0)), mi(64, 1)), mi(64, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ( _ => (#ifMInt (eqMInt(mi(8, 2), addMInt(xorMInt(mi(8, 1), lshrMInt(addMInt(mi(8, 255), extractMInt(MI445, 56, 64)), 7)), xorMInt(lshrMInt(extractMInt(MI445, 56, 64), 7), lshrMInt(addMInt(mi(8, 255), extractMInt(MI445, 56, 64)), 7)))) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R1) |-> ( MI445 => orMInt(andMInt(MI445, mi(64, -256)), mi(64, uvalueMInt(addMInt(mi(8, 255), extractMInt(MI445, 56, 64))))) )

 "ZF" |-> ( _ => (#ifMInt (eqMInt(addMInt(mi(8, 255), extractMInt(MI445, 56, 64)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


    ...</regstate>
endmodule

module DECB-R8-SEMANTICS
  imports DECB-R8
endmodule
