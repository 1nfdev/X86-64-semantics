// Autogenerated using stratification.
requires "x86-configuration.k"

module DECQ-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (decq R1:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "SF" |-> ((#ifMInt (eqMInt(mi(64, 1), lshrMInt(addMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap)), 63)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "AF" |-> ((#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap)), addMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap))), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(xorMInt(andMInt(mi(64, countOnes(extractMInt(addMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap)), 56, 64), 0)), mi(64, 1)), mi(64, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt (eqMInt(mi(64, 2), addMInt(xorMInt(mi(64, 1), lshrMInt(addMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap)), 63)), xorMInt(lshrMInt(getParentValue(R1, RSMap), 63), lshrMInt(addMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap)), 63)))) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R1) |-> (addMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap)) )

 "ZF" |-> ((#ifMInt (eqMInt(addMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module DECQ-R64-SEMANTICS
  imports DECQ-R64
endmodule
/*
TargetInstr:
decq %rbx
RWSet:
maybe read:{ %rbx }
must read:{ %rbx }
maybe write:{ %rbx %pf %af %zf %sf %of }
must write:{ %rbx %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movq $0xffffffffffffffff, %rax  #  1     0    10     OPC=movq_r64_imm64
circuit:addq %rax, %rbx                 #  2     0xa  3      OPC=addq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

decq %rbx

  maybe read:      { %rbx }
  must read:       { %rbx }
  maybe write:     { %rbx %pf %af %zf %sf %of }
  must write:      { %rbx %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %rax

Final state:
%rax/%rax: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for orq %rbx, %rbx

Final state:
%rbx/%rbx: %rbx_addq_r64_r64 | %rbx_addq_r64_r64

%cf: false
%pf: !((%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][0:0] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][1:1] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][2:2] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][3:3] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][4:4] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][5:5] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][6:6] = 0x1₁ ⊕ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[7:0][7:7] = 0x1₁)
%zf: (%rbx_addq_r64_r64 | %rbx_addq_r64_r64) = 0x0₆₄
%sf: (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcq %rcx, %rbx

Final state:
%rbx/%rbx: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[64:64] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addq_r64_r64[3:0] + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0] = 0x0₆₄
%sf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][63:63] = 0x1₁
%of: (%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[63:63] = 0x1₁) ∧ !(%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:63] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for addq %rax, %rbx

.target:
orq %rbx, %rbx
adcq %rcx, %rbx
retq 

Initial state:
%rbx/%rbx: %rbx_decq_r64

%cf: %cf_decq_r64
%pf: %pf_decq_r64
%af: %af_decq_r64
%zf: %zf_decq_r64
%sf: %sf_decq_r64
%of: %of_decq_r64

State for specgen instruction: addq %rcx, %rbx:
%rbx/%rbx: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[64:64] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addq_r64_r64[3:0] + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0] = 0x0₆₄
%sf: ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0][63:63] = 0x1₁
%of: (%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64)[63:63] = 0x1₁) ∧ !(%rcx_addq_r64_r64[63:63] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:63] = 0x1₁)

Register        -> %rbx
  translates to => %rbx
Value is               -> ((false ? 0x0₁ ∘ %rcx_addq_r64_r64 + 0x1₆₅ : 0x0₁ ∘ %rcx_addq_r64_r64) + 0x0₁ ∘ (%rbx_addq_r64_r64 | %rbx_addq_r64_r64))[63:0]
  after renaming it is => (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0]

Final state
%rbx/%rbx: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0]

%cf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[64:64] = 0x1₁
%pf: !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[7:7] = 0x1₁)
%af: (0xf₅ + 0x0₁ ∘ %rbx_decq_r64[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:63] = 0x1₁
%of: (true ↔ %rbx_decq_r64[63:63] = 0x1₁) ∧ !(true ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:63] = 0x1₁)

=====================================
=====================================
Computing circuit for decq %rbx

.target:
movq $0xffffffffffffffff, %rax
addq %rax, %rbx
retq 

Initial state:
%rbx/%rbx: %rbx

%pf: %pf
%af: %af
%zf: %zf
%sf: %sf
%of: %of

State for specgen instruction: decq %rbx:
%rbx/%rbx: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0]

%pf: !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[7:7] = 0x1₁)
%af: (0xf₅ + 0x0₁ ∘ %rbx_decq_r64[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:63] = 0x1₁
%of: (true ↔ %rbx_decq_r64[63:63] = 0x1₁) ∧ !(true ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:63] = 0x1₁)

Register        -> %rbx
  translates to => %rbx
Value is               -> (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx_decq_r64)[63:0]
  after renaming it is => (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[63:0]

Final state
%rbx/%rbx: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[63:0]

%pf: !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[7:7] = 0x1₁)
%af: (0xf₅ + 0x0₁ ∘ %rbx[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[63:63] = 0x1₁
%of: (true ↔ %rbx[63:63] = 0x1₁) ∧ !(true ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[63:63] = 0x1₁)

=====================================
Circuits:

%rbx   : (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[63:0]

%pf    : !((0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[7:7] = 0x1₁)
%af    : (0xf₅ + 0x0₁ ∘ %rbx[3:0])[4:4] = 0x1₁
%zf    : (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[63:0] = 0x0₆₄
%sf    : (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[63:63] = 0x1₁
%of    : (true ↔ %rbx[63:63] = 0x1₁) ∧ !(true ↔ (0x0₁ ∘ 0xffffffffffffffff₆₄ + 0x0₁ ∘ %rbx)[63:63] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/