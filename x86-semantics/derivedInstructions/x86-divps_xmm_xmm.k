// Autogenerated using stratification.
requires "x86-configuration.k"

module DIVPS-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (divps R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 128, 160), 24, 8)  /Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 160, 192), 24, 8)  /Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 192, 224), 24, 8)  /Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 224, 256), 24, 8) ) , 32)))) )


)

    </regstate>
endmodule

module DIVPS-XMM-XMM-SEMANTICS
  imports DIVPS-XMM-XMM
endmodule
/*
TargetInstr:
divps %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 }
must read:{ %xmm1 %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse }

Circuit:
circuit:vmovupd %xmm2, %xmm5               #  1     0     4      OPC=vmovupd_xmm_xmm
circuit:vmovupd %xmm1, %xmm6               #  2     0x4   4      OPC=vmovupd_xmm_xmm
circuit:vdivps %ymm5, %ymm6, %ymm2         #  3     0x8   4      OPC=vdivps_ymm_ymm_ymm
circuit:callq .move_128_64_xmm2_xmm8_xmm9  #  4     0xc   5      OPC=callq_label
circuit:callq .move_64_128_xmm8_xmm9_xmm1  #  5     0x11  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

divps %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 }
  must read:       { %xmm1 %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse }

-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovupd_xmm_xmm
%rdx/%rdx: %rdx_vmovupd_xmm_xmm

%xmm0: %ymm0_vmovupd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovupd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovupd_xmm_xmm
%rdx/%rdx: %rdx_vmovupd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovupd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovupd %xmm2, %xmm5

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm5: %ymm5_divps_xmm_xmm

State for specgen instruction: vmovupd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovupd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm5: 0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovupd_xmm_xmm
%rdx/%rdx: %rdx_vmovupd_xmm_xmm

%xmm0: %ymm0_vmovupd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovupd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovupd_xmm_xmm
%rdx/%rdx: %rdx_vmovupd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovupd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovupd %xmm1, %xmm6

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm6: %ymm6_divps_xmm_xmm

State for specgen instruction: vmovupd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovupd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm6: 0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for vdivps %ymm5, %ymm6, %ymm2

Final state:
%ymm2: div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[255:224]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[223:192]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[191:160]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[159:128]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[127:96]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[95:64]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[63:32]) ∘ div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[31:0])))))))

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_64_xmm2_xmm8_xmm9

Final state:
%rax/%rax: %rax_divps_xmm_xmm
%rdx/%rdx: %rdx_divps_xmm_xmm

%xmm0: %ymm0_divps_xmm_xmm[127:0]
%xmm1: %ymm1_divps_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_64_128_xmm8_xmm9_xmm1

Final state:
%rax/%rax: %rax_divps_xmm_xmm
%rdx/%rdx: %rdx_divps_xmm_xmm

%xmm0: %ymm0_divps_xmm_xmm[127:0]
%xmm1: (%ymm1_divps_xmm_xmm[255:128] ∘ ((%ymm9_divps_xmm_xmm[255:128] ∘ (0x0₆₄ ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[255:224]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[223:192]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[191:160]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[159:128]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[127:96]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[95:64]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[63:32]) ∘ div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[31:0]))))))))[127:0][127:64]))[127:0][63:0] ∘ (%ymm8_divps_xmm_xmm[255:128] ∘ (0x0₆₄ ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[255:224]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[223:192]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[191:160]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[159:128]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[127:96]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[95:64]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[63:32]) ∘ div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[31:0]))))))))[127:0][63:0]))[127:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for divps %xmm2, %xmm1

.target:
vmovupd %xmm2, %xmm5
vmovupd %xmm1, %xmm6
vdivps %ymm5, %ymm6, %ymm2
callq .move_128_64_xmm2_xmm8_xmm9
callq .move_64_128_xmm8_xmm9_xmm1
retq 

Initial state:
%xmm1: %ymm1[127:0]

State for specgen instruction: divps %xmm2, %xmm1:
%xmm1: (%ymm1_divps_xmm_xmm[255:128] ∘ ((%ymm9_divps_xmm_xmm[255:128] ∘ (0x0₆₄ ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[255:224]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[223:192]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[191:160]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[159:128]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[127:96]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[95:64]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[63:32]) ∘ div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[31:0]))))))))[127:0][127:64]))[127:0][63:0] ∘ (%ymm8_divps_xmm_xmm[255:128] ∘ (0x0₆₄ ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[255:224]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[223:192]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[191:160]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[159:128]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[127:96]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[95:64]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[63:32]) ∘ div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[31:0]))))))))[127:0][63:0]))[127:0][63:0]))[127:0]

Final state
%xmm1: (%ymm1[255:128] ∘ (div_single(%ymm1[127:96], %ymm2[127:96]) ∘ (div_single(%ymm1[95:64], %ymm2[95:64]) ∘ (div_single(%ymm1[63:32], %ymm2[63:32]) ∘ div_single(%ymm1[31:0], %ymm2[31:0])))))[127:0]

=====================================
Circuits:

%ymm1  : %ymm1[255:128] ∘ (div_single(%ymm1[127:96], %ymm2[127:96]) ∘ (div_single(%ymm1[95:64], %ymm2[95:64]) ∘ (div_single(%ymm1[63:32], %ymm2[63:32]) ∘ div_single(%ymm1[31:0], %ymm2[31:0]))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/