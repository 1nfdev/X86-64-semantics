// Autogenerated using stratification.
requires "x86-configuration.k"

module INCW-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (incw R1:R16,  .Typedoperands) => .
  ...</k>
    <regstate> ...
 "SF" |-> ( _ => #ifMInt (eqMInt(mi(bitwidthMInt(extractMask(plugInMask(MI639, addMInt(extractMask(MI639, 16, 0), mi(16, 1)), 0), 16, 0)), 1), lshrMInt(extractMask(plugInMask(MI639, addMInt(extractMask(MI639, 16, 0), mi(16, 1)), 0), 16, 0),  ( bitwidthMInt(extractMask(plugInMask(MI639, addMInt(extractMask(MI639, 16, 0), mi(16, 1)), 0), 16, 0))  -Int  1 ) )) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi  )

 "OF" |-> ( _ => #ifMInt (eqMInt(mi(bitwidthMInt(extractMask(MI639, 16, 0)), 2), addMInt(xorMInt(lshrMInt(mi(16, 0),  ( bitwidthMInt(extractMask(MI639, 16, 0))  -Int  1 ) ), lshrMInt(addMInt(extractMask(MI639, 16, 0), mi(16, 1)),  ( bitwidthMInt(extractMask(MI639, 16, 0))  -Int  1 ) )), xorMInt(lshrMInt(extractMask(MI639, 16, 0),  ( bitwidthMInt(extractMask(MI639, 16, 0))  -Int  1 ) ), lshrMInt(addMInt(extractMask(MI639, 16, 0), mi(16, 1)),  ( bitwidthMInt(extractMask(MI639, 16, 0))  -Int  1 ) )))) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi  )

 "AF" |-> ( _ => #ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(16, 0), extractMask(MI639, 16, 0)), addMInt(extractMask(MI639, 16, 0), mi(16, 1))), 4), mi(bitwidthMInt(extractMask(MI639, 16, 0)), 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi):>Bool ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi  )

convToRegKeys(R1) |-> ( MI639 => plugInMask(MI639, addMInt(extractMask(MI639, 16, 0), mi(16, 1)), 0) )

 "ZF" |-> ( _ => #ifMInt (eqMInt(extractMask(plugInMask(MI639, addMInt(extractMask(MI639, 16, 0), mi(16, 1)), 0), 16, 0), mi(bitwidthMInt(extractMask(plugInMask(MI639, addMInt(extractMask(MI639, 16, 0), mi(16, 1)), 0), 16, 0)), 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi  )

 "PF" |-> ( _ => #ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(xorMInt(andMInt(mi(64, countOnes(extractMask(extractMask(plugInMask(MI639, addMInt(extractMask(MI639, 16, 0), mi(16, 1)), 0), 16, 0), 8, 0), 0)), mi(64, 1)), mi(64, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi):>Bool ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi  )


    ...</regstate>
endmodule

module INCW-SEMANTICS
  imports INCW-R16
endmodule
  