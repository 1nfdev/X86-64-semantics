// Autogenerated using stratification.
requires "x86-configuration.k"

module MAXSD-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (maxsd R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 192), Float2MInt(maxFloat(MInt2Float(extractMInt(getParentValue(R1, RSMap), 192, 256), 53, 11), MInt2Float(extractMInt(getParentValue(R2, RSMap), 192, 256), 53, 11)), 64)) )


)

    </regstate>
endmodule

module MAXSD-XMM-XMM-SEMANTICS
  imports MAXSD-XMM-XMM
endmodule
/*
TargetInstr:
maxsd %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 }
must read:{ %xmm1 %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse2 }

Circuit:
circuit:vmaxsd %xmm2, %xmm1, %xmm6  #  1     0    4      OPC=vmaxsd_xmm_xmm_xmm
circuit:movupd %xmm6, %xmm1         #  2     0x4  4      OPC=movupd_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

maxsd %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 }
  must read:       { %xmm1 %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse2 }

-------------------------------------
Getting base circuit for callq .move_128_064_xmm3_r8_r9

Final state:
%rax/%rax: %rax_vpunpcklqdq_xmm_xmm_xmm
%rdx/%rdx: %rdx_vpunpcklqdq_xmm_xmm_xmm

%xmm0: %ymm0_vpunpcklqdq_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vpunpcklqdq_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vpunpcklqdq_xmm_xmm_xmm
%rdx/%rdx: %rdx_vpunpcklqdq_xmm_xmm_xmm

%xmm0: %ymm0_vpunpcklqdq_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vpunpcklqdq_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for movq %r8, %r11

Final state:
%r11/%r11: %ymm3_vpunpcklqdq_xmm_xmm_xmm[127:0][63:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm1

Final state:
%rax/%rax: %rax_vpunpcklqdq_xmm_xmm_xmm
%rdx/%rdx: %rdx_vpunpcklqdq_xmm_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm3_vpunpcklqdq_xmm_xmm_xmm[127:0][63:0][63:0] ∘ %ymm2_vpunpcklqdq_xmm_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vpunpcklqdq %xmm3, %xmm3, %xmm13

.target:
callq .move_128_064_xmm3_r8_r9
callq .move_128_064_xmm2_r10_r11
vzeroall 
movq %r8, %r11
callq .move_064_128_r10_r11_xmm1
retq 

Initial state:
%ymm13: %ymm13_vmaxsd_xmm_xmm_xmm

State for specgen instruction: vpunpcklqdq %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm3_vpunpcklqdq_xmm_xmm_xmm[127:0][63:0][63:0] ∘ %ymm2_vpunpcklqdq_xmm_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm13: 0x0₁₂₈ ∘ (%ymm3_vmaxsd_xmm_xmm_xmm[63:0] ∘ %ymm3_vmaxsd_xmm_xmm_xmm[63:0])

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: %ymm0_vmovdqa_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqa %xmm2, %xmm6

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm6: %ymm6_vmaxsd_xmm_xmm_xmm

State for specgen instruction: vmovdqa %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm6: 0x0₁₂₈ ∘ %ymm2_vmaxsd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for vmaxpd %ymm13, %ymm6, %ymm3

Final state:
%ymm3: (maxcmp_double((0x0₁₂₈ ∘ %ymm2_vmaxsd_xmm_xmm_xmm[127:0])[255:192], (0x0₁₂₈ ∘ (%ymm3_vmaxsd_xmm_xmm_xmm[63:0] ∘ %ymm3_vmaxsd_xmm_xmm_xmm[63:0]))[255:192])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxsd_xmm_xmm_xmm[127:0])[255:192] : (0x0₁₂₈ ∘ (%ymm3_vmaxsd_xmm_xmm_xmm[63:0] ∘ %ymm3_vmaxsd_xmm_xmm_xmm[63:0]))[255:192]) ∘ ((maxcmp_double((0x0₁₂₈ ∘ %ymm2_vmaxsd_xmm_xmm_xmm[127:0])[191:128], (0x0₁₂₈ ∘ (%ymm3_vmaxsd_xmm_xmm_xmm[63:0] ∘ %ymm3_vmaxsd_xmm_xmm_xmm[63:0]))[191:128])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxsd_xmm_xmm_xmm[127:0])[191:128] : (0x0₁₂₈ ∘ (%ymm3_vmaxsd_xmm_xmm_xmm[63:0] ∘ %ymm3_vmaxsd_xmm_xmm_xmm[63:0]))[191:128]) ∘ ((maxcmp_double((0x0₁₂₈ ∘ %ymm2_vmaxsd_xmm_xmm_xmm[127:0])[127:64], (0x0₁₂₈ ∘ (%ymm3_vmaxsd_xmm_xmm_xmm[63:0] ∘ %ymm3_vmaxsd_xmm_xmm_xmm[63:0]))[127:64])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxsd_xmm_xmm_xmm[127:0])[127:64] : (0x0₁₂₈ ∘ (%ymm3_vmaxsd_xmm_xmm_xmm[63:0] ∘ %ymm3_vmaxsd_xmm_xmm_xmm[63:0]))[127:64]) ∘ (maxcmp_double((0x0₁₂₈ ∘ %ymm2_vmaxsd_xmm_xmm_xmm[127:0])[63:0], (0x0₁₂₈ ∘ (%ymm3_vmaxsd_xmm_xmm_xmm[63:0] ∘ %ymm3_vmaxsd_xmm_xmm_xmm[63:0]))[63:0])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxsd_xmm_xmm_xmm[127:0])[63:0] : (0x0₁₂₈ ∘ (%ymm3_vmaxsd_xmm_xmm_xmm[63:0] ∘ %ymm3_vmaxsd_xmm_xmm_xmm[63:0]))[63:0])))

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_64_xmm2_xmm8_xmm9

Final state:
%rax/%rax: %rax_vmovsd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vmovsd_xmm_xmm_xmm

%xmm0: %ymm0_vmovsd_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vmovsd_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: %ymm0_vmovapd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovapd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovapd %xmm3, %xmm13

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm13: %ymm13_vmovsd_xmm_xmm_xmm

State for specgen instruction: vmovapd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm13: 0x0₁₂₈ ∘ %ymm3_vmovsd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm3_r8_r9

Final state:
%rax/%rax: %rax_vpunpcklqdq_xmm_xmm_xmm
%rdx/%rdx: %rdx_vpunpcklqdq_xmm_xmm_xmm

%xmm0: %ymm0_vpunpcklqdq_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vpunpcklqdq_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vpunpcklqdq_xmm_xmm_xmm
%rdx/%rdx: %rdx_vpunpcklqdq_xmm_xmm_xmm

%xmm0: %ymm0_vpunpcklqdq_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vpunpcklqdq_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for movq %r8, %r11

Final state:
%r11/%r11: %ymm3_vpunpcklqdq_xmm_xmm_xmm[127:0][63:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm1

Final state:
%rax/%rax: %rax_vpunpcklqdq_xmm_xmm_xmm
%rdx/%rdx: %rdx_vpunpcklqdq_xmm_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm3_vpunpcklqdq_xmm_xmm_xmm[127:0][63:0][63:0] ∘ %ymm2_vpunpcklqdq_xmm_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vpunpcklqdq %xmm9, %xmm13, %xmm1

.target:
callq .move_128_064_xmm3_r8_r9
callq .move_128_064_xmm2_r10_r11
vzeroall 
movq %r8, %r11
callq .move_064_128_r10_r11_xmm1
retq 

Initial state:
%ymm1: %ymm1_vmovsd_xmm_xmm_xmm

State for specgen instruction: vpunpcklqdq %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm3_vpunpcklqdq_xmm_xmm_xmm[127:0][63:0][63:0] ∘ %ymm2_vpunpcklqdq_xmm_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (%ymm2_vmovsd_xmm_xmm_xmm[127:64] ∘ %ymm3_vmovsd_xmm_xmm_xmm[63:0])

=====================================
=====================================
Computing circuit for vmovsd %xmm3, %xmm2, %xmm1

.target:
callq .move_128_64_xmm2_xmm8_xmm9
vmovapd %xmm3, %xmm13
vpunpcklqdq %xmm9, %xmm13, %xmm1
retq 

Initial state:
%ymm1: %ymm1_vmaxsd_xmm_xmm_xmm

State for specgen instruction: vmovsd %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₁₂₈ ∘ (%ymm2_vmovsd_xmm_xmm_xmm[127:64] ∘ %ymm3_vmovsd_xmm_xmm_xmm[63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (%ymm2_vmaxsd_xmm_xmm_xmm[127:64] ∘ (maxcmp_double(%ymm2_vmaxsd_xmm_xmm_xmm[63:0], %ymm3_vmaxsd_xmm_xmm_xmm[63:0]) = 0x1₁ ? %ymm2_vmaxsd_xmm_xmm_xmm[63:0] : %ymm3_vmaxsd_xmm_xmm_xmm[63:0]))

=====================================
=====================================
Computing circuit for vmaxsd %xmm2, %xmm1, %xmm6

.target:
vpunpcklqdq %xmm3, %xmm3, %xmm13
vmovdqa %xmm2, %xmm6
vmaxpd %ymm13, %ymm6, %ymm3
vmovsd %xmm3, %xmm2, %xmm1
retq 

Initial state:
%ymm6: %ymm6_maxsd_xmm_xmm

State for specgen instruction: vmaxsd %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₁₂₈ ∘ (%ymm2_vmaxsd_xmm_xmm_xmm[127:64] ∘ (maxcmp_double(%ymm2_vmaxsd_xmm_xmm_xmm[63:0], %ymm3_vmaxsd_xmm_xmm_xmm[63:0]) = 0x1₁ ? %ymm2_vmaxsd_xmm_xmm_xmm[63:0] : %ymm3_vmaxsd_xmm_xmm_xmm[63:0]))

Final state
%ymm6: 0x0₁₂₈ ∘ (%ymm1_maxsd_xmm_xmm[127:64] ∘ (maxcmp_double(%ymm1_maxsd_xmm_xmm[63:0], %ymm2_maxsd_xmm_xmm[63:0]) = 0x1₁ ? %ymm1_maxsd_xmm_xmm[63:0] : %ymm2_maxsd_xmm_xmm[63:0]))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_movdqa_xmm_xmm
%rdx/%rdx: %rdx_movdqa_xmm_xmm

%xmm0: %ymm0_movdqa_xmm_xmm[127:0]
%xmm1: %ymm1_movdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_movdqa_xmm_xmm
%rdx/%rdx: %rdx_movdqa_xmm_xmm

%xmm0: %ymm0_movdqa_xmm_xmm[127:0]
%xmm1: (%ymm1_movdqa_xmm_xmm[255:128] ∘ (%ymm2_movdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_movdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for movdqa %xmm2, %xmm1

.target:
callq .move_128_064_xmm2_r8_r9
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%xmm1: %ymm1_movupd_xmm_xmm[127:0]

State for specgen instruction: movdqa %xmm2, %xmm1:
%xmm1: (%ymm1_movdqa_xmm_xmm[255:128] ∘ (%ymm2_movdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_movdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

Final state
%xmm1: (%ymm1_movupd_xmm_xmm[255:128] ∘ %ymm2_movupd_xmm_xmm[127:0])[127:0]

=====================================
=====================================
Computing circuit for movupd %xmm6, %xmm1

.target:
movdqa %xmm2, %xmm1
retq 

Initial state:
%xmm1: %ymm1_maxsd_xmm_xmm[127:0]

State for specgen instruction: movupd %xmm2, %xmm1:
%xmm1: (%ymm1_movupd_xmm_xmm[255:128] ∘ %ymm2_movupd_xmm_xmm[127:0])[127:0]

Final state
%xmm1: (%ymm1_maxsd_xmm_xmm[255:128] ∘ (%ymm1_maxsd_xmm_xmm[127:64] ∘ (maxcmp_double(%ymm1_maxsd_xmm_xmm[63:0], %ymm2_maxsd_xmm_xmm[63:0]) = 0x1₁ ? %ymm1_maxsd_xmm_xmm[63:0] : %ymm2_maxsd_xmm_xmm[63:0])))[127:0]

=====================================
=====================================
Computing circuit for maxsd %xmm2, %xmm1

.target:
vmaxsd %xmm2, %xmm1, %xmm6
movupd %xmm6, %xmm1
retq 

Initial state:
%xmm1: %ymm1[127:0]

State for specgen instruction: maxsd %xmm2, %xmm1:
%xmm1: (%ymm1_maxsd_xmm_xmm[255:128] ∘ (%ymm1_maxsd_xmm_xmm[127:64] ∘ (maxcmp_double(%ymm1_maxsd_xmm_xmm[63:0], %ymm2_maxsd_xmm_xmm[63:0]) = 0x1₁ ? %ymm1_maxsd_xmm_xmm[63:0] : %ymm2_maxsd_xmm_xmm[63:0])))[127:0]

Final state
%xmm1: (%ymm1[255:128] ∘ (%ymm1[127:64] ∘ (maxcmp_double(%ymm1[63:0], %ymm2[63:0]) = 0x1₁ ? %ymm1[63:0] : %ymm2[63:0])))[127:0]

=====================================
Circuits:

%ymm1  : %ymm1[255:128] ∘ (%ymm1[127:64] ∘ (maxcmp_double(%ymm1[63:0], %ymm2[63:0]) = 0x1₁ ? %ymm1[63:0] : %ymm2[63:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/