// Autogenerated using stratification.
requires "x86-configuration.k"

module MINSS-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (minss R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 224), Float2MInt(minFloat(MInt2Float(extractMInt(getParentValue(R1, RSMap), 224, 256), 24, 8), MInt2Float(extractMInt(getParentValue(R2, RSMap), 224, 256), 24, 8)), 32)) )


)

    </regstate>
endmodule

module MINSS-XMM-XMM-SEMANTICS
  imports MINSS-XMM-XMM
endmodule
/*
TargetInstr:
minss %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 }
must read:{ %xmm1 %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse }

Circuit:
circuit:callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11  #  1     0     5      OPC=callq_label
circuit:callq .move_128_032_xmm2_xmm4_xmm5_xmm6_xmm7    #  2     0x5   5      OPC=callq_label
circuit:minps %xmm4, %xmm8                              #  3     0xa   4      OPC=minps_xmm_xmm
circuit:callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1  #  4     0xe   5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

minss %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 }
  must read:       { %xmm1 %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse }

-------------------------------------
Getting base circuit for callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_minss_xmm_xmm
%rdx/%rdx: %rdx_minss_xmm_xmm

%xmm0: %ymm0_minss_xmm_xmm[127:0]
%xmm1: %ymm1_minss_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_032_xmm2_xmm4_xmm5_xmm6_xmm7

Final state:
%rax/%rax: %rax_minss_xmm_xmm
%rdx/%rdx: %rdx_minss_xmm_xmm

%xmm0: %ymm0_minss_xmm_xmm[127:0]
%xmm1: %ymm1_minss_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: %ymm0_vmovdqa_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqa %xmm3, %xmm1

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm1: %ymm1_vminps_xmm_xmm_xmm

State for specgen instruction: vmovdqa %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: %ymm0_vmovdqu_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqu_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm3

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_256_128_ymm3_xmm12_xmm13

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_256_xmm12_xmm13_ymm1

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: ((0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqu %xmm2, %xmm14

.target:
callq .move_128_064_xmm2_r10_r11
vzeroall 
callq .move_064_128_r10_r11_xmm3
callq .move_256_128_ymm3_xmm12_xmm13
callq .move_128_256_xmm12_xmm13_ymm1
retq 

Initial state:
%ymm14: %ymm14_vminps_xmm_xmm_xmm

State for specgen instruction: vmovdqu %xmm2, %xmm1:
%ymm1: (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0]

Final state
%ymm14: 0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for vminps %ymm1, %ymm14, %ymm1

Final state:
%ymm1: (mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[255:224])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[255:224] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[255:224]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[223:192])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[223:192] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[223:192]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[191:160])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[191:160] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[191:160]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[159:128])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[159:128] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[159:128]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[127:96])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[127:96] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[127:96]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[95:64])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[95:64] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[95:64]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[63:32])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[63:32] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[63:32]) ∘ (mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[31:0])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[31:0] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[31:0])))))))

-------------------------------------
=====================================
Computing circuit for vminps %xmm2, %xmm1, %xmm2

.target:
vmovdqa %xmm3, %xmm1
vmovdqu %xmm2, %xmm14
vminps %ymm1, %ymm14, %ymm1
retq 

Initial state:
%ymm2: %ymm2_minps_xmm_xmm

State for specgen instruction: vminps %xmm3, %xmm2, %xmm1:
%ymm1: (mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[255:224])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[255:224] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[255:224]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[223:192])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[223:192] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[223:192]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[191:160])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[191:160] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[191:160]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[159:128])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[159:128] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[159:128]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[127:96])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[127:96] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[127:96]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[95:64])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[95:64] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[95:64]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[63:32])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[63:32] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[63:32]) ∘ (mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[31:0])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[31:0] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[31:0])))))))

Final state
%ymm2: 0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0])))))))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_minps_xmm_xmm
%rdx/%rdx: %rdx_minps_xmm_xmm

%xmm0: %ymm0_minps_xmm_xmm[127:0]
%xmm1: %ymm1_minps_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1

Final state:
%rax/%rax: %rax_minps_xmm_xmm
%rdx/%rdx: %rdx_minps_xmm_xmm

%xmm0: %ymm0_minps_xmm_xmm[127:0]
%xmm1: (%ymm1_minps_xmm_xmm[255:128] ∘ ((%ymm11_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][63:32]))[127:0][31:0] ∘ (%ymm8_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][31:0]))[127:0][31:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for minps %xmm4, %xmm8

.target:
vminps %xmm2, %xmm1, %xmm2
callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
retq 

Initial state:
%xmm8: (%ymm8_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][31:0]))[127:0]

State for specgen instruction: minps %xmm2, %xmm1:
%xmm1: (%ymm1_minps_xmm_xmm[255:128] ∘ ((%ymm11_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][63:32]))[127:0][31:0] ∘ (%ymm8_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][31:0]))[127:0][31:0]))[127:0]

Final state
%xmm8: ((%ymm8_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][31:0]))[255:128] ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (mincmp_single(%ymm1_minss_xmm_xmm[31:0], %ymm2_minss_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minss_xmm_xmm[31:0] : %ymm2_minss_xmm_xmm[31:0])))))[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1

Final state:
%rax/%rax: %rax_minss_xmm_xmm
%rdx/%rdx: %rdx_minss_xmm_xmm

%xmm0: %ymm0_minss_xmm_xmm[127:0]
%xmm1: (%ymm1_minss_xmm_xmm[255:128] ∘ ((%ymm11_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ ((%ymm8_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][31:0]))[255:128] ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (mincmp_single(%ymm1_minss_xmm_xmm[31:0], %ymm2_minss_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minss_xmm_xmm[31:0] : %ymm2_minss_xmm_xmm[31:0])))))[127:0][31:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for minss %xmm2, %xmm1

.target:
callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11
callq .move_128_032_xmm2_xmm4_xmm5_xmm6_xmm7
minps %xmm4, %xmm8
callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
retq 

Initial state:
%xmm1: %ymm1[127:0]

State for specgen instruction: minss %xmm2, %xmm1:
%xmm1: (%ymm1_minss_xmm_xmm[255:128] ∘ ((%ymm11_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ ((%ymm8_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][31:0]))[255:128] ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (mincmp_single(%ymm1_minss_xmm_xmm[31:0], %ymm2_minss_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minss_xmm_xmm[31:0] : %ymm2_minss_xmm_xmm[31:0])))))[127:0][31:0]))[127:0]

Final state
%xmm1: (%ymm1[255:128] ∘ (%ymm1[127:32] ∘ (mincmp_single(%ymm1[31:0], %ymm2[31:0]) = 0x1₁ ? %ymm1[31:0] : %ymm2[31:0])))[127:0]

=====================================
Circuits:

%ymm1  : %ymm1[255:128] ∘ (%ymm1[127:32] ∘ (mincmp_single(%ymm1[31:0], %ymm2[31:0]) = 0x1₁ ? %ymm1[31:0] : %ymm2[31:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/