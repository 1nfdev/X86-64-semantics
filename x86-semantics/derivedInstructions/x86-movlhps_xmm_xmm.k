// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVLHPS-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movlhps R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 192, 256), extractMInt(getParentValue(R2, RSMap), 192, 256))) )


)

    </regstate>
endmodule

module MOVLHPS-XMM-XMM-SEMANTICS
  imports MOVLHPS-XMM-XMM
endmodule
/*
TargetInstr:
movlhps %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 }
must read:{ %xmm1 %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse }

Circuit:
circuit:callq .move_128_64_xmm1_xmm10_xmm11  #  1     0    5      OPC=callq_label
circuit:vmovdqa %xmm2, %xmm11                #  2     0x5  4      OPC=vmovdqa_xmm_xmm
circuit:callq .move_64_128_xmm10_xmm11_xmm1  #  3     0x9  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movlhps %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 }
  must read:       { %xmm1 %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse }

-------------------------------------
Getting base circuit for callq .move_128_64_xmm1_xmm10_xmm11

Final state:
%rax/%rax: %rax_movlhps_xmm_xmm
%rdx/%rdx: %rdx_movlhps_xmm_xmm

%xmm0: %ymm0_movlhps_xmm_xmm[127:0]
%xmm1: %ymm1_movlhps_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: %ymm0_vmovdqa_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqa %xmm2, %xmm11

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm11: %ymm11_movlhps_xmm_xmm[255:128] ∘ (0x0₆₄ ∘ %ymm1_movlhps_xmm_xmm[127:0][127:64])

State for specgen instruction: vmovdqa %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm11: 0x0₁₂₈ ∘ %ymm2_movlhps_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_64_128_xmm10_xmm11_xmm1

Final state:
%rax/%rax: %rax_movlhps_xmm_xmm
%rdx/%rdx: %rdx_movlhps_xmm_xmm

%xmm0: %ymm0_movlhps_xmm_xmm[127:0]
%xmm1: (%ymm1_movlhps_xmm_xmm[255:128] ∘ ((0x0₁₂₈ ∘ %ymm2_movlhps_xmm_xmm[127:0])[127:0][63:0] ∘ (%ymm10_movlhps_xmm_xmm[255:128] ∘ (0x0₆₄ ∘ %ymm1_movlhps_xmm_xmm[127:0][63:0]))[127:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for movlhps %xmm2, %xmm1

.target:
callq .move_128_64_xmm1_xmm10_xmm11
vmovdqa %xmm2, %xmm11
callq .move_64_128_xmm10_xmm11_xmm1
retq 

Initial state:
%xmm1: %ymm1[127:0]

State for specgen instruction: movlhps %xmm2, %xmm1:
%xmm1: (%ymm1_movlhps_xmm_xmm[255:128] ∘ ((0x0₁₂₈ ∘ %ymm2_movlhps_xmm_xmm[127:0])[127:0][63:0] ∘ (%ymm10_movlhps_xmm_xmm[255:128] ∘ (0x0₆₄ ∘ %ymm1_movlhps_xmm_xmm[127:0][63:0]))[127:0][63:0]))[127:0]

Final state
%xmm1: (%ymm1[255:128] ∘ (%ymm2[63:0] ∘ %ymm1[63:0]))[127:0]

=====================================
Circuits:

%ymm1  : %ymm1[255:128] ∘ (%ymm2[63:0] ∘ %ymm1[63:0])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/