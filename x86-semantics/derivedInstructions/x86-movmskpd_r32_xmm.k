// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVMSKPD-R32-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movmskpd R1:Xmm, R2:R32,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(62, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 128, 129), extractMInt(getParentValue(R1, RSMap), 192, 193))) )


)

    </regstate>
endmodule

module MOVMSKPD-R32-XMM-SEMANTICS
  imports MOVMSKPD-R32-XMM
endmodule
/*
TargetInstr:
movmskpd %xmm1, %ebx
RWSet:
maybe read:{ %xmm1 }
must read:{ %xmm1 }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ sse2 }

Circuit:
circuit:movmskpd %xmm1, %r8  #  1     0    5      OPC=movmskpd_r64_xmm
circuit:movslq %r8d, %rbx    #  2     0x5  3      OPC=movslq_r64_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movmskpd %xmm1, %ebx

  maybe read:      { %xmm1 }
  must read:       { %xmm1 }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse2 }

-------------------------------------
Getting base circuit for callq .move_128_032_xmm1_eax_edx_r8d_r9d

Final state:
%rax/%rax: 0x0₃₂ ∘ %ymm1_vmovmskpd_r32_xmm[127:0][31:0]
%rdx/%rdx: 0x0₃₂ ∘ %ymm1_vmovmskpd_r32_xmm[127:0][63:32]

%xmm0: %ymm0_vmovmskpd_r32_xmm[127:0]
%xmm1: %ymm1_vmovmskpd_r32_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xorl_r32_r32
%rbx/%rbx: %rbx_xorl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_xorl_r32_r32
%rdx/%rdx: %rdx_xorl_r32_r32

%xmm0: %ymm0_xorl_r32_r32[127:0]
%xmm1: %ymm1_xorl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xorl %eax, %eax

.target:
xchgl %ebx, %ecx
xorq %rcx, %rbx
callq .set_szp_for_ebx
retq 

Initial state:
%rax/%rax: %rax_roll_r32_one

%cf: %cf_roll_r32_one
%pf: %pf_roll_r32_one
%zf: %zf_roll_r32_one
%sf: %sf_roll_r32_one
%of: %of_roll_r32_one

State for specgen instruction: xorl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rax
Value is               -> 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
  after renaming it is => 0x0₆₄

Final state
%rax/%rax: 0x0₆₄

%cf: false
%pf: true
%zf: true
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %ebx, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_movl_r32_r32
%rbx/%rbx: 0x0₆₄

%cf: %cf_movl_r32_r32
%pf: %pf_movl_r32_r32
%af: %af_movl_r32_r32
%zf: %zf_movl_r32_r32
%sf: %sf_movl_r32_r32
%of: %of_movl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

%cf: false
%pf: !(%rcx_movl_r32_r32[0:0] = 0x1₁ ⊕ %rcx_movl_r32_r32[1:1] = 0x1₁ ⊕ %rcx_movl_r32_r32[2:2] = 0x1₁ ⊕ %rcx_movl_r32_r32[3:3] = 0x1₁ ⊕ %rcx_movl_r32_r32[4:4] = 0x1₁ ⊕ %rcx_movl_r32_r32[5:5] = 0x1₁ ⊕ %rcx_movl_r32_r32[6:6] = 0x1₁ ⊕ %rcx_movl_r32_r32[7:7] = 0x1₁)
%af: false
%zf: %rcx_movl_r32_r32[31:0] = 0x0₃₂
%sf: %rcx_movl_r32_r32[31:31] = 0x1₁
%of: (%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ false) ∧ !(%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ %rcx_movl_r32_r32[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for movl %ebx, %esp

.target:
movq $0x0, %rbx
xaddl %ebx, %ecx
retq 

Initial state:
%rsp/%rsp: %rsp_roll_r32_one

State for specgen instruction: movl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rsp
Value is               -> 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ %rbx_roll_r32_one[31:0]

Final state
%rsp/%rsp: 0x0₃₂ ∘ %rbx_roll_r32_one[31:0]

=====================================
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_rcll_r32_one[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ebx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]

%cf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][3:0] + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: (sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁) ∧ !(sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for rcll $0x1, %esp

.target:
movslq %ebx, %rbx
adcl %ebx, %ebx
retq 

Initial state:
%rsp/%rsp: 0x0₃₂ ∘ %rbx_roll_r32_one[31:0]

%cf: false
%of: false

State for specgen instruction: rcll $0x1, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]

%cf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[32:32] = 0x1₁
%of: (sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁) ∧ !(sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:31] = 0x1₁)

Register        -> %rbx
  translates to => %rsp
Value is               -> 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ (0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[31:0]

Final state
%rsp/%rsp: 0x0₃₂ ∘ (0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[31:0]

%cf: (0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁
%of: (%rbx_roll_r32_one[31:31] = 0x1₁ ↔ %rbx_roll_r32_one[31:31] = 0x1₁) ∧ !(%rbx_roll_r32_one[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[31:31] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_rcll_r32_one[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ebx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]

%cf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][3:0] + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: (sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁) ∧ !(sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for rcll $0x1, %ebx

.target:
movslq %ebx, %rbx
adcl %ebx, %ebx
retq 

Initial state:
%rbx/%rbx: %rbx_roll_r32_one

%cf: (0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁
%of: (%rbx_roll_r32_one[31:31] = 0x1₁ ↔ %rbx_roll_r32_one[31:31] = 0x1₁) ∧ !(%rbx_roll_r32_one[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[31:31] = 0x1₁)

State for specgen instruction: rcll $0x1, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]

%cf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[32:32] = 0x1₁
%of: (sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁) ∧ !(sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:31] = 0x1₁)

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ (((0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁ ? 0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x1₃₃ : 0x0₁ ∘ %rbx_roll_r32_one[31:0]) + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ (((0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁ ? 0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x1₃₃ : 0x0₁ ∘ %rbx_roll_r32_one[31:0]) + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[31:0]

%cf: (((0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁ ? 0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x1₃₃ : 0x0₁ ∘ %rbx_roll_r32_one[31:0]) + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁
%of: (%rbx_roll_r32_one[31:31] = 0x1₁ ↔ %rbx_roll_r32_one[31:31] = 0x1₁) ∧ !(%rbx_roll_r32_one[31:31] = 0x1₁ ↔ (((0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁ ? 0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x1₃₃ : 0x0₁ ∘ %rbx_roll_r32_one[31:0]) + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for roll $0x1, %r9d

.target:
xorl %eax, %eax
movl %ebx, %esp
rcll $0x1, %esp
rcll $0x1, %ebx
retq 

Initial state:
%r9/%r9: 0x0₃₂ ∘ %ymm1_vmovmskpd_r32_xmm[127:0][127:96]

%cf: %cf_vmovmskpd_r32_xmm
%of: %of_vmovmskpd_r32_xmm

State for specgen instruction: roll $0x1, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (((0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁ ? 0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x1₃₃ : 0x0₁ ∘ %rbx_roll_r32_one[31:0]) + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[31:0]

%cf: (((0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁ ? 0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x1₃₃ : 0x0₁ ∘ %rbx_roll_r32_one[31:0]) + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁
%of: (%rbx_roll_r32_one[31:31] = 0x1₁ ↔ %rbx_roll_r32_one[31:31] = 0x1₁) ∧ !(%rbx_roll_r32_one[31:31] = 0x1₁ ↔ (((0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁ ? 0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x1₃₃ : 0x0₁ ∘ %rbx_roll_r32_one[31:0]) + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[31:31] = 0x1₁)

Register        -> %rbx
  translates to => %r9
Value is               -> 0x0₃₂ ∘ (((0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁ ? 0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x1₃₃ : 0x0₁ ∘ %rbx_roll_r32_one[31:0]) + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[31:0]

Final state
%r9/%r9: 0x0₃₂ ∘ (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[31:0]

%cf: (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁
%of: (%ymm1_vmovmskpd_r32_xmm[127:127] = 0x1₁ ↔ %ymm1_vmovmskpd_r32_xmm[127:127] = 0x1₁) ∧ !(%ymm1_vmovmskpd_r32_xmm[127:127] = 0x1₁ ↔ (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[31:31] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for callq .read_cf_into_rbx

Final state:
%rax/%rax: 0x0₃₂ ∘ %ymm1_vmovmskpd_r32_xmm[127:0][31:0]
%rdx/%rdx: 0x0₃₂ ∘ %ymm1_vmovmskpd_r32_xmm[127:0][63:32]

%xmm0: %ymm0_vmovmskpd_r32_xmm[127:0]
%xmm1: %ymm1_vmovmskpd_r32_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xorl_r32_r32
%rbx/%rbx: %rbx_xorl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_xorl_r32_r32
%rdx/%rdx: %rdx_xorl_r32_r32

%xmm0: %ymm0_xorl_r32_r32[127:0]
%xmm1: %ymm1_xorl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xorl %eax, %eax

.target:
xchgl %ebx, %ecx
xorq %rcx, %rbx
callq .set_szp_for_ebx
retq 

Initial state:
%rax/%rax: %rax_roll_r32_one

%cf: %cf_roll_r32_one
%pf: %pf_roll_r32_one
%zf: %zf_roll_r32_one
%sf: %sf_roll_r32_one
%of: %of_roll_r32_one

State for specgen instruction: xorl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rax
Value is               -> 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
  after renaming it is => 0x0₆₄

Final state
%rax/%rax: 0x0₆₄

%cf: false
%pf: true
%zf: true
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xaddl_r32_r32
%rbx/%rbx: %rbx_xaddl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddl_r32_r32
%rdx/%rdx: %rdx_xaddl_r32_r32

%xmm0: %ymm0_xaddl_r32_r32[127:0]
%xmm1: %ymm1_xaddl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ecx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for xaddl %ebx, %ecx

.target:
xchgl %ebx, %ecx
callq .clear_cf
adcl %ecx, %ebx
retq 

Initial state:
%rcx/%rcx: %rcx_movl_r32_r32
%rbx/%rbx: 0x0₆₄

%cf: %cf_movl_r32_r32
%pf: %pf_movl_r32_r32
%af: %af_movl_r32_r32
%zf: %zf_movl_r32_r32
%sf: %sf_movl_r32_r32
%of: %of_movl_r32_r32

State for specgen instruction: xaddl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0]

%cf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: ((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁) ∧ !((0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0][31:31] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ (0x0₃₂ ∘ %rbx_xaddl_r32_r32[31:0])[31:0]) + 0x0₁ ∘ (0x0₃₂ ∘ %rcx_xaddl_r32_r32[31:0])[31:0])[31:31] = 0x1₁)

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

%cf: false
%pf: !(%rcx_movl_r32_r32[0:0] = 0x1₁ ⊕ %rcx_movl_r32_r32[1:1] = 0x1₁ ⊕ %rcx_movl_r32_r32[2:2] = 0x1₁ ⊕ %rcx_movl_r32_r32[3:3] = 0x1₁ ⊕ %rcx_movl_r32_r32[4:4] = 0x1₁ ⊕ %rcx_movl_r32_r32[5:5] = 0x1₁ ⊕ %rcx_movl_r32_r32[6:6] = 0x1₁ ⊕ %rcx_movl_r32_r32[7:7] = 0x1₁)
%af: false
%zf: %rcx_movl_r32_r32[31:0] = 0x0₃₂
%sf: %rcx_movl_r32_r32[31:31] = 0x1₁
%of: (%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ false) ∧ !(%rcx_movl_r32_r32[31:31] = 0x1₁ ↔ %rcx_movl_r32_r32[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for movl %ebx, %esp

.target:
movq $0x0, %rbx
xaddl %ebx, %ecx
retq 

Initial state:
%rsp/%rsp: %rsp_roll_r32_one

State for specgen instruction: movl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rsp
Value is               -> 0x0₃₂ ∘ %rcx_movl_r32_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ %rbx_roll_r32_one[31:0]

Final state
%rsp/%rsp: 0x0₃₂ ∘ %rbx_roll_r32_one[31:0]

=====================================
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_rcll_r32_one[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ebx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]

%cf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][3:0] + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: (sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁) ∧ !(sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for rcll $0x1, %esp

.target:
movslq %ebx, %rbx
adcl %ebx, %ebx
retq 

Initial state:
%rsp/%rsp: 0x0₃₂ ∘ %rbx_roll_r32_one[31:0]

%cf: false
%of: false

State for specgen instruction: rcll $0x1, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]

%cf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[32:32] = 0x1₁
%of: (sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁) ∧ !(sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:31] = 0x1₁)

Register        -> %rbx
  translates to => %rsp
Value is               -> 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ (0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[31:0]

Final state
%rsp/%rsp: 0x0₃₂ ∘ (0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[31:0]

%cf: (0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁
%of: (%rbx_roll_r32_one[31:31] = 0x1₁ ↔ %rbx_roll_r32_one[31:31] = 0x1₁) ∧ !(%rbx_roll_r32_one[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[31:31] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_rcll_r32_one[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ebx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]

%cf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][3:0] + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: (sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁) ∧ !(sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for rcll $0x1, %ebx

.target:
movslq %ebx, %rbx
adcl %ebx, %ebx
retq 

Initial state:
%rbx/%rbx: %rbx_roll_r32_one

%cf: (0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁
%of: (%rbx_roll_r32_one[31:31] = 0x1₁ ↔ %rbx_roll_r32_one[31:31] = 0x1₁) ∧ !(%rbx_roll_r32_one[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[31:31] = 0x1₁)

State for specgen instruction: rcll $0x1, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]

%cf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[32:32] = 0x1₁
%of: (sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁) ∧ !(sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:31] = 0x1₁)

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ (((0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁ ? 0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x1₃₃ : 0x0₁ ∘ %rbx_roll_r32_one[31:0]) + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ (((0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁ ? 0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x1₃₃ : 0x0₁ ∘ %rbx_roll_r32_one[31:0]) + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[31:0]

%cf: (((0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁ ? 0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x1₃₃ : 0x0₁ ∘ %rbx_roll_r32_one[31:0]) + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁
%of: (%rbx_roll_r32_one[31:31] = 0x1₁ ↔ %rbx_roll_r32_one[31:31] = 0x1₁) ∧ !(%rbx_roll_r32_one[31:31] = 0x1₁ ↔ (((0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁ ? 0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x1₃₃ : 0x0₁ ∘ %rbx_roll_r32_one[31:0]) + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for roll $0x1, %edx

.target:
xorl %eax, %eax
movl %ebx, %esp
rcll $0x1, %esp
rcll $0x1, %ebx
retq 

Initial state:
%rdx/%rdx: 0x0₃₂ ∘ %ymm1_vmovmskpd_r32_xmm[127:0][63:32]

%cf: (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁
%of: (%ymm1_vmovmskpd_r32_xmm[127:127] = 0x1₁ ↔ %ymm1_vmovmskpd_r32_xmm[127:127] = 0x1₁) ∧ !(%ymm1_vmovmskpd_r32_xmm[127:127] = 0x1₁ ↔ (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[31:31] = 0x1₁)

State for specgen instruction: roll $0x1, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (((0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁ ? 0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x1₃₃ : 0x0₁ ∘ %rbx_roll_r32_one[31:0]) + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[31:0]

%cf: (((0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁ ? 0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x1₃₃ : 0x0₁ ∘ %rbx_roll_r32_one[31:0]) + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁
%of: (%rbx_roll_r32_one[31:31] = 0x1₁ ↔ %rbx_roll_r32_one[31:31] = 0x1₁) ∧ !(%rbx_roll_r32_one[31:31] = 0x1₁ ↔ (((0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁ ? 0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x1₃₃ : 0x0₁ ∘ %rbx_roll_r32_one[31:0]) + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[31:31] = 0x1₁)

Register        -> %rbx
  translates to => %rdx
Value is               -> 0x0₃₂ ∘ (((0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[32:32] = 0x1₁ ? 0x0₁ ∘ %rbx_roll_r32_one[31:0] + 0x1₃₃ : 0x0₁ ∘ %rbx_roll_r32_one[31:0]) + 0x0₁ ∘ %rbx_roll_r32_one[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[31:0]

Final state
%rdx/%rdx: 0x0₃₂ ∘ (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[31:0]

%cf: (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[32:32] = 0x1₁
%of: (%ymm1_vmovmskpd_r32_xmm[63:63] = 0x1₁ ↔ %ymm1_vmovmskpd_r32_xmm[63:63] = 0x1₁) ∧ !(%ymm1_vmovmskpd_r32_xmm[63:63] = 0x1₁ ↔ (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[31:31] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_rcll_r32_one[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ebx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]

%cf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][3:0] + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: (sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁) ∧ !(sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for rcll $0x1, %ebx

.target:
movslq %ebx, %rbx
adcl %ebx, %ebx
retq 

Initial state:
%rbx/%rbx: 0x0₆₃ ∘ ((((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₁ : 0x0₁)

%cf: (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[32:32] = 0x1₁
%of: (%ymm1_vmovmskpd_r32_xmm[63:63] = 0x1₁ ↔ %ymm1_vmovmskpd_r32_xmm[63:63] = 0x1₁) ∧ !(%ymm1_vmovmskpd_r32_xmm[63:63] = 0x1₁ ↔ (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[31:31] = 0x1₁)

State for specgen instruction: rcll $0x1, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]

%cf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[32:32] = 0x1₁
%of: (sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁) ∧ !(sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:31] = 0x1₁)

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ (((((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x2₃₃ : 0x1₃₃ : (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃) + ((((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃))[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ (((((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x2₃₃ : 0x1₃₃ : (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃) + ((((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃))[31:0]

%cf: (((((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x2₃₃ : 0x1₃₃ : (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃) + ((((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃))[32:32] = 0x1₁
%of: true ∧ !(false ↔ (((((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x2₃₃ : 0x1₃₃ : (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃) + ((((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃))[31:31] = 0x1₁)

=====================================
=====================================
Computing circuit for vmovmskpd %xmm1, %ebx

.target:
callq .move_128_032_xmm1_eax_edx_r8d_r9d
roll $0x1, %r9d
callq .read_cf_into_rbx
roll $0x1, %edx
rcll $0x1, %ebx
retq 

Initial state:
%rbx/%rbx: %rbx_movmskpd_r64_xmm

State for specgen instruction: vmovmskpd %xmm1, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (((((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x2₃₃ : 0x1₃₃ : (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃) + ((((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃))[31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ (((((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x2₃₃ : 0x1₃₃ : (((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃) + ((((0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_vmovmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃))[31:0]
  after renaming it is => 0x0₃₂ ∘ (((((0x0₁ ∘ %ymm1_movmskpd_r64_xmm[63:32] + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[63:32]) + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[63:32])[32:32] = 0x1₁ ? (((0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x2₃₃ : 0x1₃₃ : (((0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃) + ((((0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃))[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ (((((0x0₁ ∘ %ymm1_movmskpd_r64_xmm[63:32] + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[63:32]) + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[63:32])[32:32] = 0x1₁ ? (((0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x2₃₃ : 0x1₃₃ : (((0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃) + ((((0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃))[31:0]

=====================================
=====================================
Computing circuit for movmskpd %xmm1, %r8

.target:
vmovmskpd %xmm1, %ebx
retq 

Initial state:
%r8/%r8: %r8_movmskpd_r32_xmm

State for specgen instruction: movmskpd %xmm1, %rbx:
%rbx/%rbx: 0x0₃₂ ∘ (((((0x0₁ ∘ %ymm1_movmskpd_r64_xmm[63:32] + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[63:32]) + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[63:32])[32:32] = 0x1₁ ? (((0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x2₃₃ : 0x1₃₃ : (((0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃) + ((((0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃))[31:0]

Register        -> %rbx
  translates to => %r8
Value is               -> 0x0₃₂ ∘ (((((0x0₁ ∘ %ymm1_movmskpd_r64_xmm[63:32] + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[63:32]) + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[63:32])[32:32] = 0x1₁ ? (((0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x2₃₃ : 0x1₃₃ : (((0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃) + ((((0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r64_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃))[31:0]
  after renaming it is => 0x0₃₂ ∘ (((((0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32] + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32]) + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? (((0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x2₃₃ : 0x1₃₃ : (((0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃) + ((((0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃))[31:0]

Final state
%r8/%r8: 0x0₃₂ ∘ (((((0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32] + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32]) + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? (((0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x2₃₃ : 0x1₃₃ : (((0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃) + ((((0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃))[31:0]

=====================================
-------------------------------------
Getting base circuit for movslq %r8d, %rbx

Final state:
%rbx/%rbx: sign-extend-64((0x0₃₂ ∘ (((((0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32] + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32]) + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? (((0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x2₃₃ : 0x1₃₃ : (((0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃) + ((((0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃))[31:0])[31:0])

-------------------------------------
=====================================
Computing circuit for movmskpd %xmm1, %ebx

.target:
movmskpd %xmm1, %r8
movslq %r8d, %rbx
retq 

Initial state:
%rbx/%rbx: %rbx

State for specgen instruction: movmskpd %xmm1, %ebx:
%rbx/%rbx: sign-extend-64((0x0₃₂ ∘ (((((0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32] + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32]) + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? (((0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x2₃₃ : 0x1₃₃ : (((0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃) + ((((0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃))[31:0])[31:0])

Register        -> %rbx
  translates to => %rbx
Value is               -> sign-extend-64((0x0₃₂ ∘ (((((0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32] + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32]) + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[63:32])[32:32] = 0x1₁ ? (((0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x2₃₃ : 0x1₃₃ : (((0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃) + ((((0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96]) + 0x0₁ ∘ %ymm1_movmskpd_r32_xmm[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃))[31:0])[31:0])
  after renaming it is => sign-extend-64((((((0x0₁ ∘ %ymm1[63:32] + 0x0₁ ∘ %ymm1[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1[63:32]) + 0x0₁ ∘ %ymm1[63:32])[32:32] = 0x1₁ ? (((0x0₁ ∘ %ymm1[127:96] + 0x0₁ ∘ %ymm1[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1[127:96]) + 0x0₁ ∘ %ymm1[127:96])[32:32] = 0x1₁ ? 0x2₃₃ : 0x1₃₃ : (((0x0₁ ∘ %ymm1[127:96] + 0x0₁ ∘ %ymm1[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1[127:96]) + 0x0₁ ∘ %ymm1[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃) + ((((0x0₁ ∘ %ymm1[127:96] + 0x0₁ ∘ %ymm1[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1[127:96]) + 0x0₁ ∘ %ymm1[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃))[31:0])

Final state
%rbx/%rbx: sign-extend-64((((((0x0₁ ∘ %ymm1[63:32] + 0x0₁ ∘ %ymm1[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1[63:32]) + 0x0₁ ∘ %ymm1[63:32])[32:32] = 0x1₁ ? (((0x0₁ ∘ %ymm1[127:96] + 0x0₁ ∘ %ymm1[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1[127:96]) + 0x0₁ ∘ %ymm1[127:96])[32:32] = 0x1₁ ? 0x2₃₃ : 0x1₃₃ : (((0x0₁ ∘ %ymm1[127:96] + 0x0₁ ∘ %ymm1[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1[127:96]) + 0x0₁ ∘ %ymm1[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃) + ((((0x0₁ ∘ %ymm1[127:96] + 0x0₁ ∘ %ymm1[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1[127:96]) + 0x0₁ ∘ %ymm1[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃))[31:0])

=====================================
Circuits:

%rbx   : sign-extend-64((((((0x0₁ ∘ %ymm1[63:32] + 0x0₁ ∘ %ymm1[63:32])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1[63:32] + 0x1₃₃ : 0x0₁ ∘ %ymm1[63:32]) + 0x0₁ ∘ %ymm1[63:32])[32:32] = 0x1₁ ? (((0x0₁ ∘ %ymm1[127:96] + 0x0₁ ∘ %ymm1[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1[127:96]) + 0x0₁ ∘ %ymm1[127:96])[32:32] = 0x1₁ ? 0x2₃₃ : 0x1₃₃ : (((0x0₁ ∘ %ymm1[127:96] + 0x0₁ ∘ %ymm1[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1[127:96]) + 0x0₁ ∘ %ymm1[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃) + ((((0x0₁ ∘ %ymm1[127:96] + 0x0₁ ∘ %ymm1[127:96])[32:32] = 0x1₁ ? 0x0₁ ∘ %ymm1[127:96] + 0x1₃₃ : 0x0₁ ∘ %ymm1[127:96]) + 0x0₁ ∘ %ymm1[127:96])[32:32] = 0x1₁ ? 0x1₃₃ : 0x0₃₃))[31:0])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/