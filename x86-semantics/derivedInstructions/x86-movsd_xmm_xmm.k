// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVSD-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movsd R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 192), extractMInt(getParentValue(R1, RSMap), 192, 256)) )


)

    </regstate>
endmodule

module MOVSD-XMM-XMM-SEMANTICS
  imports MOVSD-XMM-XMM
endmodule
/*
TargetInstr:
movsd %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 }
must read:{ %xmm1 %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse2 }

Circuit:
circuit:callq .move_128_64_xmm1_xmm8_xmm9  #  1     0    5      OPC=callq_label
circuit:movups %xmm2, %xmm8                #  2     0x5  4      OPC=movups_xmm_xmm
circuit:callq .move_64_128_xmm8_xmm9_xmm1  #  3     0x9  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movsd %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 }
  must read:       { %xmm1 %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse2 }

-------------------------------------
Getting base circuit for callq .move_128_64_xmm1_xmm8_xmm9

Final state:
%rax/%rax: %rax_movsd_xmm_xmm
%rdx/%rdx: %rdx_movsd_xmm_xmm

%xmm0: %ymm0_movsd_xmm_xmm[127:0]
%xmm1: %ymm1_movsd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_032_xmm2_xmm4_xmm5_xmm6_xmm7

Final state:
%rax/%rax: %rax_movups_xmm_xmm
%rdx/%rdx: %rdx_movups_xmm_xmm

%xmm0: %ymm0_movups_xmm_xmm[127:0]
%xmm1: %ymm1_movups_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_128_xmm4_xmm5_xmm6_xmm7_xmm1

Final state:
%rax/%rax: %rax_movups_xmm_xmm
%rdx/%rdx: %rdx_movups_xmm_xmm

%xmm0: %ymm0_movups_xmm_xmm[127:0]
%xmm1: (%ymm1_movups_xmm_xmm[255:128] ∘ ((%ymm7_movups_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_movups_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm6_movups_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_movups_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm5_movups_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_movups_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ (%ymm4_movups_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_movups_xmm_xmm[127:0][31:0]))[127:0][31:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for movups %xmm2, %xmm8

.target:
callq .move_128_032_xmm2_xmm4_xmm5_xmm6_xmm7
callq .move_032_128_xmm4_xmm5_xmm6_xmm7_xmm1
retq 

Initial state:
%xmm8: (%ymm8_movsd_xmm_xmm[255:128] ∘ (0x0₆₄ ∘ %ymm1_movsd_xmm_xmm[127:0][63:0]))[127:0]

State for specgen instruction: movups %xmm2, %xmm1:
%xmm1: (%ymm1_movups_xmm_xmm[255:128] ∘ ((%ymm7_movups_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_movups_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm6_movups_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_movups_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm5_movups_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_movups_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ (%ymm4_movups_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_movups_xmm_xmm[127:0][31:0]))[127:0][31:0]))[127:0]

Final state
%xmm8: ((%ymm8_movsd_xmm_xmm[255:128] ∘ (0x0₆₄ ∘ %ymm1_movsd_xmm_xmm[127:0][63:0]))[255:128] ∘ %ymm2_movsd_xmm_xmm[127:0])[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_64_128_xmm8_xmm9_xmm1

Final state:
%rax/%rax: %rax_movsd_xmm_xmm
%rdx/%rdx: %rdx_movsd_xmm_xmm

%xmm0: %ymm0_movsd_xmm_xmm[127:0]
%xmm1: (%ymm1_movsd_xmm_xmm[255:128] ∘ ((%ymm9_movsd_xmm_xmm[255:128] ∘ (0x0₆₄ ∘ %ymm1_movsd_xmm_xmm[127:0][127:64]))[127:0][63:0] ∘ ((%ymm8_movsd_xmm_xmm[255:128] ∘ (0x0₆₄ ∘ %ymm1_movsd_xmm_xmm[127:0][63:0]))[255:128] ∘ %ymm2_movsd_xmm_xmm[127:0])[127:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for movsd %xmm2, %xmm1

.target:
callq .move_128_64_xmm1_xmm8_xmm9
movups %xmm2, %xmm8
callq .move_64_128_xmm8_xmm9_xmm1
retq 

Initial state:
%xmm1: %ymm1[127:0]

State for specgen instruction: movsd %xmm2, %xmm1:
%xmm1: (%ymm1_movsd_xmm_xmm[255:128] ∘ ((%ymm9_movsd_xmm_xmm[255:128] ∘ (0x0₆₄ ∘ %ymm1_movsd_xmm_xmm[127:0][127:64]))[127:0][63:0] ∘ ((%ymm8_movsd_xmm_xmm[255:128] ∘ (0x0₆₄ ∘ %ymm1_movsd_xmm_xmm[127:0][63:0]))[255:128] ∘ %ymm2_movsd_xmm_xmm[127:0])[127:0][63:0]))[127:0]

Final state
%xmm1: (%ymm1[255:128] ∘ (%ymm1[127:64] ∘ %ymm2[63:0]))[127:0]

=====================================
Circuits:

%ymm1  : %ymm1[255:128] ∘ (%ymm1[127:64] ∘ %ymm2[63:0])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/