// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVUPD-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movupd R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), extractMInt(getParentValue(R1, RSMap), 128, 256)) )


)

    </regstate>
endmodule

module MOVUPD-XMM-XMM-SEMANTICS
  imports MOVUPD-XMM-XMM
endmodule
/*
TargetInstr:
movupd %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse2 }

Circuit:
circuit:movdqa %xmm2, %xmm1  #  1     0    4      OPC=movdqa_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movupd %xmm2, %xmm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse2 }

-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_movdqa_xmm_xmm
%rdx/%rdx: %rdx_movdqa_xmm_xmm

%xmm0: %ymm0_movdqa_xmm_xmm[127:0]
%xmm1: %ymm1_movdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_movdqa_xmm_xmm
%rdx/%rdx: %rdx_movdqa_xmm_xmm

%xmm0: %ymm0_movdqa_xmm_xmm[127:0]
%xmm1: (%ymm1_movdqa_xmm_xmm[255:128] ∘ (%ymm2_movdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_movdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for movdqa %xmm2, %xmm1

.target:
callq .move_128_064_xmm2_r8_r9
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%xmm1: %ymm1_movupd_xmm_xmm[127:0]

State for specgen instruction: movdqa %xmm2, %xmm1:
%xmm1: (%ymm1_movdqa_xmm_xmm[255:128] ∘ (%ymm2_movdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_movdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

Final state
%xmm1: (%ymm1_movupd_xmm_xmm[255:128] ∘ %ymm2_movupd_xmm_xmm[127:0])[127:0]

=====================================
=====================================
Computing circuit for movupd %xmm2, %xmm1

.target:
movdqa %xmm2, %xmm1
retq 

Initial state:
%xmm1: %ymm1[127:0]

State for specgen instruction: movupd %xmm2, %xmm1:
%xmm1: (%ymm1_movupd_xmm_xmm[255:128] ∘ %ymm2_movupd_xmm_xmm[127:0])[127:0]

Final state
%xmm1: (%ymm1[255:128] ∘ %ymm2[127:0])[127:0]

=====================================
Circuits:

%ymm1  : %ymm1[255:128] ∘ %ymm2[127:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/