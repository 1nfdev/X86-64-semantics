// Autogenerated using stratification.
requires "x86-configuration.k"

module PMOVZXWD-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (pmovzxwd R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 192, 208)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 208, 224))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 224, 240)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 240, 256))))) )


)

    </regstate>
endmodule

module PMOVZXWD-XMM-XMM-SEMANTICS
  imports PMOVZXWD-XMM-XMM
endmodule
/*
TargetInstr:
pmovzxwd %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse4_1 }

Circuit:
circuit:vpbroadcastq %xmm2, %ymm10  #  1     0     5      OPC=vpbroadcastq_ymm_xmm
circuit:minpd %xmm10, %xmm10        #  2     0x5   5      OPC=minpd_xmm_xmm
circuit:vpmovzxwd %xmm10, %xmm14    #  3     0xa   5      OPC=vpmovzxwd_xmm_xmm
circuit:movapd %xmm14, %xmm1        #  4     0xf   5      OPC=movapd_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

pmovzxwd %xmm2, %xmm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse4_1 }

Circuits:

%ymm1  : %ymm1[255:128] ∘ (0x0₁₆ ∘ %ymm2[63:48] ∘ (0x0₁₆ ∘ %ymm2[47:32]) ∘ (0x0₁₆ ∘ %ymm2[31:16] ∘ (0x0₁₆ ∘ %ymm2[15:0])))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/