// Autogenerated using stratification.
requires "x86-configuration.k"

module RCLB-R8-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (rclb $0x1, R2:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> ((#ifMInt ( ( ultMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)), extractMInt(getParentValue(R2, RSMap), 56, 64))  orBool  ( ultMInt(addMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap))), addMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))  orBool  ultMInt(addMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap))), concatenateMInt(mi(7, 0), getFlag("CF", RSMap))) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt (eqMInt(mi(8, 2), addMInt(xorMInt(lshrMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), 7), lshrMInt(addMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap))), 7)), xorMInt(lshrMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), 7), lshrMInt(addMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap))), 7)))) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 56), addMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(7, 0), getFlag("CF", RSMap)))) )


)

    </regstate>
endmodule

module RCLB-R8-ONE-SEMANTICS
  imports RCLB-R8-ONE
endmodule
/*
TargetInstr:
rclb $0x1, %bl
RWSet:
maybe read:{ %bl %cf }
must read:{ %bl %cf }
maybe write:{ %bl %cf %of }
must write:{ %bl %cf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movzbl %bl, %eax  #  1     0    3      OPC=movzbl_r32_r8
circuit:movq %rax, %rbx   #  2     0x3  3      OPC=movq_r64_r64
circuit:adcb %bl, %bl     #  3     0x6  2      OPC=adcb_r8_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

rclb $0x1, %bl

  maybe read:      { %bl %cf }
  must read:       { %bl %cf }
  maybe write:     { %bl %cf %of }
  must write:      { %bl %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for movq $0x8, %rbx

Final state:
%rbx/%rbx: 0x8₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ebx_r10w_r11w

Final state:
%rax/%rax: %rax_movzbl_r32_r8
%rdx/%rdx: %rdx_movzbl_r32_r8

%xmm0: %ymm0_movzbl_r32_r8[127:0]
%xmm1: %ymm1_movzbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_addw_r16_r16

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %bx

Final state:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_addw_r16_r16
%rdx/%rdx: %rdx_addw_r16_r16

%xmm0: %ymm0_addw_r16_r16[127:0]
%xmm1: %ymm1_addw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for addw %bx, %r10w

.target:
clc 
adcw %cx, %bx
callq .set_szp_for_bx
retq 

Initial state:
%r10/%r10w: %r10_movzbl_r32_r8[63:16] ∘ 0x8₆₄[31:0][15:0]

%cf: %cf_movzbl_r32_r8
%pf: %pf_movzbl_r32_r8
%af: %af_movzbl_r32_r8
%zf: %zf_movzbl_r32_r8
%sf: %sf_movzbl_r32_r8
%of: %of_movzbl_r32_r8

State for specgen instruction: addw %cx, %bx:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %r10w
Value is               -> (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0]
  after renaming it is => 0x10₁₆

Final state
%r10/%r10w: (%r10_movzbl_r32_r8[63:16] ∘ 0x8₆₄[31:0][15:0])[63:16] ∘ 0x10₁₆

%cf: false
%pf: false
%af: true
%zf: false
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .read_pf_into_rbx

Final state:
%rax/%rax: %rax_movzbl_r32_r8
%rdx/%rdx: %rdx_movzbl_r32_r8

%xmm0: %ymm0_movzbl_r32_r8[127:0]
%xmm1: %ymm1_movzbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcb %cl, %bl

Final state:
%rbx/%bl: (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[63:8] ∘ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_movzbl_r32_r8[7:0][3:0] + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0][7:7] = 0x1₁
%of: (%rcx_movzbl_r32_r8[7:0][7:7] = 0x1₁ ↔ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁) ∧ !(%rcx_movzbl_r32_r8[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for movzbl %bl, %eax

.target:
movq $0x8, %rbx
callq .move_032_016_ebx_r10w_r11w
addw %bx, %r10w
callq .read_pf_into_rbx
adcb %cl, %bl
retq 

Initial state:
%rax/%rax: %rax_rclb_r8_one

State for specgen instruction: movzbl %cl, %ebx:
%rbx/%rbx: (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[63:8] ∘ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0]

Register        -> %rbx
  translates to => %rax
Value is               -> (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[63:8] ∘ ((false ? 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0] + 0x1₉ : 0x0₁ ∘ %rcx_movzbl_r32_r8[7:0]) + 0x0₁ ∘ (0x0₆₃ ∘ (false ? 0x1₁ : 0x0₁))[7:0])[7:0]
  after renaming it is => 0x0₅₆ ∘ %rbx_rclb_r8_one[7:0]

Final state
%rax/%rax: 0x0₅₆ ∘ %rbx_rclb_r8_one[7:0]

=====================================
-------------------------------------
Getting base circuit for movq %rax, %rbx

Final state:
%rbx/%rbx: 0x0₅₆ ∘ %rbx_rclb_r8_one[7:0]

-------------------------------------
-------------------------------------
Getting base circuit for adcb %bl, %bl

Final state:
%rbx/%bl: (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[63:8] ∘ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0]

%cf: ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[8:8] = 0x1₁
%pf: !(((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0] = 0x0₈
%sf: ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0][7:7] = 0x1₁
%of: ((0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][7:7] = 0x1₁) ∧ !((0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][7:7] = 0x1₁ ↔ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for rclb $0x1, %bl

.target:
movzbl %bl, %eax
movq %rax, %rbx
adcb %bl, %bl
retq 

Initial state:
%rbx/%bl: %rbx

%cf: %cf
%of: %of

State for specgen instruction: rclb $0x1, %bl:
%rbx/%bl: (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[63:8] ∘ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0]

%cf: ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[8:8] = 0x1₁
%of: ((0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][7:7] = 0x1₁) ∧ !((0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0][7:7] = 0x1₁ ↔ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %bl
Value is               -> ((0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[63:8] ∘ ((%cf_rclb_r8_one ? 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (0x0₅₆ ∘ %rbx_rclb_r8_one[7:0])[7:0])[7:0])[7:0]
  after renaming it is => ((%cf ? 0x0₁ ∘ %rbx[7:0] + 0x1₉ : 0x0₁ ∘ %rbx[7:0]) + 0x0₁ ∘ %rbx[7:0])[7:0]

Final state
%rbx/%bl: %rbx[63:8] ∘ ((%cf ? 0x0₁ ∘ %rbx[7:0] + 0x1₉ : 0x0₁ ∘ %rbx[7:0]) + 0x0₁ ∘ %rbx[7:0])[7:0]

%cf: ((%cf ? 0x0₁ ∘ %rbx[7:0] + 0x1₉ : 0x0₁ ∘ %rbx[7:0]) + 0x0₁ ∘ %rbx[7:0])[8:8] = 0x1₁
%of: (%rbx[7:7] = 0x1₁ ↔ %rbx[7:7] = 0x1₁) ∧ !(%rbx[7:7] = 0x1₁ ↔ ((%cf ? 0x0₁ ∘ %rbx[7:0] + 0x1₉ : 0x0₁ ∘ %rbx[7:0]) + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁)

=====================================
Circuits:

%rbx   : %rbx[63:8] ∘ ((%cf ? 0x0₁ ∘ %rbx[7:0] + 0x1₉ : 0x0₁ ∘ %rbx[7:0]) + 0x0₁ ∘ %rbx[7:0])[7:0]

%cf    : ((%cf ? 0x0₁ ∘ %rbx[7:0] + 0x1₉ : 0x0₁ ∘ %rbx[7:0]) + 0x0₁ ∘ %rbx[7:0])[8:8] = 0x1₁
%of    : (%rbx[7:7] = 0x1₁ ↔ %rbx[7:7] = 0x1₁) ∧ !(%rbx[7:7] = 0x1₁ ↔ ((%cf ? 0x0₁ ∘ %rbx[7:0] + 0x1₉ : 0x0₁ ∘ %rbx[7:0]) + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/