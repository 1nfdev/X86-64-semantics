// Autogenerated using stratification.
requires "x86-configuration.k"

module ROLB-R8-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (rolb $0x1, R2:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> ((#ifMInt ( ( ultMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)), extractMInt(getParentValue(R2, RSMap), 56, 64))  orBool  ( ultMInt(addMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(7, 0), (#ifMInt (ultMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)), extractMInt(getParentValue(R2, RSMap), 56, 64)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )), addMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))  orBool  ultMInt(addMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(7, 0), (#ifMInt (ultMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)), extractMInt(getParentValue(R2, RSMap), 56, 64)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )), concatenateMInt(mi(7, 0), (#ifMInt (ultMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)), extractMInt(getParentValue(R2, RSMap), 56, 64)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt (eqMInt(mi(8, 2), addMInt(xorMInt(lshrMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), 7), lshrMInt(addMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(7, 0), (#ifMInt (ultMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)), extractMInt(getParentValue(R2, RSMap), 56, 64)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )), 7)), xorMInt(lshrMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), 7), lshrMInt(addMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(7, 0), (#ifMInt (ultMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)), extractMInt(getParentValue(R2, RSMap), 56, 64)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) )), 7)))) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 56), addMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(7, 0), (#ifMInt (ultMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)), extractMInt(getParentValue(R2, RSMap), 56, 64)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ))) )


)

    </regstate>
endmodule

module ROLB-R8-ONE-SEMANTICS
  imports ROLB-R8-ONE
endmodule
/*
TargetInstr:
rolb $0x1, %bl
RWSet:
maybe read:{ %bl }
must read:{ %bl }
maybe write:{ %bl %cf %of }
must write:{ %bl %cf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:xorq %rax, %rax  #  1     0     3      OPC=xorq_r64_r64
circuit:setnp %ah        #  2     0x3   3      OPC=setnp_rh
circuit:setnz %bh        #  3     0x6   3      OPC=setnz_rh
circuit:addw %bx, %ax    #  4     0x9   3      OPC=addw_r16_r16
circuit:adcb %al, %al    #  5     0xc   2      OPC=adcb_r8_r8
circuit:adcb %bl, %bl    #  6     0xe   2      OPC=adcb_r8_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

rolb $0x1, %bl

  maybe read:      { %bl }
  must read:       { %bl }
  maybe write:     { %bl %cf %of }
  must write:      { %bl %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_rolb_r8_one ⊕ %rax_rolb_r8_one

%cf: false
%pf: !((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][0:0] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][1:1] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][2:2] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][3:3] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][4:4] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][5:5] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][6:6] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][7:7] = 0x1₁)
%zf: (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one) = 0x0₆₄
%sf: (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_pf_into_rbx

Final state:
%rax/%rax: %rax_setnp_rh
%rdx/%rdx: %rdx_setnp_rh

%xmm0: %ymm0_setnp_rh[127:0]
%xmm1: %ymm1_setnp_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ebx_r8w_r9w

Final state:
%rax/%rax: %rax_setnp_rh
%rdx/%rdx: %rdx_setnp_rh

%xmm0: %ymm0_setnp_rh[127:0]
%xmm1: %ymm1_setnp_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r8b_to_byte_2_of_rbx

Final state:
%rax/%rax: %rax_setnp_rh
%rdx/%rdx: %rdx_setnp_rh

%xmm0: %ymm0_setnp_rh[127:0]
%xmm1: %ymm1_setnp_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_setnp_rh
%rdx/%rdx: %rdx_setnp_rh

%xmm0: %ymm0_setnp_rh[127:0]
%xmm1: %ymm1_setnp_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_zf_into_rbx

Final state:
%rax/%rax: %rax_setnp_rh
%rdx/%rdx: %rdx_setnp_rh

%xmm0: %ymm0_setnp_rh[127:0]
%xmm1: %ymm1_setnp_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %bl, %ah

Final state:
%rax/%ah: %rax_setnp_rh[63:16] ∘ (0x0₆₃ ∘ (((0x0₆₃ ∘ (%pf_setnp_rh ? 0x1₁ : 0x0₁))[63:24] ∘ (%r8_setnp_rh[63:16] ∘ (0x0₆₃ ∘ (%pf_setnp_rh ? 0x1₁ : 0x0₁))[31:0][15:0])[7:0] ∘ (0x0₆₃ ∘ (%pf_setnp_rh ? 0x1₁ : 0x0₁))[15:0])[15:0] = 0x0₁₆ ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnp_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setnp %ah

.target:
callq .read_pf_into_rbx
callq .move_032_016_ebx_r8w_r9w
callq .move_r8b_to_byte_2_of_rbx
callq .set_szp_for_bx
callq .read_zf_into_rbx
movb %bl, %ah
retq 

Initial state:
%rax/%ah: %rax_rolb_r8_one ⊕ %rax_rolb_r8_one

State for specgen instruction: setnp %ah:
%rax/%ah: %rax_setnp_rh[63:16] ∘ (0x0₆₃ ∘ (((0x0₆₃ ∘ (%pf_setnp_rh ? 0x1₁ : 0x0₁))[63:24] ∘ (%r8_setnp_rh[63:16] ∘ (0x0₆₃ ∘ (%pf_setnp_rh ? 0x1₁ : 0x0₁))[31:0][15:0])[7:0] ∘ (0x0₆₃ ∘ (%pf_setnp_rh ? 0x1₁ : 0x0₁))[15:0])[15:0] = 0x0₁₆ ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnp_rh[7:0]

Register        -> %ah
  translates to => %ah
Value is               -> (%rax_setnp_rh[63:16] ∘ (0x0₆₃ ∘ (((0x0₆₃ ∘ (%pf_setnp_rh ? 0x1₁ : 0x0₁))[63:24] ∘ (%r8_setnp_rh[63:16] ∘ (0x0₆₃ ∘ (%pf_setnp_rh ? 0x1₁ : 0x0₁))[31:0][15:0])[7:0] ∘ (0x0₆₃ ∘ (%pf_setnp_rh ? 0x1₁ : 0x0₁))[15:0])[15:0] = 0x0₁₆ ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnp_rh[7:0])[15:8]
  after renaming it is => 0x0₈

Final state
%rax/%ah: (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_cf

Final state:
%rax/%rax: %rax_setnz_rh
%rdx/%rdx: %rdx_setnz_rh

%xmm0: %ymm0_setnz_rh[127:0]
%xmm1: %ymm1_setnz_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rbx

Final state:
%rax/%rax: %rax_setnae_rh
%rdx/%rdx: %rdx_setnae_rh

%xmm0: %ymm0_setnae_rh[127:0]
%xmm1: %ymm1_setnae_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %bl, %ah

Final state:
%rax/%ah: %rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setnae %ah

.target:
callq .read_cf_into_rbx
movb %bl, %ah
retq 

Initial state:
%rax/%ah: %rax_setnz_rh

State for specgen instruction: setnae %ah:
%rax/%ah: %rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0]

Register        -> %ah
  translates to => %ah
Value is               -> (%rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0])[15:8]
  after renaming it is => 0x1₈

Final state
%rax/%ah: %rax_setnz_rh[63:16] ∘ 0x1₈ ∘ %rax_setnz_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for callq .read_cf_into_rcx

Final state:
%rax/%rax: %rax_setnz_rh[63:16] ∘ 0x1₈ ∘ %rax_setnz_rh[7:0]
%rdx/%rdx: %rdx_setnz_rh

%xmm0: %ymm0_setnz_rh[127:0]
%xmm1: %ymm1_setnz_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for cmoveq %rcx, %rax

Final state:
%rax/%rax: %zf_setnz_rh ? 0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁) : %rax_setnz_rh[63:16] ∘ 0x1₈ ∘ %rax_setnz_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setnz %bh

.target:
callq .set_cf
setnae %ah
callq .read_cf_into_rcx
cmoveq %rcx, %rax
retq 

Initial state:
%rbx/%bh: %rbx_rolb_r8_one

State for specgen instruction: setnz %ah:
%rax/%ah: %zf_setnz_rh ? 0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁) : %rax_setnz_rh[63:16] ∘ 0x1₈ ∘ %rax_setnz_rh[7:0]

Register        -> %ah
  translates to => %bh
Value is               -> (%zf_setnz_rh ? 0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁) : %rax_setnz_rh[63:16] ∘ 0x1₈ ∘ %rax_setnz_rh[7:0])[15:8]
  after renaming it is => 0x0₈

Final state
%rbx/%bh: %rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_addw_r16_r16

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %bx

Final state:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_addw_r16_r16
%rdx/%rdx: %rdx_addw_r16_r16

%xmm0: %ymm0_addw_r16_r16[127:0]
%xmm1: %ymm1_addw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for addw %bx, %ax

.target:
clc 
adcw %cx, %bx
callq .set_szp_for_bx
retq 

Initial state:
%rax/%ax: (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0]

%cf: false
%pf: !((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][0:0] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][1:1] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][2:2] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][3:3] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][4:4] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][5:5] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][6:6] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][7:7] = 0x1₁)
%af: TMP_BOOL_0
%zf: (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one) = 0x0₆₄
%sf: (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:63] = 0x1₁
%of: false

State for specgen instruction: addw %cx, %bx:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %ax
Value is               -> (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0]
  after renaming it is => 0x0₈ ∘ %rbx_rolb_r8_one[7:0]

Final state
%rax/%ax: ((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0])

%cf: false
%pf: !(%rbx_rolb_r8_one[0:0] = 0x1₁ ⊕ %rbx_rolb_r8_one[1:1] = 0x1₁ ⊕ %rbx_rolb_r8_one[2:2] = 0x1₁ ⊕ %rbx_rolb_r8_one[3:3] = 0x1₁ ⊕ %rbx_rolb_r8_one[4:4] = 0x1₁ ⊕ %rbx_rolb_r8_one[5:5] = 0x1₁ ⊕ %rbx_rolb_r8_one[6:6] = 0x1₁ ⊕ %rbx_rolb_r8_one[7:7] = 0x1₁)
%af: false
%zf: 0x0₈ ∘ %rbx_rolb_r8_one[7:0] = 0x0₁₆
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[63:8] ∘ ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0][3:0] + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:0][7:7] = 0x1₁
%of: ((((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0][7:7] = 0x1₁ ↔ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0][7:7] = 0x1₁) ∧ !((((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for adcb %bl, %bl

Final state:
%rbx/%bl: (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[63:8] ∘ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0]

%cf: ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[8:8] = 0x1₁
%pf: !(((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0][3:0] + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0] = 0x0₈
%sf: ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0][7:7] = 0x1₁
%of: ((%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0][7:7] = 0x1₁ ↔ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0][7:7] = 0x1₁) ∧ !((%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0][7:7] = 0x1₁ ↔ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for rolb $0x1, %bl

.target:
xorq %rax, %rax
setnp %ah
setnz %bh
addw %bx, %ax
adcb %al, %al
adcb %bl, %bl
retq 

Initial state:
%rbx/%bl: %rbx

%cf: %cf
%of: %of

State for specgen instruction: rolb $0x1, %bl:
%rbx/%bl: (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[63:8] ∘ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0]

%cf: ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[8:8] = 0x1₁
%of: ((%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0][7:7] = 0x1₁ ↔ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0][7:7] = 0x1₁) ∧ !((%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0][7:7] = 0x1₁ ↔ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %bl
Value is               -> ((%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[63:8] ∘ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0])[7:0]
  after renaming it is => (((0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx[7:0] + 0x1₉ : 0x0₁ ∘ %rbx[7:0]) + 0x0₁ ∘ %rbx[7:0])[7:0]

Final state
%rbx/%bl: %rbx[63:8] ∘ (((0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx[7:0] + 0x1₉ : 0x0₁ ∘ %rbx[7:0]) + 0x0₁ ∘ %rbx[7:0])[7:0]

%cf: (((0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx[7:0] + 0x1₉ : 0x0₁ ∘ %rbx[7:0]) + 0x0₁ ∘ %rbx[7:0])[8:8] = 0x1₁
%of: (%rbx[7:7] = 0x1₁ ↔ %rbx[7:7] = 0x1₁) ∧ !(%rbx[7:7] = 0x1₁ ↔ (((0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx[7:0] + 0x1₉ : 0x0₁ ∘ %rbx[7:0]) + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁)

=====================================
Circuits:

%rbx   : %rbx[63:8] ∘ (((0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx[7:0] + 0x1₉ : 0x0₁ ∘ %rbx[7:0]) + 0x0₁ ∘ %rbx[7:0])[7:0]

%cf    : (((0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx[7:0] + 0x1₉ : 0x0₁ ∘ %rbx[7:0]) + 0x0₁ ∘ %rbx[7:0])[8:8] = 0x1₁
%of    : (%rbx[7:7] = 0x1₁ ↔ %rbx[7:7] = 0x1₁) ∧ !(%rbx[7:7] = 0x1₁ ↔ (((0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx[7:0] + 0x1₉ : 0x0₁ ∘ %rbx[7:0]) + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/