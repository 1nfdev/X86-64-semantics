// Autogenerated using stratification.
requires "x86-configuration.k"

module ROLW-R16-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (rolw $0x1, R2:R16,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 0, 1))), 0, 1) )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), extractMInt(getParentValue(R2, RSMap), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 0, 1))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 0, 1))), 1, 17)) )


)

    </regstate>
endmodule

module ROLW-R16-ONE-SEMANTICS
  imports ROLW-R16-ONE
endmodule
/*
TargetInstr:
rolw $0x1, %bx
RWSet:
maybe read:{ %bx }
must read:{ %bx }
maybe write:{ %bx %cf %of }
must write:{ %bx %cf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movswq %bx, %r8  #  1     0    4      OPC=movswq_r64_r16
circuit:clc              #  2     0x4  1      OPC=clc
circuit:adcw %r8w, %r8w  #  3     0x5  4      OPC=adcw_r16_r16
circuit:adcw %bx, %bx    #  4     0x9  3      OPC=adcw_r16_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

rolw $0x1, %bx

  maybe read:      { %bx }
  must read:       { %bx }
  maybe write:     { %bx %cf %of }
  must write:      { %bx %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for movswq %bx, %r8

Final state:
%r8/%r8: sign-extend-64(%rbx_rolw_r16_one[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_rolw_r16_one

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %r8w, %r8w

Final state:
%r8/%r8w: sign-extend-64(%rbx_rolw_r16_one[15:0])[63:16] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0][3:0] + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: (sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0][15:15] = 0x1₁ ↔ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0][15:15] = 0x1₁) ∧ !(sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for adcw %bx, %bx

Final state:
%rbx/%bx: %rbx_rolw_r16_one[63:16] ∘ ((((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx_rolw_r16_one[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_rolw_r16_one[15:0]) + 0x0₁ ∘ %rbx_rolw_r16_one[15:0])[15:0]

%cf: ((((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx_rolw_r16_one[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_rolw_r16_one[15:0]) + 0x0₁ ∘ %rbx_rolw_r16_one[15:0])[16:16] = 0x1₁
%pf: !(((((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx_rolw_r16_one[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_rolw_r16_one[15:0]) + 0x0₁ ∘ %rbx_rolw_r16_one[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx_rolw_r16_one[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_rolw_r16_one[15:0]) + 0x0₁ ∘ %rbx_rolw_r16_one[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx_rolw_r16_one[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_rolw_r16_one[15:0]) + 0x0₁ ∘ %rbx_rolw_r16_one[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx_rolw_r16_one[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_rolw_r16_one[15:0]) + 0x0₁ ∘ %rbx_rolw_r16_one[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx_rolw_r16_one[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_rolw_r16_one[15:0]) + 0x0₁ ∘ %rbx_rolw_r16_one[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx_rolw_r16_one[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_rolw_r16_one[15:0]) + 0x0₁ ∘ %rbx_rolw_r16_one[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx_rolw_r16_one[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_rolw_r16_one[15:0]) + 0x0₁ ∘ %rbx_rolw_r16_one[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx_rolw_r16_one[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_rolw_r16_one[15:0]) + 0x0₁ ∘ %rbx_rolw_r16_one[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_rolw_r16_one[15:0][3:0] + 0x0₁ ∘ %rbx_rolw_r16_one[15:0][3:0])[4:4] = 0x1₁
%zf: ((((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx_rolw_r16_one[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_rolw_r16_one[15:0]) + 0x0₁ ∘ %rbx_rolw_r16_one[15:0])[15:0] = 0x0₁₆
%sf: ((((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx_rolw_r16_one[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_rolw_r16_one[15:0]) + 0x0₁ ∘ %rbx_rolw_r16_one[15:0])[15:0][15:15] = 0x1₁
%of: (%rbx_rolw_r16_one[15:0][15:15] = 0x1₁ ↔ %rbx_rolw_r16_one[15:0][15:15] = 0x1₁) ∧ !(%rbx_rolw_r16_one[15:0][15:15] = 0x1₁ ↔ ((((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx_rolw_r16_one[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_rolw_r16_one[15:0]) + 0x0₁ ∘ %rbx_rolw_r16_one[15:0])[15:15] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for rolw $0x1, %bx

.target:
movswq %bx, %r8
clc 
adcw %r8w, %r8w
adcw %bx, %bx
retq 

Initial state:
%rbx/%bx: %rbx

%cf: %cf
%of: %of

State for specgen instruction: rolw $0x1, %bx:
%rbx/%bx: %rbx_rolw_r16_one[63:16] ∘ ((((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx_rolw_r16_one[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_rolw_r16_one[15:0]) + 0x0₁ ∘ %rbx_rolw_r16_one[15:0])[15:0]

%cf: ((((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx_rolw_r16_one[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_rolw_r16_one[15:0]) + 0x0₁ ∘ %rbx_rolw_r16_one[15:0])[16:16] = 0x1₁
%of: (%rbx_rolw_r16_one[15:0][15:15] = 0x1₁ ↔ %rbx_rolw_r16_one[15:0][15:15] = 0x1₁) ∧ !(%rbx_rolw_r16_one[15:0][15:15] = 0x1₁ ↔ ((((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx_rolw_r16_one[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_rolw_r16_one[15:0]) + 0x0₁ ∘ %rbx_rolw_r16_one[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_rolw_r16_one[63:16] ∘ ((((false ? 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0] + 0x1₁₇ : 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rolw_r16_one[15:0])[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx_rolw_r16_one[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx_rolw_r16_one[15:0]) + 0x0₁ ∘ %rbx_rolw_r16_one[15:0])[15:0])[15:0]
  after renaming it is => (((0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx[15:0]) + 0x0₁ ∘ %rbx[15:0])[15:0]

Final state
%rbx/%bx: %rbx[63:16] ∘ (((0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx[15:0]) + 0x0₁ ∘ %rbx[15:0])[15:0]

%cf: (((0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx[15:0]) + 0x0₁ ∘ %rbx[15:0])[16:16] = 0x1₁
%of: (%rbx[15:15] = 0x1₁ ↔ %rbx[15:15] = 0x1₁) ∧ !(%rbx[15:15] = 0x1₁ ↔ (((0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx[15:0]) + 0x0₁ ∘ %rbx[15:0])[15:15] = 0x1₁)

=====================================
Circuits:

%rbx   : %rbx[63:16] ∘ (((0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx[15:0]) + 0x0₁ ∘ %rbx[15:0])[15:0]

%cf    : (((0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx[15:0]) + 0x0₁ ∘ %rbx[15:0])[16:16] = 0x1₁
%of    : (%rbx[15:15] = 0x1₁ ↔ %rbx[15:15] = 0x1₁) ∧ !(%rbx[15:15] = 0x1₁ ↔ (((0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[16:16] = 0x1₁ ? 0x0₁ ∘ %rbx[15:0] + 0x1₁₇ : 0x0₁ ∘ %rbx[15:0]) + 0x0₁ ∘ %rbx[15:0])[15:15] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/