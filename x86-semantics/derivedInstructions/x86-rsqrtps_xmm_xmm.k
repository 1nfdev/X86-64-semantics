// Autogenerated using stratification.
requires "x86-configuration.k"

module RSQRTPS-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (rsqrtps R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(getParentValue(R1, RSMap), 128, 160), 24, 8), 2) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(getParentValue(R1, RSMap), 160, 192), 24, 8), 2) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(getParentValue(R1, RSMap), 192, 224), 24, 8), 2) ) , 32), Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(getParentValue(R1, RSMap), 224, 256), 24, 8), 2) ) , 32))))) )


)

    </regstate>
endmodule

module RSQRTPS-XMM-XMM-SEMANTICS
  imports RSQRTPS-XMM-XMM
endmodule
/*
TargetInstr:
rsqrtps %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse }

Circuit:
circuit:vrsqrtps %xmm2, %xmm8  #  1     0    4      OPC=vrsqrtps_xmm_xmm
circuit:movapd %xmm8, %xmm1    #  2     0x4  5      OPC=movapd_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

rsqrtps %xmm2, %xmm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse }

-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vrsqrtps_xmm_xmm
%rdx/%rdx: %rdx_vrsqrtps_xmm_xmm

%xmm0: %ymm0_vrsqrtps_xmm_xmm[127:0]
%xmm1: %ymm1_vrsqrtps_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm3

Final state:
%rax/%rax: %rax_vrsqrtps_xmm_xmm
%rdx/%rdx: %rdx_vrsqrtps_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vrsqrtps %ymm3, %ymm12

Final state:
%ymm12: approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[255:224]) ∘ (approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[223:192]) ∘ (approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[191:160]) ∘ (approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[159:128]) ∘ (approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[127:96]) ∘ (approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[95:64]) ∘ (approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[63:32]) ∘ approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[31:0])))))))

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_256_xmm12_xmm13_ymm1

Final state:
%rax/%rax: %rax_vrsqrtps_xmm_xmm
%rdx/%rdx: %rdx_vrsqrtps_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[127:0][127:0] ∘ (approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[255:224]) ∘ (approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[223:192]) ∘ (approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[191:160]) ∘ (approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[159:128]) ∘ (approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[127:96]) ∘ (approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[95:64]) ∘ (approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[63:32]) ∘ approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[31:0]))))))))[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vrsqrtps %xmm2, %xmm8

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm3
vrsqrtps %ymm3, %ymm12
callq .move_128_256_xmm12_xmm13_ymm1
retq 

Initial state:
%ymm8: %ymm8_rsqrtps_xmm_xmm

State for specgen instruction: vrsqrtps %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[127:0][127:0] ∘ (approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[255:224]) ∘ (approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[223:192]) ∘ (approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[191:160]) ∘ (approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[159:128]) ∘ (approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[127:96]) ∘ (approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[95:64]) ∘ (approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[63:32]) ∘ approx_reciprocal_sqrt_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrsqrtps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrsqrtps_xmm_xmm[127:0][63:0][63:0]))[31:0]))))))))[127:0][127:0]

Final state
%ymm8: 0x0₁₂₈ ∘ (approx_reciprocal_sqrt_single(%ymm2_rsqrtps_xmm_xmm[127:96]) ∘ (approx_reciprocal_sqrt_single(%ymm2_rsqrtps_xmm_xmm[95:64]) ∘ (approx_reciprocal_sqrt_single(%ymm2_rsqrtps_xmm_xmm[63:32]) ∘ approx_reciprocal_sqrt_single(%ymm2_rsqrtps_xmm_xmm[31:0]))))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_movapd_xmm_xmm
%rdx/%rdx: %rdx_movapd_xmm_xmm

%xmm0: %ymm0_movapd_xmm_xmm[127:0]
%xmm1: %ymm1_movapd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_movapd_xmm_xmm
%rdx/%rdx: %rdx_movapd_xmm_xmm

%xmm0: %ymm0_movapd_xmm_xmm[127:0]
%xmm1: (%ymm1_movapd_xmm_xmm[255:128] ∘ (%ymm2_movapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_movapd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for movapd %xmm8, %xmm1

.target:
callq .move_128_064_xmm2_r12_r13
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%xmm1: %ymm1_rsqrtps_xmm_xmm[127:0]

State for specgen instruction: movapd %xmm2, %xmm1:
%xmm1: (%ymm1_movapd_xmm_xmm[255:128] ∘ (%ymm2_movapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_movapd_xmm_xmm[127:0][63:0][63:0]))[127:0]

Final state
%xmm1: (%ymm1_rsqrtps_xmm_xmm[255:128] ∘ (approx_reciprocal_sqrt_single(%ymm2_rsqrtps_xmm_xmm[127:96]) ∘ (approx_reciprocal_sqrt_single(%ymm2_rsqrtps_xmm_xmm[95:64]) ∘ (approx_reciprocal_sqrt_single(%ymm2_rsqrtps_xmm_xmm[63:32]) ∘ approx_reciprocal_sqrt_single(%ymm2_rsqrtps_xmm_xmm[31:0])))))[127:0]

=====================================
=====================================
Computing circuit for rsqrtps %xmm2, %xmm1

.target:
vrsqrtps %xmm2, %xmm8
movapd %xmm8, %xmm1
retq 

Initial state:
%xmm1: %ymm1[127:0]

State for specgen instruction: rsqrtps %xmm2, %xmm1:
%xmm1: (%ymm1_rsqrtps_xmm_xmm[255:128] ∘ (approx_reciprocal_sqrt_single(%ymm2_rsqrtps_xmm_xmm[127:96]) ∘ (approx_reciprocal_sqrt_single(%ymm2_rsqrtps_xmm_xmm[95:64]) ∘ (approx_reciprocal_sqrt_single(%ymm2_rsqrtps_xmm_xmm[63:32]) ∘ approx_reciprocal_sqrt_single(%ymm2_rsqrtps_xmm_xmm[31:0])))))[127:0]

Final state
%xmm1: (%ymm1[255:128] ∘ (approx_reciprocal_sqrt_single(%ymm2[127:96]) ∘ (approx_reciprocal_sqrt_single(%ymm2[95:64]) ∘ (approx_reciprocal_sqrt_single(%ymm2[63:32]) ∘ approx_reciprocal_sqrt_single(%ymm2[31:0])))))[127:0]

=====================================
Circuits:

%ymm1  : %ymm1[255:128] ∘ (approx_reciprocal_sqrt_single(%ymm2[127:96]) ∘ (approx_reciprocal_sqrt_single(%ymm2[95:64]) ∘ (approx_reciprocal_sqrt_single(%ymm2[63:32]) ∘ approx_reciprocal_sqrt_single(%ymm2[31:0]))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/