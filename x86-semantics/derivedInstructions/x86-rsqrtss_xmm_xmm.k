// Autogenerated using stratification.
requires "x86-configuration.k"

module RSQRTSS-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (rsqrtss R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 224), Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(getParentValue(R1, RSMap), 224, 256), 24, 8), 2) ) , 32)) )


)

    </regstate>
endmodule

module RSQRTSS-XMM-XMM-SEMANTICS
  imports RSQRTSS-XMM-XMM
endmodule
/*
TargetInstr:
rsqrtss %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 }
must read:{ %xmm1 %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse }

Circuit:
circuit:vdivps %xmm2, %xmm1, %xmm8                      #  1     0     4      OPC=vdivps_xmm_xmm_xmm
circuit:callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11  #  2     0x4   5      OPC=callq_label
circuit:vrsqrtps %ymm8, %ymm2                           #  3     0x9   5      OPC=vrsqrtps_ymm_ymm
circuit:movss %xmm2, %xmm1                              #  4     0xe   4      OPC=movss_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

rsqrtss %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 }
  must read:       { %xmm1 %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse }

-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovupd_xmm_xmm
%rdx/%rdx: %rdx_vmovupd_xmm_xmm

%xmm0: %ymm0_vmovupd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovupd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovupd_xmm_xmm
%rdx/%rdx: %rdx_vmovupd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovupd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovupd %xmm2, %xmm5

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm5: %ymm5_divps_xmm_xmm

State for specgen instruction: vmovupd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovupd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm5: 0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovupd_xmm_xmm
%rdx/%rdx: %rdx_vmovupd_xmm_xmm

%xmm0: %ymm0_vmovupd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovupd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovupd_xmm_xmm
%rdx/%rdx: %rdx_vmovupd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovupd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovupd %xmm1, %xmm6

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm6: %ymm6_divps_xmm_xmm

State for specgen instruction: vmovupd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovupd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm6: 0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for vdivps %ymm5, %ymm6, %ymm2

Final state:
%ymm2: div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[255:224]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[223:192]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[191:160]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[159:128]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[127:96]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[95:64]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[63:32]) ∘ div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[31:0])))))))

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_64_xmm2_xmm8_xmm9

Final state:
%rax/%rax: %rax_divps_xmm_xmm
%rdx/%rdx: %rdx_divps_xmm_xmm

%xmm0: %ymm0_divps_xmm_xmm[127:0]
%xmm1: %ymm1_divps_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_64_128_xmm8_xmm9_xmm1

Final state:
%rax/%rax: %rax_divps_xmm_xmm
%rdx/%rdx: %rdx_divps_xmm_xmm

%xmm0: %ymm0_divps_xmm_xmm[127:0]
%xmm1: (%ymm1_divps_xmm_xmm[255:128] ∘ ((%ymm9_divps_xmm_xmm[255:128] ∘ (0x0₆₄ ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[255:224]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[223:192]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[191:160]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[159:128]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[127:96]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[95:64]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[63:32]) ∘ div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[31:0]))))))))[127:0][127:64]))[127:0][63:0] ∘ (%ymm8_divps_xmm_xmm[255:128] ∘ (0x0₆₄ ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[255:224]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[223:192]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[191:160]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[159:128]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[127:96]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[95:64]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[63:32]) ∘ div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[31:0]))))))))[127:0][63:0]))[127:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for divps %xmm3, %xmm2

.target:
vmovupd %xmm2, %xmm5
vmovupd %xmm1, %xmm6
vdivps %ymm5, %ymm6, %ymm2
callq .move_128_64_xmm2_xmm8_xmm9
callq .move_64_128_xmm8_xmm9_xmm1
retq 

Initial state:
%xmm2: %ymm2_vdivps_xmm_xmm_xmm[127:0]

State for specgen instruction: divps %xmm2, %xmm1:
%xmm1: (%ymm1_divps_xmm_xmm[255:128] ∘ ((%ymm9_divps_xmm_xmm[255:128] ∘ (0x0₆₄ ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[255:224]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[223:192]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[191:160]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[159:128]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[127:96]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[95:64]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[63:32]) ∘ div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[31:0]))))))))[127:0][127:64]))[127:0][63:0] ∘ (%ymm8_divps_xmm_xmm[255:128] ∘ (0x0₆₄ ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[255:224]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[223:192]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[191:160]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[159:128]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[127:96]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[95:64]) ∘ (div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[63:32]) ∘ div_single((0x0₁₂₈ ∘ %ymm1_divps_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm2_divps_xmm_xmm[127:0])[31:0]))))))))[127:0][63:0]))[127:0][63:0]))[127:0]

Final state
%xmm2: (%ymm2_vdivps_xmm_xmm_xmm[255:128] ∘ (div_single(%ymm2_vdivps_xmm_xmm_xmm[127:96], %ymm3_vdivps_xmm_xmm_xmm[127:96]) ∘ (div_single(%ymm2_vdivps_xmm_xmm_xmm[95:64], %ymm3_vdivps_xmm_xmm_xmm[95:64]) ∘ (div_single(%ymm2_vdivps_xmm_xmm_xmm[63:32], %ymm3_vdivps_xmm_xmm_xmm[63:32]) ∘ div_single(%ymm2_vdivps_xmm_xmm_xmm[31:0], %ymm3_vdivps_xmm_xmm_xmm[31:0])))))[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: %ymm0_vmovdqa_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqa %xmm2, %xmm8

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm8: %ymm8_vdivps_xmm_xmm_xmm

State for specgen instruction: vmovdqa %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm8: 0x0₁₂₈ ∘ (div_single(%ymm2_vdivps_xmm_xmm_xmm[127:96], %ymm3_vdivps_xmm_xmm_xmm[127:96]) ∘ (div_single(%ymm2_vdivps_xmm_xmm_xmm[95:64], %ymm3_vdivps_xmm_xmm_xmm[95:64]) ∘ (div_single(%ymm2_vdivps_xmm_xmm_xmm[63:32], %ymm3_vdivps_xmm_xmm_xmm[63:32]) ∘ div_single(%ymm2_vdivps_xmm_xmm_xmm[31:0], %ymm3_vdivps_xmm_xmm_xmm[31:0]))))

=====================================
-------------------------------------
Getting base circuit for vminpd %ymm2, %ymm2, %ymm1

Final state:
%ymm1: (mincmp_double(%ymm2_vmovdqa_ymm_ymm[255:192], %ymm2_vmovdqa_ymm_ymm[255:192])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[255:192] : %ymm2_vmovdqa_ymm_ymm[255:192]) ∘ ((mincmp_double(%ymm2_vmovdqa_ymm_ymm[191:128], %ymm2_vmovdqa_ymm_ymm[191:128])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[191:128] : %ymm2_vmovdqa_ymm_ymm[191:128]) ∘ ((mincmp_double(%ymm2_vmovdqa_ymm_ymm[127:64], %ymm2_vmovdqa_ymm_ymm[127:64])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[127:64] : %ymm2_vmovdqa_ymm_ymm[127:64]) ∘ (mincmp_double(%ymm2_vmovdqa_ymm_ymm[63:0], %ymm2_vmovdqa_ymm_ymm[63:0])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[63:0] : %ymm2_vmovdqa_ymm_ymm[63:0])))

-------------------------------------
=====================================
Computing circuit for vmovdqa %ymm8, %ymm4

.target:
vminpd %ymm2, %ymm2, %ymm1
retq 

Initial state:
%ymm4: %ymm4_vdivps_xmm_xmm_xmm

State for specgen instruction: vmovdqa %ymm2, %ymm1:
%ymm1: (mincmp_double(%ymm2_vmovdqa_ymm_ymm[255:192], %ymm2_vmovdqa_ymm_ymm[255:192])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[255:192] : %ymm2_vmovdqa_ymm_ymm[255:192]) ∘ ((mincmp_double(%ymm2_vmovdqa_ymm_ymm[191:128], %ymm2_vmovdqa_ymm_ymm[191:128])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[191:128] : %ymm2_vmovdqa_ymm_ymm[191:128]) ∘ ((mincmp_double(%ymm2_vmovdqa_ymm_ymm[127:64], %ymm2_vmovdqa_ymm_ymm[127:64])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[127:64] : %ymm2_vmovdqa_ymm_ymm[127:64]) ∘ (mincmp_double(%ymm2_vmovdqa_ymm_ymm[63:0], %ymm2_vmovdqa_ymm_ymm[63:0])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[63:0] : %ymm2_vmovdqa_ymm_ymm[63:0])))

Final state
%ymm4: 0x0₆₄ ∘ (0x0₆₄ ∘ (div_single(%ymm2_vdivps_xmm_xmm_xmm[127:96], %ymm3_vdivps_xmm_xmm_xmm[127:96]) ∘ div_single(%ymm2_vdivps_xmm_xmm_xmm[95:64], %ymm3_vdivps_xmm_xmm_xmm[95:64]) ∘ (div_single(%ymm2_vdivps_xmm_xmm_xmm[63:32], %ymm3_vdivps_xmm_xmm_xmm[63:32]) ∘ div_single(%ymm2_vdivps_xmm_xmm_xmm[31:0], %ymm3_vdivps_xmm_xmm_xmm[31:0]))))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: %ymm0_vmovdqa_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqa %xmm4, %xmm1

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm1: %ymm1_vdivps_xmm_xmm_xmm

State for specgen instruction: vmovdqa %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (div_single(%ymm2_vdivps_xmm_xmm_xmm[127:96], %ymm3_vdivps_xmm_xmm_xmm[127:96]) ∘ div_single(%ymm2_vdivps_xmm_xmm_xmm[95:64], %ymm3_vdivps_xmm_xmm_xmm[95:64]) ∘ (div_single(%ymm2_vdivps_xmm_xmm_xmm[63:32], %ymm3_vdivps_xmm_xmm_xmm[63:32]) ∘ div_single(%ymm2_vdivps_xmm_xmm_xmm[31:0], %ymm3_vdivps_xmm_xmm_xmm[31:0])))

=====================================
=====================================
Computing circuit for vdivps %xmm2, %xmm1, %xmm8

.target:
divps %xmm3, %xmm2
vmovdqa %xmm2, %xmm8
vmovdqa %ymm8, %ymm4
vmovdqa %xmm4, %xmm1
retq 

Initial state:
%ymm8: %ymm8_rsqrtss_xmm_xmm

State for specgen instruction: vdivps %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₁₂₈ ∘ (div_single(%ymm2_vdivps_xmm_xmm_xmm[127:96], %ymm3_vdivps_xmm_xmm_xmm[127:96]) ∘ div_single(%ymm2_vdivps_xmm_xmm_xmm[95:64], %ymm3_vdivps_xmm_xmm_xmm[95:64]) ∘ (div_single(%ymm2_vdivps_xmm_xmm_xmm[63:32], %ymm3_vdivps_xmm_xmm_xmm[63:32]) ∘ div_single(%ymm2_vdivps_xmm_xmm_xmm[31:0], %ymm3_vdivps_xmm_xmm_xmm[31:0])))

Final state
%ymm8: 0x0₁₂₈ ∘ (div_single(%ymm1_rsqrtss_xmm_xmm[127:96], %ymm2_rsqrtss_xmm_xmm[127:96]) ∘ div_single(%ymm1_rsqrtss_xmm_xmm[95:64], %ymm2_rsqrtss_xmm_xmm[95:64]) ∘ (div_single(%ymm1_rsqrtss_xmm_xmm[63:32], %ymm2_rsqrtss_xmm_xmm[63:32]) ∘ div_single(%ymm1_rsqrtss_xmm_xmm[31:0], %ymm2_rsqrtss_xmm_xmm[31:0])))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_rsqrtss_xmm_xmm
%rdx/%rdx: %rdx_rsqrtss_xmm_xmm

%xmm0: %ymm0_rsqrtss_xmm_xmm[127:0]
%xmm1: %ymm1_rsqrtss_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vrsqrtps %ymm8, %ymm2

Final state:
%ymm2: approx_reciprocal_sqrt_single(((0x0₁₂₈ ∘ (div_single(%ymm1_rsqrtss_xmm_xmm[127:96], %ymm2_rsqrtss_xmm_xmm[127:96]) ∘ div_single(%ymm1_rsqrtss_xmm_xmm[95:64], %ymm2_rsqrtss_xmm_xmm[95:64]) ∘ (div_single(%ymm1_rsqrtss_xmm_xmm[63:32], %ymm2_rsqrtss_xmm_xmm[63:32]) ∘ div_single(%ymm1_rsqrtss_xmm_xmm[31:0], %ymm2_rsqrtss_xmm_xmm[31:0]))))[255:128] ∘ (0x0₉₆ ∘ %ymm2_rsqrtss_xmm_xmm[127:0][31:0]))[255:224]) ∘ (approx_reciprocal_sqrt_single(((0x0₁₂₈ ∘ (div_single(%ymm1_rsqrtss_xmm_xmm[127:96], %ymm2_rsqrtss_xmm_xmm[127:96]) ∘ div_single(%ymm1_rsqrtss_xmm_xmm[95:64], %ymm2_rsqrtss_xmm_xmm[95:64]) ∘ (div_single(%ymm1_rsqrtss_xmm_xmm[63:32], %ymm2_rsqrtss_xmm_xmm[63:32]) ∘ div_single(%ymm1_rsqrtss_xmm_xmm[31:0], %ymm2_rsqrtss_xmm_xmm[31:0]))))[255:128] ∘ (0x0₉₆ ∘ %ymm2_rsqrtss_xmm_xmm[127:0][31:0]))[223:192]) ∘ (approx_reciprocal_sqrt_single(((0x0₁₂₈ ∘ (div_single(%ymm1_rsqrtss_xmm_xmm[127:96], %ymm2_rsqrtss_xmm_xmm[127:96]) ∘ div_single(%ymm1_rsqrtss_xmm_xmm[95:64], %ymm2_rsqrtss_xmm_xmm[95:64]) ∘ (div_single(%ymm1_rsqrtss_xmm_xmm[63:32], %ymm2_rsqrtss_xmm_xmm[63:32]) ∘ div_single(%ymm1_rsqrtss_xmm_xmm[31:0], %ymm2_rsqrtss_xmm_xmm[31:0]))))[255:128] ∘ (0x0₉₆ ∘ %ymm2_rsqrtss_xmm_xmm[127:0][31:0]))[191:160]) ∘ (approx_reciprocal_sqrt_single(((0x0₁₂₈ ∘ (div_single(%ymm1_rsqrtss_xmm_xmm[127:96], %ymm2_rsqrtss_xmm_xmm[127:96]) ∘ div_single(%ymm1_rsqrtss_xmm_xmm[95:64], %ymm2_rsqrtss_xmm_xmm[95:64]) ∘ (div_single(%ymm1_rsqrtss_xmm_xmm[63:32], %ymm2_rsqrtss_xmm_xmm[63:32]) ∘ div_single(%ymm1_rsqrtss_xmm_xmm[31:0], %ymm2_rsqrtss_xmm_xmm[31:0]))))[255:128] ∘ (0x0₉₆ ∘ %ymm2_rsqrtss_xmm_xmm[127:0][31:0]))[159:128]) ∘ (approx_reciprocal_sqrt_single(((0x0₁₂₈ ∘ (div_single(%ymm1_rsqrtss_xmm_xmm[127:96], %ymm2_rsqrtss_xmm_xmm[127:96]) ∘ div_single(%ymm1_rsqrtss_xmm_xmm[95:64], %ymm2_rsqrtss_xmm_xmm[95:64]) ∘ (div_single(%ymm1_rsqrtss_xmm_xmm[63:32], %ymm2_rsqrtss_xmm_xmm[63:32]) ∘ div_single(%ymm1_rsqrtss_xmm_xmm[31:0], %ymm2_rsqrtss_xmm_xmm[31:0]))))[255:128] ∘ (0x0₉₆ ∘ %ymm2_rsqrtss_xmm_xmm[127:0][31:0]))[127:96]) ∘ (approx_reciprocal_sqrt_single(((0x0₁₂₈ ∘ (div_single(%ymm1_rsqrtss_xmm_xmm[127:96], %ymm2_rsqrtss_xmm_xmm[127:96]) ∘ div_single(%ymm1_rsqrtss_xmm_xmm[95:64], %ymm2_rsqrtss_xmm_xmm[95:64]) ∘ (div_single(%ymm1_rsqrtss_xmm_xmm[63:32], %ymm2_rsqrtss_xmm_xmm[63:32]) ∘ div_single(%ymm1_rsqrtss_xmm_xmm[31:0], %ymm2_rsqrtss_xmm_xmm[31:0]))))[255:128] ∘ (0x0₉₆ ∘ %ymm2_rsqrtss_xmm_xmm[127:0][31:0]))[95:64]) ∘ (approx_reciprocal_sqrt_single(((0x0₁₂₈ ∘ (div_single(%ymm1_rsqrtss_xmm_xmm[127:96], %ymm2_rsqrtss_xmm_xmm[127:96]) ∘ div_single(%ymm1_rsqrtss_xmm_xmm[95:64], %ymm2_rsqrtss_xmm_xmm[95:64]) ∘ (div_single(%ymm1_rsqrtss_xmm_xmm[63:32], %ymm2_rsqrtss_xmm_xmm[63:32]) ∘ div_single(%ymm1_rsqrtss_xmm_xmm[31:0], %ymm2_rsqrtss_xmm_xmm[31:0]))))[255:128] ∘ (0x0₉₆ ∘ %ymm2_rsqrtss_xmm_xmm[127:0][31:0]))[63:32]) ∘ approx_reciprocal_sqrt_single(((0x0₁₂₈ ∘ (div_single(%ymm1_rsqrtss_xmm_xmm[127:96], %ymm2_rsqrtss_xmm_xmm[127:96]) ∘ div_single(%ymm1_rsqrtss_xmm_xmm[95:64], %ymm2_rsqrtss_xmm_xmm[95:64]) ∘ (div_single(%ymm1_rsqrtss_xmm_xmm[63:32], %ymm2_rsqrtss_xmm_xmm[63:32]) ∘ div_single(%ymm1_rsqrtss_xmm_xmm[31:0], %ymm2_rsqrtss_xmm_xmm[31:0]))))[255:128] ∘ (0x0₉₆ ∘ %ymm2_rsqrtss_xmm_xmm[127:0][31:0]))[31:0])))))))

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_movss_xmm_xmm
%rdx/%rdx: %rdx_movss_xmm_xmm

%xmm0: %ymm0_movss_xmm_xmm[127:0]
%xmm1: %ymm1_movss_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: %ymm0_vpmovzxdq_xmm_xmm[127:0]
%xmm1: %ymm1_vpmovzxdq_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_byte_5_of_ymm1_to_r9b

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm2

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_64_128_xmm8_xmm9_xmm1

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ ((0x0₂₅₆[255:128] ∘ (0x0₉₆ ∘ (0x0₂₅₆[255:128] ∘ ((%ymm2_vpmovzxdq_xmm_xmm[127:0][127:64][63:8] ∘ 0x0₂₅₆[47:40])[63:0] ∘ %ymm2_vpmovzxdq_xmm_xmm[127:0][63:0][63:0]))[127:0][63:32]))[127:0][63:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₉₆ ∘ (0x0₂₅₆[255:128] ∘ ((%ymm2_vpmovzxdq_xmm_xmm[127:0][127:64][63:8] ∘ 0x0₂₅₆[47:40])[63:0] ∘ %ymm2_vpmovzxdq_xmm_xmm[127:0][63:0][63:0]))[127:0][31:0]))[127:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vpmovzxdq %xmm2, %xmm8

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_byte_5_of_ymm1_to_r9b
callq .move_064_128_r8_r9_xmm2
callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
callq .move_64_128_xmm8_xmm9_xmm1
retq 

Initial state:
%ymm8: %ymm8_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][31:0])

State for specgen instruction: vpmovzxdq %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ ((0x0₂₅₆[255:128] ∘ (0x0₉₆ ∘ (0x0₂₅₆[255:128] ∘ ((%ymm2_vpmovzxdq_xmm_xmm[127:0][127:64][63:8] ∘ 0x0₂₅₆[47:40])[63:0] ∘ %ymm2_vpmovzxdq_xmm_xmm[127:0][63:0][63:0]))[127:0][63:32]))[127:0][63:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₉₆ ∘ (0x0₂₅₆[255:128] ∘ ((%ymm2_vpmovzxdq_xmm_xmm[127:0][127:64][63:8] ∘ 0x0₂₅₆[47:40])[63:0] ∘ %ymm2_vpmovzxdq_xmm_xmm[127:0][63:0][63:0]))[127:0][31:0]))[127:0][63:0])

Final state
%ymm8: 0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[31:0]))

=====================================
-------------------------------------
Getting base circuit for callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1

Final state:
%rax/%rax: %rax_movss_xmm_xmm
%rdx/%rdx: %rdx_movss_xmm_xmm

%xmm0: %ymm0_movss_xmm_xmm[127:0]
%xmm1: (%ymm1_movss_xmm_xmm[255:128] ∘ ((%ymm11_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ (0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[31:0])))[127:0][31:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for movss %xmm2, %xmm1

.target:
callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11
vpmovzxdq %xmm2, %xmm8
callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
retq 

Initial state:
%xmm1: %ymm1_rsqrtss_xmm_xmm[127:0]

State for specgen instruction: movss %xmm2, %xmm1:
%xmm1: (%ymm1_movss_xmm_xmm[255:128] ∘ ((%ymm11_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ (0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[31:0])))[127:0][31:0]))[127:0]

Final state
%xmm1: (%ymm1_rsqrtss_xmm_xmm[255:128] ∘ (%ymm1_rsqrtss_xmm_xmm[127:32] ∘ approx_reciprocal_sqrt_single(%ymm2_rsqrtss_xmm_xmm[31:0])))[127:0]

=====================================
=====================================
Computing circuit for rsqrtss %xmm2, %xmm1

.target:
vdivps %xmm2, %xmm1, %xmm8
callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
vrsqrtps %ymm8, %ymm2
movss %xmm2, %xmm1
retq 

Initial state:
%xmm1: %ymm1[127:0]

State for specgen instruction: rsqrtss %xmm2, %xmm1:
%xmm1: (%ymm1_rsqrtss_xmm_xmm[255:128] ∘ (%ymm1_rsqrtss_xmm_xmm[127:32] ∘ approx_reciprocal_sqrt_single(%ymm2_rsqrtss_xmm_xmm[31:0])))[127:0]

Final state
%xmm1: (%ymm1[255:128] ∘ (%ymm1[127:32] ∘ approx_reciprocal_sqrt_single(%ymm2[31:0])))[127:0]

=====================================
Circuits:

%ymm1  : %ymm1[255:128] ∘ (%ymm1[127:32] ∘ approx_reciprocal_sqrt_single(%ymm2[31:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/