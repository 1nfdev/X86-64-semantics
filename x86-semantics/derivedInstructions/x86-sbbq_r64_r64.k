// Autogenerated using stratification.
requires "x86-configuration.k"

module SBBQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (sbbq R1:R64, R2:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap))), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17))), 0, 1))), 0, 1)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap))), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17))), 0, 1))), 0, 1)), mi(17, 65535)), 9, 17))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap))), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17))), 0, 1))), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap)), getParentValue(R2, RSMap)), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap))), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17))), 0, 1))), 1, 65)), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap))), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17))), 0, 1))), 57, 65), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(getParentValue(R1, RSMap), 0, 1)), extractMInt(getParentValue(R2, RSMap), 0, 1))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(getParentValue(R1, RSMap), 0, 1)), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap))), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17))), 0, 1))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap))), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17))), 0, 1))), 1, 65) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap))), concatenateMInt(mi(1, 0), getParentValue(R2, RSMap))), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17))), 0, 1))), 1, 65), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module SBBQ-R64-R64-SEMANTICS
  imports SBBQ-R64-R64
endmodule
/*
TargetInstr:
sbbq %rcx, %rbx
RWSet:
maybe read:{ %rcx %rbx %cf }
must read:{ %rcx %rbx %cf }
maybe write:{ %rbx %cf %pf %af %zf %sf %of }
must write:{ %rbx %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:notq %rcx        #  1     0    3      OPC=notq_r64
circuit:cmc              #  2     0x3  1      OPC=cmc
circuit:adcq %rcx, %rbx  #  3     0x4  3      OPC=adcq_r64_r64
circuit:cmc              #  4     0x7  1      OPC=cmc
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

sbbq %rcx, %rbx

  maybe read:      { %rcx %rbx %cf }
  must read:       { %rcx %rbx %cf }
  maybe write:     { %rbx %cf %pf %af %zf %sf %of }
  must write:      { %rbx %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : ((((%cf ? 0x0₉ : 0xff₉) + (%cf ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx)[63:0]

%cf    : ((((((%cf ? 0x0₉ : 0xff₉) + (%cf ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx)[64:64] = 0x1₁ ? 0x0₉ : 0xff₉) + (((((%cf ? 0x0₉ : 0xff₉) + (%cf ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx)[64:64] = 0x1₁ ? 0x0₉ : 0xff₉))[8:8] = 0x1₁
%pf    : !(((((%cf ? 0x0₉ : 0xff₉) + (%cf ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx)[0:0] = 0x1₁ ⊕ ((((%cf ? 0x0₉ : 0xff₉) + (%cf ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx)[1:1] = 0x1₁ ⊕ ((((%cf ? 0x0₉ : 0xff₉) + (%cf ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx)[2:2] = 0x1₁ ⊕ ((((%cf ? 0x0₉ : 0xff₉) + (%cf ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx)[3:3] = 0x1₁ ⊕ ((((%cf ? 0x0₉ : 0xff₉) + (%cf ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx)[4:4] = 0x1₁ ⊕ ((((%cf ? 0x0₉ : 0xff₉) + (%cf ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx)[5:5] = 0x1₁ ⊕ ((((%cf ? 0x0₉ : 0xff₉) + (%cf ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx)[6:6] = 0x1₁ ⊕ ((((%cf ? 0x0₉ : 0xff₉) + (%cf ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx)[7:7] = 0x1₁)
%af    : (0x0₁ ∘ (%rcx[3:0] ⊕ 0xf₄) + 0x0₁ ∘ %rbx[3:0])[4:4] = 0x1₁
%zf    : ((((%cf ? 0x0₉ : 0xff₉) + (%cf ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx)[63:0] = 0x0₆₄
%sf    : ((((%cf ? 0x0₉ : 0xff₉) + (%cf ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx)[63:63] = 0x1₁
%of    : ((%rcx[63:63] ⊕ 0x1₁) = 0x1₁ ↔ %rbx[63:63] = 0x1₁) ∧ !((%rcx[63:63] ⊕ 0x1₁) = 0x1₁ ↔ ((((%cf ? 0x0₉ : 0xff₉) + (%cf ? 0x0₉ : 0xff₉))[8:8] = 0x1₁ ? 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ : 0x0₁ ∘ (%rcx ⊕ 0xffffffffffffffff₆₄)) + 0x0₁ ∘ %rbx)[63:63] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/