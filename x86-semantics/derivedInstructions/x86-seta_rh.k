// Autogenerated using stratification.
requires "x86-configuration.k"

module SETA-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (seta R1:Rh,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt((#ifMInt (eqMInt((#ifMInt (eqMInt(addMInt(mi(8, 255), concatenateMInt(mi(7, 0), getFlag("ZF", RSMap))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) , mi(1, 0)) ) #then ( extractMInt(addMInt(concatenateMInt(mi(8, 0), addMInt(mi(8, 255), concatenateMInt(mi(7, 0), getFlag("CF", RSMap)))), mi(16, 4)), 0, 8) ) #else ( mi(8, 0) ) #fi) , extractMInt(getParentValue(R1, RSMap), 56, 64))) )


)

    </regstate>
endmodule

module SETA-RH-SEMANTICS
  imports SETA-RH
endmodule
/*
TargetInstr:
seta %ah
RWSet:
maybe read:{ %cf %zf }
must read:{ %cf %zf }
maybe write:{ %ah }
must write:{ %ah }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .read_zf_into_rbx  #  1     0    5      OPC=callq_label
circuit:setnc %ah                #  2     0x5  3      OPC=setnc_rh
circuit:decb %bl                 #  3     0x8  2      OPC=decb_r8
circuit:cmovzq %rbx, %rax        #  4     0xa  4      OPC=cmovzq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

seta %ah

  maybe read:      { %cf %zf }
  must read:       { %cf %zf }
  maybe write:     { %ah }
  must write:      { %ah }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for callq .read_zf_into_rbx

Final state:
%rax/%rax: %rax_seta_rh
%rdx/%rdx: %rdx_seta_rh

%xmm0: %ymm0_seta_rh[127:0]
%xmm1: %ymm1_seta_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rbx

Final state:
%rax/%rax: %rax_setnc_rh
%rdx/%rdx: %rdx_setnc_rh

%xmm0: %ymm0_setnc_rh[127:0]
%xmm1: %ymm1_setnc_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %r9

Final state:
%r9/%r9: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rcx, %rcx

Final state:
%rcx/%rcx: %rcx_decb_r8 ⊕ %rcx_decb_r8

%cf: false
%pf: !((%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][0:0] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][1:1] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][2:2] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][3:3] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][4:4] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][5:5] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][6:6] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][7:7] = 0x1₁)
%zf: (%rcx_decb_r8 ⊕ %rcx_decb_r8) = 0x0₆₄
%sf: (%rcx_decb_r8 ⊕ %rcx_decb_r8)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %r9b, %bl

Final state:
%rbx/%bl: %rbx_decb_r8[63:8] ∘ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ 0xffffffffffffffff₆₄[7:0][3:0] + 0x0₁ ∘ %rbx_decb_r8[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:7] = 0x1₁
%of: (0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ %rbx_decb_r8[7:0][7:7] = 0x1₁) ∧ !(0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for decb %bl

.target:
movq $0xffffffffffffffff, %r9
xorq %rcx, %rcx
adcb %r9b, %bl
retq 

Initial state:
%rbx/%bl: 0x0₆₃ ∘ (%cf_setnc_rh ? 0x1₁ : 0x0₁)

%pf: %pf_setnc_rh
%af: %af_setnc_rh
%zf: %zf_setnc_rh
%sf: %sf_setnc_rh
%of: %of_setnc_rh

State for specgen instruction: decb %bl:
%rbx/%bl: %rbx_decb_r8[63:8] ∘ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0]

%pf: !(((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ 0xffffffffffffffff₆₄[7:0][3:0] + 0x0₁ ∘ %rbx_decb_r8[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:7] = 0x1₁
%of: (0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ %rbx_decb_r8[7:0][7:7] = 0x1₁) ∧ !(0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %bl
Value is               -> (%rbx_decb_r8[63:8] ∘ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0])[7:0]
  after renaming it is => %cf_setnc_rh ? 0x0₈ : 0xff₈

Final state
%rbx/%bl: (0x0₆₃ ∘ (%cf_setnc_rh ? 0x1₁ : 0x0₁))[63:8] ∘ (%cf_setnc_rh ? 0x0₈ : 0xff₈)

%pf: !((%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁)
%af: (%cf_setnc_rh ? 0x1₁ : 0x0₁) = 0x1₁
%zf: (%cf_setnc_rh ? 0x0₈ : 0xff₈) = 0x0₈
%sf: (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁
%of: false ∧ !(true ↔ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movq $0x4, %rax

Final state:
%rax/%rax: 0x4₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_addw_r16_r16

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %bx

Final state:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_addw_r16_r16
%rdx/%rdx: %rdx_addw_r16_r16

%xmm0: %ymm0_addw_r16_r16[127:0]
%xmm1: %ymm1_addw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for addw %bx, %ax

.target:
clc 
adcw %cx, %bx
callq .set_szp_for_bx
retq 

Initial state:
%rax/%ax: 0x4₆₄

%cf: %cf_setnc_rh
%pf: !((%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁)
%af: (%cf_setnc_rh ? 0x1₁ : 0x0₁) = 0x1₁
%zf: (%cf_setnc_rh ? 0x0₈ : 0xff₈) = 0x0₈
%sf: (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁
%of: false ∧ !(true ↔ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁)

State for specgen instruction: addw %cx, %bx:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %ax
Value is               -> (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0]
  after renaming it is => %cf_setnc_rh ? 0x4₁₆ : 0x103₁₆

Final state
%rax/%ax: 0x4₆₄[63:16] ∘ (%cf_setnc_rh ? 0x4₁₆ : 0x103₁₆)

%cf: false
%pf: !((%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%cf_setnc_rh ? 0x1₁ : 0x0₁) = 0x1₁ ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false)
%af: (%cf_setnc_rh ? 0x0₁ : 0x1₁) = 0x1₁
%zf: (%cf_setnc_rh ? 0x4₁₆ : 0x103₁₆) = 0x0₁₆
%sf: false
%of: false

=====================================
=====================================
Computing circuit for setnc %ah

.target:
callq .read_cf_into_rbx
decb %bl
movq $0x4, %rax
addw %bx, %ax
retq 

Initial state:
%rax/%ah: %rax_seta_rh

State for specgen instruction: setnc %ah:
%rax/%ah: 0x4₆₄[63:16] ∘ (%cf_setnc_rh ? 0x4₁₆ : 0x103₁₆)

Register        -> %ah
  translates to => %ah
Value is               -> (0x4₆₄[63:16] ∘ (%cf_setnc_rh ? 0x4₁₆ : 0x103₁₆))[15:8]
  after renaming it is => %cf_seta_rh ? 0x0₈ : 0x1₈

Final state
%rax/%ah: %rax_seta_rh[63:16] ∘ (%cf_seta_rh ? 0x0₈ : 0x1₈) ∘ %rax_seta_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for movq $0xffffffffffffffff, %r9

Final state:
%r9/%r9: 0xffffffffffffffff₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rcx, %rcx

Final state:
%rcx/%rcx: %rcx_decb_r8 ⊕ %rcx_decb_r8

%cf: false
%pf: !((%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][0:0] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][1:1] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][2:2] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][3:3] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][4:4] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][5:5] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][6:6] = 0x1₁ ⊕ (%rcx_decb_r8 ⊕ %rcx_decb_r8)[7:0][7:7] = 0x1₁)
%zf: (%rcx_decb_r8 ⊕ %rcx_decb_r8) = 0x0₆₄
%sf: (%rcx_decb_r8 ⊕ %rcx_decb_r8)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %r9b, %bl

Final state:
%rbx/%bl: %rbx_decb_r8[63:8] ∘ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ 0xffffffffffffffff₆₄[7:0][3:0] + 0x0₁ ∘ %rbx_decb_r8[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:7] = 0x1₁
%of: (0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ %rbx_decb_r8[7:0][7:7] = 0x1₁) ∧ !(0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for decb %bl

.target:
movq $0xffffffffffffffff, %r9
xorq %rcx, %rcx
adcb %r9b, %bl
retq 

Initial state:
%rbx/%bl: 0x0₆₃ ∘ (%zf_seta_rh ? 0x1₁ : 0x0₁)

%pf: %pf_seta_rh
%af: %af_seta_rh
%zf: %zf_seta_rh
%sf: %sf_seta_rh
%of: %of_seta_rh

State for specgen instruction: decb %bl:
%rbx/%bl: %rbx_decb_r8[63:8] ∘ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0]

%pf: !(((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ 0xffffffffffffffff₆₄[7:0][3:0] + 0x0₁ ∘ %rbx_decb_r8[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0][7:7] = 0x1₁
%of: (0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ %rbx_decb_r8[7:0][7:7] = 0x1₁) ∧ !(0xffffffffffffffff₆₄[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %bl
Value is               -> (%rbx_decb_r8[63:8] ∘ ((false ? 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0] + 0x1₉ : 0x0₁ ∘ 0xffffffffffffffff₆₄[7:0]) + 0x0₁ ∘ %rbx_decb_r8[7:0])[7:0])[7:0]
  after renaming it is => %zf_seta_rh ? 0x0₈ : 0xff₈

Final state
%rbx/%bl: (0x0₆₃ ∘ (%zf_seta_rh ? 0x1₁ : 0x0₁))[63:8] ∘ (%zf_seta_rh ? 0x0₈ : 0xff₈)

%pf: !((%zf_seta_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%zf_seta_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%zf_seta_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%zf_seta_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%zf_seta_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%zf_seta_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%zf_seta_rh ? 0x0₁ : 0x1₁) = 0x1₁ ⊕ (%zf_seta_rh ? 0x0₁ : 0x1₁) = 0x1₁)
%af: (%zf_seta_rh ? 0x1₁ : 0x0₁) = 0x1₁
%zf: (%zf_seta_rh ? 0x0₈ : 0xff₈) = 0x0₈
%sf: (%zf_seta_rh ? 0x0₁ : 0x1₁) = 0x1₁
%of: false ∧ !(true ↔ (%zf_seta_rh ? 0x0₁ : 0x1₁) = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for cmoveq %rcx, %rbx

Final state:
%rbx/%rbx: %zf_cmovzq_r64_r64 ? %rcx_cmovzq_r64_r64 : %rbx_cmovzq_r64_r64

-------------------------------------
=====================================
Computing circuit for cmovzq %rbx, %rax

.target:
cmoveq %rcx, %rbx
retq 

Initial state:
%rax/%rax: %rax_seta_rh[63:16] ∘ (%cf_seta_rh ? 0x0₈ : 0x1₈) ∘ %rax_seta_rh[7:0]

State for specgen instruction: cmovzq %rcx, %rbx:
%rbx/%rbx: %zf_cmovzq_r64_r64 ? %rcx_cmovzq_r64_r64 : %rbx_cmovzq_r64_r64

Register        -> %rbx
  translates to => %rax
Value is               -> %zf_cmovzq_r64_r64 ? %rcx_cmovzq_r64_r64 : %rbx_cmovzq_r64_r64
  after renaming it is => (%zf_seta_rh ? 0x0₈ : 0xff₈) = 0x0₈ ? %zf_seta_rh ? 0x0₆₄ : 0xff₆₄ : %rax_seta_rh[63:16] ∘ (%cf_seta_rh ? 0x0₈ : 0x1₈) ∘ %rax_seta_rh[7:0]

Final state
%rax/%rax: (%zf_seta_rh ? 0x0₈ : 0xff₈) = 0x0₈ ? %zf_seta_rh ? 0x0₆₄ : 0xff₆₄ : %rax_seta_rh[63:16] ∘ (%cf_seta_rh ? 0x0₈ : 0x1₈) ∘ %rax_seta_rh[7:0]

=====================================
=====================================
Computing circuit for seta %ah

.target:
callq .read_zf_into_rbx
setnc %ah
decb %bl
cmovzq %rbx, %rax
retq 

Initial state:
%rax/%ah: %rax

State for specgen instruction: seta %ah:
%rax/%ah: (%zf_seta_rh ? 0x0₈ : 0xff₈) = 0x0₈ ? %zf_seta_rh ? 0x0₆₄ : 0xff₆₄ : %rax_seta_rh[63:16] ∘ (%cf_seta_rh ? 0x0₈ : 0x1₈) ∘ %rax_seta_rh[7:0]

Register        -> %ah
  translates to => %ah
Value is               -> ((%zf_seta_rh ? 0x0₈ : 0xff₈) = 0x0₈ ? %zf_seta_rh ? 0x0₆₄ : 0xff₆₄ : %rax_seta_rh[63:16] ∘ (%cf_seta_rh ? 0x0₈ : 0x1₈) ∘ %rax_seta_rh[7:0])[15:8]
  after renaming it is => (%zf ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₈ : %cf ? 0x0₈ : 0x1₈

Final state
%rax/%ah: %rax[63:16] ∘ ((%zf ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₈ : %cf ? 0x0₈ : 0x1₈) ∘ %rax[7:0]

=====================================
Circuits:

%rax   : %rax[63:16] ∘ ((%zf ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₈ : %cf ? 0x0₈ : 0x1₈) ∘ %rax[7:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/