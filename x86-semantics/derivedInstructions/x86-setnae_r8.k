// Autogenerated using stratification.
requires "x86-configuration.k"

module SETNAE-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setnae R1:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), concatenateMInt(mi(7, 0), getFlag("CF", RSMap))) )


)

    </regstate>
endmodule

module SETNAE-R8-SEMANTICS
  imports SETNAE-R8
endmodule
/*
TargetInstr:
setnae %bl
RWSet:
maybe read:{ %cf }
must read:{ %cf }
maybe write:{ %bl }
must write:{ %bl }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:setc %r15b         #  1     0    4      OPC=setc_r8
circuit:movzbw %r15b, %bx  #  2     0x4  5      OPC=movzbw_r16_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setnae %bl

  maybe read:      { %cf }
  must read:       { %cf }
  maybe write:     { %bl }
  must write:      { %bl }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for callq .read_cf_into_rcx

Final state:
%rax/%rax: %rax_setb_r8
%rdx/%rdx: %rdx_setb_r8

%xmm0: %ymm0_setb_r8[127:0]
%xmm1: %ymm1_setb_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %rbx

Final state:
%rbx/%rbx: sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for orq %rcx, %rbx

Final state:
%rbx/%rbx: sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁)

%cf: false
%pf: !((sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][0:0] = 0x1₁ ⊕ (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][1:1] = 0x1₁ ⊕ (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][2:2] = 0x1₁ ⊕ (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][3:3] = 0x1₁ ⊕ (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][4:4] = 0x1₁ ⊕ (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][5:5] = 0x1₁ ⊕ (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][6:6] = 0x1₁ ⊕ (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0][7:7] = 0x1₁)
%zf: (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁)) = 0x0₆₄
%sf: (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[63:63] = 0x1₁
%of: false

-------------------------------------
=====================================
Computing circuit for setb %bl

.target:
callq .read_cf_into_rcx
movsbq %cl, %rbx
orq %rcx, %rbx
retq 

Initial state:
%rbx/%bl: %rbx_setc_r8

State for specgen instruction: setb %bl:
%rbx/%bl: sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁)

Register        -> %bl
  translates to => %bl
Value is               -> (sign-extend-64((0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]) | 0x0₆₃ ∘ (%cf_setb_r8 ? 0x1₁ : 0x0₁))[7:0]
  after renaming it is => %cf_setc_r8 ? 0x1₈ : 0x0₈

Final state
%rbx/%bl: %rbx_setc_r8[63:8] ∘ (%cf_setc_r8 ? 0x1₈ : 0x0₈)

=====================================
=====================================
Computing circuit for setc %r15b

.target:
setb %bl
retq 

Initial state:
%r15/%r15b: %r15_setnae_r8

State for specgen instruction: setc %bl:
%rbx/%bl: %rbx_setc_r8[63:8] ∘ (%cf_setc_r8 ? 0x1₈ : 0x0₈)

Register        -> %bl
  translates to => %r15b
Value is               -> (%rbx_setc_r8[63:8] ∘ (%cf_setc_r8 ? 0x1₈ : 0x0₈))[7:0]
  after renaming it is => %cf_setnae_r8 ? 0x1₈ : 0x0₈

Final state
%r15/%r15b: %r15_setnae_r8[63:8] ∘ (%cf_setnae_r8 ? 0x1₈ : 0x0₈)

=====================================
-------------------------------------
Getting base circuit for movq $0x5, %rbx

Final state:
%rbx/%rbx: 0x5₆₄

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r12d_r13d

Final state:
%rax/%rax: %rax_movzbw_r16_r8
%rdx/%rdx: %rdx_movzbw_r16_r8

%xmm0: %ymm0_movzbw_r16_r8[127:0]
%xmm1: %ymm1_movzbw_r16_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r12

Final state:
%r12/%r12: sign-extend-64(%rcx_movzbw_r16_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r12b_r13b_bx

Final state:
%rax/%rax: %rax_movzbw_r16_r8
%rdx/%rdx: %rdx_movzbw_r16_r8

%xmm0: %ymm0_movzbw_r16_r8[127:0]
%xmm1: %ymm1_movzbw_r16_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movzbw %r15b, %bx

.target:
movq $0x5, %rbx
callq .move_064_032_rbx_r12d_r13d
movsbq %cl, %r12
callq .move_008_016_r12b_r13b_bx
retq 

Initial state:
%rbx/%bx: %rbx_setnae_r8

State for specgen instruction: movzbw %cl, %bx:
%rbx/%bx: 0x5₆₄[63:16] ∘ ((0x0₃₂ ∘ 0x5₆₄[63:32])[7:0][7:0] ∘ sign-extend-64(%rcx_movzbw_r16_r8[7:0])[7:0][7:0])

Register        -> %bx
  translates to => %bx
Value is               -> (0x5₆₄[63:16] ∘ ((0x0₃₂ ∘ 0x5₆₄[63:32])[7:0][7:0] ∘ sign-extend-64(%rcx_movzbw_r16_r8[7:0])[7:0][7:0]))[15:0]
  after renaming it is => %cf_setnae_r8 ? 0x1₁₆ : 0x0₁₆

Final state
%rbx/%bx: %rbx_setnae_r8[63:16] ∘ (%cf_setnae_r8 ? 0x1₁₆ : 0x0₁₆)

=====================================
=====================================
Computing circuit for setnae %bl

.target:
setc %r15b
movzbw %r15b, %bx
retq 

Initial state:
%rbx/%bl: %rbx

State for specgen instruction: setnae %bl:
%rbx/%bl: %rbx_setnae_r8[63:16] ∘ (%cf_setnae_r8 ? 0x1₁₆ : 0x0₁₆)

Register        -> %bl
  translates to => %bl
Value is               -> (%rbx_setnae_r8[63:16] ∘ (%cf_setnae_r8 ? 0x1₁₆ : 0x0₁₆))[7:0]
  after renaming it is => %cf ? 0x1₈ : 0x0₈

Final state
%rbx/%bl: %rbx[63:8] ∘ (%cf ? 0x1₈ : 0x0₈)

=====================================
Circuits:

%rbx   : %rbx[63:8] ∘ (%cf ? 0x1₈ : 0x0₈)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/