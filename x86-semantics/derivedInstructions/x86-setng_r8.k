// Autogenerated using stratification.
requires "x86-configuration.k"

module SETNG-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setng R1:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> ((#ifMInt (eqMInt(concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), getFlag("SF", RSMap)), concatenateMInt(mi(7, 0), getFlag("OF", RSMap))), concatenateMInt(mi(7, 0), getFlag("ZF", RSMap))), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), mi(8, 0)) ) #else ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), mi(8, 1)) ) #fi)  )


)

    </regstate>
endmodule

module SETNG-R8-SEMANTICS
  imports SETNG-R8
endmodule
/*
TargetInstr:
setng %bl
RWSet:
maybe read:{ %zf %sf %of }
must read:{ %zf %sf %of }
maybe write:{ %bl }
must write:{ %bl }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .read_sf_into_rbx  #  1     0    5      OPC=callq_label
circuit:setle %bh                #  2     0x5  3      OPC=setle_rh
circuit:xchgb %bl, %bh           #  3     0x8  2      OPC=xchgb_rh_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setng %bl

  maybe read:      { %zf %sf %of }
  must read:       { %zf %sf %of }
  maybe write:     { %bl }
  must write:      { %bl }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for callq .read_sf_into_rbx

Final state:
%rax/%rax: %rax_setng_r8
%rdx/%rdx: %rdx_setng_r8

%xmm0: %ymm0_setng_r8[127:0]
%xmm1: %ymm1_setng_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_zf_into_rbx

Final state:
%rax/%rax: %rax_setle_rh
%rdx/%rdx: %rdx_setle_rh

%xmm0: %ymm0_setle_rh[127:0]
%xmm1: %ymm1_setle_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rcx

Final state:
%rax/%rax: %rax_setnge_rh
%rdx/%rdx: %rdx_setnge_rh

%xmm0: %ymm0_setnge_rh[127:0]
%xmm1: %ymm1_setnge_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_sf_into_rbx

Final state:
%rax/%rax: %rax_setnge_rh
%rdx/%rdx: %rdx_setnge_rh

%xmm0: %ymm0_setnge_rh[127:0]
%xmm1: %ymm1_setnge_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r12

Final state:
%r12/%r12: sign-extend-64(%rbx_xorw_r16_r16[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_sf_into_rbx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rbx, %r12

Final state:
%r12/%r12: sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0])

%cf: false
%pf: !((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][0:0] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][1:1] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][2:2] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][3:3] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][4:4] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][5:5] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][6:6] = 0x1₁ ⊕ (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[7:0][7:7] = 0x1₁)
%zf: (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0])) = 0x0₆₄
%sf: (sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for movswq %r12w, %rbx

Final state:
%rbx/%rbx: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_xorw_r16_r16
%rdx/%rdx: %rdx_xorw_r16_r16

%xmm0: %ymm0_xorw_r16_r16[127:0]
%xmm1: %ymm1_xorw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xorw %bx, %cx

.target:
callq .move_016_008_cx_r8b_r9b
movswq %bx, %r12
callq .move_008_016_r8b_r9b_bx
callq .set_szp_for_bx
callq .read_sf_into_rbx
callq .move_008_016_r8b_r9b_bx
xorq %rbx, %r12
movswq %r12w, %rbx
callq .set_szp_for_bx
retq 

Initial state:
%rcx/%cx: 0x0₆₃ ∘ (%of_setnge_rh ? 0x1₁ : 0x0₁)

%cf: %cf_setnge_rh
%pf: %pf_setnge_rh
%zf: %zf_setnge_rh
%sf: %sf_setnge_rh
%of: %of_setnge_rh

State for specgen instruction: xorw %cx, %bx:
%rbx/%bx: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])

%cf: false
%pf: !(sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][7:0][7:7] = 0x1₁)
%zf: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0] = 0x0₁₆
%sf: sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0][15:15] = 0x1₁
%of: false

Register        -> %bx
  translates to => %cx
Value is               -> sign-extend-64((sign-extend-64(%rbx_xorw_r16_r16[15:0]) ⊕ (0x0₆₃ ∘ ((%rbx_xorw_r16_r16[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0][15:15] = 0x1₁ ? 0x1₁ : 0x0₁))[63:16] ∘ ((%r9_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xorw_r16_r16[63:8] ∘ %rcx_xorw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0])[15:0]
  after renaming it is => (%of_setnge_rh ? 0x1₁₆ : 0x0₁₆) ⊕ (%sf_setnge_rh ? 0x1₁₆ : 0x0₁₆)

Final state
%rcx/%cx: (0x0₆₃ ∘ (%of_setnge_rh ? 0x1₁ : 0x0₁))[63:16] ∘ ((%of_setnge_rh ? 0x1₁₆ : 0x0₁₆) ⊕ (%sf_setnge_rh ? 0x1₁₆ : 0x0₁₆))

%cf: false
%pf: !(((%of_setnge_rh ? 0x1₁ : 0x0₁) ⊕ (%sf_setnge_rh ? 0x1₁ : 0x0₁)) = 0x1₁ ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false)
%zf: ((%of_setnge_rh ? 0x1₁₆ : 0x0₁₆) ⊕ (%sf_setnge_rh ? 0x1₁₆ : 0x0₁₆)) = 0x0₁₆
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for movslq %ecx, %rdx

Final state:
%rdx/%rdx: sign-extend-64(((0x0₆₃ ∘ (%of_setnge_rh ? 0x1₁ : 0x0₁))[63:16] ∘ ((%of_setnge_rh ? 0x1₁₆ : 0x0₁₆) ⊕ (%sf_setnge_rh ? 0x1₁₆ : 0x0₁₆)))[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for movb %dl, %ah

Final state:
%rax/%ah: %rax_setnge_rh[63:16] ∘ sign-extend-64(((0x0₆₃ ∘ (%of_setnge_rh ? 0x1₁ : 0x0₁))[63:16] ∘ ((%of_setnge_rh ? 0x1₁₆ : 0x0₁₆) ⊕ (%sf_setnge_rh ? 0x1₁₆ : 0x0₁₆)))[31:0])[7:0] ∘ %rax_setnge_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setnge %bh

.target:
callq .read_of_into_rcx
callq .read_sf_into_rbx
xorw %bx, %cx
movslq %ecx, %rdx
movb %dl, %ah
retq 

Initial state:
%rbx/%bh: 0x0₆₃ ∘ (%zf_setle_rh ? 0x1₁ : 0x0₁)

State for specgen instruction: setnge %ah:
%rax/%ah: %rax_setnge_rh[63:16] ∘ sign-extend-64(((0x0₆₃ ∘ (%of_setnge_rh ? 0x1₁ : 0x0₁))[63:16] ∘ ((%of_setnge_rh ? 0x1₁₆ : 0x0₁₆) ⊕ (%sf_setnge_rh ? 0x1₁₆ : 0x0₁₆)))[31:0])[7:0] ∘ %rax_setnge_rh[7:0]

Register        -> %ah
  translates to => %bh
Value is               -> (%rax_setnge_rh[63:16] ∘ sign-extend-64(((0x0₆₃ ∘ (%of_setnge_rh ? 0x1₁ : 0x0₁))[63:16] ∘ ((%of_setnge_rh ? 0x1₁₆ : 0x0₁₆) ⊕ (%sf_setnge_rh ? 0x1₁₆ : 0x0₁₆)))[31:0])[7:0] ∘ %rax_setnge_rh[7:0])[15:8]
  after renaming it is => (%of_setle_rh ? 0x1₈ : 0x0₈) ⊕ (%sf_setle_rh ? 0x1₈ : 0x0₈)

Final state
%rbx/%bh: (0x0₆₃ ∘ (%zf_setle_rh ? 0x1₁ : 0x0₁))[63:16] ∘ ((%of_setle_rh ? 0x1₈ : 0x0₈) ⊕ (%sf_setle_rh ? 0x1₈ : 0x0₈)) ∘ (0x0₆₃ ∘ (%zf_setle_rh ? 0x1₁ : 0x0₁))[7:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_setle_rh
%rdx/%rdx: %rdx_setle_rh

%xmm0: %ymm0_setle_rh[127:0]
%xmm1: %ymm1_setle_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_cf

Final state:
%rax/%rax: %rax_setnz_rh
%rdx/%rdx: %rdx_setnz_rh

%xmm0: %ymm0_setnz_rh[127:0]
%xmm1: %ymm1_setnz_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rbx

Final state:
%rax/%rax: %rax_setnae_rh
%rdx/%rdx: %rdx_setnae_rh

%xmm0: %ymm0_setnae_rh[127:0]
%xmm1: %ymm1_setnae_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %bl, %ah

Final state:
%rax/%ah: %rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setnae %ah

.target:
callq .read_cf_into_rbx
movb %bl, %ah
retq 

Initial state:
%rax/%ah: %rax_setnz_rh

State for specgen instruction: setnae %ah:
%rax/%ah: %rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0]

Register        -> %ah
  translates to => %ah
Value is               -> (%rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0])[15:8]
  after renaming it is => 0x1₈

Final state
%rax/%ah: %rax_setnz_rh[63:16] ∘ 0x1₈ ∘ %rax_setnz_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for callq .read_cf_into_rcx

Final state:
%rax/%rax: %rax_setnz_rh[63:16] ∘ 0x1₈ ∘ %rax_setnz_rh[7:0]
%rdx/%rdx: %rdx_setnz_rh

%xmm0: %ymm0_setnz_rh[127:0]
%xmm1: %ymm1_setnz_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for cmoveq %rcx, %rax

Final state:
%rax/%rax: %zf_setnz_rh ? 0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁) : %rax_setnz_rh[63:16] ∘ 0x1₈ ∘ %rax_setnz_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setnz %ah

.target:
callq .set_cf
setnae %ah
callq .read_cf_into_rcx
cmoveq %rcx, %rax
retq 

Initial state:
%rax/%ah: %rax_setne_rh

State for specgen instruction: setnz %ah:
%rax/%ah: %zf_setnz_rh ? 0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁) : %rax_setnz_rh[63:16] ∘ 0x1₈ ∘ %rax_setnz_rh[7:0]

Register        -> %ah
  translates to => %ah
Value is               -> (%zf_setnz_rh ? 0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁) : %rax_setnz_rh[63:16] ∘ 0x1₈ ∘ %rax_setnz_rh[7:0])[15:8]
  after renaming it is => %zf_setne_rh ? 0x0₈ : 0x1₈

Final state
%rax/%ah: %rax_setne_rh[63:16] ∘ (%zf_setne_rh ? 0x0₈ : 0x1₈) ∘ %rax_setne_rh[7:0]

=====================================
=====================================
Computing circuit for setne %ah

.target:
setnz %ah
retq 

Initial state:
%rax/%ah: %rax_setle_rh

State for specgen instruction: setne %ah:
%rax/%ah: %rax_setne_rh[63:16] ∘ (%zf_setne_rh ? 0x0₈ : 0x1₈) ∘ %rax_setne_rh[7:0]

Register        -> %ah
  translates to => %ah
Value is               -> (%rax_setne_rh[63:16] ∘ (%zf_setne_rh ? 0x0₈ : 0x1₈) ∘ %rax_setne_rh[7:0])[15:8]
  after renaming it is => ((%of_setle_rh ? 0x1₈ : 0x0₈) ⊕ (%sf_setle_rh ? 0x1₈ : 0x0₈)) ∘ (%zf_setle_rh ? 0x1₈ : 0x0₈) = 0x0₁₆ ? 0x0₈ : 0x1₈

Final state
%rax/%ah: %rax_setle_rh[63:16] ∘ (((%of_setle_rh ? 0x1₈ : 0x0₈) ⊕ (%sf_setle_rh ? 0x1₈ : 0x0₈)) ∘ (%zf_setle_rh ? 0x1₈ : 0x0₈) = 0x0₁₆ ? 0x0₈ : 0x1₈) ∘ %rax_setle_rh[7:0]

=====================================
=====================================
Computing circuit for setle %bh

.target:
callq .read_zf_into_rbx
setnge %bh
callq .set_szp_for_bx
setne %ah
retq 

Initial state:
%rbx/%bh: 0x0₆₃ ∘ (%sf_setng_r8 ? 0x1₁ : 0x0₁)

State for specgen instruction: setle %ah:
%rax/%ah: %rax_setle_rh[63:16] ∘ (((%of_setle_rh ? 0x1₈ : 0x0₈) ⊕ (%sf_setle_rh ? 0x1₈ : 0x0₈)) ∘ (%zf_setle_rh ? 0x1₈ : 0x0₈) = 0x0₁₆ ? 0x0₈ : 0x1₈) ∘ %rax_setle_rh[7:0]

Register        -> %ah
  translates to => %bh
Value is               -> (%rax_setle_rh[63:16] ∘ (((%of_setle_rh ? 0x1₈ : 0x0₈) ⊕ (%sf_setle_rh ? 0x1₈ : 0x0₈)) ∘ (%zf_setle_rh ? 0x1₈ : 0x0₈) = 0x0₁₆ ? 0x0₈ : 0x1₈) ∘ %rax_setle_rh[7:0])[15:8]
  after renaming it is => ((%of_setng_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setng_r8 ? 0x1₈ : 0x0₈)) ∘ (%zf_setng_r8 ? 0x1₈ : 0x0₈) = 0x0₁₆ ? 0x0₈ : 0x1₈

Final state
%rbx/%bh: (0x0₆₃ ∘ (%sf_setng_r8 ? 0x1₁ : 0x0₁))[63:16] ∘ (((%of_setng_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setng_r8 ? 0x1₈ : 0x0₈)) ∘ (%zf_setng_r8 ? 0x1₈ : 0x0₈) = 0x0₁₆ ? 0x0₈ : 0x1₈) ∘ (0x0₆₃ ∘ (%sf_setng_r8 ? 0x1₁ : 0x0₁))[7:0]

=====================================
-------------------------------------
Getting base circuit for movb %bl, %ch

Final state:
%rcx/%ch: %rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %ch, %cl

Final state:
%rcx/%cl: (%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[63:8] ∘ (%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[15:8]

-------------------------------------
-------------------------------------
Getting base circuit for movq $0x40, %rbx

Final state:
%rbx/%rbx: 0x40₆₄

-------------------------------------
-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

-------------------------------------
=====================================
Computing circuit for movzbl %ah, %edx

.target:
movq $0x40, %rbx
movb %ah, %bl
retq 

Initial state:
%rdx/%rdx: %rdx_xchgb_r8_rh

State for specgen instruction: movzbl %ah, %ebx:
%rbx/%rbx: 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]

Register        -> %rbx
  translates to => %rdx
Value is               -> 0x40₆₄[63:8] ∘ %rax_movzbl_r32_rh[15:8]
  after renaming it is => 0x0₅₆ ∘ %rax_xchgb_r8_rh[15:8]

Final state
%rdx/%rdx: 0x0₅₆ ∘ %rax_xchgb_r8_rh[15:8]

=====================================
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddb_r8_r8
%rdx/%rdx: %rdx_xaddb_r8_r8

%xmm0: %ymm0_xaddb_r8_r8[127:0]
%xmm1: %ymm1_xaddb_r8_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %cl, %r13d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r13/%r13: %r13_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r13
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

Final state
%r13/%r13: 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %bl, %r15d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r15/%r15: %r15_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r15
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

Final state
%r15/%r15: 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for movsbq %r15b, %rcx

Final state:
%rcx/%rcx: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %cl, %r13b

Final state:
%r13/%r13b: (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for movslq %r13d, %rbx

Final state:
%rbx/%rbx: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

-------------------------------------
=====================================
Computing circuit for xaddb %bl, %dl

.target:
callq .clear_cf
movsbl %cl, %r13d
movsbl %bl, %r15d
movsbq %r15b, %rcx
adcb %cl, %r13b
movslq %r13d, %rbx
retq 

Initial state:
%rdx/%dl: 0x0₅₆ ∘ %rax_xchgb_r8_rh[15:8]
%rbx/%bl: %rbx_xchgb_r8_rh

%cf: %cf_xchgb_r8_rh
%pf: %pf_xchgb_r8_rh
%af: %af_xchgb_r8_rh
%zf: %zf_xchgb_r8_rh
%sf: %sf_xchgb_r8_rh
%of: %of_xchgb_r8_rh

State for specgen instruction: xaddb %cl, %bl:
%rcx/%cl: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])
%rbx/%bl: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

Final state
%rdx/%dl: (0x0₅₆ ∘ %rax_xchgb_r8_rh[15:8])[63:8] ∘ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[7:0]
%rbx/%bl: %rbx_xchgb_r8_rh[63:8] ∘ %rax_xchgb_r8_rh[15:8]

%cf: (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rax_xchgb_r8_rh[11:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[7:7] = 0x1₁
%of: (%rax_xchgb_r8_rh[15:15] = 0x1₁ ↔ %rbx_xchgb_r8_rh[7:7] = 0x1₁) ∧ !(%rax_xchgb_r8_rh[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_xchgb_r8_rh[15:8] + 0x0₁ ∘ %rbx_xchgb_r8_rh[7:0])[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movb %cl, %ah

Final state:
%rax/%ah: %rax_xchgb_r8_rh[63:16] ∘ ((%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[63:8] ∘ (%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[15:8])[7:0] ∘ %rax_xchgb_r8_rh[7:0]

-------------------------------------
=====================================
Computing circuit for xchgb %ah, %bl

.target:
movb %bl, %ch
movb %ch, %cl
movzbl %ah, %edx
xaddb %bl, %dl
movb %cl, %ah
retq 

Initial state:
%rax/%ah: %rax_xchgb_rh_r8
%rbx/%bl: %rbx_xchgb_rh_r8

State for specgen instruction: xchgb %ah, %bl:
%rax/%ah: %rax_xchgb_r8_rh[63:16] ∘ ((%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[63:8] ∘ (%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[15:8])[7:0] ∘ %rax_xchgb_r8_rh[7:0]
%rbx/%bl: %rbx_xchgb_r8_rh[63:8] ∘ %rax_xchgb_r8_rh[15:8]

Register        -> %ah
  translates to => %ah
Value is               -> (%rax_xchgb_r8_rh[63:16] ∘ ((%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[63:8] ∘ (%rcx_xchgb_r8_rh[63:16] ∘ %rbx_xchgb_r8_rh[7:0] ∘ %rcx_xchgb_r8_rh[7:0])[15:8])[7:0] ∘ %rax_xchgb_r8_rh[7:0])[15:8]
  after renaming it is => %rbx_xchgb_rh_r8[7:0]

Register        -> %bl
  translates to => %bl
Value is               -> (%rbx_xchgb_r8_rh[63:8] ∘ %rax_xchgb_r8_rh[15:8])[7:0]
  after renaming it is => %rax_xchgb_rh_r8[15:8]

Final state
%rax/%ah: %rax_xchgb_rh_r8[63:16] ∘ %rbx_xchgb_rh_r8[7:0] ∘ %rax_xchgb_rh_r8[7:0]
%rbx/%bl: %rbx_xchgb_rh_r8[63:8] ∘ %rax_xchgb_rh_r8[15:8]

=====================================
=====================================
Computing circuit for xchgb %bl, %bh

.target:
xchgb %ah, %bl
retq 

Initial state:
%rbx/%bx: (0x0₆₃ ∘ (%sf_setng_r8 ? 0x1₁ : 0x0₁))[63:16] ∘ (((%of_setng_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setng_r8 ? 0x1₈ : 0x0₈)) ∘ (%zf_setng_r8 ? 0x1₈ : 0x0₈) = 0x0₁₆ ? 0x0₈ : 0x1₈) ∘ (0x0₆₃ ∘ (%sf_setng_r8 ? 0x1₁ : 0x0₁))[7:0]

State for specgen instruction: xchgb %bl, %ah:
%rax/%ah: %rax_xchgb_rh_r8[63:16] ∘ %rbx_xchgb_rh_r8[7:0] ∘ %rax_xchgb_rh_r8[7:0]
%rbx/%bl: %rbx_xchgb_rh_r8[63:8] ∘ %rax_xchgb_rh_r8[15:8]

Register        -> %ah
  translates to => %bh
Value is               -> (%rax_xchgb_rh_r8[63:16] ∘ %rbx_xchgb_rh_r8[7:0] ∘ %rax_xchgb_rh_r8[7:0])[15:8]
  after renaming it is => %sf_setng_r8 ? 0x1₈ : 0x0₈

Register        -> %bl
  translates to => %bl
Value is               -> (%rbx_xchgb_rh_r8[63:8] ∘ %rax_xchgb_rh_r8[15:8])[7:0]
  after renaming it is => ((%of_setng_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setng_r8 ? 0x1₈ : 0x0₈)) ∘ (%zf_setng_r8 ? 0x1₈ : 0x0₈) = 0x0₁₆ ? 0x0₈ : 0x1₈

Final state
%rbx/%bx: (((0x0₆₃ ∘ (%sf_setng_r8 ? 0x1₁ : 0x0₁))[63:16] ∘ (((%of_setng_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setng_r8 ? 0x1₈ : 0x0₈)) ∘ (%zf_setng_r8 ? 0x1₈ : 0x0₈) = 0x0₁₆ ? 0x0₈ : 0x1₈) ∘ (0x0₆₃ ∘ (%sf_setng_r8 ? 0x1₁ : 0x0₁))[7:0])[63:16] ∘ (%sf_setng_r8 ? 0x1₈ : 0x0₈) ∘ ((0x0₆₃ ∘ (%sf_setng_r8 ? 0x1₁ : 0x0₁))[63:16] ∘ (((%of_setng_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setng_r8 ? 0x1₈ : 0x0₈)) ∘ (%zf_setng_r8 ? 0x1₈ : 0x0₈) = 0x0₁₆ ? 0x0₈ : 0x1₈) ∘ (0x0₆₃ ∘ (%sf_setng_r8 ? 0x1₁ : 0x0₁))[7:0])[7:0])[63:8] ∘ (((%of_setng_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setng_r8 ? 0x1₈ : 0x0₈)) ∘ (%zf_setng_r8 ? 0x1₈ : 0x0₈) = 0x0₁₆ ? 0x0₈ : 0x1₈)

=====================================
=====================================
Computing circuit for setng %bl

.target:
callq .read_sf_into_rbx
setle %bh
xchgb %bl, %bh
retq 

Initial state:
%rbx/%bl: %rbx

State for specgen instruction: setng %bl:
%rbx/%bl: (((0x0₆₃ ∘ (%sf_setng_r8 ? 0x1₁ : 0x0₁))[63:16] ∘ (((%of_setng_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setng_r8 ? 0x1₈ : 0x0₈)) ∘ (%zf_setng_r8 ? 0x1₈ : 0x0₈) = 0x0₁₆ ? 0x0₈ : 0x1₈) ∘ (0x0₆₃ ∘ (%sf_setng_r8 ? 0x1₁ : 0x0₁))[7:0])[63:16] ∘ (%sf_setng_r8 ? 0x1₈ : 0x0₈) ∘ ((0x0₆₃ ∘ (%sf_setng_r8 ? 0x1₁ : 0x0₁))[63:16] ∘ (((%of_setng_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setng_r8 ? 0x1₈ : 0x0₈)) ∘ (%zf_setng_r8 ? 0x1₈ : 0x0₈) = 0x0₁₆ ? 0x0₈ : 0x1₈) ∘ (0x0₆₃ ∘ (%sf_setng_r8 ? 0x1₁ : 0x0₁))[7:0])[7:0])[63:8] ∘ (((%of_setng_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setng_r8 ? 0x1₈ : 0x0₈)) ∘ (%zf_setng_r8 ? 0x1₈ : 0x0₈) = 0x0₁₆ ? 0x0₈ : 0x1₈)

Register        -> %bl
  translates to => %bl
Value is               -> ((((0x0₆₃ ∘ (%sf_setng_r8 ? 0x1₁ : 0x0₁))[63:16] ∘ (((%of_setng_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setng_r8 ? 0x1₈ : 0x0₈)) ∘ (%zf_setng_r8 ? 0x1₈ : 0x0₈) = 0x0₁₆ ? 0x0₈ : 0x1₈) ∘ (0x0₆₃ ∘ (%sf_setng_r8 ? 0x1₁ : 0x0₁))[7:0])[63:16] ∘ (%sf_setng_r8 ? 0x1₈ : 0x0₈) ∘ ((0x0₆₃ ∘ (%sf_setng_r8 ? 0x1₁ : 0x0₁))[63:16] ∘ (((%of_setng_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setng_r8 ? 0x1₈ : 0x0₈)) ∘ (%zf_setng_r8 ? 0x1₈ : 0x0₈) = 0x0₁₆ ? 0x0₈ : 0x1₈) ∘ (0x0₆₃ ∘ (%sf_setng_r8 ? 0x1₁ : 0x0₁))[7:0])[7:0])[63:8] ∘ (((%of_setng_r8 ? 0x1₈ : 0x0₈) ⊕ (%sf_setng_r8 ? 0x1₈ : 0x0₈)) ∘ (%zf_setng_r8 ? 0x1₈ : 0x0₈) = 0x0₁₆ ? 0x0₈ : 0x1₈))[7:0]
  after renaming it is => ((%of ? 0x1₈ : 0x0₈) ⊕ (%sf ? 0x1₈ : 0x0₈)) ∘ (%zf ? 0x1₈ : 0x0₈) = 0x0₁₆ ? 0x0₈ : 0x1₈

Final state
%rbx/%bl: %rbx[63:8] ∘ (((%of ? 0x1₈ : 0x0₈) ⊕ (%sf ? 0x1₈ : 0x0₈)) ∘ (%zf ? 0x1₈ : 0x0₈) = 0x0₁₆ ? 0x0₈ : 0x1₈)

=====================================
Circuits:

%rbx   : %rbx[63:8] ∘ (((%of ? 0x1₈ : 0x0₈) ⊕ (%sf ? 0x1₈ : 0x0₈)) ∘ (%zf ? 0x1₈ : 0x0₈) = 0x0₁₆ ? 0x0₈ : 0x1₈)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/