// Autogenerated using stratification.
requires "x86-configuration.k"

module SETNGE-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setnge R1:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), xorMInt(concatenateMInt(mi(7, 0), getFlag("OF", RSMap)), concatenateMInt(mi(7, 0), getFlag("SF", RSMap)))) )


)

    </regstate>
endmodule

module SETNGE-R8-SEMANTICS
  imports SETNGE-R8
endmodule
/*
TargetInstr:
setnge %bl
RWSet:
maybe read:{ %sf %of }
must read:{ %sf %of }
maybe write:{ %bl }
must write:{ %bl }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .read_of_into_rbx            #  1     0     5      OPC=callq_label
circuit:callq .move_032_016_ebx_r12w_r13w  #  2     0x5   5      OPC=callq_label
circuit:callq .move_032_016_ebx_r8w_r9w    #  3     0xa   5      OPC=callq_label
circuit:callq .read_sf_into_rcx            #  4     0xf   5      OPC=callq_label
circuit:rolb $0x1, %r13b                   #  5     0x14  3      OPC=rolb_r8_one
circuit:xorl %ecx, %ebx                    #  6     0x17  2      OPC=xorl_r32_r32
circuit:xaddw %r9w, %r13w                  #  7     0x19  5      OPC=xaddw_r16_r16
circuit:callq .move_r9b_to_byte_5_of_rbx   #  8     0x1e  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setnge %bl

  maybe read:      { %sf %of }
  must read:       { %sf %of }
  maybe write:     { %bl }
  must write:      { %bl }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_setnge_r8
%rdx/%rdx: %rdx_setnge_r8

%xmm0: %ymm0_setnge_r8[127:0]
%xmm1: %ymm1_setnge_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ebx_r12w_r13w

Final state:
%rax/%rax: %rax_setnge_r8
%rdx/%rdx: %rdx_setnge_r8

%xmm0: %ymm0_setnge_r8[127:0]
%xmm1: %ymm1_setnge_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ebx_r8w_r9w

Final state:
%rax/%rax: %rax_setnge_r8
%rdx/%rdx: %rdx_setnge_r8

%xmm0: %ymm0_setnge_r8[127:0]
%xmm1: %ymm1_setnge_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_sf_into_rcx

Final state:
%rax/%rax: %rax_setnge_r8
%rdx/%rdx: %rdx_setnge_r8

%xmm0: %ymm0_setnge_r8[127:0]
%xmm1: %ymm1_setnge_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_rolb_r8_one ⊕ %rax_rolb_r8_one

%cf: false
%pf: !((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][0:0] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][1:1] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][2:2] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][3:3] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][4:4] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][5:5] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][6:6] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][7:7] = 0x1₁)
%zf: (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one) = 0x0₆₄
%sf: (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_pf_into_rbx

Final state:
%rax/%rax: %rax_setnp_rh
%rdx/%rdx: %rdx_setnp_rh

%xmm0: %ymm0_setnp_rh[127:0]
%xmm1: %ymm1_setnp_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ebx_r8w_r9w

Final state:
%rax/%rax: %rax_setnp_rh
%rdx/%rdx: %rdx_setnp_rh

%xmm0: %ymm0_setnp_rh[127:0]
%xmm1: %ymm1_setnp_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_r8b_to_byte_2_of_rbx

Final state:
%rax/%rax: %rax_setnp_rh
%rdx/%rdx: %rdx_setnp_rh

%xmm0: %ymm0_setnp_rh[127:0]
%xmm1: %ymm1_setnp_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_setnp_rh
%rdx/%rdx: %rdx_setnp_rh

%xmm0: %ymm0_setnp_rh[127:0]
%xmm1: %ymm1_setnp_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_zf_into_rbx

Final state:
%rax/%rax: %rax_setnp_rh
%rdx/%rdx: %rdx_setnp_rh

%xmm0: %ymm0_setnp_rh[127:0]
%xmm1: %ymm1_setnp_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %bl, %ah

Final state:
%rax/%ah: %rax_setnp_rh[63:16] ∘ (0x0₆₃ ∘ (((0x0₆₃ ∘ (%pf_setnp_rh ? 0x1₁ : 0x0₁))[63:24] ∘ (%r8_setnp_rh[63:16] ∘ (0x0₆₃ ∘ (%pf_setnp_rh ? 0x1₁ : 0x0₁))[31:0][15:0])[7:0] ∘ (0x0₆₃ ∘ (%pf_setnp_rh ? 0x1₁ : 0x0₁))[15:0])[15:0] = 0x0₁₆ ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnp_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setnp %ah

.target:
callq .read_pf_into_rbx
callq .move_032_016_ebx_r8w_r9w
callq .move_r8b_to_byte_2_of_rbx
callq .set_szp_for_bx
callq .read_zf_into_rbx
movb %bl, %ah
retq 

Initial state:
%rax/%ah: %rax_rolb_r8_one ⊕ %rax_rolb_r8_one

State for specgen instruction: setnp %ah:
%rax/%ah: %rax_setnp_rh[63:16] ∘ (0x0₆₃ ∘ (((0x0₆₃ ∘ (%pf_setnp_rh ? 0x1₁ : 0x0₁))[63:24] ∘ (%r8_setnp_rh[63:16] ∘ (0x0₆₃ ∘ (%pf_setnp_rh ? 0x1₁ : 0x0₁))[31:0][15:0])[7:0] ∘ (0x0₆₃ ∘ (%pf_setnp_rh ? 0x1₁ : 0x0₁))[15:0])[15:0] = 0x0₁₆ ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnp_rh[7:0]

Register        -> %ah
  translates to => %ah
Value is               -> (%rax_setnp_rh[63:16] ∘ (0x0₆₃ ∘ (((0x0₆₃ ∘ (%pf_setnp_rh ? 0x1₁ : 0x0₁))[63:24] ∘ (%r8_setnp_rh[63:16] ∘ (0x0₆₃ ∘ (%pf_setnp_rh ? 0x1₁ : 0x0₁))[31:0][15:0])[7:0] ∘ (0x0₆₃ ∘ (%pf_setnp_rh ? 0x1₁ : 0x0₁))[15:0])[15:0] = 0x0₁₆ ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnp_rh[7:0])[15:8]
  after renaming it is => 0x0₈

Final state
%rax/%ah: (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_cf

Final state:
%rax/%rax: %rax_setnz_rh
%rdx/%rdx: %rdx_setnz_rh

%xmm0: %ymm0_setnz_rh[127:0]
%xmm1: %ymm1_setnz_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rbx

Final state:
%rax/%rax: %rax_setnae_rh
%rdx/%rdx: %rdx_setnae_rh

%xmm0: %ymm0_setnae_rh[127:0]
%xmm1: %ymm1_setnae_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %bl, %ah

Final state:
%rax/%ah: %rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setnae %ah

.target:
callq .read_cf_into_rbx
movb %bl, %ah
retq 

Initial state:
%rax/%ah: %rax_setnz_rh

State for specgen instruction: setnae %ah:
%rax/%ah: %rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0]

Register        -> %ah
  translates to => %ah
Value is               -> (%rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0])[15:8]
  after renaming it is => 0x1₈

Final state
%rax/%ah: %rax_setnz_rh[63:16] ∘ 0x1₈ ∘ %rax_setnz_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for callq .read_cf_into_rcx

Final state:
%rax/%rax: %rax_setnz_rh[63:16] ∘ 0x1₈ ∘ %rax_setnz_rh[7:0]
%rdx/%rdx: %rdx_setnz_rh

%xmm0: %ymm0_setnz_rh[127:0]
%xmm1: %ymm1_setnz_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for cmoveq %rcx, %rax

Final state:
%rax/%rax: %zf_setnz_rh ? 0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁) : %rax_setnz_rh[63:16] ∘ 0x1₈ ∘ %rax_setnz_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setnz %bh

.target:
callq .set_cf
setnae %ah
callq .read_cf_into_rcx
cmoveq %rcx, %rax
retq 

Initial state:
%rbx/%bh: %rbx_rolb_r8_one

State for specgen instruction: setnz %ah:
%rax/%ah: %zf_setnz_rh ? 0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁) : %rax_setnz_rh[63:16] ∘ 0x1₈ ∘ %rax_setnz_rh[7:0]

Register        -> %ah
  translates to => %bh
Value is               -> (%zf_setnz_rh ? 0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁) : %rax_setnz_rh[63:16] ∘ 0x1₈ ∘ %rax_setnz_rh[7:0])[15:8]
  after renaming it is => 0x0₈

Final state
%rbx/%bh: %rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_addw_r16_r16

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %bx

Final state:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_addw_r16_r16
%rdx/%rdx: %rdx_addw_r16_r16

%xmm0: %ymm0_addw_r16_r16[127:0]
%xmm1: %ymm1_addw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for addw %bx, %ax

.target:
clc 
adcw %cx, %bx
callq .set_szp_for_bx
retq 

Initial state:
%rax/%ax: (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0]

%cf: false
%pf: !((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][0:0] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][1:1] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][2:2] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][3:3] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][4:4] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][5:5] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][6:6] = 0x1₁ ⊕ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0][7:7] = 0x1₁)
%af: TMP_BOOL_0
%zf: (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one) = 0x0₆₄
%sf: (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:63] = 0x1₁
%of: false

State for specgen instruction: addw %cx, %bx:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %ax
Value is               -> (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0]
  after renaming it is => 0x0₈ ∘ %rbx_rolb_r8_one[7:0]

Final state
%rax/%ax: ((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0])

%cf: false
%pf: !(%rbx_rolb_r8_one[0:0] = 0x1₁ ⊕ %rbx_rolb_r8_one[1:1] = 0x1₁ ⊕ %rbx_rolb_r8_one[2:2] = 0x1₁ ⊕ %rbx_rolb_r8_one[3:3] = 0x1₁ ⊕ %rbx_rolb_r8_one[4:4] = 0x1₁ ⊕ %rbx_rolb_r8_one[5:5] = 0x1₁ ⊕ %rbx_rolb_r8_one[6:6] = 0x1₁ ⊕ %rbx_rolb_r8_one[7:7] = 0x1₁)
%af: false
%zf: 0x0₈ ∘ %rbx_rolb_r8_one[7:0] = 0x0₁₆
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[63:8] ∘ ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0][3:0] + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:0][7:7] = 0x1₁
%of: ((((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0][7:7] = 0x1₁ ↔ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0][7:7] = 0x1₁) ∧ !((((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for adcb %bl, %bl

Final state:
%rbx/%bl: (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[63:8] ∘ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0]

%cf: ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[8:8] = 0x1₁
%pf: !(((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0][3:0] + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0] = 0x0₈
%sf: ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0][7:7] = 0x1₁
%of: ((%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0][7:7] = 0x1₁ ↔ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0][7:7] = 0x1₁) ∧ !((%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0][7:7] = 0x1₁ ↔ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for rolb $0x1, %r13b

.target:
xorq %rax, %rax
setnp %ah
setnz %bh
addw %bx, %ax
adcb %al, %al
adcb %bl, %bl
retq 

Initial state:
%r13/%r13b: %r13_setnge_r8[63:16] ∘ (0x0₆₃ ∘ (%of_setnge_r8 ? 0x1₁ : 0x0₁))[31:0][31:16]

%cf: %cf_setnge_r8
%of: %of_setnge_r8

State for specgen instruction: rolb $0x1, %bl:
%rbx/%bl: (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[63:8] ∘ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0]

%cf: ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[8:8] = 0x1₁
%of: ((%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0][7:7] = 0x1₁ ↔ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0][7:7] = 0x1₁) ∧ !((%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0][7:7] = 0x1₁ ↔ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %r13b
Value is               -> ((%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[63:8] ∘ ((((false ? 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0] + 0x1₉ : 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0]) + 0x0₁ ∘ (((%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[63:16] ∘ 0x0₈ ∘ (%rax_rolb_r8_one ⊕ %rax_rolb_r8_one)[7:0])[63:16] ∘ (0x0₈ ∘ %rbx_rolb_r8_one[7:0]))[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0]) + 0x0₁ ∘ (%rbx_rolb_r8_one[63:16] ∘ 0x0₈ ∘ %rbx_rolb_r8_one[7:0])[7:0])[7:0])[7:0]
  after renaming it is => 0x0₈

Final state
%r13/%r13b: (%r13_setnge_r8[63:16] ∘ (0x0₆₃ ∘ (%of_setnge_r8 ? 0x1₁ : 0x0₁))[31:0][31:16])[63:8] ∘ 0x0₈

%cf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xorl_r32_r32
%rbx/%rbx: %rbx_xorl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_xorl_r32_r32
%rdx/%rdx: %rdx_xorl_r32_r32

%xmm0: %ymm0_xorl_r32_r32[127:0]
%xmm1: %ymm1_xorl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xorl %ecx, %ebx

.target:
xchgl %ebx, %ecx
xorq %rcx, %rbx
callq .set_szp_for_ebx
retq 

Initial state:
%rbx/%rbx: 0x0₆₃ ∘ (%of_setnge_r8 ? 0x1₁ : 0x0₁)

%cf: false
%pf: %pf_setnge_r8
%zf: %zf_setnge_r8
%sf: %sf_setnge_r8
%of: false

State for specgen instruction: xorl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
  after renaming it is => (%sf_setnge_r8 ? 0x1₆₄ : 0x0₆₄) ⊕ (%of_setnge_r8 ? 0x1₆₄ : 0x0₆₄)

Final state
%rbx/%rbx: (%sf_setnge_r8 ? 0x1₆₄ : 0x0₆₄) ⊕ (%of_setnge_r8 ? 0x1₆₄ : 0x0₆₄)

%cf: false
%pf: !(((%sf_setnge_r8 ? 0x1₁ : 0x0₁) ⊕ (%of_setnge_r8 ? 0x1₁ : 0x0₁)) = 0x1₁ ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false)
%zf: ((%sf_setnge_r8 ? 0x1₃₂ : 0x0₃₂) ⊕ (%of_setnge_r8 ? 0x1₃₂ : 0x0₃₂)) = 0x0₃₂
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .move_016_008_bx_r10b_r11b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r10b_r11b_cx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xchgw %cx, %bx

.target:
callq .move_016_008_bx_r10b_r11b
callq .move_016_008_cx_r8b_r9b
callq .move_008_016_r10b_r11b_cx
callq .move_008_016_r8b_r9b_bx
retq 

Initial state:
%rcx/%cx: %rcx_xaddw_r16_r16
%rbx/%bx: %rbx_xaddw_r16_r16

State for specgen instruction: xchgw %cx, %bx:
%rcx/%cx: %rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])
%rbx/%bx: %rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])

Register        -> %cx
  translates to => %cx
Value is               -> (%rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rbx_xaddw_r16_r16[15:0]

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rcx_xaddw_r16_r16[15:0]

Final state
%rcx/%cx: %rcx_xaddw_r16_r16[63:16] ∘ %rbx_xaddw_r16_r16[15:0]
%rbx/%bx: %rbx_xaddw_r16_r16[63:16] ∘ %rcx_xaddw_r16_r16[15:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_addw_r16_r16

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcw %cx, %bx

Final state:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bx

Final state:
%rax/%rax: %rax_addw_r16_r16
%rdx/%rdx: %rdx_addw_r16_r16

%xmm0: %ymm0_addw_r16_r16[127:0]
%xmm1: %ymm1_addw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for addw %cx, %bx

.target:
clc 
adcw %cx, %bx
callq .set_szp_for_bx
retq 

Initial state:
%rbx/%bx: %rbx_xaddw_r16_r16[63:16] ∘ %rcx_xaddw_r16_r16[15:0]

%cf: %cf_xaddw_r16_r16
%pf: %pf_xaddw_r16_r16
%af: %af_xaddw_r16_r16
%zf: %zf_xaddw_r16_r16
%sf: %sf_xaddw_r16_r16
%of: %of_xaddw_r16_r16

State for specgen instruction: addw %cx, %bx:
%rbx/%bx: %rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0]

%cf: ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rcx_addw_r16_r16[15:0][3:0] + 0x0₁ ∘ %rbx_addw_r16_r16[15:0][3:0])[4:4] = 0x1₁
%zf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0] = 0x0₁₆
%sf: (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0][15:15] = 0x1₁
%of: (%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ %rbx_addw_r16_r16[15:0][15:15] = 0x1₁) ∧ !(%rcx_addw_r16_r16[15:0][15:15] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:15] = 0x1₁)

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_addw_r16_r16[63:16] ∘ ((false ? 0x0₁ ∘ %rcx_addw_r16_r16[15:0] + 0x1₁₇ : 0x0₁ ∘ %rcx_addw_r16_r16[15:0]) + 0x0₁ ∘ %rbx_addw_r16_r16[15:0])[15:0])[15:0]
  after renaming it is => (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0]

Final state
%rbx/%bx: (%rbx_xaddw_r16_r16[63:16] ∘ %rcx_xaddw_r16_r16[15:0])[63:16] ∘ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0]

%cf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_xaddw_r16_r16[3:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:15] = 0x1₁
%of: (%rbx_xaddw_r16_r16[15:15] = 0x1₁ ↔ %rcx_xaddw_r16_r16[15:15] = 0x1₁) ∧ !(%rbx_xaddw_r16_r16[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:15] = 0x1₁)

=====================================
=====================================
Computing circuit for xaddw %r9w, %r13w

.target:
xchgw %cx, %bx
addw %cx, %bx
retq 

Initial state:
%r9/%r9w: %r9_setnge_r8[63:16] ∘ (0x0₆₃ ∘ (%of_setnge_r8 ? 0x1₁ : 0x0₁))[31:0][31:16]
%r13/%r13w: (%r13_setnge_r8[63:16] ∘ (0x0₆₃ ∘ (%of_setnge_r8 ? 0x1₁ : 0x0₁))[31:0][31:16])[63:8] ∘ 0x0₈

%cf: false
%pf: !(((%sf_setnge_r8 ? 0x1₁ : 0x0₁) ⊕ (%of_setnge_r8 ? 0x1₁ : 0x0₁)) = 0x1₁ ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false ⊕ false)
%af: %af_setnge_r8
%zf: ((%sf_setnge_r8 ? 0x1₃₂ : 0x0₃₂) ⊕ (%of_setnge_r8 ? 0x1₃₂ : 0x0₃₂)) = 0x0₃₂
%sf: false
%of: false

State for specgen instruction: xaddw %cx, %bx:
%rcx/%cx: %rcx_xaddw_r16_r16[63:16] ∘ %rbx_xaddw_r16_r16[15:0]
%rbx/%bx: (%rbx_xaddw_r16_r16[63:16] ∘ %rcx_xaddw_r16_r16[15:0])[63:16] ∘ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0]

%cf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[16:16] = 0x1₁
%pf: !((0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_xaddw_r16_r16[3:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:0] = 0x0₁₆
%sf: (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:15] = 0x1₁
%of: (%rbx_xaddw_r16_r16[15:15] = 0x1₁ ↔ %rcx_xaddw_r16_r16[15:15] = 0x1₁) ∧ !(%rbx_xaddw_r16_r16[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx_xaddw_r16_r16[15:0] + 0x0₁ ∘ %rcx_xaddw_r16_r16[15:0])[15:15] = 0x1₁)

Final state
%r9/%r9w: (%r9_setnge_r8[63:16] ∘ (0x0₆₃ ∘ (%of_setnge_r8 ? 0x1₁ : 0x0₁))[31:0][31:16])[63:16] ∘ 0x0₁₆
%r13/%r13w: ((%r13_setnge_r8[63:16] ∘ (0x0₆₃ ∘ (%of_setnge_r8 ? 0x1₁ : 0x0₁))[31:0][31:16])[63:8] ∘ 0x0₈)[63:16] ∘ 0x0₁₆

%cf: false
%pf: true
%af: false
%zf: true
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .move_r9b_to_byte_5_of_rbx

Final state:
%rax/%rax: %rax_setnge_r8
%rdx/%rdx: %rdx_setnge_r8

%xmm0: %ymm0_setnge_r8[127:0]
%xmm1: %ymm1_setnge_r8[127:0]

-------------------------------------
=====================================
Computing circuit for setnge %bl

.target:
callq .read_of_into_rbx
callq .move_032_016_ebx_r12w_r13w
callq .move_032_016_ebx_r8w_r9w
callq .read_sf_into_rcx
rolb $0x1, %r13b
xorl %ecx, %ebx
xaddw %r9w, %r13w
callq .move_r9b_to_byte_5_of_rbx
retq 

Initial state:
%rbx/%bl: %rbx

State for specgen instruction: setnge %bl:
%rbx/%bl: ((%sf_setnge_r8 ? 0x1₆₄ : 0x0₆₄) ⊕ (%of_setnge_r8 ? 0x1₆₄ : 0x0₆₄))[63:48] ∘ ((%r9_setnge_r8[63:16] ∘ (0x0₆₃ ∘ (%of_setnge_r8 ? 0x1₁ : 0x0₁))[31:0][31:16])[63:16] ∘ 0x0₁₆)[7:0] ∘ ((%sf_setnge_r8 ? 0x1₆₄ : 0x0₆₄) ⊕ (%of_setnge_r8 ? 0x1₆₄ : 0x0₆₄))[39:0]

Register        -> %bl
  translates to => %bl
Value is               -> (((%sf_setnge_r8 ? 0x1₆₄ : 0x0₆₄) ⊕ (%of_setnge_r8 ? 0x1₆₄ : 0x0₆₄))[63:48] ∘ ((%r9_setnge_r8[63:16] ∘ (0x0₆₃ ∘ (%of_setnge_r8 ? 0x1₁ : 0x0₁))[31:0][31:16])[63:16] ∘ 0x0₁₆)[7:0] ∘ ((%sf_setnge_r8 ? 0x1₆₄ : 0x0₆₄) ⊕ (%of_setnge_r8 ? 0x1₆₄ : 0x0₆₄))[39:0])[7:0]
  after renaming it is => (%sf ? 0x1₈ : 0x0₈) ⊕ (%of ? 0x1₈ : 0x0₈)

Final state
%rbx/%bl: %rbx[63:8] ∘ ((%sf ? 0x1₈ : 0x0₈) ⊕ (%of ? 0x1₈ : 0x0₈))

=====================================
Circuits:

%rbx   : %rbx[63:8] ∘ ((%sf ? 0x1₈ : 0x0₈) ⊕ (%of ? 0x1₈ : 0x0₈))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/