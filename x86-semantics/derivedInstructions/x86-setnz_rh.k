// Autogenerated using stratification.
requires "x86-configuration.k"

module SETNZ-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setnz R1:Rh,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> ((#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(mi(8, 1), extractMInt(getParentValue(R1, RSMap), 56, 64))) ) #else ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))) ) #fi)  )


)

    </regstate>
endmodule

module SETNZ-RH-SEMANTICS
  imports SETNZ-RH
endmodule
/*
TargetInstr:
setnz %ah
RWSet:
maybe read:{ %zf }
must read:{ %zf }
maybe write:{ %ah }
must write:{ %ah }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .set_cf            #  1     0     5      OPC=callq_label
circuit:setnae %ah               #  2     0x5   3      OPC=setnae_rh
circuit:callq .read_cf_into_rcx  #  3     0x8   5      OPC=callq_label
circuit:cmoveq %rcx, %rax        #  4     0xd   4      OPC=cmoveq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setnz %ah

  maybe read:      { %zf }
  must read:       { %zf }
  maybe write:     { %ah }
  must write:      { %ah }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for callq .set_cf

Final state:
%rax/%rax: %rax_setnz_rh
%rdx/%rdx: %rdx_setnz_rh

%xmm0: %ymm0_setnz_rh[127:0]
%xmm1: %ymm1_setnz_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_cf_into_rbx

Final state:
%rax/%rax: %rax_setnae_rh
%rdx/%rdx: %rdx_setnae_rh

%xmm0: %ymm0_setnae_rh[127:0]
%xmm1: %ymm1_setnae_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movb %bl, %ah

Final state:
%rax/%ah: %rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setnae %ah

.target:
callq .read_cf_into_rbx
movb %bl, %ah
retq 

Initial state:
%rax/%ah: %rax_setnz_rh

State for specgen instruction: setnae %ah:
%rax/%ah: %rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0]

Register        -> %ah
  translates to => %ah
Value is               -> (%rax_setnae_rh[63:16] ∘ (0x0₆₃ ∘ (%cf_setnae_rh ? 0x1₁ : 0x0₁))[7:0] ∘ %rax_setnae_rh[7:0])[15:8]
  after renaming it is => 0x1₈

Final state
%rax/%ah: %rax_setnz_rh[63:16] ∘ 0x1₈ ∘ %rax_setnz_rh[7:0]

=====================================
-------------------------------------
Getting base circuit for callq .read_cf_into_rcx

Final state:
%rax/%rax: %rax_setnz_rh[63:16] ∘ 0x1₈ ∘ %rax_setnz_rh[7:0]
%rdx/%rdx: %rdx_setnz_rh

%xmm0: %ymm0_setnz_rh[127:0]
%xmm1: %ymm1_setnz_rh[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for cmoveq %rcx, %rax

Final state:
%rax/%rax: %zf_setnz_rh ? 0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁) : %rax_setnz_rh[63:16] ∘ 0x1₈ ∘ %rax_setnz_rh[7:0]

-------------------------------------
=====================================
Computing circuit for setnz %ah

.target:
callq .set_cf
setnae %ah
callq .read_cf_into_rcx
cmoveq %rcx, %rax
retq 

Initial state:
%rax/%ah: %rax

State for specgen instruction: setnz %ah:
%rax/%ah: %zf_setnz_rh ? 0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁) : %rax_setnz_rh[63:16] ∘ 0x1₈ ∘ %rax_setnz_rh[7:0]

Register        -> %ah
  translates to => %ah
Value is               -> (%zf_setnz_rh ? 0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁) : %rax_setnz_rh[63:16] ∘ 0x1₈ ∘ %rax_setnz_rh[7:0])[15:8]
  after renaming it is => %zf ? 0x0₈ : 0x1₈

Final state
%rax/%ah: %rax[63:16] ∘ (%zf ? 0x0₈ : 0x1₈) ∘ %rax[7:0]

=====================================
Circuits:

%rax   : %rax[63:16] ∘ (%zf ? 0x0₈ : 0x1₈) ∘ %rax[7:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/