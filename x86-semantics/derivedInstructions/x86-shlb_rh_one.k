// Autogenerated using stratification.
requires "x86-configuration.k"

module SHLB-RH-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (shlb $0x1, R2:Rh,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> ((#ifMInt (ultMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56)), extractMInt(getParentValue(R2, RSMap), 48, 56)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "SF" |-> ((#ifMInt (eqMInt(mi(8, 1), lshrMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56)), 7)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(xorMInt(andMInt(mi(64, countOnes(addMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56)), 0)), mi(64, 1)), mi(64, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt (eqMInt(mi(8, 2), addMInt(xorMInt(lshrMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), 7), lshrMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56)), 7)), xorMInt(lshrMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), 7), lshrMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56)), 7)))) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), concatenateMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56)), extractMInt(getParentValue(R2, RSMap), 56, 64))) )

 "ZF" |-> ((#ifMInt (eqMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module SHLB-RH-ONE-SEMANTICS
  imports SHLB-RH-ONE
endmodule
/*
TargetInstr:
shlb $0x1, %ah
RWSet:
maybe read:{ %ah }
must read:{ %ah }
maybe write:{ %ah %cf %pf %zf %sf %of }
must write:{ %ah %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:movb %ah, %bl     #  1     0    2      OPC=movb_r8_rh
circuit:shlb $0x1, %bl    #  2     0x2  2      OPC=shlb_r8_one
circuit:movzbq %bl, %rcx  #  3     0x4  4      OPC=movzbq_r64_r8
circuit:movb %cl, %ah     #  4     0x8  2      OPC=movb_rh_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

shlb $0x1, %ah

  maybe read:      { %ah }
  must read:       { %ah }
  maybe write:     { %ah %cf %pf %zf %sf %of }
  must write:      { %ah %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

-------------------------------------
Getting base circuit for movb %ah, %bl

Final state:
%rbx/%bl: %rbx_shlb_rh_one[63:8] ∘ %rax_shlb_rh_one[15:8]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_shlb_r8_one ⊕ %rax_shlb_r8_one

%cf: false
%pf: !((%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][0:0] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][1:1] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][2:2] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][3:3] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][4:4] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][5:5] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][6:6] = 0x1₁ ⊕ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁)
%zf: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one) = 0x0₆₄
%sf: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: false

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][3:0] + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁ ↔ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁) ∧ !((%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for adcb %bl, %bl

Final state:
%rbx/%bl: %rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0]

%cf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[8:8] = 0x1₁
%pf: !(((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_shlb_r8_one[7:0][3:0] + 0x0₁ ∘ %rbx_shlb_r8_one[7:0][3:0])[4:4] = 0x1₁
%zf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0] = 0x0₈
%sf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0][7:7] = 0x1₁
%of: (%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ %rbx_shlb_r8_one[7:0][7:7] = 0x1₁) ∧ !(%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_bl

Final state:
%rax/%rax: (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[7:0]
%rdx/%rdx: %rdx_shlb_r8_one

%xmm0: %ymm0_shlb_r8_one[127:0]
%xmm1: %ymm1_shlb_r8_one[127:0]

-------------------------------------
=====================================
Computing circuit for shlb $0x1, %bl

.target:
xorq %rax, %rax
clc 
adcb %al, %al
adcb %bl, %bl
callq .set_szp_for_bl
retq 

Initial state:
%rbx/%bl: %rbx_shlb_rh_one[63:8] ∘ %rax_shlb_rh_one[15:8]

%cf: %cf_shlb_rh_one
%pf: %pf_shlb_rh_one
%zf: %zf_shlb_rh_one
%sf: %sf_shlb_rh_one
%of: %of_shlb_rh_one

State for specgen instruction: shlb $0x1, %bl:
%rbx/%bl: %rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0]

%cf: ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[8:8] = 0x1₁
%pf: !((%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%zf: (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0] = 0x0₈
%sf: (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0][7:7] = 0x1₁
%of: (%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ %rbx_shlb_r8_one[7:0][7:7] = 0x1₁) ∧ !(%rbx_shlb_r8_one[7:0][7:7] = 0x1₁ ↔ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:7] = 0x1₁)

Register        -> %bl
  translates to => %bl
Value is               -> (%rbx_shlb_r8_one[63:8] ∘ ((((false ? 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0]) + 0x0₁ ∘ (%rax_shlb_r8_one ⊕ %rax_shlb_r8_one)[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx_shlb_r8_one[7:0] + 0x1₉ : 0x0₁ ∘ %rbx_shlb_r8_one[7:0]) + 0x0₁ ∘ %rbx_shlb_r8_one[7:0])[7:0])[7:0]
  after renaming it is => (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:0]

Final state
%rbx/%bl: (%rbx_shlb_rh_one[63:8] ∘ %rax_shlb_rh_one[15:8])[63:8] ∘ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:0]

%cf: (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:7] = 0x1₁)
%zf: (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:7] = 0x1₁
%of: (%rax_shlb_rh_one[15:15] = 0x1₁ ↔ %rax_shlb_rh_one[15:15] = 0x1₁) ∧ !(%rax_shlb_rh_one[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for movq $0x0, %rbx

Final state:
%rbx/%rbx: 0x0₆₄

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_movzbq_r64_r8

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for movsbq %cl, %rdi

Final state:
%rdi/%rdi: sign-extend-64(%rcx_movzbq_r64_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %dil, %bl

Final state:
%rbx/%bl: 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][3:0] + 0x0₁ ∘ 0x0₆₄[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][7:7] = 0x1₁ ↔ 0x0₆₄[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for movzbq %bl, %rcx

.target:
movq $0x0, %rbx
clc 
movsbq %cl, %rdi
adcb %dil, %bl
retq 

Initial state:
%rcx/%rcx: %rcx_shlb_rh_one

State for specgen instruction: movzbq %cl, %rbx:
%rbx/%rbx: 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₆₄[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64(%rcx_movzbq_r64_r8[7:0])[7:0]) + 0x0₁ ∘ 0x0₆₄[7:0])[7:0]
  after renaming it is => 0x0₅₆ ∘ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:0]

Final state
%rcx/%rcx: 0x0₅₆ ∘ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:0]

=====================================
-------------------------------------
Getting base circuit for movb %cl, %ah

Final state:
%rax/%ah: %rax_shlb_rh_one[63:16] ∘ (0x0₅₆ ∘ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:0])[7:0] ∘ %rax_shlb_rh_one[7:0]

-------------------------------------
=====================================
Computing circuit for shlb $0x1, %ah

.target:
movb %ah, %bl
shlb $0x1, %bl
movzbq %bl, %rcx
movb %cl, %ah
retq 

Initial state:
%rax/%ah: %rax

%cf: %cf
%pf: %pf
%zf: %zf
%sf: %sf
%of: %of

State for specgen instruction: shlb $0x1, %ah:
%rax/%ah: %rax_shlb_rh_one[63:16] ∘ (0x0₅₆ ∘ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:0])[7:0] ∘ %rax_shlb_rh_one[7:0]

%cf: (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:7] = 0x1₁)
%zf: (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:7] = 0x1₁
%of: (%rax_shlb_rh_one[15:15] = 0x1₁ ↔ %rax_shlb_rh_one[15:15] = 0x1₁) ∧ !(%rax_shlb_rh_one[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:7] = 0x1₁)

Register        -> %ah
  translates to => %ah
Value is               -> (%rax_shlb_rh_one[63:16] ∘ (0x0₅₆ ∘ (0x0₁ ∘ %rax_shlb_rh_one[15:8] + 0x0₁ ∘ %rax_shlb_rh_one[15:8])[7:0])[7:0] ∘ %rax_shlb_rh_one[7:0])[15:8]
  after renaming it is => (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[7:0]

Final state
%rax/%ah: %rax[63:16] ∘ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[7:0] ∘ %rax[7:0]

%cf: (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[7:7] = 0x1₁)
%zf: (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[7:7] = 0x1₁
%of: (%rax[15:15] = 0x1₁ ↔ %rax[15:15] = 0x1₁) ∧ !(%rax[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[7:7] = 0x1₁)

=====================================
Circuits:

%rax   : %rax[63:16] ∘ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[7:0] ∘ %rax[7:0]

%cf    : (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[8:8] = 0x1₁
%pf    : !((0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[7:7] = 0x1₁)
%zf    : (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[7:0] = 0x0₈
%sf    : (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[7:7] = 0x1₁
%of    : (%rax[15:15] = 0x1₁ ↔ %rax[15:15] = 0x1₁) ∧ !(%rax[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax[15:8] + 0x0₁ ∘ %rax[15:8])[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/