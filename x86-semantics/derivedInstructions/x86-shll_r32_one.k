// Autogenerated using stratification.
requires "x86-configuration.k"

module SHLL-R32-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (shll $0x1, R2:R32,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> ((#ifMInt ( ( ultMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 32, 64), extractMInt(getParentValue(R2, RSMap), 32, 64)), extractMInt(getParentValue(R2, RSMap), 32, 64))  orBool  ultMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 32, 64), extractMInt(getParentValue(R2, RSMap), 32, 64)), extractMInt(getParentValue(R2, RSMap), 32, 64)) )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "SF" |-> ((#ifMInt (eqMInt(mi(32, 1), lshrMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 32, 64), extractMInt(getParentValue(R2, RSMap), 32, 64)), 31)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(xorMInt(andMInt(mi(64, countOnes(extractMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 32, 64), extractMInt(getParentValue(R2, RSMap), 32, 64)), 24, 32), 0)), mi(64, 1)), mi(64, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt (eqMInt(mi(32, 2), addMInt(xorMInt(lshrMInt(extractMInt(getParentValue(R2, RSMap), 32, 64), 31), lshrMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 32, 64), extractMInt(getParentValue(R2, RSMap), 32, 64)), 31)), xorMInt(lshrMInt(extractMInt(getParentValue(R2, RSMap), 32, 64), 31), lshrMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 32, 64), extractMInt(getParentValue(R2, RSMap), 32, 64)), 31)))) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(mi(32, 0), addMInt(extractMInt(getParentValue(R2, RSMap), 32, 64), extractMInt(getParentValue(R2, RSMap), 32, 64))) )

 "ZF" |-> ((#ifMInt (eqMInt(addMInt(extractMInt(getParentValue(R2, RSMap), 32, 64), extractMInt(getParentValue(R2, RSMap), 32, 64)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module SHLL-R32-ONE-SEMANTICS
  imports SHLL-R32-ONE
endmodule
/*
TargetInstr:
shll $0x1, %ebx
RWSet:
maybe read:{ %ebx }
must read:{ %ebx }
maybe write:{ %rbx %cf %pf %zf %sf %of }
must write:{ %rbx %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:xorq %rax, %rax         #  1     0    3      OPC=xorq_r64_r64
circuit:clc                     #  2     0x3  1      OPC=clc
circuit:adcb %al, %bl           #  3     0x4  2      OPC=adcb_r8_r8
circuit:rcll $0x1, %ebx         #  4     0x6  2      OPC=rcll_r32_one
circuit:callq .set_szp_for_ebx  #  5     0x8  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

shll $0x1, %ebx

  maybe read:      { %ebx }
  must read:       { %ebx }
  maybe write:     { %rbx %cf %pf %zf %sf %of }
  must write:      { %rbx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_shll_r32_one ⊕ %rax_shll_r32_one

%cf: false
%pf: !((%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][0:0] = 0x1₁ ⊕ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][1:1] = 0x1₁ ⊕ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][2:2] = 0x1₁ ⊕ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][3:3] = 0x1₁ ⊕ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][4:4] = 0x1₁ ⊕ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][5:5] = 0x1₁ ⊕ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][6:6] = 0x1₁ ⊕ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][7:7] = 0x1₁)
%zf: (%rax_shll_r32_one ⊕ %rax_shll_r32_one) = 0x0₆₄
%sf: (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: false

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcb %al, %bl

Final state:
%rbx/%bl: %rbx_shll_r32_one[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][3:0] + 0x0₁ ∘ %rbx_shll_r32_one[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][7:7] = 0x1₁ ↔ %rbx_shll_r32_one[7:0][7:7] = 0x1₁) ∧ !((%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_rcll_r32_one[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcl %ebx, %ebx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]

%cf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[32:32] = 0x1₁
%pf: !(((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][3:0] + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][3:0])[4:4] = 0x1₁
%zf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0] = 0x0₃₂
%sf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: (sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁) ∧ !(sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:31] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for rcll $0x1, %ebx

.target:
movslq %ebx, %rbx
adcl %ebx, %ebx
retq 

Initial state:
%rbx/%rbx: %rbx_shll_r32_one[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[8:8] = 0x1₁
%of: ((%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][7:7] = 0x1₁ ↔ %rbx_shll_r32_one[7:0][7:7] = 0x1₁) ∧ !((%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_shll_r32_one ⊕ %rax_shll_r32_one)[7:0]) + 0x0₁ ∘ %rbx_shll_r32_one[7:0])[7:7] = 0x1₁)

State for specgen instruction: rcll $0x1, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]

%cf: ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[32:32] = 0x1₁
%of: (sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁) ∧ !(sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0][31:31] = 0x1₁ ↔ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:31] = 0x1₁)

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ ((%cf_rcll_r32_one ? 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0] + 0x1₃₃ : 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0]) + 0x0₁ ∘ sign-extend-64(%rbx_rcll_r32_one[31:0])[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0]

%cf: (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[32:32] = 0x1₁
%of: (%rbx_shll_r32_one[31:31] = 0x1₁ ↔ %rbx_shll_r32_one[31:31] = 0x1₁) ∧ !(%rbx_shll_r32_one[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:31] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_shll_r32_one ⊕ %rax_shll_r32_one
%rdx/%rdx: %rdx_shll_r32_one

%xmm0: %ymm0_shll_r32_one[127:0]
%xmm1: %ymm1_shll_r32_one[127:0]

-------------------------------------
=====================================
Computing circuit for shll $0x1, %ebx

.target:
xorq %rax, %rax
clc 
adcb %al, %bl
rcll $0x1, %ebx
callq .set_szp_for_ebx
retq 

Initial state:
%rbx/%rbx: %rbx

%cf: %cf
%pf: %pf
%zf: %zf
%sf: %sf
%of: %of

State for specgen instruction: shll $0x1, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0]

%cf: (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[32:32] = 0x1₁
%pf: !((0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0])[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0])[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0])[31:0][31:31] = 0x1₁
%of: (%rbx_shll_r32_one[31:31] = 0x1₁ ↔ %rbx_shll_r32_one[31:31] = 0x1₁) ∧ !(%rbx_shll_r32_one[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:31] = 0x1₁)

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ (0x0₁ ∘ %rbx_shll_r32_one[31:0] + 0x0₁ ∘ %rbx_shll_r32_one[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[31:0]

Final state
%rbx/%rbx: 0x0₃₂ ∘ (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[31:0]

%cf: (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[32:32] = 0x1₁
%pf: !((0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[7:7] = 0x1₁)
%zf: (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[31:0] = 0x0₃₂
%sf: (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[31:31] = 0x1₁
%of: (%rbx[31:31] = 0x1₁ ↔ %rbx[31:31] = 0x1₁) ∧ !(%rbx[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[31:31] = 0x1₁)

=====================================
Circuits:

%rbx   : 0x0₃₂ ∘ (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[31:0]

%cf    : (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[32:32] = 0x1₁
%pf    : !((0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[7:7] = 0x1₁)
%zf    : (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[31:0] = 0x0₃₂
%sf    : (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[31:31] = 0x1₁
%of    : (%rbx[31:31] = 0x1₁ ↔ %rbx[31:31] = 0x1₁) ∧ !(%rbx[31:31] = 0x1₁ ↔ (0x0₁ ∘ %rbx[31:0] + 0x0₁ ∘ %rbx[31:0])[31:31] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/