// Autogenerated using stratification.
requires "x86-configuration.k"

module SHLQ-R64-CL
  imports X86-CONFIGURATION

  rule <k>
    execinstr (shlq %cl, R2:R64,  .Typedoperands) => .
  ...</k>
    <regstate> ...
 "CF" |-> ( MI448 => (#ifMInt (eqMInt(andMInt(extractMInt(MI446, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( MI448 ) #else ( (#ifMInt (eqMInt(andMInt(extractMInt(MI446, 56, 64), mi(8, 63)), mi(8, 1)) ) #then ( (#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(andMInt(MI450, mi(64, -9223372036854775808)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI446, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( (#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(andMInt(shlMInt(MI450,  ( uvalueMInt(andMInt(extractMInt(MI446, 56, 64), mi(8, 63)))  -Int  1 ) ), mi(64, -9223372036854775808)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( undef ) #fi)  ) #fi)  ) #fi)  )

 "SF" |-> ( MI451 => (#ifMInt (eqMInt(mi(64, 1), lshrMInt((#ifMInt (eqMInt(andMInt(extractMInt(MI446, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(MI451, mi(1, 1)) ) #then ( mi(64, -9223372036854775808) ) #else ( mi(64, 0) ) #fi) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI446, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( shlMInt(MI450, uvalueMInt(andMInt(extractMInt(MI446, 56, 64), mi(8, 63)))) ) #else ( mi(64, 0) ) #fi)  ) #fi) , 63)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "AF" |-> ( MI447 => (#ifMInt (eqMInt(andMInt(extractMInt(MI446, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( MI447 ) #else ( undef ) #fi)  )

 "RCX" |-> (MI446 => MI446)

 "PF" |-> ( MI453 => (#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(xorMInt(andMInt(mi(64, countOnes(extractMInt((#ifMInt (eqMInt(andMInt(extractMInt(MI446, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(MI453, mi(1, 1)) ) #then ( mi(64, 0) ) #else ( mi(64, 1) ) #fi) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI446, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( shlMInt(MI450, uvalueMInt(andMInt(extractMInt(MI446, 56, 64), mi(8, 63)))) ) #else ( mi(64, 0) ) #fi)  ) #fi) , 56, 64), 0)), mi(64, 1)), mi(64, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ( MI452 => (#ifMInt (eqMInt(andMInt(extractMInt(MI446, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( MI452 ) #else ( (#ifMInt (eqMInt(andMInt(extractMInt(MI446, 56, 64), mi(8, 63)), mi(8, 1)) ) #then ( xorMInt((#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(andMInt(MI450, mi(64, -9223372036854775808)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) , (#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(andMInt(shlMInt(MI450, 1), mi(64, -9223372036854775808)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) ) #else ( undef ) #fi)  ) #fi)  )

convToRegKeys(R2) |-> ( MI450 => (#ifMInt (ultMInt(andMInt(extractMInt(MI446, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( shlMInt(MI450, uvalueMInt(andMInt(extractMInt(MI446, 56, 64), mi(8, 63)))) ) #else ( mi(64, 0) ) #fi)  )

 "ZF" |-> ( MI449 => (#ifMInt (eqMInt((#ifMInt (eqMInt(andMInt(extractMInt(MI446, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(MI449, mi(1, 1)) ) #then ( mi(64, 0) ) #else ( mi(64, 1) ) #fi) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI446, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( shlMInt(MI450, uvalueMInt(andMInt(extractMInt(MI446, 56, 64), mi(8, 63)))) ) #else ( mi(64, 0) ) #fi)  ) #fi) , mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


    ...</regstate>
endmodule

module SHLQ-R64-CL-SEMANTICS
  imports SHLQ-R64-CL
endmodule
