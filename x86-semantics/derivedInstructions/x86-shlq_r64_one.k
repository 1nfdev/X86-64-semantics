// Autogenerated using stratification.
requires "x86-configuration.k"

module SHLQ-R64-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (shlq $0x1, R2:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> ((#ifMInt ( ( ultMInt(addMInt(getParentValue(R2, RSMap), getParentValue(R2, RSMap)), getParentValue(R2, RSMap))  orBool  ultMInt(addMInt(getParentValue(R2, RSMap), getParentValue(R2, RSMap)), getParentValue(R2, RSMap)) )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "SF" |-> ((#ifMInt (eqMInt(mi(64, 1), lshrMInt(addMInt(getParentValue(R2, RSMap), getParentValue(R2, RSMap)), 63)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(xorMInt(andMInt(mi(64, countOnes(extractMInt(addMInt(getParentValue(R2, RSMap), getParentValue(R2, RSMap)), 56, 64), 0)), mi(64, 1)), mi(64, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt (eqMInt(mi(64, 2), addMInt(xorMInt(lshrMInt(getParentValue(R2, RSMap), 63), lshrMInt(addMInt(getParentValue(R2, RSMap), getParentValue(R2, RSMap)), 63)), xorMInt(lshrMInt(getParentValue(R2, RSMap), 63), lshrMInt(addMInt(getParentValue(R2, RSMap), getParentValue(R2, RSMap)), 63)))) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (addMInt(getParentValue(R2, RSMap), getParentValue(R2, RSMap)) )

 "ZF" |-> ((#ifMInt (eqMInt(addMInt(getParentValue(R2, RSMap), getParentValue(R2, RSMap)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module SHLQ-R64-ONE-SEMANTICS
  imports SHLQ-R64-ONE
endmodule
/*
TargetInstr:
shlq $0x1, %rbx
RWSet:
maybe read:{ %rbx }
must read:{ %rbx }
maybe write:{ %rbx %cf %pf %zf %sf %of }
must write:{ %rbx %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:clc              #  1     0    1      OPC=clc
circuit:adcq %rbx, %rbx  #  2     0x1  3      OPC=adcq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

shlq $0x1, %rbx

  maybe read:      { %rbx }
  must read:       { %rbx }
  maybe write:     { %rbx %cf %pf %zf %sf %of }
  must write:      { %rbx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

-------------------------------------
Getting base circuit for xorq %rax, %rax

Final state:
%rax/%rax: %rax_clc ⊕ %rax_clc

%cf: false
%pf: !((%rax_clc ⊕ %rax_clc)[7:0][0:0] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][1:1] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][2:2] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][3:3] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][4:4] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][5:5] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][6:6] = 0x1₁ ⊕ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁)
%zf: (%rax_clc ⊕ %rax_clc) = 0x0₆₄
%sf: (%rax_clc ⊕ %rax_clc)[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for adcb %al, %al

Final state:
%rax/%al: (%rax_clc ⊕ %rax_clc)[63:8] ∘ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0] + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:0][7:7] = 0x1₁
%of: ((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ (%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁) ∧ !((%rax_clc ⊕ %rax_clc)[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[7:7] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for clc 

.target:
xorq %rax, %rax
adcb %al, %al
retq 

Initial state:
%cf: %cf_shlq_r64_one

State for specgen instruction: clc :
%cf: ((false ? 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0] + 0x1₉ : 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0]) + 0x0₁ ∘ (%rax_clc ⊕ %rax_clc)[7:0])[8:8] = 0x1₁

Final state
%cf: false

=====================================
-------------------------------------
Getting base circuit for adcq %rbx, %rbx

Final state:
%rbx/%rbx: ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0]

%cf: ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[64:64] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ %rbx_shlq_r64_one[3:0] + 0x0₁ ∘ %rbx_shlq_r64_one[3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0] = 0x0₆₄
%sf: ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0][63:63] = 0x1₁
%of: (%rbx_shlq_r64_one[63:63] = 0x1₁ ↔ %rbx_shlq_r64_one[63:63] = 0x1₁) ∧ !(%rbx_shlq_r64_one[63:63] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:63] = 0x1₁)

-------------------------------------
=====================================
Computing circuit for shlq $0x1, %rbx

.target:
clc 
adcq %rbx, %rbx
retq 

Initial state:
%rbx/%rbx: %rbx

%cf: %cf
%pf: %pf
%zf: %zf
%sf: %sf
%of: %of

State for specgen instruction: shlq $0x1, %rbx:
%rbx/%rbx: ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0]

%cf: ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[64:64] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0][7:0][7:7] = 0x1₁)
%zf: ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0] = 0x0₆₄
%sf: ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0][63:63] = 0x1₁
%of: (%rbx_shlq_r64_one[63:63] = 0x1₁ ↔ %rbx_shlq_r64_one[63:63] = 0x1₁) ∧ !(%rbx_shlq_r64_one[63:63] = 0x1₁ ↔ ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:63] = 0x1₁)

Register        -> %rbx
  translates to => %rbx
Value is               -> ((false ? 0x0₁ ∘ %rbx_shlq_r64_one + 0x1₆₅ : 0x0₁ ∘ %rbx_shlq_r64_one) + 0x0₁ ∘ %rbx_shlq_r64_one)[63:0]
  after renaming it is => (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[63:0]

Final state
%rbx/%rbx: (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[63:0]

%cf: (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[64:64] = 0x1₁
%pf: !((0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[7:7] = 0x1₁)
%zf: (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[63:0] = 0x0₆₄
%sf: (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[63:63] = 0x1₁
%of: (%rbx[63:63] = 0x1₁ ↔ %rbx[63:63] = 0x1₁) ∧ !(%rbx[63:63] = 0x1₁ ↔ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[63:63] = 0x1₁)

=====================================
Circuits:

%rbx   : (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[63:0]

%cf    : (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[64:64] = 0x1₁
%pf    : !((0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[7:7] = 0x1₁)
%zf    : (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[63:0] = 0x0₆₄
%sf    : (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[63:63] = 0x1₁
%of    : (%rbx[63:63] = 0x1₁ ↔ %rbx[63:63] = 0x1₁) ∧ !(%rbx[63:63] = 0x1₁ ↔ (0x0₁ ∘ %rbx + 0x0₁ ∘ %rbx)[63:63] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/