// Autogenerated using stratification.
requires "x86-configuration.k"

module SHRXQ-R64-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (shrxq R1:R64, R2:R64, R3:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> ((#ifMInt (ultMInt(andMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( lshrMInt(getParentValue(R2, RSMap), uvalueMInt(andMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), mi(8, 63)))) ) #else ( mi(64, 0) ) #fi)  )


)

    </regstate>
endmodule

module SHRXQ-R64-R64-R64-SEMANTICS
  imports SHRXQ-R64-R64-R64
endmodule
/*
TargetInstr:
shrxq %rdx, %rcx, %rbx
RWSet:
maybe read:{ %rcx %rdx }
must read:{ %rcx %rdx }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ bmi2 }

Circuit:
circuit:movq %rcx, %rbx  #  1     0    3      OPC=movq_r64_r64
circuit:xaddb %cl, %dl   #  2     0x3  3      OPC=xaddb_r8_r8
circuit:xchgw %bx, %bx   #  3     0x6  3      OPC=xchgw_r16_r16
circuit:shrq %cl, %rbx   #  4     0x9  3      OPC=shrq_r64_cl
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

shrxq %rdx, %rcx, %rbx

  maybe read:      { %rcx %rdx }
  must read:       { %rcx %rdx }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { bmi2 }

-------------------------------------
Getting base circuit for movq %rcx, %rbx

Final state:
%rbx/%rbx: %rcx_shrxq_r64_r64_r64

-------------------------------------
-------------------------------------
Getting base circuit for callq .clear_cf

Final state:
%rax/%rax: %rax_xaddb_r8_r8
%rdx/%rdx: %rdx_xaddb_r8_r8

%xmm0: %ymm0_xaddb_r8_r8[127:0]
%xmm1: %ymm1_xaddb_r8_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %cl, %r13d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r13/%r13: %r13_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r13
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

Final state
%r13/%r13: 0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for callq .set_of

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .read_of_into_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movsbq %cl, %r10

Final state:
%r10/%r10: sign-extend-64(%rcx_movsbl_r32_r8[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_movsbl_r32_r8
%rdx/%rdx: %rdx_movsbl_r32_r8

%xmm0: %ymm0_movsbl_r32_r8[127:0]
%xmm1: %ymm1_movsbl_r32_r8[127:0]

-------------------------------------
=====================================
Computing circuit for movsbl %bl, %r15d

.target:
callq .set_of
callq .read_of_into_rbx
callq .move_064_032_rbx_r10d_r11d
movsbq %cl, %r10
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r15/%r15: %r15_xaddb_r8_r8

State for specgen instruction: movsbl %cl, %ebx:
%rbx/%rbx: (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r15
Value is               -> (0x0₃₂ ∘ (0x0₆₃ ∘ (true ? 0x1₁ : 0x0₁))[63:32])[31:0][31:0] ∘ sign-extend-64(%rcx_movsbl_r32_r8[7:0])[31:0][31:0]
  after renaming it is => 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

Final state
%r15/%r15: 0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0]

=====================================
-------------------------------------
Getting base circuit for movsbq %r15b, %rcx

Final state:
%rcx/%rcx: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])

-------------------------------------
-------------------------------------
Getting base circuit for adcb %cl, %r13b

Final state:
%r13/%r13b: (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

-------------------------------------
-------------------------------------
Getting base circuit for movslq %r13d, %rbx

Final state:
%rbx/%rbx: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

-------------------------------------
=====================================
Computing circuit for xaddb %cl, %dl

.target:
callq .clear_cf
movsbl %cl, %r13d
movsbl %bl, %r15d
movsbq %r15b, %rcx
adcb %cl, %r13b
movslq %r13d, %rbx
retq 

Initial state:
%rcx/%cl: %rcx_shrxq_r64_r64_r64
%rdx/%dl: %rdx_shrxq_r64_r64_r64

%cf: %cf_shrxq_r64_r64_r64
%pf: %pf_shrxq_r64_r64_r64
%af: %af_shrxq_r64_r64_r64
%zf: %zf_shrxq_r64_r64_r64
%sf: %sf_shrxq_r64_r64_r64
%of: %of_shrxq_r64_r64_r64

State for specgen instruction: xaddb %cl, %bl:
%rcx/%cl: sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])
%rbx/%bl: sign-extend-64(((0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[63:8] ∘ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0])[31:0])

%cf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[8:8] = 0x1₁
%pf: !(((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][0:0] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][1:1] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][2:2] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][3:3] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][4:4] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][5:5] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][6:6] = 0x1₁ ⊕ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:0][7:7] = 0x1₁)
%af: (0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][3:0] + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][3:0])[4:4] = 0x1₁
%zf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] = 0x0₈
%sf: ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁
%of: (sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0][7:7] = 0x1₁) ∧ !(sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0][7:7] = 0x1₁ ↔ ((false ? 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0] + 0x1₉ : 0x0₁ ∘ sign-extend-64((0x0₃₂ ∘ sign-extend-64(%rbx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:0]) + 0x0₁ ∘ (0x0₃₂ ∘ sign-extend-64(%rcx_xaddb_r8_r8[7:0])[31:0])[7:0])[7:7] = 0x1₁)

Final state
%rcx/%cl: %rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0]
%rdx/%dl: %rdx_shrxq_r64_r64_r64[63:8] ∘ (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[7:0]

%cf: (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[8:8] = 0x1₁
%pf: !((0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[7:7] = 0x1₁)
%af: (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[3:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[3:0])[4:4] = 0x1₁
%zf: (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[7:0] = 0x0₈
%sf: (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[7:7] = 0x1₁
%of: (%rdx_shrxq_r64_r64_r64[7:7] = 0x1₁ ↔ %rcx_shrxq_r64_r64_r64[7:7] = 0x1₁) ∧ !(%rdx_shrxq_r64_r64_r64[7:7] = 0x1₁ ↔ (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[7:7] = 0x1₁)

=====================================
-------------------------------------
Getting base circuit for callq .move_016_008_bx_r10b_r11b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_008_cx_r8b_r9b

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r10b_r11b_cx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_008_016_r8b_r9b_bx

Final state:
%rax/%rax: %rax_xchgw_r16_r16
%rdx/%rdx: %rdx_xchgw_r16_r16

%xmm0: %ymm0_xchgw_r16_r16[127:0]
%xmm1: %ymm1_xchgw_r16_r16[127:0]

-------------------------------------
=====================================
Computing circuit for xchgw %bx, %bx

.target:
callq .move_016_008_bx_r10b_r11b
callq .move_016_008_cx_r8b_r9b
callq .move_008_016_r10b_r11b_cx
callq .move_008_016_r8b_r9b_bx
retq 

Initial state:
%rbx/%bx: %rcx_shrxq_r64_r64_r64

State for specgen instruction: xchgw %cx, %bx:
%rcx/%cx: %rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])
%rbx/%bx: %rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0])

Register        -> %cx
  translates to => %bx
Value is               -> (%rcx_xchgw_r16_r16[63:16] ∘ ((%r11_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r10_xchgw_r16_r16[63:8] ∘ %rbx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rcx_shrxq_r64_r64_r64[15:0]

Register        -> %bx
  translates to => %bx
Value is               -> (%rbx_xchgw_r16_r16[63:16] ∘ ((%r9_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][15:8])[7:0][7:0] ∘ (%r8_xchgw_r16_r16[63:8] ∘ %rcx_xchgw_r16_r16[15:0][7:0])[7:0][7:0]))[15:0]
  after renaming it is => %rcx_shrxq_r64_r64_r64[15:0]

Final state
%rbx/%bx: (%rcx_shrxq_r64_r64_r64[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0])[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0]

=====================================
-------------------------------------
Getting base circuit for shrq %cl, %rbx

Final state:
%rbx/%rbx: ((%rcx_shrxq_r64_r64_r64[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0])[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0] ∘ 0x0₁ >> 0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[64:1]

%cf: (0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[7:0] ≥ 0x40₈ ∧ TMP_BOOL_0 ∨ !((0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[7:0] ≥ 0x40₈) ∧ (!((0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ ((%rcx_shrxq_r64_r64_r64[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0])[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0] ∘ 0x0₁ >> 0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[0:0] = 0x1₁ ∨ !(!((0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[8:8] = 0x1₁)
%pf: !((0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ !(((%rcx_shrxq_r64_r64_r64[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0])[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0] ∘ 0x0₁ >> 0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[64:1][7:0][0:0] = 0x1₁ ⊕ ((%rcx_shrxq_r64_r64_r64[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0])[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0] ∘ 0x0₁ >> 0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[64:1][7:0][1:1] = 0x1₁ ⊕ ((%rcx_shrxq_r64_r64_r64[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0])[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0] ∘ 0x0₁ >> 0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[64:1][7:0][2:2] = 0x1₁ ⊕ ((%rcx_shrxq_r64_r64_r64[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0])[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0] ∘ 0x0₁ >> 0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[64:1][7:0][3:3] = 0x1₁ ⊕ ((%rcx_shrxq_r64_r64_r64[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0])[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0] ∘ 0x0₁ >> 0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[64:1][7:0][4:4] = 0x1₁ ⊕ ((%rcx_shrxq_r64_r64_r64[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0])[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0] ∘ 0x0₁ >> 0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[64:1][7:0][5:5] = 0x1₁ ⊕ ((%rcx_shrxq_r64_r64_r64[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0])[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0] ∘ 0x0₁ >> 0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[64:1][7:0][6:6] = 0x1₁ ⊕ ((%rcx_shrxq_r64_r64_r64[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0])[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0] ∘ 0x0₁ >> 0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[64:1][7:0][7:7] = 0x1₁) ∨ !(!((0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ !((0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[7:7] = 0x1₁)
%zf: !((0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ ((%rcx_shrxq_r64_r64_r64[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0])[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0] ∘ 0x0₁ >> 0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[64:1] = 0x0₆₄ ∨ !(!((0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[7:0] = 0x0₈
%sf: !((0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈) ∧ ((%rcx_shrxq_r64_r64_r64[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0])[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0] ∘ 0x0₁ >> 0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[64:1][63:63] = 0x1₁ ∨ !(!((0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[7:0] = 0x0₈)) ∧ (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[7:7] = 0x1₁
%of: (0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[7:0] = 0x1₈ ∧ ((%rcx_shrxq_r64_r64_r64[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0])[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0] ∘ 0x0₁)[64:64] = 0x1₁ ∨ !((0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[7:0] = 0x1₈) ∧ ((%rdx_shrxq_r64_r64_r64[7:7] = 0x1₁ ↔ %rcx_shrxq_r64_r64_r64[7:7] = 0x1₁) ∧ !(%rdx_shrxq_r64_r64_r64[7:7] = 0x1₁ ↔ (0x0₁ ∘ %rdx_shrxq_r64_r64_r64[7:0] + 0x0₁ ∘ %rcx_shrxq_r64_r64_r64[7:0])[7:7] = 0x1₁))

-------------------------------------
=====================================
Computing circuit for shrxq %rdx, %rcx, %rbx

.target:
movq %rcx, %rbx
xaddb %cl, %dl
xchgw %bx, %bx
shrq %cl, %rbx
retq 

Initial state:
%rbx/%rbx: %rbx

State for specgen instruction: shrxq %rdx, %rcx, %rbx:
%rbx/%rbx: ((%rcx_shrxq_r64_r64_r64[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0])[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0] ∘ 0x0₁ >> 0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[64:1]

Register        -> %rbx
  translates to => %rbx
Value is               -> ((%rcx_shrxq_r64_r64_r64[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0])[63:16] ∘ %rcx_shrxq_r64_r64_r64[15:0] ∘ 0x0₁ >> 0x0₅₇ ∘ ((%rcx_shrxq_r64_r64_r64[63:8] ∘ %rdx_shrxq_r64_r64_r64[7:0])[7:0][7:0] & 0x3f₈))[64:1]
  after renaming it is => (%rcx ∘ 0x0₁ >> 0x0₅₇ ∘ (%rdx[7:0] & 0x3f₈))[64:1]

Final state
%rbx/%rbx: (%rcx ∘ 0x0₁ >> 0x0₅₇ ∘ (%rdx[7:0] & 0x3f₈))[64:1]

=====================================
Circuits:

%rbx   : (%rcx ∘ 0x0₁ >> 0x0₅₇ ∘ (%rdx[7:0] & 0x3f₈))[64:1]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/