// Autogenerated using stratification.
requires "x86-configuration.k"

module SQRTPS-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (sqrtps R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(getParentValue(R1, RSMap), 128, 160), 24, 8), 2), 32), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(getParentValue(R1, RSMap), 160, 192), 24, 8), 2), 32), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(getParentValue(R1, RSMap), 192, 224), 24, 8), 2), 32), Float2MInt(rootFloat(MInt2Float(extractMInt(getParentValue(R1, RSMap), 224, 256), 24, 8), 2), 32))))) )


)

    </regstate>
endmodule

module SQRTPS-XMM-XMM-SEMANTICS
  imports SQRTPS-XMM-XMM
endmodule
/*
TargetInstr:
sqrtps %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse }

Circuit:
circuit:vmovdqu %xmm2, %xmm4  #  1     0    4      OPC=vmovdqu_xmm_xmm
circuit:vsqrtps %ymm4, %ymm7  #  2     0x4  4      OPC=vsqrtps_ymm_ymm
circuit:movdqa %xmm7, %xmm1   #  3     0x8  4      OPC=movdqa_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

sqrtps %xmm2, %xmm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse }

-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: %ymm0_vmovdqu_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqu_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm3

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_256_128_ymm3_xmm12_xmm13

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_256_xmm12_xmm13_ymm1

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: ((0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqu %xmm2, %xmm4

.target:
callq .move_128_064_xmm2_r10_r11
vzeroall 
callq .move_064_128_r10_r11_xmm3
callq .move_256_128_ymm3_xmm12_xmm13
callq .move_128_256_xmm12_xmm13_ymm1
retq 

Initial state:
%ymm4: %ymm4_sqrtps_xmm_xmm

State for specgen instruction: vmovdqu %xmm2, %xmm1:
%ymm1: (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0]

Final state
%ymm4: 0x0₁₂₈ ∘ %ymm2_sqrtps_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for vsqrtps %ymm4, %ymm7

Final state:
%ymm7: sqrt_single((0x0₁₂₈ ∘ %ymm2_sqrtps_xmm_xmm[127:0])[255:224]) ∘ (sqrt_single((0x0₁₂₈ ∘ %ymm2_sqrtps_xmm_xmm[127:0])[223:192]) ∘ (sqrt_single((0x0₁₂₈ ∘ %ymm2_sqrtps_xmm_xmm[127:0])[191:160]) ∘ (sqrt_single((0x0₁₂₈ ∘ %ymm2_sqrtps_xmm_xmm[127:0])[159:128]) ∘ (sqrt_single((0x0₁₂₈ ∘ %ymm2_sqrtps_xmm_xmm[127:0])[127:96]) ∘ (sqrt_single((0x0₁₂₈ ∘ %ymm2_sqrtps_xmm_xmm[127:0])[95:64]) ∘ (sqrt_single((0x0₁₂₈ ∘ %ymm2_sqrtps_xmm_xmm[127:0])[63:32]) ∘ sqrt_single((0x0₁₂₈ ∘ %ymm2_sqrtps_xmm_xmm[127:0])[31:0])))))))

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_movdqa_xmm_xmm
%rdx/%rdx: %rdx_movdqa_xmm_xmm

%xmm0: %ymm0_movdqa_xmm_xmm[127:0]
%xmm1: %ymm1_movdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_movdqa_xmm_xmm
%rdx/%rdx: %rdx_movdqa_xmm_xmm

%xmm0: %ymm0_movdqa_xmm_xmm[127:0]
%xmm1: (%ymm1_movdqa_xmm_xmm[255:128] ∘ (%ymm2_movdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_movdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for movdqa %xmm7, %xmm1

.target:
callq .move_128_064_xmm2_r8_r9
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%xmm1: %ymm1_sqrtps_xmm_xmm[127:0]

State for specgen instruction: movdqa %xmm2, %xmm1:
%xmm1: (%ymm1_movdqa_xmm_xmm[255:128] ∘ (%ymm2_movdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_movdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

Final state
%xmm1: (%ymm1_sqrtps_xmm_xmm[255:128] ∘ (sqrt_single(%ymm2_sqrtps_xmm_xmm[127:96]) ∘ (sqrt_single(%ymm2_sqrtps_xmm_xmm[95:64]) ∘ (sqrt_single(%ymm2_sqrtps_xmm_xmm[63:32]) ∘ sqrt_single(%ymm2_sqrtps_xmm_xmm[31:0])))))[127:0]

=====================================
=====================================
Computing circuit for sqrtps %xmm2, %xmm1

.target:
vmovdqu %xmm2, %xmm4
vsqrtps %ymm4, %ymm7
movdqa %xmm7, %xmm1
retq 

Initial state:
%xmm1: %ymm1[127:0]

State for specgen instruction: sqrtps %xmm2, %xmm1:
%xmm1: (%ymm1_sqrtps_xmm_xmm[255:128] ∘ (sqrt_single(%ymm2_sqrtps_xmm_xmm[127:96]) ∘ (sqrt_single(%ymm2_sqrtps_xmm_xmm[95:64]) ∘ (sqrt_single(%ymm2_sqrtps_xmm_xmm[63:32]) ∘ sqrt_single(%ymm2_sqrtps_xmm_xmm[31:0])))))[127:0]

Final state
%xmm1: (%ymm1[255:128] ∘ (sqrt_single(%ymm2[127:96]) ∘ (sqrt_single(%ymm2[95:64]) ∘ (sqrt_single(%ymm2[63:32]) ∘ sqrt_single(%ymm2[31:0])))))[127:0]

=====================================
Circuits:

%ymm1  : %ymm1[255:128] ∘ (sqrt_single(%ymm2[127:96]) ∘ (sqrt_single(%ymm2[95:64]) ∘ (sqrt_single(%ymm2[63:32]) ∘ sqrt_single(%ymm2[31:0]))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/