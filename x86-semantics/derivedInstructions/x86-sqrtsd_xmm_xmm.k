// Autogenerated using stratification.
requires "x86-configuration.k"

module SQRTSD-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (sqrtsd R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 192), Float2MInt(rootFloat(MInt2Float(extractMInt(getParentValue(R1, RSMap), 192, 256), 53, 11), 2), 64)) )


)

    </regstate>
endmodule

module SQRTSD-XMM-XMM-SEMANTICS
  imports SQRTSD-XMM-XMM
endmodule
/*
TargetInstr:
sqrtsd %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 }
must read:{ %xmm1 %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse2 }

Circuit:
circuit:vpbroadcastq %xmm2, %ymm5            #  1     0     5      OPC=vpbroadcastq_ymm_xmm
circuit:callq .move_128_64_xmm1_xmm10_xmm11  #  2     0x5   5      OPC=callq_label
circuit:vminpd %ymm5, %ymm5, %ymm5           #  3     0xa   4      OPC=vminpd_ymm_ymm_ymm
circuit:vsqrtpd %xmm5, %xmm10                #  4     0xe   4      OPC=vsqrtpd_xmm_xmm
circuit:callq .move_64_128_xmm10_xmm11_xmm1  #  5     0x12  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

sqrtsd %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 }
  must read:       { %xmm1 %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse2 }

-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vpbroadcastq_xmm_xmm
%rdx/%rdx: %rdx_vpbroadcastq_xmm_xmm

%xmm0: %ymm0_vpbroadcastq_xmm_xmm[127:0]
%xmm1: %ymm1_vpbroadcastq_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %r11

Final state:
%r11/%r11: %ymm2_vpbroadcastq_xmm_xmm[127:0][63:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm1

Final state:
%rax/%rax: %rax_vpbroadcastq_xmm_xmm
%rdx/%rdx: %rdx_vpbroadcastq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0] ∘ %ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vpbroadcastq %xmm2, %xmm1

.target:
callq .move_128_064_xmm2_r10_r11
vzeroall 
movq %r10, %r11
callq .move_064_128_r10_r11_xmm1
retq 

Initial state:
%ymm1: %ymm1_vpbroadcastq_ymm_xmm

State for specgen instruction: vpbroadcastq %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0] ∘ %ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (%ymm2_vpbroadcastq_ymm_xmm[63:0] ∘ %ymm2_vpbroadcastq_ymm_xmm[63:0])

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovupd_xmm_xmm
%rdx/%rdx: %rdx_vmovupd_xmm_xmm

%xmm0: %ymm0_vmovupd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovupd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovupd_xmm_xmm
%rdx/%rdx: %rdx_vmovupd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovupd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovupd %xmm1, %xmm8

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm8: %ymm8_vpbroadcastq_ymm_xmm

State for specgen instruction: vmovupd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovupd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm8: 0x0₁₂₈ ∘ (%ymm2_vpbroadcastq_ymm_xmm[63:0] ∘ %ymm2_vpbroadcastq_ymm_xmm[63:0])

=====================================
-------------------------------------
Getting base circuit for vminpd %ymm2, %ymm2, %ymm1

Final state:
%ymm1: (mincmp_double(%ymm2_vmovdqa_ymm_ymm[255:192], %ymm2_vmovdqa_ymm_ymm[255:192])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[255:192] : %ymm2_vmovdqa_ymm_ymm[255:192]) ∘ ((mincmp_double(%ymm2_vmovdqa_ymm_ymm[191:128], %ymm2_vmovdqa_ymm_ymm[191:128])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[191:128] : %ymm2_vmovdqa_ymm_ymm[191:128]) ∘ ((mincmp_double(%ymm2_vmovdqa_ymm_ymm[127:64], %ymm2_vmovdqa_ymm_ymm[127:64])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[127:64] : %ymm2_vmovdqa_ymm_ymm[127:64]) ∘ (mincmp_double(%ymm2_vmovdqa_ymm_ymm[63:0], %ymm2_vmovdqa_ymm_ymm[63:0])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[63:0] : %ymm2_vmovdqa_ymm_ymm[63:0])))

-------------------------------------
=====================================
Computing circuit for vmovdqa %ymm1, %ymm9

.target:
vminpd %ymm2, %ymm2, %ymm1
retq 

Initial state:
%ymm9: %ymm9_vpbroadcastq_ymm_xmm

State for specgen instruction: vmovdqa %ymm2, %ymm1:
%ymm1: (mincmp_double(%ymm2_vmovdqa_ymm_ymm[255:192], %ymm2_vmovdqa_ymm_ymm[255:192])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[255:192] : %ymm2_vmovdqa_ymm_ymm[255:192]) ∘ ((mincmp_double(%ymm2_vmovdqa_ymm_ymm[191:128], %ymm2_vmovdqa_ymm_ymm[191:128])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[191:128] : %ymm2_vmovdqa_ymm_ymm[191:128]) ∘ ((mincmp_double(%ymm2_vmovdqa_ymm_ymm[127:64], %ymm2_vmovdqa_ymm_ymm[127:64])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[127:64] : %ymm2_vmovdqa_ymm_ymm[127:64]) ∘ (mincmp_double(%ymm2_vmovdqa_ymm_ymm[63:0], %ymm2_vmovdqa_ymm_ymm[63:0])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[63:0] : %ymm2_vmovdqa_ymm_ymm[63:0])))

Final state
%ymm9: 0x0₆₄ ∘ (0x0₆₄ ∘ (%ymm2_vpbroadcastq_ymm_xmm[63:0] ∘ %ymm2_vpbroadcastq_ymm_xmm[63:0]))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_256_xmm8_xmm9_ymm1

Final state:
%rax/%rax: %rax_vpbroadcastq_ymm_xmm
%rdx/%rdx: %rdx_vpbroadcastq_ymm_xmm

%xmm0: %ymm0_vpbroadcastq_ymm_xmm[127:0]
%xmm1: ((0x0₆₄ ∘ (0x0₆₄ ∘ (%ymm2_vpbroadcastq_ymm_xmm[63:0] ∘ %ymm2_vpbroadcastq_ymm_xmm[63:0])))[127:0][127:0] ∘ (0x0₁₂₈ ∘ (%ymm2_vpbroadcastq_ymm_xmm[63:0] ∘ %ymm2_vpbroadcastq_ymm_xmm[63:0]))[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vpbroadcastq %xmm2, %ymm5

.target:
vpbroadcastq %xmm2, %xmm1
vmovupd %xmm1, %xmm8
vmovdqa %ymm1, %ymm9
callq .move_128_256_xmm8_xmm9_ymm1
retq 

Initial state:
%ymm5: %ymm5_sqrtsd_xmm_xmm

State for specgen instruction: vpbroadcastq %xmm2, %ymm1:
%ymm1: (0x0₆₄ ∘ (0x0₆₄ ∘ (%ymm2_vpbroadcastq_ymm_xmm[63:0] ∘ %ymm2_vpbroadcastq_ymm_xmm[63:0])))[127:0][127:0] ∘ (0x0₁₂₈ ∘ (%ymm2_vpbroadcastq_ymm_xmm[63:0] ∘ %ymm2_vpbroadcastq_ymm_xmm[63:0]))[127:0][127:0]

Final state
%ymm5: %ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0] ∘ (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0])

=====================================
-------------------------------------
Getting base circuit for callq .move_128_64_xmm1_xmm10_xmm11

Final state:
%rax/%rax: %rax_sqrtsd_xmm_xmm
%rdx/%rdx: %rdx_sqrtsd_xmm_xmm

%xmm0: %ymm0_sqrtsd_xmm_xmm[127:0]
%xmm1: %ymm1_sqrtsd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vminpd %ymm5, %ymm5, %ymm5

Final state:
%ymm5: (mincmp_double((%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0] ∘ (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0]))[255:192], (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0] ∘ (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0]))[255:192])[0:0] = 0x1₁ ? (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0] ∘ (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0]))[255:192] : (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0] ∘ (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0]))[255:192]) ∘ ((mincmp_double((%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0] ∘ (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0]))[191:128], (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0] ∘ (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0]))[191:128])[0:0] = 0x1₁ ? (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0] ∘ (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0]))[191:128] : (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0] ∘ (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0]))[191:128]) ∘ ((mincmp_double((%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0] ∘ (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0]))[127:64], (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0] ∘ (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0]))[127:64])[0:0] = 0x1₁ ? (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0] ∘ (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0]))[127:64] : (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0] ∘ (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0]))[127:64]) ∘ (mincmp_double((%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0] ∘ (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0]))[63:0], (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0] ∘ (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0]))[63:0])[0:0] = 0x1₁ ? (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0] ∘ (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0]))[63:0] : (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0] ∘ (%ymm2_sqrtsd_xmm_xmm[63:0] ∘ %ymm2_sqrtsd_xmm_xmm[63:0]))[63:0])))

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vsqrtpd_xmm_xmm
%rdx/%rdx: %rdx_vsqrtpd_xmm_xmm

%xmm0: %ymm0_vsqrtpd_xmm_xmm[127:0]
%xmm1: %ymm1_vsqrtpd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm3

Final state:
%rax/%rax: %rax_vsqrtpd_xmm_xmm
%rdx/%rdx: %rdx_vsqrtpd_xmm_xmm

%xmm0: %ymm0_vsqrtpd_xmm_xmm[127:0]
%xmm1: %ymm1_vsqrtpd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: %ymm0_vmovdqu_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqu_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm3

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_256_128_ymm3_xmm12_xmm13

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_256_xmm12_xmm13_ymm1

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: ((0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqu %xmm3, %xmm2

.target:
callq .move_128_064_xmm2_r10_r11
vzeroall 
callq .move_064_128_r10_r11_xmm3
callq .move_256_128_ymm3_xmm12_xmm13
callq .move_128_256_xmm12_xmm13_ymm1
retq 

Initial state:
%ymm2: %ymm2_vsqrtpd_xmm_xmm

State for specgen instruction: vmovdqu %xmm2, %xmm1:
%ymm1: (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0]

Final state
%ymm2: 0x0₁₂₈ ∘ %ymm2_vsqrtpd_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for vsqrtpd %ymm2, %ymm1

Final state:
%ymm1: sqrt_double((0x0₁₂₈ ∘ %ymm2_vsqrtpd_xmm_xmm[127:0])[255:192]) ∘ (sqrt_double((0x0₁₂₈ ∘ %ymm2_vsqrtpd_xmm_xmm[127:0])[191:128]) ∘ (sqrt_double((0x0₁₂₈ ∘ %ymm2_vsqrtpd_xmm_xmm[127:0])[127:64]) ∘ sqrt_double((0x0₁₂₈ ∘ %ymm2_vsqrtpd_xmm_xmm[127:0])[63:0])))

-------------------------------------
=====================================
Computing circuit for vsqrtpd %xmm5, %xmm10

.target:
callq .move_128_064_xmm2_r8_r9
callq .move_064_128_r8_r9_xmm3
vmovdqu %xmm3, %xmm2
vsqrtpd %ymm2, %ymm1
retq 

Initial state:
%ymm10: %ymm10_sqrtsd_xmm_xmm[255:128] ∘ (0x0₆₄ ∘ %ymm1_sqrtsd_xmm_xmm[127:0][63:0])

State for specgen instruction: vsqrtpd %xmm2, %xmm1:
%ymm1: sqrt_double((0x0₁₂₈ ∘ %ymm2_vsqrtpd_xmm_xmm[127:0])[255:192]) ∘ (sqrt_double((0x0₁₂₈ ∘ %ymm2_vsqrtpd_xmm_xmm[127:0])[191:128]) ∘ (sqrt_double((0x0₁₂₈ ∘ %ymm2_vsqrtpd_xmm_xmm[127:0])[127:64]) ∘ sqrt_double((0x0₁₂₈ ∘ %ymm2_vsqrtpd_xmm_xmm[127:0])[63:0])))

Final state
%ymm10: 0x0₆₄ ∘ (0x0₆₄ ∘ (sqrt_double(%ymm2_sqrtsd_xmm_xmm[63:0]) ∘ sqrt_double(%ymm2_sqrtsd_xmm_xmm[63:0])))

=====================================
-------------------------------------
Getting base circuit for callq .move_64_128_xmm10_xmm11_xmm1

Final state:
%rax/%rax: %rax_sqrtsd_xmm_xmm
%rdx/%rdx: %rdx_sqrtsd_xmm_xmm

%xmm0: %ymm0_sqrtsd_xmm_xmm[127:0]
%xmm1: (%ymm1_sqrtsd_xmm_xmm[255:128] ∘ ((%ymm11_sqrtsd_xmm_xmm[255:128] ∘ (0x0₆₄ ∘ %ymm1_sqrtsd_xmm_xmm[127:0][127:64]))[127:0][63:0] ∘ (0x0₆₄ ∘ (0x0₆₄ ∘ (sqrt_double(%ymm2_sqrtsd_xmm_xmm[63:0]) ∘ sqrt_double(%ymm2_sqrtsd_xmm_xmm[63:0]))))[127:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for sqrtsd %xmm2, %xmm1

.target:
vpbroadcastq %xmm2, %ymm5
callq .move_128_64_xmm1_xmm10_xmm11
vminpd %ymm5, %ymm5, %ymm5
vsqrtpd %xmm5, %xmm10
callq .move_64_128_xmm10_xmm11_xmm1
retq 

Initial state:
%xmm1: %ymm1[127:0]

State for specgen instruction: sqrtsd %xmm2, %xmm1:
%xmm1: (%ymm1_sqrtsd_xmm_xmm[255:128] ∘ ((%ymm11_sqrtsd_xmm_xmm[255:128] ∘ (0x0₆₄ ∘ %ymm1_sqrtsd_xmm_xmm[127:0][127:64]))[127:0][63:0] ∘ (0x0₆₄ ∘ (0x0₆₄ ∘ (sqrt_double(%ymm2_sqrtsd_xmm_xmm[63:0]) ∘ sqrt_double(%ymm2_sqrtsd_xmm_xmm[63:0]))))[127:0][63:0]))[127:0]

Final state
%xmm1: (%ymm1[255:128] ∘ (%ymm1[127:64] ∘ sqrt_double(%ymm2[63:0])))[127:0]

=====================================
Circuits:

%ymm1  : %ymm1[255:128] ∘ (%ymm1[127:64] ∘ sqrt_double(%ymm2[63:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/