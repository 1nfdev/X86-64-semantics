// Autogenerated using stratification.
requires "x86-configuration.k"

module VCVTSS2SD-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vcvtss2sd R1:Xmm, R2:Xmm, R3:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(getParentValue(R2, RSMap), 128, 192), Float2MInt(Float2Double(MInt2Float(extractMInt(getParentValue(R1, RSMap), 224, 256), 24, 8)), 64))) )


)

    </regstate>
endmodule

module VCVTSS2SD-XMM-XMM-XMM-SEMANTICS
  imports VCVTSS2SD-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vcvtss2sd %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 %xmm3 %mxcsr::rc[0] }
must read:{ %xmm2 %xmm3 %mxcsr::rc[0] }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:vmovapd %xmm2, %xmm1                 #  1     0     4      OPC=vmovapd_xmm_xmm
circuit:callq .move_128_64_xmm2_xmm10_xmm11  #  2     0x4   5      OPC=callq_label
circuit:vcvtps2pd %xmm3, %ymm10              #  3     0x9   4      OPC=vcvtps2pd_ymm_xmm
circuit:callq .move_64_128_xmm10_xmm11_xmm1  #  4     0xd   5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vcvtss2sd %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm2 %xmm3 %mxcsr::rc[0] }
  must read:       { %xmm2 %xmm3 %mxcsr::rc[0] }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: %ymm0_vmovapd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovapd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovapd %xmm2, %xmm1

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm1: %ymm1_vcvtss2sd_xmm_xmm_xmm

State for specgen instruction: vmovapd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ %ymm2_vcvtss2sd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_64_xmm2_xmm10_xmm11

Final state:
%rax/%rax: %rax_vcvtss2sd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vcvtss2sd_xmm_xmm_xmm

%xmm0: %ymm0_vcvtss2sd_xmm_xmm_xmm[127:0]
%xmm1: (0x0₁₂₈ ∘ %ymm2_vcvtss2sd_xmm_xmm_xmm[127:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vcvtps2pd %xmm3, %ymm10

Final state:
%ymm10: cvt_single_to_double(%ymm3_vcvtss2sd_xmm_xmm_xmm[127:0][127:96]) ∘ (cvt_single_to_double(%ymm3_vcvtss2sd_xmm_xmm_xmm[127:0][95:64]) ∘ (cvt_single_to_double(%ymm3_vcvtss2sd_xmm_xmm_xmm[127:0][63:32]) ∘ cvt_single_to_double(%ymm3_vcvtss2sd_xmm_xmm_xmm[127:0][31:0])))

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_64_128_xmm10_xmm11_xmm1

Final state:
%rax/%rax: %rax_vcvtss2sd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vcvtss2sd_xmm_xmm_xmm

%xmm0: %ymm0_vcvtss2sd_xmm_xmm_xmm[127:0]
%xmm1: ((0x0₁₂₈ ∘ %ymm2_vcvtss2sd_xmm_xmm_xmm[127:0])[255:128] ∘ ((%ymm11_vcvtss2sd_xmm_xmm_xmm[255:128] ∘ (0x0₆₄ ∘ %ymm2_vcvtss2sd_xmm_xmm_xmm[127:0][127:64]))[127:0][63:0] ∘ (cvt_single_to_double(%ymm3_vcvtss2sd_xmm_xmm_xmm[127:0][127:96]) ∘ (cvt_single_to_double(%ymm3_vcvtss2sd_xmm_xmm_xmm[127:0][95:64]) ∘ (cvt_single_to_double(%ymm3_vcvtss2sd_xmm_xmm_xmm[127:0][63:32]) ∘ cvt_single_to_double(%ymm3_vcvtss2sd_xmm_xmm_xmm[127:0][31:0]))))[127:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vcvtss2sd %xmm3, %xmm2, %xmm1

.target:
vmovapd %xmm2, %xmm1
callq .move_128_64_xmm2_xmm10_xmm11
vcvtps2pd %xmm3, %ymm10
callq .move_64_128_xmm10_xmm11_xmm1
retq 

Initial state:
%ymm1: %ymm1

State for specgen instruction: vcvtss2sd %xmm3, %xmm2, %xmm1:
%ymm1: (0x0₁₂₈ ∘ %ymm2_vcvtss2sd_xmm_xmm_xmm[127:0])[255:128] ∘ ((%ymm11_vcvtss2sd_xmm_xmm_xmm[255:128] ∘ (0x0₆₄ ∘ %ymm2_vcvtss2sd_xmm_xmm_xmm[127:0][127:64]))[127:0][63:0] ∘ (cvt_single_to_double(%ymm3_vcvtss2sd_xmm_xmm_xmm[127:0][127:96]) ∘ (cvt_single_to_double(%ymm3_vcvtss2sd_xmm_xmm_xmm[127:0][95:64]) ∘ (cvt_single_to_double(%ymm3_vcvtss2sd_xmm_xmm_xmm[127:0][63:32]) ∘ cvt_single_to_double(%ymm3_vcvtss2sd_xmm_xmm_xmm[127:0][31:0]))))[127:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (%ymm2[127:64] ∘ cvt_single_to_double(%ymm3[31:0]))

=====================================
Circuits:

%ymm1  : 0x0₁₂₈ ∘ (%ymm2[127:64] ∘ cvt_single_to_double(%ymm3[31:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/