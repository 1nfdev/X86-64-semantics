// Autogenerated using stratification.
requires "x86-configuration.k"

module VFMADD132SS-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vfmadd132ss R1:Xmm, R2:Xmm, R3:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(getParentValue(R3, RSMap), 128, 224)), Float2MInt( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(getParentValue(R3, RSMap), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 224, 256), 24, 8) )  ) , 32)) )


)

    </regstate>
endmodule

module VFMADD132SS-XMM-XMM-XMM-SEMANTICS
  imports VFMADD132SS-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vfmadd132ss %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 %xmm3 }
must read:{ %xmm1 %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ fma }

Circuit:
circuit:vfmadd231ss %xmm3, %xmm1, %xmm2   #  1     0     5      OPC=vfmadd231ss_xmm_xmm_xmm
circuit:callq .move_128_064_xmm1_r12_r13  #  2     0x5   5      OPC=callq_label
circuit:vmovss %xmm2, %xmm2, %xmm1        #  3     0xa   4      OPC=vmovss_xmm_xmm_xmm
circuit:callq .move_064_128_r12_r13_xmm1  #  4     0xe   5      OPC=callq_label
circuit:movss %xmm2, %xmm1                #  5     0x13  4      OPC=movss_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vfmadd132ss %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 %xmm3 }
  must read:       { %xmm1 %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { fma }

-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovupd_xmm_xmm
%rdx/%rdx: %rdx_vmovupd_xmm_xmm

%xmm0: %ymm0_vmovupd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovupd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovupd_xmm_xmm
%rdx/%rdx: %rdx_vmovupd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovupd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovupd %xmm1, %xmm12

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm12: %ymm12_vfmadd231ps_xmm_xmm_xmm

State for specgen instruction: vmovupd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovupd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm12: 0x0₁₂₈ ∘ %ymm1_vfmadd231ps_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: %ymm0_vmovdqu_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqu_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm3

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_256_128_ymm3_xmm12_xmm13

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_256_xmm12_xmm13_ymm1

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: ((0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqu %xmm2, %xmm6

.target:
callq .move_128_064_xmm2_r10_r11
vzeroall 
callq .move_064_128_r10_r11_xmm3
callq .move_256_128_ymm3_xmm12_xmm13
callq .move_128_256_xmm12_xmm13_ymm1
retq 

Initial state:
%ymm6: %ymm6_vfmadd231ps_xmm_xmm_xmm

State for specgen instruction: vmovdqu %xmm2, %xmm1:
%ymm1: (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0]

Final state
%ymm6: 0x0₁₂₈ ∘ %ymm2_vfmadd231ps_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovaps_xmm_xmm
%rdx/%rdx: %rdx_vmovaps_xmm_xmm

%xmm0: %ymm0_vmovaps_xmm_xmm[127:0]
%xmm1: %ymm1_vmovaps_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovaps_xmm_xmm
%rdx/%rdx: %rdx_vmovaps_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovaps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovaps_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovaps %xmm3, %xmm1

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm1: %ymm1_vfmadd231ps_xmm_xmm_xmm

State for specgen instruction: vmovaps %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovaps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovaps_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ %ymm3_vfmadd231ps_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for vfmadd132ps %ymm1, %ymm3, %ymm2

Final state:
%ymm2: vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0])))))))

-------------------------------------
-------------------------------------
Getting base circuit for vmaxpd %ymm2, %ymm2, %ymm1

Final state:
%ymm1: (maxcmp_double((vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[255:192], (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[255:192])[0:0] = 0x1₁ ? (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[255:192] : (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[255:192]) ∘ ((maxcmp_double((vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[191:128], (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[191:128])[0:0] = 0x1₁ ? (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[191:128] : (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[191:128]) ∘ ((maxcmp_double((vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[127:64], (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[127:64])[0:0] = 0x1₁ ? (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[127:64] : (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[127:64]) ∘ (maxcmp_double((vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[63:0], (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[63:0])[0:0] = 0x1₁ ? (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[63:0] : (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[63:0])))

-------------------------------------
=====================================
Computing circuit for vfmadd213ps %ymm12, %ymm6, %ymm1

.target:
vfmadd132ps %ymm1, %ymm3, %ymm2
vmaxpd %ymm2, %ymm2, %ymm1
retq 

Initial state:
%ymm1: 0x0₁₂₈ ∘ %ymm3_vfmadd231ps_xmm_xmm_xmm[127:0]

State for specgen instruction: vfmadd213ps %ymm3, %ymm2, %ymm1:
%ymm1: (maxcmp_double((vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[255:192], (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[255:192])[0:0] = 0x1₁ ? (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[255:192] : (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[255:192]) ∘ ((maxcmp_double((vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[191:128], (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[191:128])[0:0] = 0x1₁ ? (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[191:128] : (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[191:128]) ∘ ((maxcmp_double((vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[127:64], (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[127:64])[0:0] = 0x1₁ ? (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[127:64] : (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[127:64]) ∘ (maxcmp_double((vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[63:0], (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[63:0])[0:0] = 0x1₁ ? (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[63:0] : (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm3_vfmadd213ps_ymm_ymm_ymm[255:224], %ymm1_vfmadd213ps_ymm_ymm_ymm[255:224]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm3_vfmadd213ps_ymm_ymm_ymm[223:192], %ymm1_vfmadd213ps_ymm_ymm_ymm[223:192]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm3_vfmadd213ps_ymm_ymm_ymm[191:160], %ymm1_vfmadd213ps_ymm_ymm_ymm[191:160]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm3_vfmadd213ps_ymm_ymm_ymm[159:128], %ymm1_vfmadd213ps_ymm_ymm_ymm[159:128]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm3_vfmadd213ps_ymm_ymm_ymm[127:96], %ymm1_vfmadd213ps_ymm_ymm_ymm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm3_vfmadd213ps_ymm_ymm_ymm[95:64], %ymm1_vfmadd213ps_ymm_ymm_ymm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm3_vfmadd213ps_ymm_ymm_ymm[63:32], %ymm1_vfmadd213ps_ymm_ymm_ymm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm3_vfmadd213ps_ymm_ymm_ymm[31:0], %ymm1_vfmadd213ps_ymm_ymm_ymm[31:0]))))))))[63:0])))

Final state
%ymm1: vfmadd132_single(0x0₃₂, 0x0₃₂, 0x0₃₂) ∘ vfmadd132_single(0x0₃₂, 0x0₃₂, 0x0₃₂) ∘ (vfmadd132_single(0x0₃₂, 0x0₃₂, 0x0₃₂) ∘ (vfmadd132_single(0x0₃₂, 0x0₃₂, 0x0₃₂) ∘ (vfmadd132_single(%ymm2_vfmadd231ps_xmm_xmm_xmm[127:96], %ymm1_vfmadd231ps_xmm_xmm_xmm[127:96], %ymm3_vfmadd231ps_xmm_xmm_xmm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd231ps_xmm_xmm_xmm[95:64], %ymm1_vfmadd231ps_xmm_xmm_xmm[95:64], %ymm3_vfmadd231ps_xmm_xmm_xmm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd231ps_xmm_xmm_xmm[63:32], %ymm1_vfmadd231ps_xmm_xmm_xmm[63:32], %ymm3_vfmadd231ps_xmm_xmm_xmm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd231ps_xmm_xmm_xmm[31:0], %ymm1_vfmadd231ps_xmm_xmm_xmm[31:0], %ymm3_vfmadd231ps_xmm_xmm_xmm[31:0]))))))

=====================================
=====================================
Computing circuit for vfmadd231ps %xmm1, %xmm2, %xmm3

.target:
vmovupd %xmm1, %xmm12
vmovdqu %xmm2, %xmm6
vmovaps %xmm3, %xmm1
vfmadd213ps %ymm12, %ymm6, %ymm1
retq 

Initial state:
%ymm3: %ymm3_vfmadd213ss_xmm_xmm_xmm

State for specgen instruction: vfmadd231ps %xmm3, %xmm2, %xmm1:
%ymm1: vfmadd132_single(0x0₃₂, 0x0₃₂, 0x0₃₂) ∘ vfmadd132_single(0x0₃₂, 0x0₃₂, 0x0₃₂) ∘ (vfmadd132_single(0x0₃₂, 0x0₃₂, 0x0₃₂) ∘ (vfmadd132_single(0x0₃₂, 0x0₃₂, 0x0₃₂) ∘ (vfmadd132_single(%ymm2_vfmadd231ps_xmm_xmm_xmm[127:96], %ymm1_vfmadd231ps_xmm_xmm_xmm[127:96], %ymm3_vfmadd231ps_xmm_xmm_xmm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd231ps_xmm_xmm_xmm[95:64], %ymm1_vfmadd231ps_xmm_xmm_xmm[95:64], %ymm3_vfmadd231ps_xmm_xmm_xmm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd231ps_xmm_xmm_xmm[63:32], %ymm1_vfmadd231ps_xmm_xmm_xmm[63:32], %ymm3_vfmadd231ps_xmm_xmm_xmm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd231ps_xmm_xmm_xmm[31:0], %ymm1_vfmadd231ps_xmm_xmm_xmm[31:0], %ymm3_vfmadd231ps_xmm_xmm_xmm[31:0]))))))

Final state
%ymm3: vfmadd132_single(0x0₃₂, 0x0₃₂, 0x0₃₂) ∘ vfmadd132_single(0x0₃₂, 0x0₃₂, 0x0₃₂) ∘ (vfmadd132_single(0x0₃₂, 0x0₃₂, 0x0₃₂) ∘ (vfmadd132_single(0x0₃₂, 0x0₃₂, 0x0₃₂) ∘ (vfmadd132_single(%ymm2_vfmadd213ss_xmm_xmm_xmm[127:96], %ymm3_vfmadd213ss_xmm_xmm_xmm[127:96], %ymm1_vfmadd213ss_xmm_xmm_xmm[127:96]) ∘ (vfmadd132_single(%ymm2_vfmadd213ss_xmm_xmm_xmm[95:64], %ymm3_vfmadd213ss_xmm_xmm_xmm[95:64], %ymm1_vfmadd213ss_xmm_xmm_xmm[95:64]) ∘ (vfmadd132_single(%ymm2_vfmadd213ss_xmm_xmm_xmm[63:32], %ymm3_vfmadd213ss_xmm_xmm_xmm[63:32], %ymm1_vfmadd213ss_xmm_xmm_xmm[63:32]) ∘ vfmadd132_single(%ymm2_vfmadd213ss_xmm_xmm_xmm[31:0], %ymm3_vfmadd213ss_xmm_xmm_xmm[31:0], %ymm1_vfmadd213ss_xmm_xmm_xmm[31:0]))))))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vrcpps_xmm_xmm
%rdx/%rdx: %rdx_vrcpps_xmm_xmm

%xmm0: %ymm0_vrcpps_xmm_xmm[127:0]
%xmm1: %ymm1_vrcpps_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vrcpps_xmm_xmm
%rdx/%rdx: %rdx_vrcpps_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vrcpps %ymm1, %ymm10

Final state:
%ymm10: approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[255:224]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[223:192]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[191:160]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[159:128]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[127:96]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[95:64]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[63:32]) ∘ approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[31:0])))))))

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_256_xmm10_xmm11_ymm1

Final state:
%rax/%rax: %rax_vrcpps_xmm_xmm
%rdx/%rdx: %rdx_vrcpps_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[127:0][127:0] ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[255:224]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[223:192]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[191:160]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[159:128]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[127:96]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[95:64]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[63:32]) ∘ approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[31:0]))))))))[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vrcpps %xmm3, %xmm1

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
vrcpps %ymm1, %ymm10
callq .move_128_256_xmm10_xmm11_ymm1
retq 

Initial state:
%ymm1: %ymm1_vmovss_xmm_xmm_xmm

State for specgen instruction: vrcpps %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[127:0][127:0] ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[255:224]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[223:192]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[191:160]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[159:128]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[127:96]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[95:64]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[63:32]) ∘ approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[31:0]))))))))[127:0][127:0]

Final state
%ymm1: 0x0₁₂₈ ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[127:96]) ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[95:64]) ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[63:32]) ∘ approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[31:0]))))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_vmovss_xmm_xmm_xmm
%rdx/%rdx: %rdx_vmovss_xmm_xmm_xmm

%xmm0: %ymm0_vmovss_xmm_xmm_xmm[127:0]
%xmm1: (0x0₁₂₈ ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[127:96]) ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[95:64]) ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[63:32]) ∘ approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[31:0])))))[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: %ymm0_vmovdqu_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqu_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm3

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_256_128_ymm3_xmm12_xmm13

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_256_xmm12_xmm13_ymm1

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: ((0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqu %xmm3, %xmm8

.target:
callq .move_128_064_xmm2_r10_r11
vzeroall 
callq .move_064_128_r10_r11_xmm3
callq .move_256_128_ymm3_xmm12_xmm13
callq .move_128_256_xmm12_xmm13_ymm1
retq 

Initial state:
%ymm8: %ymm8_vmovss_xmm_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_vmovss_xmm_xmm_xmm[127:0][31:0])

State for specgen instruction: vmovdqu %xmm2, %xmm1:
%ymm1: (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0]

Final state
%ymm8: 0x0₁₂₈ ∘ %ymm3_vmovss_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1

Final state:
%rax/%rax: %rax_vmovss_xmm_xmm_xmm
%rdx/%rdx: %rdx_vmovss_xmm_xmm_xmm

%xmm0: %ymm0_vmovss_xmm_xmm_xmm[127:0]
%xmm1: ((0x0₁₂₈ ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[127:96]) ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[95:64]) ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[63:32]) ∘ approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[31:0])))))[255:128] ∘ ((%ymm11_vmovss_xmm_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_vmovss_xmm_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_vmovss_xmm_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_vmovss_xmm_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_vmovss_xmm_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_vmovss_xmm_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ (0x0₁₂₈ ∘ %ymm3_vmovss_xmm_xmm_xmm[127:0])[127:0][31:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovss %xmm3, %xmm1, %xmm1

.target:
vrcpps %xmm3, %xmm1
callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
vmovdqu %xmm3, %xmm8
callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
retq 

Initial state:
%ymm1: %ymm1_vfmadd213ss_xmm_xmm_xmm

State for specgen instruction: vmovss %xmm3, %xmm2, %xmm1:
%ymm1: (0x0₁₂₈ ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[127:96]) ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[95:64]) ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[63:32]) ∘ approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[31:0])))))[255:128] ∘ ((%ymm11_vmovss_xmm_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_vmovss_xmm_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_vmovss_xmm_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_vmovss_xmm_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_vmovss_xmm_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_vmovss_xmm_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ (0x0₁₂₈ ∘ %ymm3_vmovss_xmm_xmm_xmm[127:0])[127:0][31:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (%ymm1_vfmadd213ss_xmm_xmm_xmm[127:32] ∘ vfmadd132_single(%ymm2_vfmadd213ss_xmm_xmm_xmm[31:0], %ymm3_vfmadd213ss_xmm_xmm_xmm[31:0], %ymm1_vfmadd213ss_xmm_xmm_xmm[31:0]))

=====================================
=====================================
Computing circuit for vfmadd213ss %xmm1, %xmm2, %xmm3

.target:
vfmadd231ps %xmm1, %xmm2, %xmm3
vmovss %xmm3, %xmm1, %xmm1
retq 

Initial state:
%ymm3: %ymm3_vfmadd231ss_xmm_xmm_xmm

State for specgen instruction: vfmadd213ss %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₁₂₈ ∘ (%ymm1_vfmadd213ss_xmm_xmm_xmm[127:32] ∘ vfmadd132_single(%ymm2_vfmadd213ss_xmm_xmm_xmm[31:0], %ymm3_vfmadd213ss_xmm_xmm_xmm[31:0], %ymm1_vfmadd213ss_xmm_xmm_xmm[31:0]))

Final state
%ymm3: 0x0₁₂₈ ∘ (%ymm3_vfmadd231ss_xmm_xmm_xmm[127:32] ∘ vfmadd132_single(%ymm2_vfmadd231ss_xmm_xmm_xmm[31:0], %ymm1_vfmadd231ss_xmm_xmm_xmm[31:0], %ymm3_vfmadd231ss_xmm_xmm_xmm[31:0]))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_movss_xmm_xmm
%rdx/%rdx: %rdx_movss_xmm_xmm

%xmm0: %ymm0_movss_xmm_xmm[127:0]
%xmm1: %ymm1_movss_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: %ymm0_vpmovzxdq_xmm_xmm[127:0]
%xmm1: %ymm1_vpmovzxdq_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_byte_5_of_ymm1_to_r9b

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm2

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_64_128_xmm8_xmm9_xmm1

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ ((0x0₂₅₆[255:128] ∘ (0x0₉₆ ∘ (0x0₂₅₆[255:128] ∘ ((%ymm2_vpmovzxdq_xmm_xmm[127:0][127:64][63:8] ∘ 0x0₂₅₆[47:40])[63:0] ∘ %ymm2_vpmovzxdq_xmm_xmm[127:0][63:0][63:0]))[127:0][63:32]))[127:0][63:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₉₆ ∘ (0x0₂₅₆[255:128] ∘ ((%ymm2_vpmovzxdq_xmm_xmm[127:0][127:64][63:8] ∘ 0x0₂₅₆[47:40])[63:0] ∘ %ymm2_vpmovzxdq_xmm_xmm[127:0][63:0][63:0]))[127:0][31:0]))[127:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vpmovzxdq %xmm2, %xmm8

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_byte_5_of_ymm1_to_r9b
callq .move_064_128_r8_r9_xmm2
callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
callq .move_64_128_xmm8_xmm9_xmm1
retq 

Initial state:
%ymm8: %ymm8_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][31:0])

State for specgen instruction: vpmovzxdq %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ ((0x0₂₅₆[255:128] ∘ (0x0₉₆ ∘ (0x0₂₅₆[255:128] ∘ ((%ymm2_vpmovzxdq_xmm_xmm[127:0][127:64][63:8] ∘ 0x0₂₅₆[47:40])[63:0] ∘ %ymm2_vpmovzxdq_xmm_xmm[127:0][63:0][63:0]))[127:0][63:32]))[127:0][63:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₉₆ ∘ (0x0₂₅₆[255:128] ∘ ((%ymm2_vpmovzxdq_xmm_xmm[127:0][127:64][63:8] ∘ 0x0₂₅₆[47:40])[63:0] ∘ %ymm2_vpmovzxdq_xmm_xmm[127:0][63:0][63:0]))[127:0][31:0]))[127:0][63:0])

Final state
%ymm8: 0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[31:0]))

=====================================
-------------------------------------
Getting base circuit for callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1

Final state:
%rax/%rax: %rax_movss_xmm_xmm
%rdx/%rdx: %rdx_movss_xmm_xmm

%xmm0: %ymm0_movss_xmm_xmm[127:0]
%xmm1: (%ymm1_movss_xmm_xmm[255:128] ∘ ((%ymm11_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ (0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[31:0])))[127:0][31:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for movss %xmm3, %xmm1

.target:
callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11
vpmovzxdq %xmm2, %xmm8
callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
retq 

Initial state:
%xmm1: %ymm1_vfmadd231ss_xmm_xmm_xmm[127:0]

State for specgen instruction: movss %xmm2, %xmm1:
%xmm1: (%ymm1_movss_xmm_xmm[255:128] ∘ ((%ymm11_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ (0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[31:0])))[127:0][31:0]))[127:0]

Final state
%xmm1: (%ymm1_vfmadd231ss_xmm_xmm_xmm[255:128] ∘ (%ymm1_vfmadd231ss_xmm_xmm_xmm[127:32] ∘ vfmadd132_single(%ymm2_vfmadd231ss_xmm_xmm_xmm[31:0], %ymm1_vfmadd231ss_xmm_xmm_xmm[31:0], %ymm3_vfmadd231ss_xmm_xmm_xmm[31:0])))[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm1_r8_r9

Final state:
%rax/%rax: %rax_vfmadd231ss_xmm_xmm_xmm
%rdx/%rdx: %rdx_vfmadd231ss_xmm_xmm_xmm

%xmm0: %ymm0_vfmadd231ss_xmm_xmm_xmm[127:0]
%xmm1: (%ymm1_vfmadd231ss_xmm_xmm_xmm[255:128] ∘ (%ymm1_vfmadd231ss_xmm_xmm_xmm[127:32] ∘ vfmadd132_single(%ymm2_vfmadd231ss_xmm_xmm_xmm[31:0], %ymm1_vfmadd231ss_xmm_xmm_xmm[31:0], %ymm3_vfmadd231ss_xmm_xmm_xmm[31:0])))[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vfmadd231ss_xmm_xmm_xmm
%rdx/%rdx: %rdx_vfmadd231ss_xmm_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ ((%ymm1_vfmadd231ss_xmm_xmm_xmm[255:128] ∘ (%ymm1_vfmadd231ss_xmm_xmm_xmm[127:32] ∘ vfmadd132_single(%ymm2_vfmadd231ss_xmm_xmm_xmm[31:0], %ymm1_vfmadd231ss_xmm_xmm_xmm[31:0], %ymm3_vfmadd231ss_xmm_xmm_xmm[31:0])))[127:0][127:64][63:0] ∘ (%ymm1_vfmadd231ss_xmm_xmm_xmm[255:128] ∘ (%ymm1_vfmadd231ss_xmm_xmm_xmm[127:32] ∘ vfmadd132_single(%ymm2_vfmadd231ss_xmm_xmm_xmm[31:0], %ymm1_vfmadd231ss_xmm_xmm_xmm[31:0], %ymm3_vfmadd231ss_xmm_xmm_xmm[31:0])))[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vfmadd231ss %xmm3, %xmm1, %xmm2

.target:
vfmadd213ss %xmm1, %xmm2, %xmm3
movss %xmm3, %xmm1
callq .move_128_064_xmm1_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm2: %ymm2_vfmadd132ss_xmm_xmm_xmm

State for specgen instruction: vfmadd231ss %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ ((%ymm1_vfmadd231ss_xmm_xmm_xmm[255:128] ∘ (%ymm1_vfmadd231ss_xmm_xmm_xmm[127:32] ∘ vfmadd132_single(%ymm2_vfmadd231ss_xmm_xmm_xmm[31:0], %ymm1_vfmadd231ss_xmm_xmm_xmm[31:0], %ymm3_vfmadd231ss_xmm_xmm_xmm[31:0])))[127:0][127:64][63:0] ∘ (%ymm1_vfmadd231ss_xmm_xmm_xmm[255:128] ∘ (%ymm1_vfmadd231ss_xmm_xmm_xmm[127:32] ∘ vfmadd132_single(%ymm2_vfmadd231ss_xmm_xmm_xmm[31:0], %ymm1_vfmadd231ss_xmm_xmm_xmm[31:0], %ymm3_vfmadd231ss_xmm_xmm_xmm[31:0])))[127:0][63:0][63:0])

Final state
%ymm2: 0x0₁₂₈ ∘ (%ymm2_vfmadd132ss_xmm_xmm_xmm[127:32] ∘ vfmadd132_single(%ymm1_vfmadd132ss_xmm_xmm_xmm[31:0], %ymm2_vfmadd132ss_xmm_xmm_xmm[31:0], %ymm3_vfmadd132ss_xmm_xmm_xmm[31:0]))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm1_r12_r13

Final state:
%rax/%rax: %rax_vfmadd132ss_xmm_xmm_xmm
%rdx/%rdx: %rdx_vfmadd132ss_xmm_xmm_xmm

%xmm0: %ymm0_vfmadd132ss_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vfmadd132ss_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vrcpps_xmm_xmm
%rdx/%rdx: %rdx_vrcpps_xmm_xmm

%xmm0: %ymm0_vrcpps_xmm_xmm[127:0]
%xmm1: %ymm1_vrcpps_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vrcpps_xmm_xmm
%rdx/%rdx: %rdx_vrcpps_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vrcpps %ymm1, %ymm10

Final state:
%ymm10: approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[255:224]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[223:192]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[191:160]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[159:128]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[127:96]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[95:64]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[63:32]) ∘ approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[31:0])))))))

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_256_xmm10_xmm11_ymm1

Final state:
%rax/%rax: %rax_vrcpps_xmm_xmm
%rdx/%rdx: %rdx_vrcpps_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[127:0][127:0] ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[255:224]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[223:192]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[191:160]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[159:128]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[127:96]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[95:64]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[63:32]) ∘ approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[31:0]))))))))[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vrcpps %xmm3, %xmm1

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
vrcpps %ymm1, %ymm10
callq .move_128_256_xmm10_xmm11_ymm1
retq 

Initial state:
%ymm1: %ymm1_vmovss_xmm_xmm_xmm

State for specgen instruction: vrcpps %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[127:0][127:0] ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[255:224]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[223:192]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[191:160]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[159:128]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[127:96]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[95:64]) ∘ (approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[63:32]) ∘ approx_reciprocal_single((0x0₂₅₆[255:128] ∘ (%ymm2_vrcpps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vrcpps_xmm_xmm[127:0][63:0][63:0]))[31:0]))))))))[127:0][127:0]

Final state
%ymm1: 0x0₁₂₈ ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[127:96]) ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[95:64]) ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[63:32]) ∘ approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[31:0]))))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_vmovss_xmm_xmm_xmm
%rdx/%rdx: %rdx_vmovss_xmm_xmm_xmm

%xmm0: %ymm0_vmovss_xmm_xmm_xmm[127:0]
%xmm1: (0x0₁₂₈ ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[127:96]) ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[95:64]) ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[63:32]) ∘ approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[31:0])))))[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: %ymm0_vmovdqu_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqu_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm3

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_256_128_ymm3_xmm12_xmm13

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_256_xmm12_xmm13_ymm1

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: ((0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqu %xmm3, %xmm8

.target:
callq .move_128_064_xmm2_r10_r11
vzeroall 
callq .move_064_128_r10_r11_xmm3
callq .move_256_128_ymm3_xmm12_xmm13
callq .move_128_256_xmm12_xmm13_ymm1
retq 

Initial state:
%ymm8: %ymm8_vmovss_xmm_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_vmovss_xmm_xmm_xmm[127:0][31:0])

State for specgen instruction: vmovdqu %xmm2, %xmm1:
%ymm1: (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0]

Final state
%ymm8: 0x0₁₂₈ ∘ %ymm3_vmovss_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1

Final state:
%rax/%rax: %rax_vmovss_xmm_xmm_xmm
%rdx/%rdx: %rdx_vmovss_xmm_xmm_xmm

%xmm0: %ymm0_vmovss_xmm_xmm_xmm[127:0]
%xmm1: ((0x0₁₂₈ ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[127:96]) ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[95:64]) ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[63:32]) ∘ approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[31:0])))))[255:128] ∘ ((%ymm11_vmovss_xmm_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_vmovss_xmm_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_vmovss_xmm_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_vmovss_xmm_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_vmovss_xmm_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_vmovss_xmm_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ (0x0₁₂₈ ∘ %ymm3_vmovss_xmm_xmm_xmm[127:0])[127:0][31:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovss %xmm2, %xmm2, %xmm1

.target:
vrcpps %xmm3, %xmm1
callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
vmovdqu %xmm3, %xmm8
callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
retq 

Initial state:
%ymm1: %ymm1_vfmadd132ss_xmm_xmm_xmm

State for specgen instruction: vmovss %xmm3, %xmm2, %xmm1:
%ymm1: (0x0₁₂₈ ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[127:96]) ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[95:64]) ∘ (approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[63:32]) ∘ approx_reciprocal_single(%ymm3_vmovss_xmm_xmm_xmm[31:0])))))[255:128] ∘ ((%ymm11_vmovss_xmm_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_vmovss_xmm_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_vmovss_xmm_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_vmovss_xmm_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_vmovss_xmm_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_vmovss_xmm_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ (0x0₁₂₈ ∘ %ymm3_vmovss_xmm_xmm_xmm[127:0])[127:0][31:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (%ymm2_vfmadd132ss_xmm_xmm_xmm[127:32] ∘ vfmadd132_single(%ymm1_vfmadd132ss_xmm_xmm_xmm[31:0], %ymm2_vfmadd132ss_xmm_xmm_xmm[31:0], %ymm3_vfmadd132ss_xmm_xmm_xmm[31:0]))

=====================================
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vfmadd132ss_xmm_xmm_xmm
%rdx/%rdx: %rdx_vfmadd132ss_xmm_xmm_xmm

%xmm0: %ymm0_vfmadd132ss_xmm_xmm_xmm[127:0]
%xmm1: ((0x0₁₂₈ ∘ (%ymm2_vfmadd132ss_xmm_xmm_xmm[127:32] ∘ vfmadd132_single(%ymm1_vfmadd132ss_xmm_xmm_xmm[31:0], %ymm2_vfmadd132ss_xmm_xmm_xmm[31:0], %ymm3_vfmadd132ss_xmm_xmm_xmm[31:0])))[255:128] ∘ (%ymm1_vfmadd132ss_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm1_vfmadd132ss_xmm_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_movss_xmm_xmm
%rdx/%rdx: %rdx_movss_xmm_xmm

%xmm0: %ymm0_movss_xmm_xmm[127:0]
%xmm1: %ymm1_movss_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: %ymm0_vpmovzxdq_xmm_xmm[127:0]
%xmm1: %ymm1_vpmovzxdq_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_byte_5_of_ymm1_to_r9b

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm2

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_64_128_xmm8_xmm9_xmm1

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ ((0x0₂₅₆[255:128] ∘ (0x0₉₆ ∘ (0x0₂₅₆[255:128] ∘ ((%ymm2_vpmovzxdq_xmm_xmm[127:0][127:64][63:8] ∘ 0x0₂₅₆[47:40])[63:0] ∘ %ymm2_vpmovzxdq_xmm_xmm[127:0][63:0][63:0]))[127:0][63:32]))[127:0][63:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₉₆ ∘ (0x0₂₅₆[255:128] ∘ ((%ymm2_vpmovzxdq_xmm_xmm[127:0][127:64][63:8] ∘ 0x0₂₅₆[47:40])[63:0] ∘ %ymm2_vpmovzxdq_xmm_xmm[127:0][63:0][63:0]))[127:0][31:0]))[127:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vpmovzxdq %xmm2, %xmm8

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_byte_5_of_ymm1_to_r9b
callq .move_064_128_r8_r9_xmm2
callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
callq .move_64_128_xmm8_xmm9_xmm1
retq 

Initial state:
%ymm8: %ymm8_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][31:0])

State for specgen instruction: vpmovzxdq %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ ((0x0₂₅₆[255:128] ∘ (0x0₉₆ ∘ (0x0₂₅₆[255:128] ∘ ((%ymm2_vpmovzxdq_xmm_xmm[127:0][127:64][63:8] ∘ 0x0₂₅₆[47:40])[63:0] ∘ %ymm2_vpmovzxdq_xmm_xmm[127:0][63:0][63:0]))[127:0][63:32]))[127:0][63:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₉₆ ∘ (0x0₂₅₆[255:128] ∘ ((%ymm2_vpmovzxdq_xmm_xmm[127:0][127:64][63:8] ∘ 0x0₂₅₆[47:40])[63:0] ∘ %ymm2_vpmovzxdq_xmm_xmm[127:0][63:0][63:0]))[127:0][31:0]))[127:0][63:0])

Final state
%ymm8: 0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[31:0]))

=====================================
-------------------------------------
Getting base circuit for callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1

Final state:
%rax/%rax: %rax_movss_xmm_xmm
%rdx/%rdx: %rdx_movss_xmm_xmm

%xmm0: %ymm0_movss_xmm_xmm[127:0]
%xmm1: (%ymm1_movss_xmm_xmm[255:128] ∘ ((%ymm11_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ (0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[31:0])))[127:0][31:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for movss %xmm2, %xmm1

.target:
callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11
vpmovzxdq %xmm2, %xmm8
callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
retq 

Initial state:
%xmm1: ((0x0₁₂₈ ∘ (%ymm2_vfmadd132ss_xmm_xmm_xmm[127:32] ∘ vfmadd132_single(%ymm1_vfmadd132ss_xmm_xmm_xmm[31:0], %ymm2_vfmadd132ss_xmm_xmm_xmm[31:0], %ymm3_vfmadd132ss_xmm_xmm_xmm[31:0])))[255:128] ∘ (%ymm1_vfmadd132ss_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm1_vfmadd132ss_xmm_xmm_xmm[127:0][63:0][63:0]))[127:0]

State for specgen instruction: movss %xmm2, %xmm1:
%xmm1: (%ymm1_movss_xmm_xmm[255:128] ∘ ((%ymm11_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ (0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[31:0])))[127:0][31:0]))[127:0]

Final state
%xmm1: (((0x0₁₂₈ ∘ (%ymm2_vfmadd132ss_xmm_xmm_xmm[127:32] ∘ vfmadd132_single(%ymm1_vfmadd132ss_xmm_xmm_xmm[31:0], %ymm2_vfmadd132ss_xmm_xmm_xmm[31:0], %ymm3_vfmadd132ss_xmm_xmm_xmm[31:0])))[255:128] ∘ (%ymm1_vfmadd132ss_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm1_vfmadd132ss_xmm_xmm_xmm[127:0][63:0][63:0]))[255:128] ∘ (%ymm1_vfmadd132ss_xmm_xmm_xmm[127:32] ∘ vfmadd132_single(%ymm1_vfmadd132ss_xmm_xmm_xmm[31:0], %ymm2_vfmadd132ss_xmm_xmm_xmm[31:0], %ymm3_vfmadd132ss_xmm_xmm_xmm[31:0])))[127:0]

=====================================
=====================================
Computing circuit for vfmadd132ss %xmm3, %xmm2, %xmm1

.target:
vfmadd231ss %xmm3, %xmm1, %xmm2
callq .move_128_064_xmm1_r12_r13
vmovss %xmm2, %xmm2, %xmm1
callq .move_064_128_r12_r13_xmm1
movss %xmm2, %xmm1
retq 

Initial state:
%ymm1: %ymm1

State for specgen instruction: vfmadd132ss %xmm3, %xmm2, %xmm1:
%ymm1: ((0x0₁₂₈ ∘ (%ymm2_vfmadd132ss_xmm_xmm_xmm[127:32] ∘ vfmadd132_single(%ymm1_vfmadd132ss_xmm_xmm_xmm[31:0], %ymm2_vfmadd132ss_xmm_xmm_xmm[31:0], %ymm3_vfmadd132ss_xmm_xmm_xmm[31:0])))[255:128] ∘ (%ymm1_vfmadd132ss_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm1_vfmadd132ss_xmm_xmm_xmm[127:0][63:0][63:0]))[255:128] ∘ (%ymm1_vfmadd132ss_xmm_xmm_xmm[127:32] ∘ vfmadd132_single(%ymm1_vfmadd132ss_xmm_xmm_xmm[31:0], %ymm2_vfmadd132ss_xmm_xmm_xmm[31:0], %ymm3_vfmadd132ss_xmm_xmm_xmm[31:0]))

Final state
%ymm1: 0x0₁₂₈ ∘ (%ymm1[127:32] ∘ vfmadd132_single(%ymm1[31:0], %ymm2[31:0], %ymm3[31:0]))

=====================================
Circuits:

%ymm1  : 0x0₁₂₈ ∘ (%ymm1[127:32] ∘ vfmadd132_single(%ymm1[31:0], %ymm2[31:0], %ymm3[31:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/