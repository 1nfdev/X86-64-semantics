// Autogenerated using stratification.
requires "x86-configuration.k"

module VFMSUB132PD-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vfmsub132pd R1:Xmm, R2:Xmm, R3:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(getParentValue(R3, RSMap), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(getParentValue(R3, RSMap), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 192, 256), 53, 11) ) , 64))) )


)

    </regstate>
endmodule

module VFMSUB132PD-XMM-XMM-XMM-SEMANTICS
  imports VFMSUB132PD-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vfmsub132pd %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 %xmm3 }
must read:{ %xmm1 %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ fma }

Circuit:
circuit:vmovsd %xmm3, %xmm3, %xmm0         #  1     0     4      OPC=vmovsd_xmm_xmm_xmm
circuit:vmovapd %xmm2, %xmm7               #  2     0x4   4      OPC=vmovapd_xmm_xmm
circuit:vmaxss %xmm7, %xmm2, %xmm13        #  3     0x8   4      OPC=vmaxss_xmm_xmm_xmm
circuit:vmovups %xmm1, %xmm15              #  4     0xc   4      OPC=vmovups_xmm_xmm
circuit:vfmsub231pd %ymm0, %ymm15, %ymm13  #  5     0x10  5      OPC=vfmsub231pd_ymm_ymm_ymm
circuit:vmovupd %xmm13, %xmm1              #  6     0x15  5      OPC=vmovupd_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vfmsub132pd %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 %xmm3 }
  must read:       { %xmm1 %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { fma }

-------------------------------------
Getting base circuit for callq .move_128_64_xmm2_xmm8_xmm9

Final state:
%rax/%rax: %rax_vmovsd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vmovsd_xmm_xmm_xmm

%xmm0: %ymm0_vmovsd_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vmovsd_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: %ymm0_vmovapd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovapd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovapd %xmm3, %xmm13

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm13: %ymm13_vmovsd_xmm_xmm_xmm

State for specgen instruction: vmovapd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm13: 0x0₁₂₈ ∘ %ymm3_vmovsd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm3_r8_r9

Final state:
%rax/%rax: %rax_vpunpcklqdq_xmm_xmm_xmm
%rdx/%rdx: %rdx_vpunpcklqdq_xmm_xmm_xmm

%xmm0: %ymm0_vpunpcklqdq_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vpunpcklqdq_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vpunpcklqdq_xmm_xmm_xmm
%rdx/%rdx: %rdx_vpunpcklqdq_xmm_xmm_xmm

%xmm0: %ymm0_vpunpcklqdq_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vpunpcklqdq_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for movq %r8, %r11

Final state:
%r11/%r11: %ymm3_vpunpcklqdq_xmm_xmm_xmm[127:0][63:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm1

Final state:
%rax/%rax: %rax_vpunpcklqdq_xmm_xmm_xmm
%rdx/%rdx: %rdx_vpunpcklqdq_xmm_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm3_vpunpcklqdq_xmm_xmm_xmm[127:0][63:0][63:0] ∘ %ymm2_vpunpcklqdq_xmm_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vpunpcklqdq %xmm9, %xmm13, %xmm1

.target:
callq .move_128_064_xmm3_r8_r9
callq .move_128_064_xmm2_r10_r11
vzeroall 
movq %r8, %r11
callq .move_064_128_r10_r11_xmm1
retq 

Initial state:
%ymm1: %ymm1_vmovsd_xmm_xmm_xmm

State for specgen instruction: vpunpcklqdq %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm3_vpunpcklqdq_xmm_xmm_xmm[127:0][63:0][63:0] ∘ %ymm2_vpunpcklqdq_xmm_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (%ymm2_vmovsd_xmm_xmm_xmm[127:64] ∘ %ymm3_vmovsd_xmm_xmm_xmm[63:0])

=====================================
=====================================
Computing circuit for vmovsd %xmm3, %xmm3, %xmm0

.target:
callq .move_128_64_xmm2_xmm8_xmm9
vmovapd %xmm3, %xmm13
vpunpcklqdq %xmm9, %xmm13, %xmm1
retq 

Initial state:
%ymm0: %ymm0_vfmsub132pd_xmm_xmm_xmm

State for specgen instruction: vmovsd %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₁₂₈ ∘ (%ymm2_vmovsd_xmm_xmm_xmm[127:64] ∘ %ymm3_vmovsd_xmm_xmm_xmm[63:0])

Final state
%ymm0: 0x0₁₂₈ ∘ %ymm3_vfmsub132pd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: %ymm0_vmovapd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovapd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovapd %xmm2, %xmm7

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm7: %ymm7_vfmsub132pd_xmm_xmm_xmm

State for specgen instruction: vmovapd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm7: 0x0₁₂₈ ∘ %ymm2_vfmsub132pd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovupd_xmm_xmm
%rdx/%rdx: %rdx_vmovupd_xmm_xmm

%xmm0: %ymm0_vmovupd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovupd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovupd_xmm_xmm
%rdx/%rdx: %rdx_vmovupd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovupd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovupd %xmm2, %xmm1

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm1: %ymm1_vmaxss_xmm_xmm_xmm

State for specgen instruction: vmovupd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovupd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ %ymm2_vmaxss_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_032_xmm1_xmm4_xmm5_xmm6_xmm7

Final state:
%rax/%rax: %rax_vmaxss_xmm_xmm_xmm
%rdx/%rdx: %rdx_vmaxss_xmm_xmm_xmm

%xmm0: %ymm0_vmaxss_xmm_xmm_xmm[127:0]
%xmm1: (0x0₁₂₈ ∘ %ymm2_vmaxss_xmm_xmm_xmm[127:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: %ymm0_vmovdqa_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqa %xmm3, %xmm3

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm3: %ymm3_vmaxps_xmm_xmm_xmm

State for specgen instruction: vmovdqa %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm3: 0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: %ymm0_vmovdqa_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqa %xmm2, %xmm11

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm11: %ymm11_vmaxps_xmm_xmm_xmm

State for specgen instruction: vmovdqa %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm11: 0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for vmaxps %ymm3, %ymm11, %ymm1

Final state:
%ymm1: (maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[255:224])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[255:224] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[255:224]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[223:192])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[223:192] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[223:192]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[191:160])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[191:160] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[191:160]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[159:128])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[159:128] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[159:128]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[127:96])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[127:96] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[127:96]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[95:64])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[95:64] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[95:64]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[63:32])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[63:32] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[63:32]) ∘ (maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[31:0])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[31:0] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[31:0])))))))

-------------------------------------
=====================================
Computing circuit for vmaxps %xmm3, %xmm4, %xmm13

.target:
vmovdqa %xmm3, %xmm3
vmovdqa %xmm2, %xmm11
vmaxps %ymm3, %ymm11, %ymm1
retq 

Initial state:
%ymm13: %ymm13_vmaxss_xmm_xmm_xmm

State for specgen instruction: vmaxps %xmm3, %xmm2, %xmm1:
%ymm1: (maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[255:224])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[255:224] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[255:224]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[223:192])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[223:192] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[223:192]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[191:160])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[191:160] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[191:160]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[159:128])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[159:128] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[159:128]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[127:96])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[127:96] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[127:96]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[95:64])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[95:64] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[95:64]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[63:32])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[63:32] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[63:32]) ∘ (maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[31:0])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[31:0] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[31:0])))))))

Final state
%ymm13: 0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((maxcmp_single(0x0₃₂, %ymm3_vmaxss_xmm_xmm_xmm[127:96]) = 0x1₁ ? 0x0₃₂ : %ymm3_vmaxss_xmm_xmm_xmm[127:96]) ∘ ((maxcmp_single(0x0₃₂, %ymm3_vmaxss_xmm_xmm_xmm[95:64]) = 0x1₁ ? 0x0₃₂ : %ymm3_vmaxss_xmm_xmm_xmm[95:64]) ∘ ((maxcmp_single(0x0₃₂, %ymm3_vmaxss_xmm_xmm_xmm[63:32]) = 0x1₁ ? 0x0₃₂ : %ymm3_vmaxss_xmm_xmm_xmm[63:32]) ∘ (maxcmp_single(%ymm2_vmaxss_xmm_xmm_xmm[31:0], %ymm3_vmaxss_xmm_xmm_xmm[31:0]) = 0x1₁ ? %ymm2_vmaxss_xmm_xmm_xmm[31:0] : %ymm3_vmaxss_xmm_xmm_xmm[31:0])))))))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_movss_xmm_xmm
%rdx/%rdx: %rdx_movss_xmm_xmm

%xmm0: %ymm0_movss_xmm_xmm[127:0]
%xmm1: %ymm1_movss_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: %ymm0_vpmovzxdq_xmm_xmm[127:0]
%xmm1: %ymm1_vpmovzxdq_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_byte_5_of_ymm1_to_r9b

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm2

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_64_128_xmm8_xmm9_xmm1

Final state:
%rax/%rax: %rax_vpmovzxdq_xmm_xmm
%rdx/%rdx: %rdx_vpmovzxdq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ ((0x0₂₅₆[255:128] ∘ (0x0₉₆ ∘ (0x0₂₅₆[255:128] ∘ ((%ymm2_vpmovzxdq_xmm_xmm[127:0][127:64][63:8] ∘ 0x0₂₅₆[47:40])[63:0] ∘ %ymm2_vpmovzxdq_xmm_xmm[127:0][63:0][63:0]))[127:0][63:32]))[127:0][63:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₉₆ ∘ (0x0₂₅₆[255:128] ∘ ((%ymm2_vpmovzxdq_xmm_xmm[127:0][127:64][63:8] ∘ 0x0₂₅₆[47:40])[63:0] ∘ %ymm2_vpmovzxdq_xmm_xmm[127:0][63:0][63:0]))[127:0][31:0]))[127:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vpmovzxdq %xmm2, %xmm8

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_byte_5_of_ymm1_to_r9b
callq .move_064_128_r8_r9_xmm2
callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
callq .move_64_128_xmm8_xmm9_xmm1
retq 

Initial state:
%ymm8: %ymm8_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][31:0])

State for specgen instruction: vpmovzxdq %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ ((0x0₂₅₆[255:128] ∘ (0x0₉₆ ∘ (0x0₂₅₆[255:128] ∘ ((%ymm2_vpmovzxdq_xmm_xmm[127:0][127:64][63:8] ∘ 0x0₂₅₆[47:40])[63:0] ∘ %ymm2_vpmovzxdq_xmm_xmm[127:0][63:0][63:0]))[127:0][63:32]))[127:0][63:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₉₆ ∘ (0x0₂₅₆[255:128] ∘ ((%ymm2_vpmovzxdq_xmm_xmm[127:0][127:64][63:8] ∘ 0x0₂₅₆[47:40])[63:0] ∘ %ymm2_vpmovzxdq_xmm_xmm[127:0][63:0][63:0]))[127:0][31:0]))[127:0][63:0])

Final state
%ymm8: 0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[31:0]))

=====================================
-------------------------------------
Getting base circuit for callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1

Final state:
%rax/%rax: %rax_movss_xmm_xmm
%rdx/%rdx: %rdx_movss_xmm_xmm

%xmm0: %ymm0_movss_xmm_xmm[127:0]
%xmm1: (%ymm1_movss_xmm_xmm[255:128] ∘ ((%ymm11_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ (0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[31:0])))[127:0][31:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for movss %xmm13, %xmm1

.target:
callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11
vpmovzxdq %xmm2, %xmm8
callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
retq 

Initial state:
%xmm1: (0x0₁₂₈ ∘ %ymm2_vmaxss_xmm_xmm_xmm[127:0])[127:0]

State for specgen instruction: movss %xmm2, %xmm1:
%xmm1: (%ymm1_movss_xmm_xmm[255:128] ∘ ((%ymm11_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_movss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_movss_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ (0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[63:32] ∘ (0x0₃₂ ∘ %ymm2_movss_xmm_xmm[31:0])))[127:0][31:0]))[127:0]

Final state
%xmm1: ((0x0₁₂₈ ∘ %ymm2_vmaxss_xmm_xmm_xmm[127:0])[255:128] ∘ (%ymm2_vmaxss_xmm_xmm_xmm[127:32] ∘ (maxcmp_single(%ymm2_vmaxss_xmm_xmm_xmm[31:0], %ymm3_vmaxss_xmm_xmm_xmm[31:0]) = 0x1₁ ? %ymm2_vmaxss_xmm_xmm_xmm[31:0] : %ymm3_vmaxss_xmm_xmm_xmm[31:0])))[127:0]

=====================================
=====================================
Computing circuit for vmaxss %xmm7, %xmm2, %xmm13

.target:
vmovupd %xmm2, %xmm1
callq .move_128_032_xmm1_xmm4_xmm5_xmm6_xmm7
vmaxps %xmm3, %xmm4, %xmm13
movss %xmm13, %xmm1
retq 

Initial state:
%ymm13: %ymm13_vfmsub132pd_xmm_xmm_xmm

State for specgen instruction: vmaxss %xmm3, %xmm2, %xmm1:
%ymm1: (0x0₁₂₈ ∘ %ymm2_vmaxss_xmm_xmm_xmm[127:0])[255:128] ∘ (%ymm2_vmaxss_xmm_xmm_xmm[127:32] ∘ (maxcmp_single(%ymm2_vmaxss_xmm_xmm_xmm[31:0], %ymm3_vmaxss_xmm_xmm_xmm[31:0]) = 0x1₁ ? %ymm2_vmaxss_xmm_xmm_xmm[31:0] : %ymm3_vmaxss_xmm_xmm_xmm[31:0]))

Final state
%ymm13: 0x0₁₂₈ ∘ %ymm2_vfmsub132pd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovups_xmm_xmm
%rdx/%rdx: %rdx_vmovups_xmm_xmm

%xmm0: %ymm0_vmovups_xmm_xmm[127:0]
%xmm1: %ymm1_vmovups_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovups_xmm_xmm
%rdx/%rdx: %rdx_vmovups_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovups_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovups_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovups %xmm1, %xmm15

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm15: %ymm15_vfmsub132pd_xmm_xmm_xmm

State for specgen instruction: vmovups %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovups_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovups_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm15: 0x0₁₂₈ ∘ %ymm1_vfmsub132pd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for vfmsub132pd %ymm3, %ymm1, %ymm2

Final state:
%ymm2: vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0])))

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vfmsub231pd_ymm_ymm_ymm
%rdx/%rdx: %rdx_vfmsub231pd_ymm_ymm_ymm

%xmm0: %ymm0_vfmsub231pd_ymm_ymm_ymm[127:0]
%xmm1: %ymm1_vfmsub231pd_ymm_ymm_ymm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vminpd %ymm2, %ymm2, %ymm1

Final state:
%ymm1: (mincmp_double((vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[255:192], (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[255:192])[0:0] = 0x1₁ ? (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[255:192] : (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[255:192]) ∘ ((mincmp_double((vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[191:128], (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[191:128])[0:0] = 0x1₁ ? (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[191:128] : (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[191:128]) ∘ ((mincmp_double((vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[127:64], (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[127:64])[0:0] = 0x1₁ ? (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[127:64] : (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[127:64]) ∘ (mincmp_double((vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[63:0], (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[63:0])[0:0] = 0x1₁ ? (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[63:0] : (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[63:0])))

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm1

Final state:
%rax/%rax: %rax_vfmsub231pd_ymm_ymm_ymm
%rdx/%rdx: %rdx_vfmsub231pd_ymm_ymm_ymm

%xmm0: %ymm0_vfmsub231pd_ymm_ymm_ymm[127:0]
%xmm1: (((mincmp_double((vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[255:192], (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[255:192])[0:0] = 0x1₁ ? (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[255:192] : (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[255:192]) ∘ ((mincmp_double((vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[191:128], (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[191:128])[0:0] = 0x1₁ ? (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[191:128] : (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[191:128]) ∘ ((mincmp_double((vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[127:64], (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[127:64])[0:0] = 0x1₁ ? (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[127:64] : (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[127:64]) ∘ (mincmp_double((vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[63:0], (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[63:0])[0:0] = 0x1₁ ? (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[63:0] : (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[63:0]))))[255:128] ∘ ((vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[127:0][127:64][63:0] ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vfmsub231pd %ymm0, %ymm15, %ymm13

.target:
vfmsub132pd %ymm3, %ymm1, %ymm2
callq .move_128_064_xmm2_r10_r11
vminpd %ymm2, %ymm2, %ymm1
callq .move_064_128_r10_r11_xmm1
retq 

Initial state:
%ymm13: 0x0₁₂₈ ∘ %ymm2_vfmsub132pd_xmm_xmm_xmm[127:0]

State for specgen instruction: vfmsub231pd %ymm3, %ymm2, %ymm1:
%ymm1: ((mincmp_double((vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[255:192], (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[255:192])[0:0] = 0x1₁ ? (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[255:192] : (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[255:192]) ∘ ((mincmp_double((vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[191:128], (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[191:128])[0:0] = 0x1₁ ? (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[191:128] : (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[191:128]) ∘ ((mincmp_double((vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[127:64], (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[127:64])[0:0] = 0x1₁ ? (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[127:64] : (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[127:64]) ∘ (mincmp_double((vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[63:0], (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[63:0])[0:0] = 0x1₁ ? (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[63:0] : (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[63:0]))))[255:128] ∘ ((vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[127:0][127:64][63:0] ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm1_vfmsub231pd_ymm_ymm_ymm[255:192], %ymm3_vfmsub231pd_ymm_ymm_ymm[255:192]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm1_vfmsub231pd_ymm_ymm_ymm[191:128], %ymm3_vfmsub231pd_ymm_ymm_ymm[191:128]) ∘ (vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm1_vfmsub231pd_ymm_ymm_ymm[127:64], %ymm3_vfmsub231pd_ymm_ymm_ymm[127:64]) ∘ vfmsub132_double(%ymm2_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm1_vfmsub231pd_ymm_ymm_ymm[63:0], %ymm3_vfmsub231pd_ymm_ymm_ymm[63:0]))))[127:0][63:0][63:0])

Final state
%ymm13: vfmsub132_double(0x0₆₄, 0x0₆₄, 0x0₆₄) ∘ vfmsub132_double(0x0₆₄, 0x0₆₄, 0x0₆₄) ∘ (vfmsub132_double(%ymm1_vfmsub132pd_xmm_xmm_xmm[127:64], %ymm2_vfmsub132pd_xmm_xmm_xmm[127:64], %ymm3_vfmsub132pd_xmm_xmm_xmm[127:64]) ∘ vfmsub132_double(%ymm1_vfmsub132pd_xmm_xmm_xmm[63:0], %ymm2_vfmsub132pd_xmm_xmm_xmm[63:0], %ymm3_vfmsub132pd_xmm_xmm_xmm[63:0]))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovupd_xmm_xmm
%rdx/%rdx: %rdx_vmovupd_xmm_xmm

%xmm0: %ymm0_vmovupd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovupd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovupd_xmm_xmm
%rdx/%rdx: %rdx_vmovupd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovupd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovupd %xmm13, %xmm1

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm1: %ymm1_vfmsub132pd_xmm_xmm_xmm

State for specgen instruction: vmovupd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovupd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (vfmsub132_double(%ymm1_vfmsub132pd_xmm_xmm_xmm[127:64], %ymm2_vfmsub132pd_xmm_xmm_xmm[127:64], %ymm3_vfmsub132pd_xmm_xmm_xmm[127:64]) ∘ vfmsub132_double(%ymm1_vfmsub132pd_xmm_xmm_xmm[63:0], %ymm2_vfmsub132pd_xmm_xmm_xmm[63:0], %ymm3_vfmsub132pd_xmm_xmm_xmm[63:0]))

=====================================
=====================================
Computing circuit for vfmsub132pd %xmm3, %xmm2, %xmm1

.target:
vmovsd %xmm3, %xmm3, %xmm0
vmovapd %xmm2, %xmm7
vmaxss %xmm7, %xmm2, %xmm13
vmovups %xmm1, %xmm15
vfmsub231pd %ymm0, %ymm15, %ymm13
vmovupd %xmm13, %xmm1
retq 

Initial state:
%ymm1: %ymm1

State for specgen instruction: vfmsub132pd %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₁₂₈ ∘ (vfmsub132_double(%ymm1_vfmsub132pd_xmm_xmm_xmm[127:64], %ymm2_vfmsub132pd_xmm_xmm_xmm[127:64], %ymm3_vfmsub132pd_xmm_xmm_xmm[127:64]) ∘ vfmsub132_double(%ymm1_vfmsub132pd_xmm_xmm_xmm[63:0], %ymm2_vfmsub132pd_xmm_xmm_xmm[63:0], %ymm3_vfmsub132pd_xmm_xmm_xmm[63:0]))

Final state
%ymm1: 0x0₁₂₈ ∘ (vfmsub132_double(%ymm1[127:64], %ymm2[127:64], %ymm3[127:64]) ∘ vfmsub132_double(%ymm1[63:0], %ymm2[63:0], %ymm3[63:0]))

=====================================
Circuits:

%ymm1  : 0x0₁₂₈ ∘ (vfmsub132_double(%ymm1[127:64], %ymm2[127:64], %ymm3[127:64]) ∘ vfmsub132_double(%ymm1[63:0], %ymm2[63:0], %ymm3[63:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/