// Autogenerated using stratification.
requires "x86-configuration.k"

module VFNMADD132PD-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vfnmadd132pd R1:Xmm, R2:Xmm, R3:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 128, 192), 53, 11)  -Float  negateFloat(0e+00) )  -Float  negateFloat( ( MInt2Float(extractMInt(getParentValue(R3, RSMap), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 128, 192), 53, 11) ) ) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 192, 256), 53, 11)  -Float  negateFloat(0e+00) )  -Float  negateFloat( ( MInt2Float(extractMInt(getParentValue(R3, RSMap), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 192, 256), 53, 11) ) ) ) , 64))) )


)

    </regstate>
endmodule

module VFNMADD132PD-XMM-XMM-XMM-SEMANTICS
  imports VFNMADD132PD-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vfnmadd132pd %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 %xmm3 }
must read:{ %xmm1 %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ fma }

Circuit:
circuit:callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11  #  1     0     5      OPC=callq_label
circuit:vpxor %xmm12, %xmm12, %xmm9                     #  2     0x5   5      OPC=vpxor_xmm_xmm_xmm
circuit:vfnmsub231pd %xmm10, %xmm9, %xmm2               #  3     0xa   5      OPC=vfnmsub231pd_xmm_xmm_xmm
circuit:vfnmsub132pd %xmm3, %xmm2, %xmm1                #  4     0xf   5      OPC=vfnmsub132pd_xmm_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vfnmadd132pd %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 %xmm3 }
  must read:       { %xmm1 %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { fma }

-------------------------------------
Getting base circuit for callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_vfnmadd132pd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vfnmadd132pd_xmm_xmm_xmm

%xmm0: %ymm0_vfnmadd132pd_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vfnmadd132pd_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vpxor_xmm_xmm_xmm
%rdx/%rdx: %rdx_vpxor_xmm_xmm_xmm

%xmm0: %ymm0_vpxor_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vpxor_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: %ymm0_vmovdqa_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqa %xmm3, %xmm1

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm1: %ymm1_vpxor_xmm_xmm_xmm

State for specgen instruction: vmovdqa %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm1_r8_r9

Final state:
%rax/%rax: %rax_vpxor_xmm_xmm_xmm
%rdx/%rdx: %rdx_vpxor_xmm_xmm_xmm

%xmm0: %ymm0_vpxor_xmm_xmm_xmm[127:0]
%xmm1: (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for xorq %r8, %r12

Final state:
%r12/%r12: %ymm2_vpxor_xmm_xmm_xmm[127:0][63:0] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][63:0]

%cf: false
%pf: !((%ymm2_vpxor_xmm_xmm_xmm[127:0][63:0] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][63:0])[7:0][0:0] = 0x1₁ ⊕ (%ymm2_vpxor_xmm_xmm_xmm[127:0][63:0] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][63:0])[7:0][1:1] = 0x1₁ ⊕ (%ymm2_vpxor_xmm_xmm_xmm[127:0][63:0] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][63:0])[7:0][2:2] = 0x1₁ ⊕ (%ymm2_vpxor_xmm_xmm_xmm[127:0][63:0] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][63:0])[7:0][3:3] = 0x1₁ ⊕ (%ymm2_vpxor_xmm_xmm_xmm[127:0][63:0] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][63:0])[7:0][4:4] = 0x1₁ ⊕ (%ymm2_vpxor_xmm_xmm_xmm[127:0][63:0] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][63:0])[7:0][5:5] = 0x1₁ ⊕ (%ymm2_vpxor_xmm_xmm_xmm[127:0][63:0] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][63:0])[7:0][6:6] = 0x1₁ ⊕ (%ymm2_vpxor_xmm_xmm_xmm[127:0][63:0] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][63:0])[7:0][7:7] = 0x1₁)
%zf: (%ymm2_vpxor_xmm_xmm_xmm[127:0][63:0] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][63:0]) = 0x0₆₄
%sf: (%ymm2_vpxor_xmm_xmm_xmm[127:0][63:0] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][63:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for xorq %r9, %r13

Final state:
%r13/%r13: %ymm2_vpxor_xmm_xmm_xmm[127:0][127:64] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][127:64]

%cf: false
%pf: !((%ymm2_vpxor_xmm_xmm_xmm[127:0][127:64] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][127:64])[7:0][0:0] = 0x1₁ ⊕ (%ymm2_vpxor_xmm_xmm_xmm[127:0][127:64] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][127:64])[7:0][1:1] = 0x1₁ ⊕ (%ymm2_vpxor_xmm_xmm_xmm[127:0][127:64] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][127:64])[7:0][2:2] = 0x1₁ ⊕ (%ymm2_vpxor_xmm_xmm_xmm[127:0][127:64] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][127:64])[7:0][3:3] = 0x1₁ ⊕ (%ymm2_vpxor_xmm_xmm_xmm[127:0][127:64] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][127:64])[7:0][4:4] = 0x1₁ ⊕ (%ymm2_vpxor_xmm_xmm_xmm[127:0][127:64] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][127:64])[7:0][5:5] = 0x1₁ ⊕ (%ymm2_vpxor_xmm_xmm_xmm[127:0][127:64] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][127:64])[7:0][6:6] = 0x1₁ ⊕ (%ymm2_vpxor_xmm_xmm_xmm[127:0][127:64] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][127:64])[7:0][7:7] = 0x1₁)
%zf: (%ymm2_vpxor_xmm_xmm_xmm[127:0][127:64] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][127:64]) = 0x0₆₄
%sf: (%ymm2_vpxor_xmm_xmm_xmm[127:0][127:64] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][127:64])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vpxor_xmm_xmm_xmm
%rdx/%rdx: %rdx_vpxor_xmm_xmm_xmm

%xmm0: %ymm0_vpxor_xmm_xmm_xmm[127:0]
%xmm1: ((0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[255:128] ∘ ((%ymm2_vpxor_xmm_xmm_xmm[127:0][127:64] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][127:64])[63:0] ∘ (%ymm2_vpxor_xmm_xmm_xmm[127:0][63:0] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][63:0])[63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vpxor %xmm12, %xmm12, %xmm9

.target:
callq .move_128_064_xmm2_r12_r13
vmovdqa %xmm3, %xmm1
callq .move_128_064_xmm1_r8_r9
xorq %r8, %r12
xorq %r9, %r13
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm9: %ymm9_vfnmadd132pd_xmm_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_vfnmadd132pd_xmm_xmm_xmm[127:0][63:32])

State for specgen instruction: vpxor %xmm3, %xmm2, %xmm1:
%ymm1: (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[255:128] ∘ ((%ymm2_vpxor_xmm_xmm_xmm[127:0][127:64] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][127:64])[63:0] ∘ (%ymm2_vpxor_xmm_xmm_xmm[127:0][63:0] ⊕ (0x0₁₂₈ ∘ %ymm3_vpxor_xmm_xmm_xmm[127:0])[127:0][63:0])[63:0])

Final state
%ymm9: 0x0₁₂₈ ∘ (0x0₆₄ ∘ 0x0₆₄)

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm3_r10_r11

Final state:
%rax/%rax: %rax_vorpd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vorpd_xmm_xmm_xmm

%xmm0: %ymm0_vorpd_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vorpd_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vorpd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vorpd_xmm_xmm_xmm

%xmm0: %ymm0_vorpd_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vorpd_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for orq %r9, %r11

Final state:
%r11/%r11: %ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64]

%cf: false
%pf: !((%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][0:0] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][1:1] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][2:2] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][3:3] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][4:4] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][5:5] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][6:6] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][7:7] = 0x1₁)
%zf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64]) = 0x0₆₄
%sf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for orq %r8, %r10

Final state:
%r10/%r10: %ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0]

%cf: false
%pf: !((%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][0:0] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][1:1] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][2:2] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][3:3] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][4:4] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][5:5] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][6:6] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][7:7] = 0x1₁)
%zf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0]) = 0x0₆₄
%sf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm1

Final state:
%rax/%rax: %rax_vorpd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vorpd_xmm_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ ((%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[63:0] ∘ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vorpd %xmm3, %xmm3, %xmm6

.target:
callq .move_128_064_xmm3_r10_r11
callq .move_128_064_xmm2_r8_r9
vzeroall 
orq %r9, %r11
orq %r8, %r10
callq .move_064_128_r10_r11_xmm1
retq 

Initial state:
%ymm6: %ymm6_vfnmsub231pd_xmm_xmm_xmm

State for specgen instruction: vorpd %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ ((%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[63:0] ∘ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[63:0])

Final state
%ymm6: 0x0₁₂₈ ∘ %ymm3_vfnmsub231pd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: %ymm0_vmovapd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovapd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovapd %xmm1, %xmm3

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm3: %ymm3_vfnmsub231pd_xmm_xmm_xmm

State for specgen instruction: vmovapd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm3: 0x0₁₂₈ ∘ %ymm1_vfnmsub231pd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_032_xmm2_xmm4_xmm5_xmm6_xmm7

Final state:
%rax/%rax: %rax_movaps_xmm_xmm
%rdx/%rdx: %rdx_movaps_xmm_xmm

%xmm0: %ymm0_movaps_xmm_xmm[127:0]
%xmm1: %ymm1_movaps_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_128_xmm4_xmm5_xmm6_xmm7_xmm1

Final state:
%rax/%rax: %rax_movaps_xmm_xmm
%rdx/%rdx: %rdx_movaps_xmm_xmm

%xmm0: %ymm0_movaps_xmm_xmm[127:0]
%xmm1: (%ymm1_movaps_xmm_xmm[255:128] ∘ ((%ymm7_movaps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_movaps_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm6_movaps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_movaps_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm5_movaps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_movaps_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ (%ymm4_movaps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_movaps_xmm_xmm[127:0][31:0]))[127:0][31:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for movaps %xmm6, %xmm1

.target:
callq .move_128_032_xmm2_xmm4_xmm5_xmm6_xmm7
callq .move_032_128_xmm4_xmm5_xmm6_xmm7_xmm1
retq 

Initial state:
%xmm1: %ymm1_vfnmsub231pd_xmm_xmm_xmm[127:0]

State for specgen instruction: movaps %xmm2, %xmm1:
%xmm1: (%ymm1_movaps_xmm_xmm[255:128] ∘ ((%ymm7_movaps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_movaps_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm6_movaps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_movaps_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm5_movaps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_movaps_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ (%ymm4_movaps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm2_movaps_xmm_xmm[127:0][31:0]))[127:0][31:0]))[127:0]

Final state
%xmm1: (%ymm1_vfnmsub231pd_xmm_xmm_xmm[255:128] ∘ %ymm3_vfnmsub231pd_xmm_xmm_xmm[127:0])[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: %ymm0_vmovapd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovapd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovapd %xmm3, %xmm14

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm14: %ymm14_vfnmsub132pd_xmm_xmm_xmm

State for specgen instruction: vmovapd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm14: 0x0₁₂₈ ∘ %ymm3_vfnmsub132pd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: %ymm0_vmovdqu_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqu_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm3

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_256_128_ymm3_xmm12_xmm13

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_256_xmm12_xmm13_ymm1

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: ((0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqu %xmm2, %xmm8

.target:
callq .move_128_064_xmm2_r10_r11
vzeroall 
callq .move_064_128_r10_r11_xmm3
callq .move_256_128_ymm3_xmm12_xmm13
callq .move_128_256_xmm12_xmm13_ymm1
retq 

Initial state:
%ymm8: %ymm8_vfnmsub132pd_xmm_xmm_xmm

State for specgen instruction: vmovdqu %xmm2, %xmm1:
%ymm1: (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0]

Final state
%ymm8: 0x0₁₂₈ ∘ %ymm2_vfnmsub132pd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: %ymm0_vmovdqu_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqu_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm3

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_256_128_ymm3_xmm12_xmm13

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_256_xmm12_xmm13_ymm1

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: ((0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqu %xmm2, %xmm1

.target:
callq .move_128_064_xmm2_r10_r11
vzeroall 
callq .move_064_128_r10_r11_xmm3
callq .move_256_128_ymm3_xmm12_xmm13
callq .move_128_256_xmm12_xmm13_ymm1
retq 

Initial state:
%ymm1: %ymm1_vminss_xmm_xmm_xmm

State for specgen instruction: vmovdqu %xmm2, %xmm1:
%ymm1: (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0]

Final state
%ymm1: 0x0₁₂₈ ∘ %ymm2_vminss_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_minss_xmm_xmm
%rdx/%rdx: %rdx_minss_xmm_xmm

%xmm0: %ymm0_minss_xmm_xmm[127:0]
%xmm1: %ymm1_minss_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_032_xmm2_xmm4_xmm5_xmm6_xmm7

Final state:
%rax/%rax: %rax_minss_xmm_xmm
%rdx/%rdx: %rdx_minss_xmm_xmm

%xmm0: %ymm0_minss_xmm_xmm[127:0]
%xmm1: %ymm1_minss_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: %ymm0_vmovdqa_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqa %xmm3, %xmm1

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm1: %ymm1_vminps_xmm_xmm_xmm

State for specgen instruction: vmovdqa %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: %ymm0_vmovdqu_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqu_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm3

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_256_128_ymm3_xmm12_xmm13

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_256_xmm12_xmm13_ymm1

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: ((0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqu %xmm2, %xmm14

.target:
callq .move_128_064_xmm2_r10_r11
vzeroall 
callq .move_064_128_r10_r11_xmm3
callq .move_256_128_ymm3_xmm12_xmm13
callq .move_128_256_xmm12_xmm13_ymm1
retq 

Initial state:
%ymm14: %ymm14_vminps_xmm_xmm_xmm

State for specgen instruction: vmovdqu %xmm2, %xmm1:
%ymm1: (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0]

Final state
%ymm14: 0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for vminps %ymm1, %ymm14, %ymm1

Final state:
%ymm1: (mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[255:224])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[255:224] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[255:224]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[223:192])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[223:192] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[223:192]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[191:160])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[191:160] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[191:160]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[159:128])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[159:128] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[159:128]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[127:96])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[127:96] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[127:96]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[95:64])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[95:64] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[95:64]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[63:32])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[63:32] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[63:32]) ∘ (mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[31:0])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[31:0] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[31:0])))))))

-------------------------------------
=====================================
Computing circuit for vminps %xmm2, %xmm1, %xmm2

.target:
vmovdqa %xmm3, %xmm1
vmovdqu %xmm2, %xmm14
vminps %ymm1, %ymm14, %ymm1
retq 

Initial state:
%ymm2: %ymm2_minps_xmm_xmm

State for specgen instruction: vminps %xmm3, %xmm2, %xmm1:
%ymm1: (mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[255:224])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[255:224] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[255:224]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[223:192])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[223:192] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[223:192]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[191:160])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[191:160] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[191:160]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[159:128])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[159:128] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[159:128]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[127:96])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[127:96] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[127:96]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[95:64])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[95:64] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[95:64]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[63:32])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[63:32] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[63:32]) ∘ (mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[31:0])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[31:0] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[31:0])))))))

Final state
%ymm2: 0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0])))))))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_minps_xmm_xmm
%rdx/%rdx: %rdx_minps_xmm_xmm

%xmm0: %ymm0_minps_xmm_xmm[127:0]
%xmm1: %ymm1_minps_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1

Final state:
%rax/%rax: %rax_minps_xmm_xmm
%rdx/%rdx: %rdx_minps_xmm_xmm

%xmm0: %ymm0_minps_xmm_xmm[127:0]
%xmm1: (%ymm1_minps_xmm_xmm[255:128] ∘ ((%ymm11_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][63:32]))[127:0][31:0] ∘ (%ymm8_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][31:0]))[127:0][31:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for minps %xmm4, %xmm8

.target:
vminps %xmm2, %xmm1, %xmm2
callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
retq 

Initial state:
%xmm8: (%ymm8_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][31:0]))[127:0]

State for specgen instruction: minps %xmm2, %xmm1:
%xmm1: (%ymm1_minps_xmm_xmm[255:128] ∘ ((%ymm11_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][63:32]))[127:0][31:0] ∘ (%ymm8_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][31:0]))[127:0][31:0]))[127:0]

Final state
%xmm8: ((%ymm8_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][31:0]))[255:128] ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (mincmp_single(%ymm1_minss_xmm_xmm[31:0], %ymm2_minss_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minss_xmm_xmm[31:0] : %ymm2_minss_xmm_xmm[31:0])))))[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1

Final state:
%rax/%rax: %rax_minss_xmm_xmm
%rdx/%rdx: %rdx_minss_xmm_xmm

%xmm0: %ymm0_minss_xmm_xmm[127:0]
%xmm1: (%ymm1_minss_xmm_xmm[255:128] ∘ ((%ymm11_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ ((%ymm8_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][31:0]))[255:128] ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (mincmp_single(%ymm1_minss_xmm_xmm[31:0], %ymm2_minss_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minss_xmm_xmm[31:0] : %ymm2_minss_xmm_xmm[31:0])))))[127:0][31:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for minss %xmm3, %xmm1

.target:
callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11
callq .move_128_032_xmm2_xmm4_xmm5_xmm6_xmm7
minps %xmm4, %xmm8
callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
retq 

Initial state:
%xmm1: (0x0₁₂₈ ∘ %ymm2_vminss_xmm_xmm_xmm[127:0])[127:0]

State for specgen instruction: minss %xmm2, %xmm1:
%xmm1: (%ymm1_minss_xmm_xmm[255:128] ∘ ((%ymm11_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ ((%ymm8_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][31:0]))[255:128] ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (mincmp_single(%ymm1_minss_xmm_xmm[31:0], %ymm2_minss_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minss_xmm_xmm[31:0] : %ymm2_minss_xmm_xmm[31:0])))))[127:0][31:0]))[127:0]

Final state
%xmm1: ((0x0₁₂₈ ∘ %ymm2_vminss_xmm_xmm_xmm[127:0])[255:128] ∘ (%ymm2_vminss_xmm_xmm_xmm[127:32] ∘ (mincmp_single(%ymm2_vminss_xmm_xmm_xmm[31:0], %ymm3_vminss_xmm_xmm_xmm[31:0]) = 0x1₁ ? %ymm2_vminss_xmm_xmm_xmm[31:0] : %ymm3_vminss_xmm_xmm_xmm[31:0])))[127:0]

=====================================
=====================================
Computing circuit for vminss %xmm1, %xmm1, %xmm1

.target:
vmovdqu %xmm2, %xmm1
minss %xmm3, %xmm1
retq 

Initial state:
%ymm1: %ymm1_vfnmsub132pd_xmm_xmm_xmm

State for specgen instruction: vminss %xmm3, %xmm2, %xmm1:
%ymm1: (0x0₁₂₈ ∘ %ymm2_vminss_xmm_xmm_xmm[127:0])[255:128] ∘ (%ymm2_vminss_xmm_xmm_xmm[127:32] ∘ (mincmp_single(%ymm2_vminss_xmm_xmm_xmm[31:0], %ymm3_vminss_xmm_xmm_xmm[31:0]) = 0x1₁ ? %ymm2_vminss_xmm_xmm_xmm[31:0] : %ymm3_vminss_xmm_xmm_xmm[31:0]))

Final state
%ymm1: 0x0₁₂₈ ∘ %ymm1_vfnmsub132pd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for vfnmsub132pd %ymm1, %ymm3, %ymm2

Final state:
%ymm2: vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0])))

-------------------------------------
-------------------------------------
Getting base circuit for vmaxpd %ymm2, %ymm2, %ymm1

Final state:
%ymm1: (maxcmp_double((vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[255:192], (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[255:192])[0:0] = 0x1₁ ? (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[255:192] : (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[255:192]) ∘ ((maxcmp_double((vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[191:128], (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[191:128])[0:0] = 0x1₁ ? (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[191:128] : (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[191:128]) ∘ ((maxcmp_double((vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[127:64], (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[127:64])[0:0] = 0x1₁ ? (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[127:64] : (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[127:64]) ∘ (maxcmp_double((vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[63:0], (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[63:0])[0:0] = 0x1₁ ? (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[63:0] : (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[63:0])))

-------------------------------------
=====================================
Computing circuit for vfnmsub213pd %ymm8, %ymm1, %ymm14

.target:
vfnmsub132pd %ymm1, %ymm3, %ymm2
vmaxpd %ymm2, %ymm2, %ymm1
retq 

Initial state:
%ymm14: 0x0₁₂₈ ∘ %ymm3_vfnmsub132pd_xmm_xmm_xmm[127:0]

State for specgen instruction: vfnmsub213pd %ymm3, %ymm2, %ymm1:
%ymm1: (maxcmp_double((vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[255:192], (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[255:192])[0:0] = 0x1₁ ? (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[255:192] : (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[255:192]) ∘ ((maxcmp_double((vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[191:128], (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[191:128])[0:0] = 0x1₁ ? (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[191:128] : (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[191:128]) ∘ ((maxcmp_double((vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[127:64], (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[127:64])[0:0] = 0x1₁ ? (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[127:64] : (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[127:64]) ∘ (maxcmp_double((vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[63:0], (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[63:0])[0:0] = 0x1₁ ? (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[63:0] : (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[63:0])))

Final state
%ymm14: vnfmsub132_double(0x0₆₄, 0x0₆₄, 0x0₆₄) ∘ (vnfmsub132_double(0x0₆₄, 0x0₆₄, 0x0₆₄) ∘ (vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm2_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm3_vfnmsub132pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm2_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm3_vfnmsub132pd_xmm_xmm_xmm[63:0])))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: %ymm0_vmovdqa_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqa %xmm3, %xmm3

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm3: %ymm3_vmaxps_xmm_xmm_xmm

State for specgen instruction: vmovdqa %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm3: 0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: %ymm0_vmovdqa_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqa %xmm2, %xmm11

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm11: %ymm11_vmaxps_xmm_xmm_xmm

State for specgen instruction: vmovdqa %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm11: 0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for vmaxps %ymm3, %ymm11, %ymm1

Final state:
%ymm1: (maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[255:224])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[255:224] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[255:224]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[223:192])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[223:192] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[223:192]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[191:160])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[191:160] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[191:160]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[159:128])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[159:128] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[159:128]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[127:96])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[127:96] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[127:96]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[95:64])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[95:64] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[95:64]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[63:32])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[63:32] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[63:32]) ∘ (maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[31:0])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[31:0] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[31:0])))))))

-------------------------------------
=====================================
Computing circuit for vmaxps %xmm14, %xmm14, %xmm1

.target:
vmovdqa %xmm3, %xmm3
vmovdqa %xmm2, %xmm11
vmaxps %ymm3, %ymm11, %ymm1
retq 

Initial state:
%ymm1: 0x0₁₂₈ ∘ %ymm1_vfnmsub132pd_xmm_xmm_xmm[127:0]

State for specgen instruction: vmaxps %xmm3, %xmm2, %xmm1:
%ymm1: (maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[255:224])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[255:224] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[255:224]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[223:192])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[223:192] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[223:192]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[191:160])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[191:160] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[191:160]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[159:128])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[159:128] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[159:128]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[127:96])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[127:96] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[127:96]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[95:64])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[95:64] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[95:64]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[63:32])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[63:32] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[63:32]) ∘ (maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[31:0])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[31:0] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[31:0])))))))

Final state
%ymm1: 0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm2_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm3_vfnmsub132pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm2_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm3_vfnmsub132pd_xmm_xmm_xmm[63:0])))))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: %ymm0_vmovapd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovapd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovapd %xmm2, %xmm2

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm2: %ymm2_por_xmm_xmm

State for specgen instruction: vmovapd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm2: 0x0₁₂₈ ∘ %ymm2_por_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm3_r10_r11

Final state:
%rax/%rax: %rax_vorpd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vorpd_xmm_xmm_xmm

%xmm0: %ymm0_vorpd_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vorpd_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vorpd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vorpd_xmm_xmm_xmm

%xmm0: %ymm0_vorpd_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vorpd_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for orq %r9, %r11

Final state:
%r11/%r11: %ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64]

%cf: false
%pf: !((%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][0:0] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][1:1] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][2:2] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][3:3] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][4:4] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][5:5] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][6:6] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][7:7] = 0x1₁)
%zf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64]) = 0x0₆₄
%sf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for orq %r8, %r10

Final state:
%r10/%r10: %ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0]

%cf: false
%pf: !((%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][0:0] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][1:1] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][2:2] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][3:3] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][4:4] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][5:5] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][6:6] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][7:7] = 0x1₁)
%zf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0]) = 0x0₆₄
%sf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm1

Final state:
%rax/%rax: %rax_vorpd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vorpd_xmm_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ ((%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[63:0] ∘ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vorpd %xmm1, %xmm2, %xmm3

.target:
callq .move_128_064_xmm3_r10_r11
callq .move_128_064_xmm2_r8_r9
vzeroall 
orq %r9, %r11
orq %r8, %r10
callq .move_064_128_r10_r11_xmm1
retq 

Initial state:
%ymm3: %ymm3_por_xmm_xmm

State for specgen instruction: vorpd %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ ((%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[63:0] ∘ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[63:0])

Final state
%ymm3: 0x0₁₂₈ ∘ ((%ymm1_por_xmm_xmm[127:64] | %ymm2_por_xmm_xmm[127:64]) ∘ (%ymm1_por_xmm_xmm[63:0] | %ymm2_por_xmm_xmm[63:0]))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_movdqa_xmm_xmm
%rdx/%rdx: %rdx_movdqa_xmm_xmm

%xmm0: %ymm0_movdqa_xmm_xmm[127:0]
%xmm1: %ymm1_movdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_movdqa_xmm_xmm
%rdx/%rdx: %rdx_movdqa_xmm_xmm

%xmm0: %ymm0_movdqa_xmm_xmm[127:0]
%xmm1: (%ymm1_movdqa_xmm_xmm[255:128] ∘ (%ymm2_movdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_movdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for movdqa %xmm3, %xmm1

.target:
callq .move_128_064_xmm2_r8_r9
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%xmm1: %ymm1_por_xmm_xmm[127:0]

State for specgen instruction: movdqa %xmm2, %xmm1:
%xmm1: (%ymm1_movdqa_xmm_xmm[255:128] ∘ (%ymm2_movdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_movdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

Final state
%xmm1: (%ymm1_por_xmm_xmm[255:128] ∘ ((%ymm1_por_xmm_xmm[127:64] | %ymm2_por_xmm_xmm[127:64]) ∘ (%ymm1_por_xmm_xmm[63:0] | %ymm2_por_xmm_xmm[63:0])))[127:0]

=====================================
=====================================
Computing circuit for por %xmm14, %xmm1

.target:
vmovapd %xmm2, %xmm2
vorpd %xmm1, %xmm2, %xmm3
movdqa %xmm3, %xmm1
retq 

Initial state:
%xmm1: (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm2_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm3_vfnmsub132pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm2_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm3_vfnmsub132pd_xmm_xmm_xmm[63:0]))))))[127:0]

State for specgen instruction: por %xmm2, %xmm1:
%xmm1: (%ymm1_por_xmm_xmm[255:128] ∘ ((%ymm1_por_xmm_xmm[127:64] | %ymm2_por_xmm_xmm[127:64]) ∘ (%ymm1_por_xmm_xmm[63:0] | %ymm2_por_xmm_xmm[63:0])))[127:0]

Final state
%xmm1: ((0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm2_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm3_vfnmsub132pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm2_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm3_vfnmsub132pd_xmm_xmm_xmm[63:0]))))))[255:128] ∘ (vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm2_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm3_vfnmsub132pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm2_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm3_vfnmsub132pd_xmm_xmm_xmm[63:0])))[127:0]

=====================================
=====================================
Computing circuit for vfnmsub132pd %xmm1, %xmm3, %xmm2

.target:
vmovapd %xmm3, %xmm14
vmovdqu %xmm2, %xmm8
vminss %xmm1, %xmm1, %xmm1
vfnmsub213pd %ymm8, %ymm1, %ymm14
vmaxps %xmm14, %xmm14, %xmm1
por %xmm14, %xmm1
retq 

Initial state:
%ymm2: %ymm2_vfnmsub213pd_xmm_xmm_xmm

State for specgen instruction: vfnmsub132pd %xmm3, %xmm2, %xmm1:
%ymm1: (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm2_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm3_vfnmsub132pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm2_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm3_vfnmsub132pd_xmm_xmm_xmm[63:0]))))))[255:128] ∘ (vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm2_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm3_vfnmsub132pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm2_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm3_vfnmsub132pd_xmm_xmm_xmm[63:0]))

Final state
%ymm2: 0x0₃₂ ∘ (0x0₃₂ ∘ 0x0₆₄) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_xmm_xmm_xmm[127:64], %ymm3_vfnmsub213pd_xmm_xmm_xmm[127:64], %ymm1_vfnmsub213pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_xmm_xmm_xmm[63:0], %ymm3_vfnmsub213pd_xmm_xmm_xmm[63:0], %ymm1_vfnmsub213pd_xmm_xmm_xmm[63:0]))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vfnmsub213pd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vfnmsub213pd_xmm_xmm_xmm

%xmm0: %ymm0_vfnmsub213pd_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vfnmsub213pd_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vfnmsub213pd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vfnmsub213pd_xmm_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ ((0x0₃₂ ∘ (0x0₃₂ ∘ 0x0₆₄) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_xmm_xmm_xmm[127:64], %ymm3_vfnmsub213pd_xmm_xmm_xmm[127:64], %ymm1_vfnmsub213pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_xmm_xmm_xmm[63:0], %ymm3_vfnmsub213pd_xmm_xmm_xmm[63:0], %ymm1_vfnmsub213pd_xmm_xmm_xmm[63:0])))[127:0][127:64][63:0] ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ 0x0₆₄) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_xmm_xmm_xmm[127:64], %ymm3_vfnmsub213pd_xmm_xmm_xmm[127:64], %ymm1_vfnmsub213pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_xmm_xmm_xmm[63:0], %ymm3_vfnmsub213pd_xmm_xmm_xmm[63:0], %ymm1_vfnmsub213pd_xmm_xmm_xmm[63:0])))[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vfnmsub213pd %xmm3, %xmm2, %xmm1

.target:
vfnmsub132pd %xmm1, %xmm3, %xmm2
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm1: %ymm1_vfnmsub231pd_xmm_xmm_xmm[255:128] ∘ %ymm3_vfnmsub231pd_xmm_xmm_xmm[127:0]

State for specgen instruction: vfnmsub213pd %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ ((0x0₃₂ ∘ (0x0₃₂ ∘ 0x0₆₄) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_xmm_xmm_xmm[127:64], %ymm3_vfnmsub213pd_xmm_xmm_xmm[127:64], %ymm1_vfnmsub213pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_xmm_xmm_xmm[63:0], %ymm3_vfnmsub213pd_xmm_xmm_xmm[63:0], %ymm1_vfnmsub213pd_xmm_xmm_xmm[63:0])))[127:0][127:64][63:0] ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ 0x0₆₄) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_xmm_xmm_xmm[127:64], %ymm3_vfnmsub213pd_xmm_xmm_xmm[127:64], %ymm1_vfnmsub213pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_xmm_xmm_xmm[63:0], %ymm3_vfnmsub213pd_xmm_xmm_xmm[63:0], %ymm1_vfnmsub213pd_xmm_xmm_xmm[63:0])))[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (vnfmsub132_double(%ymm2_vfnmsub231pd_xmm_xmm_xmm[127:64], %ymm1_vfnmsub231pd_xmm_xmm_xmm[127:64], %ymm3_vfnmsub231pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub231pd_xmm_xmm_xmm[63:0], %ymm1_vfnmsub231pd_xmm_xmm_xmm[63:0], %ymm3_vfnmsub231pd_xmm_xmm_xmm[63:0]))

=====================================
=====================================
Computing circuit for vfnmsub231pd %xmm10, %xmm9, %xmm2

.target:
vorpd %xmm3, %xmm3, %xmm6
vmovapd %xmm1, %xmm3
movaps %xmm6, %xmm1
vfnmsub213pd %xmm3, %xmm2, %xmm1
retq 

Initial state:
%ymm2: %ymm2_vfnmadd132pd_xmm_xmm_xmm

State for specgen instruction: vfnmsub231pd %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₁₂₈ ∘ (vnfmsub132_double(%ymm2_vfnmsub231pd_xmm_xmm_xmm[127:64], %ymm1_vfnmsub231pd_xmm_xmm_xmm[127:64], %ymm3_vfnmsub231pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub231pd_xmm_xmm_xmm[63:0], %ymm1_vfnmsub231pd_xmm_xmm_xmm[63:0], %ymm3_vfnmsub231pd_xmm_xmm_xmm[63:0]))

Final state
%ymm2: 0x0₁₂₈ ∘ (vnfmsub132_double(0x0₆₄, %ymm2_vfnmadd132pd_xmm_xmm_xmm[127:64], 0x0₆₄) ∘ vnfmsub132_double(0x0₆₄, %ymm2_vfnmadd132pd_xmm_xmm_xmm[63:0], 0x0₃₂ ∘ %ymm1_vfnmadd132pd_xmm_xmm_xmm[95:64]))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: %ymm0_vmovapd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovapd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovapd %xmm3, %xmm14

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm14: %ymm14_vfnmsub132pd_xmm_xmm_xmm

State for specgen instruction: vmovapd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm14: 0x0₁₂₈ ∘ %ymm3_vfnmsub132pd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: %ymm0_vmovdqu_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqu_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm3

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_256_128_ymm3_xmm12_xmm13

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_256_xmm12_xmm13_ymm1

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: ((0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqu %xmm2, %xmm8

.target:
callq .move_128_064_xmm2_r10_r11
vzeroall 
callq .move_064_128_r10_r11_xmm3
callq .move_256_128_ymm3_xmm12_xmm13
callq .move_128_256_xmm12_xmm13_ymm1
retq 

Initial state:
%ymm8: %ymm8_vfnmsub132pd_xmm_xmm_xmm

State for specgen instruction: vmovdqu %xmm2, %xmm1:
%ymm1: (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0]

Final state
%ymm8: 0x0₁₂₈ ∘ %ymm2_vfnmsub132pd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: %ymm0_vmovdqu_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqu_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm3

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_256_128_ymm3_xmm12_xmm13

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_256_xmm12_xmm13_ymm1

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: ((0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqu %xmm2, %xmm1

.target:
callq .move_128_064_xmm2_r10_r11
vzeroall 
callq .move_064_128_r10_r11_xmm3
callq .move_256_128_ymm3_xmm12_xmm13
callq .move_128_256_xmm12_xmm13_ymm1
retq 

Initial state:
%ymm1: %ymm1_vminss_xmm_xmm_xmm

State for specgen instruction: vmovdqu %xmm2, %xmm1:
%ymm1: (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0]

Final state
%ymm1: 0x0₁₂₈ ∘ %ymm2_vminss_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_minss_xmm_xmm
%rdx/%rdx: %rdx_minss_xmm_xmm

%xmm0: %ymm0_minss_xmm_xmm[127:0]
%xmm1: %ymm1_minss_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_032_xmm2_xmm4_xmm5_xmm6_xmm7

Final state:
%rax/%rax: %rax_minss_xmm_xmm
%rdx/%rdx: %rdx_minss_xmm_xmm

%xmm0: %ymm0_minss_xmm_xmm[127:0]
%xmm1: %ymm1_minss_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: %ymm0_vmovdqa_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqa %xmm3, %xmm1

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm1: %ymm1_vminps_xmm_xmm_xmm

State for specgen instruction: vmovdqa %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: %ymm0_vmovdqu_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqu_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm3

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_256_128_ymm3_xmm12_xmm13

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: 0x0₂₅₆[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_256_xmm12_xmm13_ymm1

Final state:
%rax/%rax: %rax_vmovdqu_xmm_xmm
%rdx/%rdx: %rdx_vmovdqu_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: ((0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqu %xmm2, %xmm14

.target:
callq .move_128_064_xmm2_r10_r11
vzeroall 
callq .move_064_128_r10_r11_xmm3
callq .move_256_128_ymm3_xmm12_xmm13
callq .move_128_256_xmm12_xmm13_ymm1
retq 

Initial state:
%ymm14: %ymm14_vminps_xmm_xmm_xmm

State for specgen instruction: vmovdqu %xmm2, %xmm1:
%ymm1: (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[255:128])[127:0][127:0] ∘ (0x0₂₅₆[255:128] ∘ (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqu_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqu_xmm_xmm[127:0][63:0][63:0]))[127:0])[127:0][127:0]

Final state
%ymm14: 0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for vminps %ymm1, %ymm14, %ymm1

Final state:
%ymm1: (mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[255:224])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[255:224] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[255:224]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[223:192])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[223:192] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[223:192]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[191:160])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[191:160] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[191:160]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[159:128])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[159:128] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[159:128]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[127:96])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[127:96] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[127:96]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[95:64])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[95:64] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[95:64]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[63:32])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[63:32] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[63:32]) ∘ (mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[31:0])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[31:0] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[31:0])))))))

-------------------------------------
=====================================
Computing circuit for vminps %xmm2, %xmm1, %xmm2

.target:
vmovdqa %xmm3, %xmm1
vmovdqu %xmm2, %xmm14
vminps %ymm1, %ymm14, %ymm1
retq 

Initial state:
%ymm2: %ymm2_minps_xmm_xmm

State for specgen instruction: vminps %xmm3, %xmm2, %xmm1:
%ymm1: (mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[255:224])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[255:224] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[255:224]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[223:192])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[223:192] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[223:192]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[191:160])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[191:160] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[191:160]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[159:128])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[159:128] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[159:128]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[127:96])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[127:96] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[127:96]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[95:64])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[95:64] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[95:64]) ∘ ((mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[63:32])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[63:32] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[63:32]) ∘ (mincmp_single((0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[31:0])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vminps_xmm_xmm_xmm[127:0])[31:0] : (0x0₁₂₈ ∘ %ymm3_vminps_xmm_xmm_xmm[127:0])[31:0])))))))

Final state
%ymm2: 0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0])))))))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_minps_xmm_xmm
%rdx/%rdx: %rdx_minps_xmm_xmm

%xmm0: %ymm0_minps_xmm_xmm[127:0]
%xmm1: %ymm1_minps_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1

Final state:
%rax/%rax: %rax_minps_xmm_xmm
%rdx/%rdx: %rdx_minps_xmm_xmm

%xmm0: %ymm0_minps_xmm_xmm[127:0]
%xmm1: (%ymm1_minps_xmm_xmm[255:128] ∘ ((%ymm11_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][63:32]))[127:0][31:0] ∘ (%ymm8_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][31:0]))[127:0][31:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for minps %xmm4, %xmm8

.target:
vminps %xmm2, %xmm1, %xmm2
callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
retq 

Initial state:
%xmm8: (%ymm8_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][31:0]))[127:0]

State for specgen instruction: minps %xmm2, %xmm1:
%xmm1: (%ymm1_minps_xmm_xmm[255:128] ∘ ((%ymm11_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][63:32]))[127:0][31:0] ∘ (%ymm8_minps_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[127:96], %ymm2_minps_xmm_xmm[127:96]) = 0x1₁ ? %ymm1_minps_xmm_xmm[127:96] : %ymm2_minps_xmm_xmm[127:96]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[95:64], %ymm2_minps_xmm_xmm[95:64]) = 0x1₁ ? %ymm1_minps_xmm_xmm[95:64] : %ymm2_minps_xmm_xmm[95:64]) ∘ ((mincmp_single(%ymm1_minps_xmm_xmm[63:32], %ymm2_minps_xmm_xmm[63:32]) = 0x1₁ ? %ymm1_minps_xmm_xmm[63:32] : %ymm2_minps_xmm_xmm[63:32]) ∘ (mincmp_single(%ymm1_minps_xmm_xmm[31:0], %ymm2_minps_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minps_xmm_xmm[31:0] : %ymm2_minps_xmm_xmm[31:0]))))))))[127:0][31:0]))[127:0][31:0]))[127:0]

Final state
%xmm8: ((%ymm8_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][31:0]))[255:128] ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (mincmp_single(%ymm1_minss_xmm_xmm[31:0], %ymm2_minss_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minss_xmm_xmm[31:0] : %ymm2_minss_xmm_xmm[31:0])))))[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1

Final state:
%rax/%rax: %rax_minss_xmm_xmm
%rdx/%rdx: %rdx_minss_xmm_xmm

%xmm0: %ymm0_minss_xmm_xmm[127:0]
%xmm1: (%ymm1_minss_xmm_xmm[255:128] ∘ ((%ymm11_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ ((%ymm8_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][31:0]))[255:128] ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (mincmp_single(%ymm1_minss_xmm_xmm[31:0], %ymm2_minss_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minss_xmm_xmm[31:0] : %ymm2_minss_xmm_xmm[31:0])))))[127:0][31:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for minss %xmm3, %xmm1

.target:
callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11
callq .move_128_032_xmm2_xmm4_xmm5_xmm6_xmm7
minps %xmm4, %xmm8
callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
retq 

Initial state:
%xmm1: (0x0₁₂₈ ∘ %ymm2_vminss_xmm_xmm_xmm[127:0])[127:0]

State for specgen instruction: minss %xmm2, %xmm1:
%xmm1: (%ymm1_minss_xmm_xmm[255:128] ∘ ((%ymm11_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][127:96]))[127:0][31:0] ∘ (%ymm10_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][95:64]))[127:0][31:0] ∘ (%ymm9_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][63:32]))[127:0][31:0] ∘ ((%ymm8_minss_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ %ymm1_minss_xmm_xmm[127:0][31:0]))[255:128] ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (mincmp_single(%ymm1_minss_xmm_xmm[31:0], %ymm2_minss_xmm_xmm[31:0]) = 0x1₁ ? %ymm1_minss_xmm_xmm[31:0] : %ymm2_minss_xmm_xmm[31:0])))))[127:0][31:0]))[127:0]

Final state
%xmm1: ((0x0₁₂₈ ∘ %ymm2_vminss_xmm_xmm_xmm[127:0])[255:128] ∘ (%ymm2_vminss_xmm_xmm_xmm[127:32] ∘ (mincmp_single(%ymm2_vminss_xmm_xmm_xmm[31:0], %ymm3_vminss_xmm_xmm_xmm[31:0]) = 0x1₁ ? %ymm2_vminss_xmm_xmm_xmm[31:0] : %ymm3_vminss_xmm_xmm_xmm[31:0])))[127:0]

=====================================
=====================================
Computing circuit for vminss %xmm1, %xmm1, %xmm1

.target:
vmovdqu %xmm2, %xmm1
minss %xmm3, %xmm1
retq 

Initial state:
%ymm1: %ymm1_vfnmsub132pd_xmm_xmm_xmm

State for specgen instruction: vminss %xmm3, %xmm2, %xmm1:
%ymm1: (0x0₁₂₈ ∘ %ymm2_vminss_xmm_xmm_xmm[127:0])[255:128] ∘ (%ymm2_vminss_xmm_xmm_xmm[127:32] ∘ (mincmp_single(%ymm2_vminss_xmm_xmm_xmm[31:0], %ymm3_vminss_xmm_xmm_xmm[31:0]) = 0x1₁ ? %ymm2_vminss_xmm_xmm_xmm[31:0] : %ymm3_vminss_xmm_xmm_xmm[31:0]))

Final state
%ymm1: 0x0₁₂₈ ∘ %ymm1_vfnmsub132pd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for vfnmsub132pd %ymm1, %ymm3, %ymm2

Final state:
%ymm2: vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0])))

-------------------------------------
-------------------------------------
Getting base circuit for vmaxpd %ymm2, %ymm2, %ymm1

Final state:
%ymm1: (maxcmp_double((vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[255:192], (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[255:192])[0:0] = 0x1₁ ? (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[255:192] : (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[255:192]) ∘ ((maxcmp_double((vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[191:128], (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[191:128])[0:0] = 0x1₁ ? (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[191:128] : (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[191:128]) ∘ ((maxcmp_double((vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[127:64], (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[127:64])[0:0] = 0x1₁ ? (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[127:64] : (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[127:64]) ∘ (maxcmp_double((vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[63:0], (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[63:0])[0:0] = 0x1₁ ? (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[63:0] : (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[63:0])))

-------------------------------------
=====================================
Computing circuit for vfnmsub213pd %ymm8, %ymm1, %ymm14

.target:
vfnmsub132pd %ymm1, %ymm3, %ymm2
vmaxpd %ymm2, %ymm2, %ymm1
retq 

Initial state:
%ymm14: 0x0₁₂₈ ∘ %ymm3_vfnmsub132pd_xmm_xmm_xmm[127:0]

State for specgen instruction: vfnmsub213pd %ymm3, %ymm2, %ymm1:
%ymm1: (maxcmp_double((vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[255:192], (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[255:192])[0:0] = 0x1₁ ? (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[255:192] : (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[255:192]) ∘ ((maxcmp_double((vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[191:128], (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[191:128])[0:0] = 0x1₁ ? (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[191:128] : (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[191:128]) ∘ ((maxcmp_double((vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[127:64], (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[127:64])[0:0] = 0x1₁ ? (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[127:64] : (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[127:64]) ∘ (maxcmp_double((vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[63:0], (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[63:0])[0:0] = 0x1₁ ? (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[63:0] : (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm3_vfnmsub213pd_ymm_ymm_ymm[255:192], %ymm1_vfnmsub213pd_ymm_ymm_ymm[255:192]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm3_vfnmsub213pd_ymm_ymm_ymm[191:128], %ymm1_vfnmsub213pd_ymm_ymm_ymm[191:128]) ∘ (vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm3_vfnmsub213pd_ymm_ymm_ymm[127:64], %ymm1_vfnmsub213pd_ymm_ymm_ymm[127:64]) ∘ vnfmsub132_double(%ymm2_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm3_vfnmsub213pd_ymm_ymm_ymm[63:0], %ymm1_vfnmsub213pd_ymm_ymm_ymm[63:0]))))[63:0])))

Final state
%ymm14: vnfmsub132_double(0x0₆₄, 0x0₆₄, 0x0₆₄) ∘ (vnfmsub132_double(0x0₆₄, 0x0₆₄, 0x0₆₄) ∘ (vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm2_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm3_vfnmsub132pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm2_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm3_vfnmsub132pd_xmm_xmm_xmm[63:0])))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: %ymm0_vmovdqa_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqa %xmm3, %xmm3

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm3: %ymm3_vmaxps_xmm_xmm_xmm

State for specgen instruction: vmovdqa %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm3: 0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: %ymm0_vmovdqa_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqa %xmm2, %xmm11

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm11: %ymm11_vmaxps_xmm_xmm_xmm

State for specgen instruction: vmovdqa %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm11: 0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for vmaxps %ymm3, %ymm11, %ymm1

Final state:
%ymm1: (maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[255:224])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[255:224] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[255:224]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[223:192])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[223:192] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[223:192]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[191:160])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[191:160] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[191:160]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[159:128])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[159:128] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[159:128]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[127:96])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[127:96] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[127:96]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[95:64])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[95:64] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[95:64]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[63:32])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[63:32] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[63:32]) ∘ (maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[31:0])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[31:0] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[31:0])))))))

-------------------------------------
=====================================
Computing circuit for vmaxps %xmm14, %xmm14, %xmm1

.target:
vmovdqa %xmm3, %xmm3
vmovdqa %xmm2, %xmm11
vmaxps %ymm3, %ymm11, %ymm1
retq 

Initial state:
%ymm1: 0x0₁₂₈ ∘ %ymm1_vfnmsub132pd_xmm_xmm_xmm[127:0]

State for specgen instruction: vmaxps %xmm3, %xmm2, %xmm1:
%ymm1: (maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[255:224])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[255:224] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[255:224]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[223:192])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[223:192] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[223:192]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[191:160])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[191:160] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[191:160]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[159:128])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[159:128] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[159:128]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[127:96])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[127:96] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[127:96]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[95:64])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[95:64] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[95:64]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[63:32])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[63:32] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[63:32]) ∘ (maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[31:0])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[31:0] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[31:0])))))))

Final state
%ymm1: 0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm2_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm3_vfnmsub132pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm2_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm3_vfnmsub132pd_xmm_xmm_xmm[63:0])))))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: %ymm0_vmovapd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovapd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovapd %xmm2, %xmm2

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm2: %ymm2_por_xmm_xmm

State for specgen instruction: vmovapd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm2: 0x0₁₂₈ ∘ %ymm2_por_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm3_r10_r11

Final state:
%rax/%rax: %rax_vorpd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vorpd_xmm_xmm_xmm

%xmm0: %ymm0_vorpd_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vorpd_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vorpd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vorpd_xmm_xmm_xmm

%xmm0: %ymm0_vorpd_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vorpd_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for orq %r9, %r11

Final state:
%r11/%r11: %ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64]

%cf: false
%pf: !((%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][0:0] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][1:1] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][2:2] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][3:3] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][4:4] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][5:5] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][6:6] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[7:0][7:7] = 0x1₁)
%zf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64]) = 0x0₆₄
%sf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for orq %r8, %r10

Final state:
%r10/%r10: %ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0]

%cf: false
%pf: !((%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][0:0] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][1:1] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][2:2] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][3:3] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][4:4] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][5:5] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][6:6] = 0x1₁ ⊕ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[7:0][7:7] = 0x1₁)
%zf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0]) = 0x0₆₄
%sf: (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm1

Final state:
%rax/%rax: %rax_vorpd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vorpd_xmm_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ ((%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[63:0] ∘ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vorpd %xmm1, %xmm2, %xmm3

.target:
callq .move_128_064_xmm3_r10_r11
callq .move_128_064_xmm2_r8_r9
vzeroall 
orq %r9, %r11
orq %r8, %r10
callq .move_064_128_r10_r11_xmm1
retq 

Initial state:
%ymm3: %ymm3_por_xmm_xmm

State for specgen instruction: vorpd %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ ((%ymm3_vorpd_xmm_xmm_xmm[127:0][127:64] | %ymm2_vorpd_xmm_xmm_xmm[127:0][127:64])[63:0] ∘ (%ymm3_vorpd_xmm_xmm_xmm[127:0][63:0] | %ymm2_vorpd_xmm_xmm_xmm[127:0][63:0])[63:0])

Final state
%ymm3: 0x0₁₂₈ ∘ ((%ymm1_por_xmm_xmm[127:64] | %ymm2_por_xmm_xmm[127:64]) ∘ (%ymm1_por_xmm_xmm[63:0] | %ymm2_por_xmm_xmm[63:0]))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_movdqa_xmm_xmm
%rdx/%rdx: %rdx_movdqa_xmm_xmm

%xmm0: %ymm0_movdqa_xmm_xmm[127:0]
%xmm1: %ymm1_movdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_movdqa_xmm_xmm
%rdx/%rdx: %rdx_movdqa_xmm_xmm

%xmm0: %ymm0_movdqa_xmm_xmm[127:0]
%xmm1: (%ymm1_movdqa_xmm_xmm[255:128] ∘ (%ymm2_movdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_movdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for movdqa %xmm3, %xmm1

.target:
callq .move_128_064_xmm2_r8_r9
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%xmm1: %ymm1_por_xmm_xmm[127:0]

State for specgen instruction: movdqa %xmm2, %xmm1:
%xmm1: (%ymm1_movdqa_xmm_xmm[255:128] ∘ (%ymm2_movdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_movdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

Final state
%xmm1: (%ymm1_por_xmm_xmm[255:128] ∘ ((%ymm1_por_xmm_xmm[127:64] | %ymm2_por_xmm_xmm[127:64]) ∘ (%ymm1_por_xmm_xmm[63:0] | %ymm2_por_xmm_xmm[63:0])))[127:0]

=====================================
=====================================
Computing circuit for por %xmm14, %xmm1

.target:
vmovapd %xmm2, %xmm2
vorpd %xmm1, %xmm2, %xmm3
movdqa %xmm3, %xmm1
retq 

Initial state:
%xmm1: (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm2_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm3_vfnmsub132pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm2_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm3_vfnmsub132pd_xmm_xmm_xmm[63:0]))))))[127:0]

State for specgen instruction: por %xmm2, %xmm1:
%xmm1: (%ymm1_por_xmm_xmm[255:128] ∘ ((%ymm1_por_xmm_xmm[127:64] | %ymm2_por_xmm_xmm[127:64]) ∘ (%ymm1_por_xmm_xmm[63:0] | %ymm2_por_xmm_xmm[63:0])))[127:0]

Final state
%xmm1: ((0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm2_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm3_vfnmsub132pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm2_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm3_vfnmsub132pd_xmm_xmm_xmm[63:0]))))))[255:128] ∘ (vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm2_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm3_vfnmsub132pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm2_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm3_vfnmsub132pd_xmm_xmm_xmm[63:0])))[127:0]

=====================================
=====================================
Computing circuit for vfnmsub132pd %xmm3, %xmm2, %xmm1

.target:
vmovapd %xmm3, %xmm14
vmovdqu %xmm2, %xmm8
vminss %xmm1, %xmm1, %xmm1
vfnmsub213pd %ymm8, %ymm1, %ymm14
vmaxps %xmm14, %xmm14, %xmm1
por %xmm14, %xmm1
retq 

Initial state:
%ymm1: %ymm1_vfnmadd132pd_xmm_xmm_xmm

State for specgen instruction: vfnmsub132pd %xmm3, %xmm2, %xmm1:
%ymm1: (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm2_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm3_vfnmsub132pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm2_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm3_vfnmsub132pd_xmm_xmm_xmm[63:0]))))))[255:128] ∘ (vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm2_vfnmsub132pd_xmm_xmm_xmm[127:64], %ymm3_vfnmsub132pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm1_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm2_vfnmsub132pd_xmm_xmm_xmm[63:0], %ymm3_vfnmsub132pd_xmm_xmm_xmm[63:0]))

Final state
%ymm1: 0x0₃₂ ∘ (0x0₃₂ ∘ 0x0₆₄) ∘ (vnfmsub132_double(%ymm1_vfnmadd132pd_xmm_xmm_xmm[127:64], vnfmsub132_double(0x0₆₄, %ymm2_vfnmadd132pd_xmm_xmm_xmm[127:64], 0x0₆₄), %ymm3_vfnmadd132pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm1_vfnmadd132pd_xmm_xmm_xmm[63:0], vnfmsub132_double(0x0₆₄, %ymm2_vfnmadd132pd_xmm_xmm_xmm[63:0], 0x0₃₂ ∘ %ymm1_vfnmadd132pd_xmm_xmm_xmm[95:64]), %ymm3_vfnmadd132pd_xmm_xmm_xmm[63:0]))

=====================================
=====================================
Computing circuit for vfnmadd132pd %xmm3, %xmm2, %xmm1

.target:
callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11
vpxor %xmm12, %xmm12, %xmm9
vfnmsub231pd %xmm10, %xmm9, %xmm2
vfnmsub132pd %xmm3, %xmm2, %xmm1
retq 

Initial state:
%ymm1: %ymm1

State for specgen instruction: vfnmadd132pd %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₃₂ ∘ (0x0₃₂ ∘ 0x0₆₄) ∘ (vnfmsub132_double(%ymm1_vfnmadd132pd_xmm_xmm_xmm[127:64], vnfmsub132_double(0x0₆₄, %ymm2_vfnmadd132pd_xmm_xmm_xmm[127:64], 0x0₆₄), %ymm3_vfnmadd132pd_xmm_xmm_xmm[127:64]) ∘ vnfmsub132_double(%ymm1_vfnmadd132pd_xmm_xmm_xmm[63:0], vnfmsub132_double(0x0₆₄, %ymm2_vfnmadd132pd_xmm_xmm_xmm[63:0], 0x0₃₂ ∘ %ymm1_vfnmadd132pd_xmm_xmm_xmm[95:64]), %ymm3_vfnmadd132pd_xmm_xmm_xmm[63:0]))

Final state
%ymm1: 0x0₃₂ ∘ (0x0₃₂ ∘ 0x0₆₄) ∘ (vnfmsub132_double(%ymm1[127:64], vnfmsub132_double(0x0₆₄, %ymm2[127:64], 0x0₆₄), %ymm3[127:64]) ∘ vnfmsub132_double(%ymm1[63:0], vnfmsub132_double(0x0₆₄, %ymm2[63:0], 0x0₃₂ ∘ %ymm1[95:64]), %ymm3[63:0]))

=====================================
Circuits:

%ymm1  : 0x0₃₂ ∘ (0x0₃₂ ∘ 0x0₆₄) ∘ (vnfmsub132_double(%ymm1[127:64], vnfmsub132_double(0x0₆₄, %ymm2[127:64], 0x0₆₄), %ymm3[127:64]) ∘ vnfmsub132_double(%ymm1[63:0], vnfmsub132_double(0x0₆₄, %ymm2[63:0], 0x0₃₂ ∘ %ymm1[95:64]), %ymm3[63:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/