// Autogenerated using stratification.
requires "x86-configuration.k"

module VFNMADD213PD-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vfnmadd213pd R1:Xmm, R2:Xmm, R3:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 128, 192), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(getParentValue(R3, RSMap), 128, 192), 53, 11) ) ) ) , 64), Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 192, 256), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(getParentValue(R3, RSMap), 192, 256), 53, 11) ) ) ) , 64))) )


)

    </regstate>
endmodule

module VFNMADD213PD-XMM-XMM-XMM-SEMANTICS
  imports VFNMADD213PD-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vfnmadd213pd %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 %xmm3 }
must read:{ %xmm1 %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ fma }

Circuit:
circuit:vfnmadd231pd %xmm1, %xmm2, %xmm3  #  1     0     5      OPC=vfnmadd231pd_xmm_xmm_xmm
circuit:callq .move_128_064_xmm3_r10_r11  #  2     0x5   5      OPC=callq_label
circuit:vzeroall                          #  3     0xa   3      OPC=vzeroall
circuit:callq .move_064_128_r10_r11_xmm1  #  4     0xd   5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vfnmadd213pd %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 %xmm3 }
  must read:       { %xmm1 %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { fma }

-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: %ymm0_vmovapd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovapd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovapd %xmm1, %xmm1

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm1: %ymm1_vfnmadd231pd_xmm_xmm_xmm

State for specgen instruction: vmovapd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ %ymm1_vfnmadd231pd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: %ymm0_vmovapd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovapd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovapd %xmm2, %xmm8

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm8: %ymm8_vfnmadd231pd_xmm_xmm_xmm

State for specgen instruction: vmovapd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm8: 0x0₁₂₈ ∘ %ymm2_vfnmadd231pd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: %ymm0_vmovapd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovapd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovapd_xmm_xmm
%rdx/%rdx: %rdx_vmovapd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovapd %xmm3, %xmm5

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm5: %ymm5_vmaxpd_xmm_xmm_xmm

State for specgen instruction: vmovapd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovapd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovapd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm5: 0x0₁₂₈ ∘ %ymm3_vmaxpd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: %ymm0_vmovdqa_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqa %xmm3, %xmm3

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm3: %ymm3_vmaxps_xmm_xmm_xmm

State for specgen instruction: vmovdqa %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm3: 0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: %ymm0_vmovdqa_xmm_xmm[127:0]
%xmm1: %ymm1_vmovdqa_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovdqa_xmm_xmm
%rdx/%rdx: %rdx_vmovdqa_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovdqa %xmm2, %xmm11

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm11: %ymm11_vmaxps_xmm_xmm_xmm

State for specgen instruction: vmovdqa %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovdqa_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovdqa_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm11: 0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for vmaxps %ymm3, %ymm11, %ymm1

Final state:
%ymm1: (maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[255:224])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[255:224] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[255:224]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[223:192])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[223:192] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[223:192]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[191:160])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[191:160] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[191:160]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[159:128])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[159:128] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[159:128]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[127:96])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[127:96] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[127:96]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[95:64])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[95:64] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[95:64]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[63:32])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[63:32] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[63:32]) ∘ (maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[31:0])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[31:0] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[31:0])))))))

-------------------------------------
=====================================
Computing circuit for vmaxps %xmm2, %xmm2, %xmm11

.target:
vmovdqa %xmm3, %xmm3
vmovdqa %xmm2, %xmm11
vmaxps %ymm3, %ymm11, %ymm1
retq 

Initial state:
%ymm11: %ymm11_vmaxpd_xmm_xmm_xmm

State for specgen instruction: vmaxps %xmm3, %xmm2, %xmm1:
%ymm1: (maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[255:224], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[255:224])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[255:224] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[255:224]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[223:192], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[223:192])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[223:192] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[223:192]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[191:160], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[191:160])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[191:160] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[191:160]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[159:128], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[159:128])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[159:128] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[159:128]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[127:96], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[127:96])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[127:96] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[127:96]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[95:64], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[95:64])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[95:64] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[95:64]) ∘ ((maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[63:32], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[63:32])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[63:32] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[63:32]) ∘ (maxcmp_single((0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[31:0], (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[31:0])[0:0] = 0x1₁ ? (0x0₁₂₈ ∘ %ymm2_vmaxps_xmm_xmm_xmm[127:0])[31:0] : (0x0₁₂₈ ∘ %ymm3_vmaxps_xmm_xmm_xmm[127:0])[31:0])))))))

Final state
%ymm11: 0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ %ymm2_vmaxpd_xmm_xmm_xmm[127:0])))

=====================================
-------------------------------------
Getting base circuit for vmaxpd %ymm5, %ymm11, %ymm1

Final state:
%ymm1: (maxcmp_double((0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ %ymm2_vmaxpd_xmm_xmm_xmm[127:0]))))[255:192], (0x0₁₂₈ ∘ %ymm3_vmaxpd_xmm_xmm_xmm[127:0])[255:192])[0:0] = 0x1₁ ? (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ %ymm2_vmaxpd_xmm_xmm_xmm[127:0]))))[255:192] : (0x0₁₂₈ ∘ %ymm3_vmaxpd_xmm_xmm_xmm[127:0])[255:192]) ∘ ((maxcmp_double((0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ %ymm2_vmaxpd_xmm_xmm_xmm[127:0]))))[191:128], (0x0₁₂₈ ∘ %ymm3_vmaxpd_xmm_xmm_xmm[127:0])[191:128])[0:0] = 0x1₁ ? (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ %ymm2_vmaxpd_xmm_xmm_xmm[127:0]))))[191:128] : (0x0₁₂₈ ∘ %ymm3_vmaxpd_xmm_xmm_xmm[127:0])[191:128]) ∘ ((maxcmp_double((0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ %ymm2_vmaxpd_xmm_xmm_xmm[127:0]))))[127:64], (0x0₁₂₈ ∘ %ymm3_vmaxpd_xmm_xmm_xmm[127:0])[127:64])[0:0] = 0x1₁ ? (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ %ymm2_vmaxpd_xmm_xmm_xmm[127:0]))))[127:64] : (0x0₁₂₈ ∘ %ymm3_vmaxpd_xmm_xmm_xmm[127:0])[127:64]) ∘ (maxcmp_double((0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ %ymm2_vmaxpd_xmm_xmm_xmm[127:0]))))[63:0], (0x0₁₂₈ ∘ %ymm3_vmaxpd_xmm_xmm_xmm[127:0])[63:0])[0:0] = 0x1₁ ? (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ %ymm2_vmaxpd_xmm_xmm_xmm[127:0]))))[63:0] : (0x0₁₂₈ ∘ %ymm3_vmaxpd_xmm_xmm_xmm[127:0])[63:0])))

-------------------------------------
=====================================
Computing circuit for vmaxpd %xmm3, %xmm3, %xmm5

.target:
vmovapd %xmm3, %xmm5
vmaxps %xmm2, %xmm2, %xmm11
vmaxpd %ymm5, %ymm11, %ymm1
retq 

Initial state:
%ymm5: %ymm5_vfnmadd231pd_xmm_xmm_xmm

State for specgen instruction: vmaxpd %xmm3, %xmm2, %xmm1:
%ymm1: (maxcmp_double((0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ %ymm2_vmaxpd_xmm_xmm_xmm[127:0]))))[255:192], (0x0₁₂₈ ∘ %ymm3_vmaxpd_xmm_xmm_xmm[127:0])[255:192])[0:0] = 0x1₁ ? (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ %ymm2_vmaxpd_xmm_xmm_xmm[127:0]))))[255:192] : (0x0₁₂₈ ∘ %ymm3_vmaxpd_xmm_xmm_xmm[127:0])[255:192]) ∘ ((maxcmp_double((0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ %ymm2_vmaxpd_xmm_xmm_xmm[127:0]))))[191:128], (0x0₁₂₈ ∘ %ymm3_vmaxpd_xmm_xmm_xmm[127:0])[191:128])[0:0] = 0x1₁ ? (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ %ymm2_vmaxpd_xmm_xmm_xmm[127:0]))))[191:128] : (0x0₁₂₈ ∘ %ymm3_vmaxpd_xmm_xmm_xmm[127:0])[191:128]) ∘ ((maxcmp_double((0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ %ymm2_vmaxpd_xmm_xmm_xmm[127:0]))))[127:64], (0x0₁₂₈ ∘ %ymm3_vmaxpd_xmm_xmm_xmm[127:0])[127:64])[0:0] = 0x1₁ ? (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ %ymm2_vmaxpd_xmm_xmm_xmm[127:0]))))[127:64] : (0x0₁₂₈ ∘ %ymm3_vmaxpd_xmm_xmm_xmm[127:0])[127:64]) ∘ (maxcmp_double((0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ %ymm2_vmaxpd_xmm_xmm_xmm[127:0]))))[63:0], (0x0₁₂₈ ∘ %ymm3_vmaxpd_xmm_xmm_xmm[127:0])[63:0])[0:0] = 0x1₁ ? (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ %ymm2_vmaxpd_xmm_xmm_xmm[127:0]))))[63:0] : (0x0₁₂₈ ∘ %ymm3_vmaxpd_xmm_xmm_xmm[127:0])[63:0])))

Final state
%ymm5: 0x0₆₄ ∘ (0x0₆₄ ∘ %ymm3_vfnmadd231pd_xmm_xmm_xmm[127:0])

=====================================
-------------------------------------
Getting base circuit for vfnmadd132pd %ymm3, %ymm1, %ymm2

Final state:
%ymm2: vfnmadd132_double(%ymm2_vfnmadd231pd_ymm_ymm_ymm[255:192], %ymm1_vfnmadd231pd_ymm_ymm_ymm[255:192], %ymm3_vfnmadd231pd_ymm_ymm_ymm[255:192]) ∘ (vfnmadd132_double(%ymm2_vfnmadd231pd_ymm_ymm_ymm[191:128], %ymm1_vfnmadd231pd_ymm_ymm_ymm[191:128], %ymm3_vfnmadd231pd_ymm_ymm_ymm[191:128]) ∘ (vfnmadd132_double(%ymm2_vfnmadd231pd_ymm_ymm_ymm[127:64], %ymm1_vfnmadd231pd_ymm_ymm_ymm[127:64], %ymm3_vfnmadd231pd_ymm_ymm_ymm[127:64]) ∘ vfnmadd132_double(%ymm2_vfnmadd231pd_ymm_ymm_ymm[63:0], %ymm1_vfnmadd231pd_ymm_ymm_ymm[63:0], %ymm3_vfnmadd231pd_ymm_ymm_ymm[63:0])))

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_256_128_ymm2_xmm10_xmm11

Final state:
%rax/%rax: %rax_vfnmadd231pd_ymm_ymm_ymm
%rdx/%rdx: %rdx_vfnmadd231pd_ymm_ymm_ymm

%xmm0: %ymm0_vfnmadd231pd_ymm_ymm_ymm[127:0]
%xmm1: %ymm1_vfnmadd231pd_ymm_ymm_ymm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_256_xmm10_xmm11_ymm1

Final state:
%rax/%rax: %rax_vfnmadd231pd_ymm_ymm_ymm
%rdx/%rdx: %rdx_vfnmadd231pd_ymm_ymm_ymm

%xmm0: %ymm0_vfnmadd231pd_ymm_ymm_ymm[127:0]
%xmm1: ((%ymm11_vfnmadd231pd_ymm_ymm_ymm[255:128] ∘ (vfnmadd132_double(%ymm2_vfnmadd231pd_ymm_ymm_ymm[255:192], %ymm1_vfnmadd231pd_ymm_ymm_ymm[255:192], %ymm3_vfnmadd231pd_ymm_ymm_ymm[255:192]) ∘ (vfnmadd132_double(%ymm2_vfnmadd231pd_ymm_ymm_ymm[191:128], %ymm1_vfnmadd231pd_ymm_ymm_ymm[191:128], %ymm3_vfnmadd231pd_ymm_ymm_ymm[191:128]) ∘ (vfnmadd132_double(%ymm2_vfnmadd231pd_ymm_ymm_ymm[127:64], %ymm1_vfnmadd231pd_ymm_ymm_ymm[127:64], %ymm3_vfnmadd231pd_ymm_ymm_ymm[127:64]) ∘ vfnmadd132_double(%ymm2_vfnmadd231pd_ymm_ymm_ymm[63:0], %ymm1_vfnmadd231pd_ymm_ymm_ymm[63:0], %ymm3_vfnmadd231pd_ymm_ymm_ymm[63:0]))))[255:128])[127:0][127:0] ∘ (%ymm10_vfnmadd231pd_ymm_ymm_ymm[255:128] ∘ (vfnmadd132_double(%ymm2_vfnmadd231pd_ymm_ymm_ymm[255:192], %ymm1_vfnmadd231pd_ymm_ymm_ymm[255:192], %ymm3_vfnmadd231pd_ymm_ymm_ymm[255:192]) ∘ (vfnmadd132_double(%ymm2_vfnmadd231pd_ymm_ymm_ymm[191:128], %ymm1_vfnmadd231pd_ymm_ymm_ymm[191:128], %ymm3_vfnmadd231pd_ymm_ymm_ymm[191:128]) ∘ (vfnmadd132_double(%ymm2_vfnmadd231pd_ymm_ymm_ymm[127:64], %ymm1_vfnmadd231pd_ymm_ymm_ymm[127:64], %ymm3_vfnmadd231pd_ymm_ymm_ymm[127:64]) ∘ vfnmadd132_double(%ymm2_vfnmadd231pd_ymm_ymm_ymm[63:0], %ymm1_vfnmadd231pd_ymm_ymm_ymm[63:0], %ymm3_vfnmadd231pd_ymm_ymm_ymm[63:0]))))[127:0])[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vfnmadd231pd %ymm5, %ymm8, %ymm1

.target:
vfnmadd132pd %ymm3, %ymm1, %ymm2
callq .move_256_128_ymm2_xmm10_xmm11
callq .move_128_256_xmm10_xmm11_ymm1
retq 

Initial state:
%ymm1: 0x0₁₂₈ ∘ %ymm1_vfnmadd231pd_xmm_xmm_xmm[127:0]

State for specgen instruction: vfnmadd231pd %ymm3, %ymm2, %ymm1:
%ymm1: (%ymm11_vfnmadd231pd_ymm_ymm_ymm[255:128] ∘ (vfnmadd132_double(%ymm2_vfnmadd231pd_ymm_ymm_ymm[255:192], %ymm1_vfnmadd231pd_ymm_ymm_ymm[255:192], %ymm3_vfnmadd231pd_ymm_ymm_ymm[255:192]) ∘ (vfnmadd132_double(%ymm2_vfnmadd231pd_ymm_ymm_ymm[191:128], %ymm1_vfnmadd231pd_ymm_ymm_ymm[191:128], %ymm3_vfnmadd231pd_ymm_ymm_ymm[191:128]) ∘ (vfnmadd132_double(%ymm2_vfnmadd231pd_ymm_ymm_ymm[127:64], %ymm1_vfnmadd231pd_ymm_ymm_ymm[127:64], %ymm3_vfnmadd231pd_ymm_ymm_ymm[127:64]) ∘ vfnmadd132_double(%ymm2_vfnmadd231pd_ymm_ymm_ymm[63:0], %ymm1_vfnmadd231pd_ymm_ymm_ymm[63:0], %ymm3_vfnmadd231pd_ymm_ymm_ymm[63:0]))))[255:128])[127:0][127:0] ∘ (%ymm10_vfnmadd231pd_ymm_ymm_ymm[255:128] ∘ (vfnmadd132_double(%ymm2_vfnmadd231pd_ymm_ymm_ymm[255:192], %ymm1_vfnmadd231pd_ymm_ymm_ymm[255:192], %ymm3_vfnmadd231pd_ymm_ymm_ymm[255:192]) ∘ (vfnmadd132_double(%ymm2_vfnmadd231pd_ymm_ymm_ymm[191:128], %ymm1_vfnmadd231pd_ymm_ymm_ymm[191:128], %ymm3_vfnmadd231pd_ymm_ymm_ymm[191:128]) ∘ (vfnmadd132_double(%ymm2_vfnmadd231pd_ymm_ymm_ymm[127:64], %ymm1_vfnmadd231pd_ymm_ymm_ymm[127:64], %ymm3_vfnmadd231pd_ymm_ymm_ymm[127:64]) ∘ vfnmadd132_double(%ymm2_vfnmadd231pd_ymm_ymm_ymm[63:0], %ymm1_vfnmadd231pd_ymm_ymm_ymm[63:0], %ymm3_vfnmadd231pd_ymm_ymm_ymm[63:0]))))[127:0])[127:0][127:0]

Final state
%ymm1: vfnmadd132_double(0x0₆₄, 0x0₆₄, 0x0₆₄) ∘ vfnmadd132_double(0x0₆₄, 0x0₆₄, 0x0₆₄) ∘ (vfnmadd132_double(%ymm2_vfnmadd231pd_xmm_xmm_xmm[127:64], %ymm1_vfnmadd231pd_xmm_xmm_xmm[127:64], %ymm3_vfnmadd231pd_xmm_xmm_xmm[127:64]) ∘ vfnmadd132_double(%ymm2_vfnmadd231pd_xmm_xmm_xmm[63:0], %ymm1_vfnmadd231pd_xmm_xmm_xmm[63:0], %ymm3_vfnmadd231pd_xmm_xmm_xmm[63:0]))

=====================================
=====================================
Computing circuit for vfnmadd231pd %xmm1, %xmm2, %xmm3

.target:
vmovapd %xmm1, %xmm1
vmovapd %xmm2, %xmm8
vmaxpd %xmm3, %xmm3, %xmm5
vfnmadd231pd %ymm5, %ymm8, %ymm1
retq 

Initial state:
%ymm3: %ymm3_vfnmadd213pd_xmm_xmm_xmm

State for specgen instruction: vfnmadd231pd %xmm3, %xmm2, %xmm1:
%ymm1: vfnmadd132_double(0x0₆₄, 0x0₆₄, 0x0₆₄) ∘ vfnmadd132_double(0x0₆₄, 0x0₆₄, 0x0₆₄) ∘ (vfnmadd132_double(%ymm2_vfnmadd231pd_xmm_xmm_xmm[127:64], %ymm1_vfnmadd231pd_xmm_xmm_xmm[127:64], %ymm3_vfnmadd231pd_xmm_xmm_xmm[127:64]) ∘ vfnmadd132_double(%ymm2_vfnmadd231pd_xmm_xmm_xmm[63:0], %ymm1_vfnmadd231pd_xmm_xmm_xmm[63:0], %ymm3_vfnmadd231pd_xmm_xmm_xmm[63:0]))

Final state
%ymm3: vfnmadd132_double(0x0₆₄, 0x0₆₄, 0x0₆₄) ∘ vfnmadd132_double(0x0₆₄, 0x0₆₄, 0x0₆₄) ∘ (vfnmadd132_double(%ymm2_vfnmadd213pd_xmm_xmm_xmm[127:64], %ymm3_vfnmadd213pd_xmm_xmm_xmm[127:64], %ymm1_vfnmadd213pd_xmm_xmm_xmm[127:64]) ∘ vfnmadd132_double(%ymm2_vfnmadd213pd_xmm_xmm_xmm[63:0], %ymm3_vfnmadd213pd_xmm_xmm_xmm[63:0], %ymm1_vfnmadd213pd_xmm_xmm_xmm[63:0]))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm3_r10_r11

Final state:
%rax/%rax: %rax_vfnmadd213pd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vfnmadd213pd_xmm_xmm_xmm

%xmm0: %ymm0_vfnmadd213pd_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vfnmadd213pd_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm1

Final state:
%rax/%rax: %rax_vfnmadd213pd_xmm_xmm_xmm
%rdx/%rdx: %rdx_vfnmadd213pd_xmm_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ ((vfnmadd132_double(0x0₆₄, 0x0₆₄, 0x0₆₄) ∘ vfnmadd132_double(0x0₆₄, 0x0₆₄, 0x0₆₄) ∘ (vfnmadd132_double(%ymm2_vfnmadd213pd_xmm_xmm_xmm[127:64], %ymm3_vfnmadd213pd_xmm_xmm_xmm[127:64], %ymm1_vfnmadd213pd_xmm_xmm_xmm[127:64]) ∘ vfnmadd132_double(%ymm2_vfnmadd213pd_xmm_xmm_xmm[63:0], %ymm3_vfnmadd213pd_xmm_xmm_xmm[63:0], %ymm1_vfnmadd213pd_xmm_xmm_xmm[63:0])))[127:0][127:64][63:0] ∘ (vfnmadd132_double(0x0₆₄, 0x0₆₄, 0x0₆₄) ∘ vfnmadd132_double(0x0₆₄, 0x0₆₄, 0x0₆₄) ∘ (vfnmadd132_double(%ymm2_vfnmadd213pd_xmm_xmm_xmm[127:64], %ymm3_vfnmadd213pd_xmm_xmm_xmm[127:64], %ymm1_vfnmadd213pd_xmm_xmm_xmm[127:64]) ∘ vfnmadd132_double(%ymm2_vfnmadd213pd_xmm_xmm_xmm[63:0], %ymm3_vfnmadd213pd_xmm_xmm_xmm[63:0], %ymm1_vfnmadd213pd_xmm_xmm_xmm[63:0])))[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vfnmadd213pd %xmm3, %xmm2, %xmm1

.target:
vfnmadd231pd %xmm1, %xmm2, %xmm3
callq .move_128_064_xmm3_r10_r11
vzeroall 
callq .move_064_128_r10_r11_xmm1
retq 

Initial state:
%ymm1: %ymm1

State for specgen instruction: vfnmadd213pd %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ ((vfnmadd132_double(0x0₆₄, 0x0₆₄, 0x0₆₄) ∘ vfnmadd132_double(0x0₆₄, 0x0₆₄, 0x0₆₄) ∘ (vfnmadd132_double(%ymm2_vfnmadd213pd_xmm_xmm_xmm[127:64], %ymm3_vfnmadd213pd_xmm_xmm_xmm[127:64], %ymm1_vfnmadd213pd_xmm_xmm_xmm[127:64]) ∘ vfnmadd132_double(%ymm2_vfnmadd213pd_xmm_xmm_xmm[63:0], %ymm3_vfnmadd213pd_xmm_xmm_xmm[63:0], %ymm1_vfnmadd213pd_xmm_xmm_xmm[63:0])))[127:0][127:64][63:0] ∘ (vfnmadd132_double(0x0₆₄, 0x0₆₄, 0x0₆₄) ∘ vfnmadd132_double(0x0₆₄, 0x0₆₄, 0x0₆₄) ∘ (vfnmadd132_double(%ymm2_vfnmadd213pd_xmm_xmm_xmm[127:64], %ymm3_vfnmadd213pd_xmm_xmm_xmm[127:64], %ymm1_vfnmadd213pd_xmm_xmm_xmm[127:64]) ∘ vfnmadd132_double(%ymm2_vfnmadd213pd_xmm_xmm_xmm[63:0], %ymm3_vfnmadd213pd_xmm_xmm_xmm[63:0], %ymm1_vfnmadd213pd_xmm_xmm_xmm[63:0])))[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (vfnmadd132_double(%ymm2[127:64], %ymm3[127:64], %ymm1[127:64]) ∘ vfnmadd132_double(%ymm2[63:0], %ymm3[63:0], %ymm1[63:0]))

=====================================
Circuits:

%ymm1  : 0x0₁₂₈ ∘ (vfnmadd132_double(%ymm2[127:64], %ymm3[127:64], %ymm1[127:64]) ∘ vfnmadd132_double(%ymm2[63:0], %ymm3[63:0], %ymm1[63:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/