// Autogenerated using stratification.
requires "x86-configuration.k"

module VHSUBPD-YMM-YMM-YMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vhsubpd R1:Ymm, R2:Ymm, R3:Ymm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 64, 128), 53, 11)  -Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 0, 64), 53, 11) ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 64, 128), 53, 11)  -Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 0, 64), 53, 11) ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 128, 192), 53, 11) ) , 64)))) )


)

    </regstate>
endmodule

module VHSUBPD-YMM-YMM-YMM-SEMANTICS
  imports VHSUBPD-YMM-YMM-YMM
endmodule
/*
TargetInstr:
vhsubpd %ymm3, %ymm2, %ymm1
RWSet:
maybe read:{ %ymm2 %ymm3 }
must read:{ %ymm2 %ymm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:vpunpcklqdq %ymm3, %ymm2, %ymm9  #  1     0     4      OPC=vpunpcklqdq_ymm_ymm_ymm
circuit:vpunpckhqdq %ymm3, %ymm2, %ymm6  #  2     0x4   4      OPC=vpunpckhqdq_ymm_ymm_ymm
circuit:vmovdqa %ymm9, %ymm2             #  3     0x8   5      OPC=vmovdqa_ymm_ymm
circuit:vsubpd %ymm6, %ymm2, %ymm1       #  4     0xd   4      OPC=vsubpd_ymm_ymm_ymm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vhsubpd %ymm3, %ymm2, %ymm1

  maybe read:      { %ymm2 %ymm3 }
  must read:       { %ymm2 %ymm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

-------------------------------------
Getting base circuit for callq .move_256_128_ymm2_xmm8_xmm9

Final state:
%rax/%rax: %rax_vmovddup_ymm_ymm
%rdx/%rdx: %rdx_vmovddup_ymm_ymm

%xmm0: %ymm0_vmovddup_ymm_ymm[127:0]
%xmm1: %ymm1_vmovddup_ymm_ymm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovddup_xmm_xmm
%rdx/%rdx: %rdx_vmovddup_xmm_xmm

%xmm0: %ymm0_vmovddup_xmm_xmm[127:0]
%xmm1: %ymm1_vmovddup_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovddup_xmm_xmm
%rdx/%rdx: %rdx_vmovddup_xmm_xmm

%xmm0: %ymm0_vmovddup_xmm_xmm[127:0]
%xmm1: (%ymm1_vmovddup_xmm_xmm[255:128] ∘ (%ymm2_vmovddup_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovddup_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vpbroadcastq_xmm_xmm
%rdx/%rdx: %rdx_vpbroadcastq_xmm_xmm

%xmm0: %ymm0_vpbroadcastq_xmm_xmm[127:0]
%xmm1: %ymm1_vpbroadcastq_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %r11

Final state:
%r11/%r11: %ymm2_vpbroadcastq_xmm_xmm[127:0][63:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm1

Final state:
%rax/%rax: %rax_vpbroadcastq_xmm_xmm
%rdx/%rdx: %rdx_vpbroadcastq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0] ∘ %ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vpbroadcastq %xmm1, %xmm1

.target:
callq .move_128_064_xmm2_r10_r11
vzeroall 
movq %r10, %r11
callq .move_064_128_r10_r11_xmm1
retq 

Initial state:
%ymm1: %ymm1_vmovddup_xmm_xmm[255:128] ∘ (%ymm2_vmovddup_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovddup_xmm_xmm[127:0][63:0][63:0])

State for specgen instruction: vpbroadcastq %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0] ∘ %ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (%ymm2_vmovddup_xmm_xmm[63:0] ∘ %ymm2_vmovddup_xmm_xmm[63:0])

=====================================
=====================================
Computing circuit for vmovddup %xmm9, %xmm9

.target:
callq .move_128_064_xmm2_r12_r13
callq .move_064_128_r12_r13_xmm1
vpbroadcastq %xmm1, %xmm1
retq 

Initial state:
%ymm9: %ymm9_vmovddup_ymm_ymm[255:128] ∘ %ymm2_vmovddup_ymm_ymm[255:128]

State for specgen instruction: vmovddup %xmm2, %xmm1:
%ymm1: 0x0₁₂₈ ∘ (%ymm2_vmovddup_xmm_xmm[63:0] ∘ %ymm2_vmovddup_xmm_xmm[63:0])

Final state
%ymm9: 0x0₁₂₈ ∘ (%ymm2_vmovddup_ymm_ymm[191:128] ∘ %ymm2_vmovddup_ymm_ymm[191:128])

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vpbroadcastq_xmm_xmm
%rdx/%rdx: %rdx_vpbroadcastq_xmm_xmm

%xmm0: %ymm0_vpbroadcastq_xmm_xmm[127:0]
%xmm1: %ymm1_vpbroadcastq_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %r11

Final state:
%r11/%r11: %ymm2_vpbroadcastq_xmm_xmm[127:0][63:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm1

Final state:
%rax/%rax: %rax_vpbroadcastq_xmm_xmm
%rdx/%rdx: %rdx_vpbroadcastq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0] ∘ %ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vpbroadcastq %xmm2, %xmm8

.target:
callq .move_128_064_xmm2_r10_r11
vzeroall 
movq %r10, %r11
callq .move_064_128_r10_r11_xmm1
retq 

Initial state:
%ymm8: %ymm8_vmovddup_ymm_ymm[255:128] ∘ %ymm2_vmovddup_ymm_ymm[127:0]

State for specgen instruction: vpbroadcastq %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0] ∘ %ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm8: 0x0₁₂₈ ∘ (%ymm2_vmovddup_ymm_ymm[63:0] ∘ %ymm2_vmovddup_ymm_ymm[63:0])

=====================================
-------------------------------------
Getting base circuit for callq .move_128_256_xmm8_xmm9_ymm1

Final state:
%rax/%rax: %rax_vmovddup_ymm_ymm
%rdx/%rdx: %rdx_vmovddup_ymm_ymm

%xmm0: %ymm0_vmovddup_ymm_ymm[127:0]
%xmm1: ((0x0₁₂₈ ∘ (%ymm2_vmovddup_ymm_ymm[191:128] ∘ %ymm2_vmovddup_ymm_ymm[191:128]))[127:0][127:0] ∘ (0x0₁₂₈ ∘ (%ymm2_vmovddup_ymm_ymm[63:0] ∘ %ymm2_vmovddup_ymm_ymm[63:0]))[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vmovddup %ymm2, %ymm2

.target:
callq .move_256_128_ymm2_xmm8_xmm9
vmovddup %xmm9, %xmm9
vpbroadcastq %xmm2, %xmm8
callq .move_128_256_xmm8_xmm9_ymm1
retq 

Initial state:
%ymm2: %ymm2_vpunpcklqdq_ymm_ymm_ymm

State for specgen instruction: vmovddup %ymm2, %ymm1:
%ymm1: (0x0₁₂₈ ∘ (%ymm2_vmovddup_ymm_ymm[191:128] ∘ %ymm2_vmovddup_ymm_ymm[191:128]))[127:0][127:0] ∘ (0x0₁₂₈ ∘ (%ymm2_vmovddup_ymm_ymm[63:0] ∘ %ymm2_vmovddup_ymm_ymm[63:0]))[127:0][127:0]

Final state
%ymm2: %ymm2_vpunpcklqdq_ymm_ymm_ymm[191:128] ∘ %ymm2_vpunpcklqdq_ymm_ymm_ymm[191:128] ∘ (%ymm2_vpunpcklqdq_ymm_ymm_ymm[63:0] ∘ %ymm2_vpunpcklqdq_ymm_ymm_ymm[63:0])

=====================================
-------------------------------------
Getting base circuit for callq .move_256_128_ymm2_xmm8_xmm9

Final state:
%rax/%rax: %rax_vmovddup_ymm_ymm
%rdx/%rdx: %rdx_vmovddup_ymm_ymm

%xmm0: %ymm0_vmovddup_ymm_ymm[127:0]
%xmm1: %ymm1_vmovddup_ymm_ymm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovddup_xmm_xmm
%rdx/%rdx: %rdx_vmovddup_xmm_xmm

%xmm0: %ymm0_vmovddup_xmm_xmm[127:0]
%xmm1: %ymm1_vmovddup_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovddup_xmm_xmm
%rdx/%rdx: %rdx_vmovddup_xmm_xmm

%xmm0: %ymm0_vmovddup_xmm_xmm[127:0]
%xmm1: (%ymm1_vmovddup_xmm_xmm[255:128] ∘ (%ymm2_vmovddup_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovddup_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vpbroadcastq_xmm_xmm
%rdx/%rdx: %rdx_vpbroadcastq_xmm_xmm

%xmm0: %ymm0_vpbroadcastq_xmm_xmm[127:0]
%xmm1: %ymm1_vpbroadcastq_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %r11

Final state:
%r11/%r11: %ymm2_vpbroadcastq_xmm_xmm[127:0][63:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm1

Final state:
%rax/%rax: %rax_vpbroadcastq_xmm_xmm
%rdx/%rdx: %rdx_vpbroadcastq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0] ∘ %ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vpbroadcastq %xmm1, %xmm1

.target:
callq .move_128_064_xmm2_r10_r11
vzeroall 
movq %r10, %r11
callq .move_064_128_r10_r11_xmm1
retq 

Initial state:
%ymm1: %ymm1_vmovddup_xmm_xmm[255:128] ∘ (%ymm2_vmovddup_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovddup_xmm_xmm[127:0][63:0][63:0])

State for specgen instruction: vpbroadcastq %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0] ∘ %ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (%ymm2_vmovddup_xmm_xmm[63:0] ∘ %ymm2_vmovddup_xmm_xmm[63:0])

=====================================
=====================================
Computing circuit for vmovddup %xmm9, %xmm9

.target:
callq .move_128_064_xmm2_r12_r13
callq .move_064_128_r12_r13_xmm1
vpbroadcastq %xmm1, %xmm1
retq 

Initial state:
%ymm9: %ymm9_vmovddup_ymm_ymm[255:128] ∘ %ymm2_vmovddup_ymm_ymm[255:128]

State for specgen instruction: vmovddup %xmm2, %xmm1:
%ymm1: 0x0₁₂₈ ∘ (%ymm2_vmovddup_xmm_xmm[63:0] ∘ %ymm2_vmovddup_xmm_xmm[63:0])

Final state
%ymm9: 0x0₁₂₈ ∘ (%ymm2_vmovddup_ymm_ymm[191:128] ∘ %ymm2_vmovddup_ymm_ymm[191:128])

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vpbroadcastq_xmm_xmm
%rdx/%rdx: %rdx_vpbroadcastq_xmm_xmm

%xmm0: %ymm0_vpbroadcastq_xmm_xmm[127:0]
%xmm1: %ymm1_vpbroadcastq_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %r11

Final state:
%r11/%r11: %ymm2_vpbroadcastq_xmm_xmm[127:0][63:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm1

Final state:
%rax/%rax: %rax_vpbroadcastq_xmm_xmm
%rdx/%rdx: %rdx_vpbroadcastq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0] ∘ %ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vpbroadcastq %xmm2, %xmm8

.target:
callq .move_128_064_xmm2_r10_r11
vzeroall 
movq %r10, %r11
callq .move_064_128_r10_r11_xmm1
retq 

Initial state:
%ymm8: %ymm8_vmovddup_ymm_ymm[255:128] ∘ %ymm2_vmovddup_ymm_ymm[127:0]

State for specgen instruction: vpbroadcastq %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0] ∘ %ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm8: 0x0₁₂₈ ∘ (%ymm2_vmovddup_ymm_ymm[63:0] ∘ %ymm2_vmovddup_ymm_ymm[63:0])

=====================================
-------------------------------------
Getting base circuit for callq .move_128_256_xmm8_xmm9_ymm1

Final state:
%rax/%rax: %rax_vmovddup_ymm_ymm
%rdx/%rdx: %rdx_vmovddup_ymm_ymm

%xmm0: %ymm0_vmovddup_ymm_ymm[127:0]
%xmm1: ((0x0₁₂₈ ∘ (%ymm2_vmovddup_ymm_ymm[191:128] ∘ %ymm2_vmovddup_ymm_ymm[191:128]))[127:0][127:0] ∘ (0x0₁₂₈ ∘ (%ymm2_vmovddup_ymm_ymm[63:0] ∘ %ymm2_vmovddup_ymm_ymm[63:0]))[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vmovddup %ymm3, %ymm11

.target:
callq .move_256_128_ymm2_xmm8_xmm9
vmovddup %xmm9, %xmm9
vpbroadcastq %xmm2, %xmm8
callq .move_128_256_xmm8_xmm9_ymm1
retq 

Initial state:
%ymm11: %ymm11_vpunpcklqdq_ymm_ymm_ymm

State for specgen instruction: vmovddup %ymm2, %ymm1:
%ymm1: (0x0₁₂₈ ∘ (%ymm2_vmovddup_ymm_ymm[191:128] ∘ %ymm2_vmovddup_ymm_ymm[191:128]))[127:0][127:0] ∘ (0x0₁₂₈ ∘ (%ymm2_vmovddup_ymm_ymm[63:0] ∘ %ymm2_vmovddup_ymm_ymm[63:0]))[127:0][127:0]

Final state
%ymm11: %ymm3_vpunpcklqdq_ymm_ymm_ymm[191:128] ∘ %ymm3_vpunpcklqdq_ymm_ymm_ymm[191:128] ∘ (%ymm3_vpunpcklqdq_ymm_ymm_ymm[63:0] ∘ %ymm3_vpunpcklqdq_ymm_ymm_ymm[63:0])

=====================================
-------------------------------------
Getting base circuit for callq .move_256_128_ymm2_xmm8_xmm9

Final state:
%rax/%rax: %rax_vunpckhpd_ymm_ymm_ymm
%rdx/%rdx: %rdx_vunpckhpd_ymm_ymm_ymm

%xmm0: %ymm0_vunpckhpd_ymm_ymm_ymm[127:0]
%xmm1: %ymm1_vunpckhpd_ymm_ymm_ymm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_256_128_ymm3_xmm10_xmm11

Final state:
%rax/%rax: %rax_vunpckhpd_ymm_ymm_ymm
%rdx/%rdx: %rdx_vunpckhpd_ymm_ymm_ymm

%xmm0: %ymm0_vunpckhpd_ymm_ymm_ymm[127:0]
%xmm1: %ymm1_vunpckhpd_ymm_ymm_ymm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_64_xmm1_xmm12_xmm13

Final state:
%rax/%rax: %rax_unpckhpd_xmm_xmm
%rdx/%rdx: %rdx_unpckhpd_xmm_xmm

%xmm0: %ymm0_unpckhpd_xmm_xmm[127:0]
%xmm1: %ymm1_unpckhpd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_unpckhpd_xmm_xmm
%rdx/%rdx: %rdx_unpckhpd_xmm_xmm

%xmm0: %ymm0_unpckhpd_xmm_xmm[127:0]
%xmm1: %ymm1_unpckhpd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_032_xmm1_r10d_r11d_r12d_r13d

Final state:
%rax/%rax: %rax_vmovq_r64_xmm
%rdx/%rdx: %rdx_vmovq_r64_xmm

%xmm0: %ymm0_vmovq_r64_xmm[127:0]
%xmm1: %ymm1_vmovq_r64_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_vmovq_r64_xmm
%rdx/%rdx: %rdx_vmovq_r64_xmm

%xmm0: %ymm0_vmovq_r64_xmm[127:0]
%xmm1: %ymm1_vmovq_r64_xmm[127:0]

-------------------------------------
=====================================
Computing circuit for vmovq %xmm1, %r10

.target:
callq .move_128_032_xmm1_r10d_r11d_r12d_r13d
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r10/%r10: %r10_movq_r64_xmm

State for specgen instruction: vmovq %xmm1, %rbx:
%rbx/%rbx: (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][31:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r10
Value is               -> (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][31:0])[31:0][31:0]
  after renaming it is => %ymm1_movq_r64_xmm[63:0]

Final state
%r10/%r10: %ymm1_movq_r64_xmm[63:0]

=====================================
-------------------------------------
Getting base circuit for movq %r10, %rbx

Final state:
%rbx/%rbx: %ymm1_movq_r64_xmm[63:0]

-------------------------------------
=====================================
Computing circuit for movq %xmm13, %r12

.target:
vmovq %xmm1, %r10
movq %r10, %rbx
retq 

Initial state:
%r12/%r12: %ymm2_unpckhpd_xmm_xmm[127:0][63:0]

State for specgen instruction: movq %xmm1, %rbx:
%rbx/%rbx: %ymm1_movq_r64_xmm[63:0]

Register        -> %rbx
  translates to => %r12
Value is               -> %ymm1_movq_r64_xmm[63:0]
  after renaming it is => %ymm1_unpckhpd_xmm_xmm[127:64]

Final state
%r12/%r12: %ymm1_unpckhpd_xmm_xmm[127:64]

=====================================
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_unpckhpd_xmm_xmm
%rdx/%rdx: %rdx_unpckhpd_xmm_xmm

%xmm0: %ymm0_unpckhpd_xmm_xmm[127:0]
%xmm1: (%ymm1_unpckhpd_xmm_xmm[255:128] ∘ (%ymm2_unpckhpd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm1_unpckhpd_xmm_xmm[127:64][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for unpckhpd %xmm3, %xmm8

.target:
callq .move_128_64_xmm1_xmm12_xmm13
callq .move_128_064_xmm2_r12_r13
movq %xmm13, %r12
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%xmm8: (%ymm8_vunpckhpd_ymm_ymm_ymm[255:128] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[127:0])[127:0]

State for specgen instruction: unpckhpd %xmm2, %xmm1:
%xmm1: (%ymm1_unpckhpd_xmm_xmm[255:128] ∘ (%ymm2_unpckhpd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm1_unpckhpd_xmm_xmm[127:64][63:0]))[127:0]

Final state
%xmm8: ((%ymm8_vunpckhpd_ymm_ymm_ymm[255:128] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[127:0])[255:128] ∘ (%ymm3_vunpckhpd_ymm_ymm_ymm[127:64] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[127:64]))[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_64_xmm1_xmm12_xmm13

Final state:
%rax/%rax: %rax_unpckhpd_xmm_xmm
%rdx/%rdx: %rdx_unpckhpd_xmm_xmm

%xmm0: %ymm0_unpckhpd_xmm_xmm[127:0]
%xmm1: %ymm1_unpckhpd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_unpckhpd_xmm_xmm
%rdx/%rdx: %rdx_unpckhpd_xmm_xmm

%xmm0: %ymm0_unpckhpd_xmm_xmm[127:0]
%xmm1: %ymm1_unpckhpd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_032_xmm1_r10d_r11d_r12d_r13d

Final state:
%rax/%rax: %rax_vmovq_r64_xmm
%rdx/%rdx: %rdx_vmovq_r64_xmm

%xmm0: %ymm0_vmovq_r64_xmm[127:0]
%xmm1: %ymm1_vmovq_r64_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_vmovq_r64_xmm
%rdx/%rdx: %rdx_vmovq_r64_xmm

%xmm0: %ymm0_vmovq_r64_xmm[127:0]
%xmm1: %ymm1_vmovq_r64_xmm[127:0]

-------------------------------------
=====================================
Computing circuit for vmovq %xmm1, %r10

.target:
callq .move_128_032_xmm1_r10d_r11d_r12d_r13d
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r10/%r10: %r10_movq_r64_xmm

State for specgen instruction: vmovq %xmm1, %rbx:
%rbx/%rbx: (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][31:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r10
Value is               -> (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][31:0])[31:0][31:0]
  after renaming it is => %ymm1_movq_r64_xmm[63:0]

Final state
%r10/%r10: %ymm1_movq_r64_xmm[63:0]

=====================================
-------------------------------------
Getting base circuit for movq %r10, %rbx

Final state:
%rbx/%rbx: %ymm1_movq_r64_xmm[63:0]

-------------------------------------
=====================================
Computing circuit for movq %xmm13, %r12

.target:
vmovq %xmm1, %r10
movq %r10, %rbx
retq 

Initial state:
%r12/%r12: %ymm2_unpckhpd_xmm_xmm[127:0][63:0]

State for specgen instruction: movq %xmm1, %rbx:
%rbx/%rbx: %ymm1_movq_r64_xmm[63:0]

Register        -> %rbx
  translates to => %r12
Value is               -> %ymm1_movq_r64_xmm[63:0]
  after renaming it is => %ymm1_unpckhpd_xmm_xmm[127:64]

Final state
%r12/%r12: %ymm1_unpckhpd_xmm_xmm[127:64]

=====================================
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_unpckhpd_xmm_xmm
%rdx/%rdx: %rdx_unpckhpd_xmm_xmm

%xmm0: %ymm0_unpckhpd_xmm_xmm[127:0]
%xmm1: (%ymm1_unpckhpd_xmm_xmm[255:128] ∘ (%ymm2_unpckhpd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm1_unpckhpd_xmm_xmm[127:64][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for unpckhpd %xmm11, %xmm9

.target:
callq .move_128_64_xmm1_xmm12_xmm13
callq .move_128_064_xmm2_r12_r13
movq %xmm13, %r12
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%xmm9: (%ymm9_vunpckhpd_ymm_ymm_ymm[255:128] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[255:128])[127:0]

State for specgen instruction: unpckhpd %xmm2, %xmm1:
%xmm1: (%ymm1_unpckhpd_xmm_xmm[255:128] ∘ (%ymm2_unpckhpd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm1_unpckhpd_xmm_xmm[127:64][63:0]))[127:0]

Final state
%xmm9: ((%ymm9_vunpckhpd_ymm_ymm_ymm[255:128] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[255:128])[255:128] ∘ (%ymm3_vunpckhpd_ymm_ymm_ymm[255:192] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[255:192]))[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_256_xmm8_xmm9_ymm1

Final state:
%rax/%rax: %rax_vunpckhpd_ymm_ymm_ymm
%rdx/%rdx: %rdx_vunpckhpd_ymm_ymm_ymm

%xmm0: %ymm0_vunpckhpd_ymm_ymm_ymm[127:0]
%xmm1: (((%ymm9_vunpckhpd_ymm_ymm_ymm[255:128] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[255:128])[255:128] ∘ (%ymm3_vunpckhpd_ymm_ymm_ymm[255:192] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[255:192]))[127:0][127:0] ∘ ((%ymm8_vunpckhpd_ymm_ymm_ymm[255:128] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[127:0])[255:128] ∘ (%ymm3_vunpckhpd_ymm_ymm_ymm[127:64] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[127:64]))[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vunpckhpd %ymm11, %ymm2, %ymm1

.target:
callq .move_256_128_ymm2_xmm8_xmm9
callq .move_256_128_ymm3_xmm10_xmm11
unpckhpd %xmm3, %xmm8
unpckhpd %xmm11, %xmm9
callq .move_128_256_xmm8_xmm9_ymm1
retq 

Initial state:
%ymm1: %ymm1_vpunpcklqdq_ymm_ymm_ymm

State for specgen instruction: vunpckhpd %ymm3, %ymm2, %ymm1:
%ymm1: ((%ymm9_vunpckhpd_ymm_ymm_ymm[255:128] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[255:128])[255:128] ∘ (%ymm3_vunpckhpd_ymm_ymm_ymm[255:192] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[255:192]))[127:0][127:0] ∘ ((%ymm8_vunpckhpd_ymm_ymm_ymm[255:128] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[127:0])[255:128] ∘ (%ymm3_vunpckhpd_ymm_ymm_ymm[127:64] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[127:64]))[127:0][127:0]

Final state
%ymm1: %ymm3_vpunpcklqdq_ymm_ymm_ymm[191:128] ∘ %ymm2_vpunpcklqdq_ymm_ymm_ymm[191:128] ∘ (%ymm3_vpunpcklqdq_ymm_ymm_ymm[63:0] ∘ %ymm2_vpunpcklqdq_ymm_ymm_ymm[63:0])

=====================================
=====================================
Computing circuit for vpunpcklqdq %ymm3, %ymm2, %ymm9

.target:
vmovddup %ymm2, %ymm2
vmovddup %ymm3, %ymm11
vunpckhpd %ymm11, %ymm2, %ymm1
retq 

Initial state:
%ymm9: %ymm9_vhsubpd_ymm_ymm_ymm

State for specgen instruction: vpunpcklqdq %ymm3, %ymm2, %ymm1:
%ymm1: %ymm3_vpunpcklqdq_ymm_ymm_ymm[191:128] ∘ %ymm2_vpunpcklqdq_ymm_ymm_ymm[191:128] ∘ (%ymm3_vpunpcklqdq_ymm_ymm_ymm[63:0] ∘ %ymm2_vpunpcklqdq_ymm_ymm_ymm[63:0])

Final state
%ymm9: %ymm3_vhsubpd_ymm_ymm_ymm[191:128] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[191:128] ∘ (%ymm3_vhsubpd_ymm_ymm_ymm[63:0] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[63:0])

=====================================
-------------------------------------
Getting base circuit for callq .move_256_128_ymm2_xmm8_xmm9

Final state:
%rax/%rax: %rax_vunpckhpd_ymm_ymm_ymm
%rdx/%rdx: %rdx_vunpckhpd_ymm_ymm_ymm

%xmm0: %ymm0_vunpckhpd_ymm_ymm_ymm[127:0]
%xmm1: %ymm1_vunpckhpd_ymm_ymm_ymm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_256_128_ymm3_xmm10_xmm11

Final state:
%rax/%rax: %rax_vunpckhpd_ymm_ymm_ymm
%rdx/%rdx: %rdx_vunpckhpd_ymm_ymm_ymm

%xmm0: %ymm0_vunpckhpd_ymm_ymm_ymm[127:0]
%xmm1: %ymm1_vunpckhpd_ymm_ymm_ymm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_64_xmm1_xmm12_xmm13

Final state:
%rax/%rax: %rax_unpckhpd_xmm_xmm
%rdx/%rdx: %rdx_unpckhpd_xmm_xmm

%xmm0: %ymm0_unpckhpd_xmm_xmm[127:0]
%xmm1: %ymm1_unpckhpd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_unpckhpd_xmm_xmm
%rdx/%rdx: %rdx_unpckhpd_xmm_xmm

%xmm0: %ymm0_unpckhpd_xmm_xmm[127:0]
%xmm1: %ymm1_unpckhpd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_032_xmm1_r10d_r11d_r12d_r13d

Final state:
%rax/%rax: %rax_vmovq_r64_xmm
%rdx/%rdx: %rdx_vmovq_r64_xmm

%xmm0: %ymm0_vmovq_r64_xmm[127:0]
%xmm1: %ymm1_vmovq_r64_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_vmovq_r64_xmm
%rdx/%rdx: %rdx_vmovq_r64_xmm

%xmm0: %ymm0_vmovq_r64_xmm[127:0]
%xmm1: %ymm1_vmovq_r64_xmm[127:0]

-------------------------------------
=====================================
Computing circuit for vmovq %xmm1, %r10

.target:
callq .move_128_032_xmm1_r10d_r11d_r12d_r13d
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r10/%r10: %r10_movq_r64_xmm

State for specgen instruction: vmovq %xmm1, %rbx:
%rbx/%rbx: (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][31:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r10
Value is               -> (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][31:0])[31:0][31:0]
  after renaming it is => %ymm1_movq_r64_xmm[63:0]

Final state
%r10/%r10: %ymm1_movq_r64_xmm[63:0]

=====================================
-------------------------------------
Getting base circuit for movq %r10, %rbx

Final state:
%rbx/%rbx: %ymm1_movq_r64_xmm[63:0]

-------------------------------------
=====================================
Computing circuit for movq %xmm13, %r12

.target:
vmovq %xmm1, %r10
movq %r10, %rbx
retq 

Initial state:
%r12/%r12: %ymm2_unpckhpd_xmm_xmm[127:0][63:0]

State for specgen instruction: movq %xmm1, %rbx:
%rbx/%rbx: %ymm1_movq_r64_xmm[63:0]

Register        -> %rbx
  translates to => %r12
Value is               -> %ymm1_movq_r64_xmm[63:0]
  after renaming it is => %ymm1_unpckhpd_xmm_xmm[127:64]

Final state
%r12/%r12: %ymm1_unpckhpd_xmm_xmm[127:64]

=====================================
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_unpckhpd_xmm_xmm
%rdx/%rdx: %rdx_unpckhpd_xmm_xmm

%xmm0: %ymm0_unpckhpd_xmm_xmm[127:0]
%xmm1: (%ymm1_unpckhpd_xmm_xmm[255:128] ∘ (%ymm2_unpckhpd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm1_unpckhpd_xmm_xmm[127:64][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for unpckhpd %xmm3, %xmm8

.target:
callq .move_128_64_xmm1_xmm12_xmm13
callq .move_128_064_xmm2_r12_r13
movq %xmm13, %r12
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%xmm8: (%ymm8_vunpckhpd_ymm_ymm_ymm[255:128] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[127:0])[127:0]

State for specgen instruction: unpckhpd %xmm2, %xmm1:
%xmm1: (%ymm1_unpckhpd_xmm_xmm[255:128] ∘ (%ymm2_unpckhpd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm1_unpckhpd_xmm_xmm[127:64][63:0]))[127:0]

Final state
%xmm8: ((%ymm8_vunpckhpd_ymm_ymm_ymm[255:128] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[127:0])[255:128] ∘ (%ymm3_vunpckhpd_ymm_ymm_ymm[127:64] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[127:64]))[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_64_xmm1_xmm12_xmm13

Final state:
%rax/%rax: %rax_unpckhpd_xmm_xmm
%rdx/%rdx: %rdx_unpckhpd_xmm_xmm

%xmm0: %ymm0_unpckhpd_xmm_xmm[127:0]
%xmm1: %ymm1_unpckhpd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_unpckhpd_xmm_xmm
%rdx/%rdx: %rdx_unpckhpd_xmm_xmm

%xmm0: %ymm0_unpckhpd_xmm_xmm[127:0]
%xmm1: %ymm1_unpckhpd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_032_xmm1_r10d_r11d_r12d_r13d

Final state:
%rax/%rax: %rax_vmovq_r64_xmm
%rdx/%rdx: %rdx_vmovq_r64_xmm

%xmm0: %ymm0_vmovq_r64_xmm[127:0]
%xmm1: %ymm1_vmovq_r64_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_vmovq_r64_xmm
%rdx/%rdx: %rdx_vmovq_r64_xmm

%xmm0: %ymm0_vmovq_r64_xmm[127:0]
%xmm1: %ymm1_vmovq_r64_xmm[127:0]

-------------------------------------
=====================================
Computing circuit for vmovq %xmm1, %r10

.target:
callq .move_128_032_xmm1_r10d_r11d_r12d_r13d
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r10/%r10: %r10_movq_r64_xmm

State for specgen instruction: vmovq %xmm1, %rbx:
%rbx/%rbx: (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][31:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r10
Value is               -> (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][31:0])[31:0][31:0]
  after renaming it is => %ymm1_movq_r64_xmm[63:0]

Final state
%r10/%r10: %ymm1_movq_r64_xmm[63:0]

=====================================
-------------------------------------
Getting base circuit for movq %r10, %rbx

Final state:
%rbx/%rbx: %ymm1_movq_r64_xmm[63:0]

-------------------------------------
=====================================
Computing circuit for movq %xmm13, %r12

.target:
vmovq %xmm1, %r10
movq %r10, %rbx
retq 

Initial state:
%r12/%r12: %ymm2_unpckhpd_xmm_xmm[127:0][63:0]

State for specgen instruction: movq %xmm1, %rbx:
%rbx/%rbx: %ymm1_movq_r64_xmm[63:0]

Register        -> %rbx
  translates to => %r12
Value is               -> %ymm1_movq_r64_xmm[63:0]
  after renaming it is => %ymm1_unpckhpd_xmm_xmm[127:64]

Final state
%r12/%r12: %ymm1_unpckhpd_xmm_xmm[127:64]

=====================================
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_unpckhpd_xmm_xmm
%rdx/%rdx: %rdx_unpckhpd_xmm_xmm

%xmm0: %ymm0_unpckhpd_xmm_xmm[127:0]
%xmm1: (%ymm1_unpckhpd_xmm_xmm[255:128] ∘ (%ymm2_unpckhpd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm1_unpckhpd_xmm_xmm[127:64][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for unpckhpd %xmm11, %xmm9

.target:
callq .move_128_64_xmm1_xmm12_xmm13
callq .move_128_064_xmm2_r12_r13
movq %xmm13, %r12
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%xmm9: (%ymm9_vunpckhpd_ymm_ymm_ymm[255:128] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[255:128])[127:0]

State for specgen instruction: unpckhpd %xmm2, %xmm1:
%xmm1: (%ymm1_unpckhpd_xmm_xmm[255:128] ∘ (%ymm2_unpckhpd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm1_unpckhpd_xmm_xmm[127:64][63:0]))[127:0]

Final state
%xmm9: ((%ymm9_vunpckhpd_ymm_ymm_ymm[255:128] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[255:128])[255:128] ∘ (%ymm3_vunpckhpd_ymm_ymm_ymm[255:192] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[255:192]))[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_256_xmm8_xmm9_ymm1

Final state:
%rax/%rax: %rax_vunpckhpd_ymm_ymm_ymm
%rdx/%rdx: %rdx_vunpckhpd_ymm_ymm_ymm

%xmm0: %ymm0_vunpckhpd_ymm_ymm_ymm[127:0]
%xmm1: (((%ymm9_vunpckhpd_ymm_ymm_ymm[255:128] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[255:128])[255:128] ∘ (%ymm3_vunpckhpd_ymm_ymm_ymm[255:192] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[255:192]))[127:0][127:0] ∘ ((%ymm8_vunpckhpd_ymm_ymm_ymm[255:128] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[127:0])[255:128] ∘ (%ymm3_vunpckhpd_ymm_ymm_ymm[127:64] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[127:64]))[127:0][127:0])[127:0]

-------------------------------------
=====================================
Computing circuit for vunpckhpd %ymm3, %ymm2, %ymm1

.target:
callq .move_256_128_ymm2_xmm8_xmm9
callq .move_256_128_ymm3_xmm10_xmm11
unpckhpd %xmm3, %xmm8
unpckhpd %xmm11, %xmm9
callq .move_128_256_xmm8_xmm9_ymm1
retq 

Initial state:
%ymm1: %ymm1_vpunpckhqdq_ymm_ymm_ymm

State for specgen instruction: vunpckhpd %ymm3, %ymm2, %ymm1:
%ymm1: ((%ymm9_vunpckhpd_ymm_ymm_ymm[255:128] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[255:128])[255:128] ∘ (%ymm3_vunpckhpd_ymm_ymm_ymm[255:192] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[255:192]))[127:0][127:0] ∘ ((%ymm8_vunpckhpd_ymm_ymm_ymm[255:128] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[127:0])[255:128] ∘ (%ymm3_vunpckhpd_ymm_ymm_ymm[127:64] ∘ %ymm2_vunpckhpd_ymm_ymm_ymm[127:64]))[127:0][127:0]

Final state
%ymm1: %ymm3_vpunpckhqdq_ymm_ymm_ymm[255:192] ∘ %ymm2_vpunpckhqdq_ymm_ymm_ymm[255:192] ∘ (%ymm3_vpunpckhqdq_ymm_ymm_ymm[127:64] ∘ %ymm2_vpunpckhqdq_ymm_ymm_ymm[127:64])

=====================================
=====================================
Computing circuit for vpunpckhqdq %ymm3, %ymm2, %ymm6

.target:
vunpckhpd %ymm3, %ymm2, %ymm1
retq 

Initial state:
%ymm6: %ymm6_vhsubpd_ymm_ymm_ymm

State for specgen instruction: vpunpckhqdq %ymm3, %ymm2, %ymm1:
%ymm1: %ymm3_vpunpckhqdq_ymm_ymm_ymm[255:192] ∘ %ymm2_vpunpckhqdq_ymm_ymm_ymm[255:192] ∘ (%ymm3_vpunpckhqdq_ymm_ymm_ymm[127:64] ∘ %ymm2_vpunpckhqdq_ymm_ymm_ymm[127:64])

Final state
%ymm6: %ymm3_vhsubpd_ymm_ymm_ymm[255:192] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[255:192] ∘ (%ymm3_vhsubpd_ymm_ymm_ymm[127:64] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[127:64])

=====================================
-------------------------------------
Getting base circuit for vminpd %ymm2, %ymm2, %ymm1

Final state:
%ymm1: (mincmp_double(%ymm2_vmovdqa_ymm_ymm[255:192], %ymm2_vmovdqa_ymm_ymm[255:192])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[255:192] : %ymm2_vmovdqa_ymm_ymm[255:192]) ∘ ((mincmp_double(%ymm2_vmovdqa_ymm_ymm[191:128], %ymm2_vmovdqa_ymm_ymm[191:128])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[191:128] : %ymm2_vmovdqa_ymm_ymm[191:128]) ∘ ((mincmp_double(%ymm2_vmovdqa_ymm_ymm[127:64], %ymm2_vmovdqa_ymm_ymm[127:64])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[127:64] : %ymm2_vmovdqa_ymm_ymm[127:64]) ∘ (mincmp_double(%ymm2_vmovdqa_ymm_ymm[63:0], %ymm2_vmovdqa_ymm_ymm[63:0])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[63:0] : %ymm2_vmovdqa_ymm_ymm[63:0])))

-------------------------------------
=====================================
Computing circuit for vmovdqa %ymm9, %ymm2

.target:
vminpd %ymm2, %ymm2, %ymm1
retq 

Initial state:
%ymm2: %ymm2_vhsubpd_ymm_ymm_ymm

State for specgen instruction: vmovdqa %ymm2, %ymm1:
%ymm1: (mincmp_double(%ymm2_vmovdqa_ymm_ymm[255:192], %ymm2_vmovdqa_ymm_ymm[255:192])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[255:192] : %ymm2_vmovdqa_ymm_ymm[255:192]) ∘ ((mincmp_double(%ymm2_vmovdqa_ymm_ymm[191:128], %ymm2_vmovdqa_ymm_ymm[191:128])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[191:128] : %ymm2_vmovdqa_ymm_ymm[191:128]) ∘ ((mincmp_double(%ymm2_vmovdqa_ymm_ymm[127:64], %ymm2_vmovdqa_ymm_ymm[127:64])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[127:64] : %ymm2_vmovdqa_ymm_ymm[127:64]) ∘ (mincmp_double(%ymm2_vmovdqa_ymm_ymm[63:0], %ymm2_vmovdqa_ymm_ymm[63:0])[0:0] = 0x1₁ ? %ymm2_vmovdqa_ymm_ymm[63:0] : %ymm2_vmovdqa_ymm_ymm[63:0])))

Final state
%ymm2: %ymm3_vhsubpd_ymm_ymm_ymm[191:128] ∘ (%ymm2_vhsubpd_ymm_ymm_ymm[191:128] ∘ (%ymm3_vhsubpd_ymm_ymm_ymm[63:0] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[63:0]))

=====================================
-------------------------------------
Getting base circuit for vsubpd %ymm6, %ymm2, %ymm1

Final state:
%ymm1: sub_double((%ymm3_vhsubpd_ymm_ymm_ymm[191:128] ∘ (%ymm2_vhsubpd_ymm_ymm_ymm[191:128] ∘ (%ymm3_vhsubpd_ymm_ymm_ymm[63:0] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[63:0])))[255:192], (%ymm3_vhsubpd_ymm_ymm_ymm[255:192] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[255:192] ∘ (%ymm3_vhsubpd_ymm_ymm_ymm[127:64] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[127:64]))[255:192]) ∘ (sub_double((%ymm3_vhsubpd_ymm_ymm_ymm[191:128] ∘ (%ymm2_vhsubpd_ymm_ymm_ymm[191:128] ∘ (%ymm3_vhsubpd_ymm_ymm_ymm[63:0] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[63:0])))[191:128], (%ymm3_vhsubpd_ymm_ymm_ymm[255:192] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[255:192] ∘ (%ymm3_vhsubpd_ymm_ymm_ymm[127:64] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[127:64]))[191:128]) ∘ (sub_double((%ymm3_vhsubpd_ymm_ymm_ymm[191:128] ∘ (%ymm2_vhsubpd_ymm_ymm_ymm[191:128] ∘ (%ymm3_vhsubpd_ymm_ymm_ymm[63:0] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[63:0])))[127:64], (%ymm3_vhsubpd_ymm_ymm_ymm[255:192] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[255:192] ∘ (%ymm3_vhsubpd_ymm_ymm_ymm[127:64] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[127:64]))[127:64]) ∘ sub_double((%ymm3_vhsubpd_ymm_ymm_ymm[191:128] ∘ (%ymm2_vhsubpd_ymm_ymm_ymm[191:128] ∘ (%ymm3_vhsubpd_ymm_ymm_ymm[63:0] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[63:0])))[63:0], (%ymm3_vhsubpd_ymm_ymm_ymm[255:192] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[255:192] ∘ (%ymm3_vhsubpd_ymm_ymm_ymm[127:64] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[127:64]))[63:0])))

-------------------------------------
=====================================
Computing circuit for vhsubpd %ymm3, %ymm2, %ymm1

.target:
vpunpcklqdq %ymm3, %ymm2, %ymm9
vpunpckhqdq %ymm3, %ymm2, %ymm6
vmovdqa %ymm9, %ymm2
vsubpd %ymm6, %ymm2, %ymm1
retq 

Initial state:
%ymm1: %ymm1

State for specgen instruction: vhsubpd %ymm3, %ymm2, %ymm1:
%ymm1: sub_double((%ymm3_vhsubpd_ymm_ymm_ymm[191:128] ∘ (%ymm2_vhsubpd_ymm_ymm_ymm[191:128] ∘ (%ymm3_vhsubpd_ymm_ymm_ymm[63:0] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[63:0])))[255:192], (%ymm3_vhsubpd_ymm_ymm_ymm[255:192] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[255:192] ∘ (%ymm3_vhsubpd_ymm_ymm_ymm[127:64] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[127:64]))[255:192]) ∘ (sub_double((%ymm3_vhsubpd_ymm_ymm_ymm[191:128] ∘ (%ymm2_vhsubpd_ymm_ymm_ymm[191:128] ∘ (%ymm3_vhsubpd_ymm_ymm_ymm[63:0] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[63:0])))[191:128], (%ymm3_vhsubpd_ymm_ymm_ymm[255:192] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[255:192] ∘ (%ymm3_vhsubpd_ymm_ymm_ymm[127:64] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[127:64]))[191:128]) ∘ (sub_double((%ymm3_vhsubpd_ymm_ymm_ymm[191:128] ∘ (%ymm2_vhsubpd_ymm_ymm_ymm[191:128] ∘ (%ymm3_vhsubpd_ymm_ymm_ymm[63:0] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[63:0])))[127:64], (%ymm3_vhsubpd_ymm_ymm_ymm[255:192] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[255:192] ∘ (%ymm3_vhsubpd_ymm_ymm_ymm[127:64] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[127:64]))[127:64]) ∘ sub_double((%ymm3_vhsubpd_ymm_ymm_ymm[191:128] ∘ (%ymm2_vhsubpd_ymm_ymm_ymm[191:128] ∘ (%ymm3_vhsubpd_ymm_ymm_ymm[63:0] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[63:0])))[63:0], (%ymm3_vhsubpd_ymm_ymm_ymm[255:192] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[255:192] ∘ (%ymm3_vhsubpd_ymm_ymm_ymm[127:64] ∘ %ymm2_vhsubpd_ymm_ymm_ymm[127:64]))[63:0])))

Final state
%ymm1: sub_double(%ymm3[191:128], %ymm3[255:192]) ∘ (sub_double(%ymm2[191:128], %ymm2[255:192]) ∘ (sub_double(%ymm3[63:0], %ymm3[127:64]) ∘ sub_double(%ymm2[63:0], %ymm2[127:64])))

=====================================
Circuits:

%ymm1  : sub_double(%ymm3[191:128], %ymm3[255:192]) ∘ (sub_double(%ymm2[191:128], %ymm2[255:192]) ∘ (sub_double(%ymm3[63:0], %ymm3[127:64]) ∘ sub_double(%ymm2[63:0], %ymm2[127:64])))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/