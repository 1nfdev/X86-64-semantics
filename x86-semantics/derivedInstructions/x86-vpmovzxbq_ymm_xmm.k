// Autogenerated using stratification.
requires "x86-configuration.k"

module VPMOVZXBQ-YMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vpmovzxbq R1:Xmm, R2:Ymm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(concatenateMInt(concatenateMInt(mi(56, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 224, 232), mi(56, 0))), extractMInt(getParentValue(R1, RSMap), 232, 240)), concatenateMInt(concatenateMInt(mi(56, 0), extractMInt(getParentValue(R1, RSMap), 240, 248)), concatenateMInt(mi(56, 0), extractMInt(getParentValue(R1, RSMap), 248, 256)))) )


)

    </regstate>
endmodule

module VPMOVZXBQ-YMM-XMM-SEMANTICS
  imports VPMOVZXBQ-YMM-XMM
endmodule
/*
TargetInstr:
vpmovzxbq %xmm2, %ymm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx2 }

Circuit:
circuit:vbroadcastss %xmm2, %xmm1            #  1     0     5      OPC=vbroadcastss_xmm_xmm
circuit:callq .move_128_64_xmm2_xmm10_xmm11  #  2     0x5   5      OPC=callq_label
circuit:callq .move_byte_11_of_ymm1_to_r9b   #  3     0xa   5      OPC=callq_label
circuit:callq .move_r9b_to_byte_24_of_ymm1   #  4     0xf   5      OPC=callq_label
circuit:callq .move_byte_6_of_ymm1_to_r9b    #  5     0x14  5      OPC=callq_label
circuit:callq .move_r9b_to_byte_16_of_ymm1   #  6     0x19  5      OPC=callq_label
circuit:pmovzxbq %xmm10, %xmm1               #  7     0x1e  6      OPC=pmovzxbq_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vpmovzxbq %xmm2, %ymm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx2 }

Circuits:

%ymm1  : 0x0₅₆ ∘ %ymm2[31:24] ∘ 0x0₅₆ ∘ %ymm2[23:16] ∘ (0x0₅₆ ∘ %ymm2[15:8] ∘ (0x0₅₆ ∘ %ymm2[7:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/