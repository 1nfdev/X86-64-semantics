// Autogenerated using stratification.
requires "x86-configuration.k"

module VPUNPCKHQDQ-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vpunpckhqdq R1:Xmm, R2:Xmm, R3:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate> 
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 128, 192), extractMInt(getParentValue(R2, RSMap), 128, 192))) )

  
)   

    </regstate>
endmodule

module VPUNPCKHQDQ-XMM-XMM-XMM-SEMANTICS
  imports VPUNPCKHQDQ-XMM-XMM-XMM
endmodule
/*
vpunpckhqdq %xmm3, %xmm2, %xmm1
maybe read:{ %xmm2 %xmm3 }
must read:{ %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

circuit:callq .move_128_064_xmm3_r10_r11  #  1     0     5      OPC=callq_label
circuit:callq .move_128_064_xmm2_r8_r9    #  2     0x5   5      OPC=callq_label
circuit:vzeroall                          #  3     0xa   3      OPC=vzeroall
circuit:movq %r9, %r10                    #  4     0xd   3      OPC=movq_r64_r64
circuit:callq .move_064_128_r10_r11_xmm1  #  5     0x10  5      OPC=callq_label

WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vpunpckhqdq %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm2 %xmm3 }
  must read:       { %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

-------------------------------------
Getting base circuit for callq .move_128_064_xmm3_r10_r11

Final state:
%rax/%rax: %rax_vpunpckhqdq_xmm_xmm_xmm
%rdx/%rdx: %rdx_vpunpckhqdq_xmm_xmm_xmm

%xmm0: %ymm0_vpunpckhqdq_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vpunpckhqdq_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vpunpckhqdq_xmm_xmm_xmm
%rdx/%rdx: %rdx_vpunpckhqdq_xmm_xmm_xmm

%xmm0: %ymm0_vpunpckhqdq_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vpunpckhqdq_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for movq %r9, %r10

Final state:
%r10/%r10: %ymm2_vpunpckhqdq_xmm_xmm_xmm[127:0][127:64]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm1

Final state:
%rax/%rax: %rax_vpunpckhqdq_xmm_xmm_xmm
%rdx/%rdx: %rdx_vpunpckhqdq_xmm_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm3_vpunpckhqdq_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vpunpckhqdq_xmm_xmm_xmm[127:0][127:64][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vpunpckhqdq %xmm3, %xmm2, %xmm1

.target:
callq .move_128_064_xmm3_r10_r11
callq .move_128_064_xmm2_r8_r9
vzeroall 
movq %r9, %r10
callq .move_064_128_r10_r11_xmm1
retq 

Initial state:
%ymm1: %ymm1

State for specgen instruction: vpunpckhqdq %xmm3, %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm3_vpunpckhqdq_xmm_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vpunpckhqdq_xmm_xmm_xmm[127:0][127:64][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (%ymm3[127:64] ∘ %ymm2[127:64])

=====================================
Circuits:

%ymm1  : 0x0₁₂₈ ∘ (%ymm3[127:64] ∘ %ymm2[127:64])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/