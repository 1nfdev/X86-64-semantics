// Autogenerated using stratification.
requires "x86-configuration.k"

module VSUBPD-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vsubpd R1:Xmm, R2:Xmm, R3:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 128, 192), 53, 11)  -Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 192, 256), 53, 11) ) , 64))) )


)

    </regstate>
endmodule

module VSUBPD-XMM-XMM-XMM-SEMANTICS
  imports VSUBPD-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vsubpd %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 %xmm3 }
must read:{ %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:vmovupd %xmm2, %xmm1        #  1     0    4      OPC=vmovupd_xmm_xmm
circuit:vmovaps %xmm3, %xmm7        #  2     0x4  4      OPC=vmovaps_xmm_xmm
circuit:vsubpd %ymm7, %ymm1, %ymm1  #  3     0x8  4      OPC=vsubpd_ymm_ymm_ymm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vsubpd %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm2 %xmm3 }
  must read:       { %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r8_r9

Final state:
%rax/%rax: %rax_vmovupd_xmm_xmm
%rdx/%rdx: %rdx_vmovupd_xmm_xmm

%xmm0: %ymm0_vmovupd_xmm_xmm[127:0]
%xmm1: %ymm1_vmovupd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r8_r9_xmm1

Final state:
%rax/%rax: %rax_vmovupd_xmm_xmm
%rdx/%rdx: %rdx_vmovupd_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovupd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovupd %xmm2, %xmm1

.target:
callq .move_128_064_xmm2_r8_r9
vzeroall 
callq .move_064_128_r8_r9_xmm1
retq 

Initial state:
%ymm1: %ymm1_vsubpd_xmm_xmm_xmm

State for specgen instruction: vmovupd %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovupd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovupd_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ %ymm2_vsubpd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovaps_xmm_xmm
%rdx/%rdx: %rdx_vmovaps_xmm_xmm

%xmm0: %ymm0_vmovaps_xmm_xmm[127:0]
%xmm1: %ymm1_vmovaps_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovaps_xmm_xmm
%rdx/%rdx: %rdx_vmovaps_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vmovaps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovaps_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovaps %xmm3, %xmm7

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm7: %ymm7_vsubpd_xmm_xmm_xmm

State for specgen instruction: vmovaps %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vmovaps_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovaps_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm7: 0x0₁₂₈ ∘ %ymm3_vsubpd_xmm_xmm_xmm[127:0]

=====================================
-------------------------------------
Getting base circuit for vsubpd %ymm7, %ymm1, %ymm1

Final state:
%ymm1: sub_double((0x0₁₂₈ ∘ %ymm2_vsubpd_xmm_xmm_xmm[127:0])[255:192], (0x0₁₂₈ ∘ %ymm3_vsubpd_xmm_xmm_xmm[127:0])[255:192]) ∘ (sub_double((0x0₁₂₈ ∘ %ymm2_vsubpd_xmm_xmm_xmm[127:0])[191:128], (0x0₁₂₈ ∘ %ymm3_vsubpd_xmm_xmm_xmm[127:0])[191:128]) ∘ (sub_double((0x0₁₂₈ ∘ %ymm2_vsubpd_xmm_xmm_xmm[127:0])[127:64], (0x0₁₂₈ ∘ %ymm3_vsubpd_xmm_xmm_xmm[127:0])[127:64]) ∘ sub_double((0x0₁₂₈ ∘ %ymm2_vsubpd_xmm_xmm_xmm[127:0])[63:0], (0x0₁₂₈ ∘ %ymm3_vsubpd_xmm_xmm_xmm[127:0])[63:0])))

-------------------------------------
=====================================
Computing circuit for vsubpd %xmm3, %xmm2, %xmm1

.target:
vmovupd %xmm2, %xmm1
vmovaps %xmm3, %xmm7
vsubpd %ymm7, %ymm1, %ymm1
retq 

Initial state:
%ymm1: %ymm1

State for specgen instruction: vsubpd %xmm3, %xmm2, %xmm1:
%ymm1: sub_double((0x0₁₂₈ ∘ %ymm2_vsubpd_xmm_xmm_xmm[127:0])[255:192], (0x0₁₂₈ ∘ %ymm3_vsubpd_xmm_xmm_xmm[127:0])[255:192]) ∘ (sub_double((0x0₁₂₈ ∘ %ymm2_vsubpd_xmm_xmm_xmm[127:0])[191:128], (0x0₁₂₈ ∘ %ymm3_vsubpd_xmm_xmm_xmm[127:0])[191:128]) ∘ (sub_double((0x0₁₂₈ ∘ %ymm2_vsubpd_xmm_xmm_xmm[127:0])[127:64], (0x0₁₂₈ ∘ %ymm3_vsubpd_xmm_xmm_xmm[127:0])[127:64]) ∘ sub_double((0x0₁₂₈ ∘ %ymm2_vsubpd_xmm_xmm_xmm[127:0])[63:0], (0x0₁₂₈ ∘ %ymm3_vsubpd_xmm_xmm_xmm[127:0])[63:0])))

Final state
%ymm1: 0x0₆₄ ∘ (0x0₆₄ ∘ (sub_double(%ymm2[127:64], %ymm3[127:64]) ∘ sub_double(%ymm2[63:0], %ymm3[63:0])))

=====================================
Circuits:

%ymm1  : 0x0₆₄ ∘ (0x0₆₄ ∘ (sub_double(%ymm2[127:64], %ymm3[127:64]) ∘ sub_double(%ymm2[63:0], %ymm3[63:0])))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/