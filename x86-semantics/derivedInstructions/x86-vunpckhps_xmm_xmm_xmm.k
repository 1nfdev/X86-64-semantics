// Autogenerated using stratification.
requires "x86-configuration.k"

module VUNPCKHPS-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vunpckhps R1:Xmm, R2:Xmm, R3:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(getParentValue(R1, RSMap), 128, 160), extractMInt(getParentValue(R2, RSMap), 128, 160)), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 160, 192), extractMInt(getParentValue(R2, RSMap), 160, 192)))) )


)

    </regstate>
endmodule

module VUNPCKHPS-XMM-XMM-XMM-SEMANTICS
  imports VUNPCKHPS-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vunpckhps %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 %xmm3 }
must read:{ %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:unpckhpd %xmm3, %xmm2                           #  1     0     4      OPC=unpckhpd_xmm_xmm
circuit:callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11  #  2     0x4   5      OPC=callq_label
circuit:vmovddup %xmm9, %xmm1                           #  3     0x9   5      OPC=vmovddup_xmm_xmm
circuit:vmovq %xmm1, %xmm10                             #  4     0xe   4      OPC=vmovq_xmm_xmm
circuit:callq .move_128_64_xmm2_xmm8_xmm9               #  5     0x12  5      OPC=callq_label
circuit:callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1  #  6     0x17  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vunpckhps %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm2 %xmm3 }
  must read:       { %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

-------------------------------------
Getting base circuit for callq .move_128_64_xmm1_xmm12_xmm13

Final state:
%rax/%rax: %rax_unpckhpd_xmm_xmm
%rdx/%rdx: %rdx_unpckhpd_xmm_xmm

%xmm0: %ymm0_unpckhpd_xmm_xmm[127:0]
%xmm1: %ymm1_unpckhpd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_unpckhpd_xmm_xmm
%rdx/%rdx: %rdx_unpckhpd_xmm_xmm

%xmm0: %ymm0_unpckhpd_xmm_xmm[127:0]
%xmm1: %ymm1_unpckhpd_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_032_xmm1_r10d_r11d_r12d_r13d

Final state:
%rax/%rax: %rax_vmovq_r64_xmm
%rdx/%rdx: %rdx_vmovq_r64_xmm

%xmm0: %ymm0_vmovq_r64_xmm[127:0]
%xmm1: %ymm1_vmovq_r64_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r10d_r11d_rbx

Final state:
%rax/%rax: %rax_vmovq_r64_xmm
%rdx/%rdx: %rdx_vmovq_r64_xmm

%xmm0: %ymm0_vmovq_r64_xmm[127:0]
%xmm1: %ymm1_vmovq_r64_xmm[127:0]

-------------------------------------
=====================================
Computing circuit for vmovq %xmm1, %r10

.target:
callq .move_128_032_xmm1_r10d_r11d_r12d_r13d
callq .move_032_064_r10d_r11d_rbx
retq 

Initial state:
%r10/%r10: %r10_movq_r64_xmm

State for specgen instruction: vmovq %xmm1, %rbx:
%rbx/%rbx: (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][31:0])[31:0][31:0]

Register        -> %rbx
  translates to => %r10
Value is               -> (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][63:32])[31:0][31:0] ∘ (0x0₃₂ ∘ %ymm1_vmovq_r64_xmm[127:0][31:0])[31:0][31:0]
  after renaming it is => %ymm1_movq_r64_xmm[63:0]

Final state
%r10/%r10: %ymm1_movq_r64_xmm[63:0]

=====================================
-------------------------------------
Getting base circuit for movq %r10, %rbx

Final state:
%rbx/%rbx: %ymm1_movq_r64_xmm[63:0]

-------------------------------------
=====================================
Computing circuit for movq %xmm13, %r12

.target:
vmovq %xmm1, %r10
movq %r10, %rbx
retq 

Initial state:
%r12/%r12: %ymm2_unpckhpd_xmm_xmm[127:0][63:0]

State for specgen instruction: movq %xmm1, %rbx:
%rbx/%rbx: %ymm1_movq_r64_xmm[63:0]

Register        -> %rbx
  translates to => %r12
Value is               -> %ymm1_movq_r64_xmm[63:0]
  after renaming it is => %ymm1_unpckhpd_xmm_xmm[127:64]

Final state
%r12/%r12: %ymm1_unpckhpd_xmm_xmm[127:64]

=====================================
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_unpckhpd_xmm_xmm
%rdx/%rdx: %rdx_unpckhpd_xmm_xmm

%xmm0: %ymm0_unpckhpd_xmm_xmm[127:0]
%xmm1: (%ymm1_unpckhpd_xmm_xmm[255:128] ∘ (%ymm2_unpckhpd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm1_unpckhpd_xmm_xmm[127:64][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for unpckhpd %xmm3, %xmm2

.target:
callq .move_128_64_xmm1_xmm12_xmm13
callq .move_128_064_xmm2_r12_r13
movq %xmm13, %r12
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%xmm2: %ymm2_vunpckhps_xmm_xmm_xmm[127:0]

State for specgen instruction: unpckhpd %xmm2, %xmm1:
%xmm1: (%ymm1_unpckhpd_xmm_xmm[255:128] ∘ (%ymm2_unpckhpd_xmm_xmm[127:0][127:64][63:0] ∘ %ymm1_unpckhpd_xmm_xmm[127:64][63:0]))[127:0]

Final state
%xmm2: (%ymm2_vunpckhps_xmm_xmm_xmm[255:128] ∘ (%ymm3_vunpckhps_xmm_xmm_xmm[127:64] ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:64]))[127:0]

=====================================
-------------------------------------
Getting base circuit for callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11

Final state:
%rax/%rax: %rax_vunpckhps_xmm_xmm_xmm
%rdx/%rdx: %rdx_vunpckhps_xmm_xmm_xmm

%xmm0: %ymm0_vunpckhps_xmm_xmm_xmm[127:0]
%xmm1: %ymm1_vunpckhps_xmm_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovddup_xmm_xmm
%rdx/%rdx: %rdx_vmovddup_xmm_xmm

%xmm0: %ymm0_vmovddup_xmm_xmm[127:0]
%xmm1: %ymm1_vmovddup_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovddup_xmm_xmm
%rdx/%rdx: %rdx_vmovddup_xmm_xmm

%xmm0: %ymm0_vmovddup_xmm_xmm[127:0]
%xmm1: (%ymm1_vmovddup_xmm_xmm[255:128] ∘ (%ymm2_vmovddup_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovddup_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r10_r11

Final state:
%rax/%rax: %rax_vpbroadcastq_xmm_xmm
%rdx/%rdx: %rdx_vpbroadcastq_xmm_xmm

%xmm0: %ymm0_vpbroadcastq_xmm_xmm[127:0]
%xmm1: %ymm1_vpbroadcastq_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %r11

Final state:
%r11/%r11: %ymm2_vpbroadcastq_xmm_xmm[127:0][63:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_128_r10_r11_xmm1

Final state:
%rax/%rax: %rax_vpbroadcastq_xmm_xmm
%rdx/%rdx: %rdx_vpbroadcastq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (%ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0] ∘ %ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vpbroadcastq %xmm1, %xmm1

.target:
callq .move_128_064_xmm2_r10_r11
vzeroall 
movq %r10, %r11
callq .move_064_128_r10_r11_xmm1
retq 

Initial state:
%ymm1: %ymm1_vmovddup_xmm_xmm[255:128] ∘ (%ymm2_vmovddup_xmm_xmm[127:0][127:64][63:0] ∘ %ymm2_vmovddup_xmm_xmm[127:0][63:0][63:0])

State for specgen instruction: vpbroadcastq %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (%ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0] ∘ %ymm2_vpbroadcastq_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (%ymm2_vmovddup_xmm_xmm[63:0] ∘ %ymm2_vmovddup_xmm_xmm[63:0])

=====================================
=====================================
Computing circuit for vmovddup %xmm9, %xmm1

.target:
callq .move_128_064_xmm2_r12_r13
callq .move_064_128_r12_r13_xmm1
vpbroadcastq %xmm1, %xmm1
retq 

Initial state:
%ymm1: %ymm1_vunpckhps_xmm_xmm_xmm

State for specgen instruction: vmovddup %xmm2, %xmm1:
%ymm1: 0x0₁₂₈ ∘ (%ymm2_vmovddup_xmm_xmm[63:0] ∘ %ymm2_vmovddup_xmm_xmm[63:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:96] ∘ (0x0₃₂ ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:96]))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_064_xmm2_r12_r13

Final state:
%rax/%rax: %rax_vmovq_xmm_xmm
%rdx/%rdx: %rdx_vmovq_xmm_xmm

%xmm0: %ymm0_vmovq_xmm_xmm[127:0]
%xmm1: %ymm1_vmovq_xmm_xmm[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for vzeroall 

Final state:
%ymm0: 0x0₂₅₆
%ymm1: 0x0₂₅₆
%ymm2: 0x0₂₅₆
%ymm3: 0x0₂₅₆
%ymm4: 0x0₂₅₆
%ymm5: 0x0₂₅₆
%ymm6: 0x0₂₅₆
%ymm7: 0x0₂₅₆
%ymm8: 0x0₂₅₆
%ymm9: 0x0₂₅₆
%ymm10: 0x0₂₅₆
%ymm11: 0x0₂₅₆
%ymm12: 0x0₂₅₆
%ymm13: 0x0₂₅₆
%ymm14: 0x0₂₅₆
%ymm15: 0x0₂₅₆

-------------------------------------
-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %ebx, %ecx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rcx/%rcx: %rcx_xorl_r32_r32
%rbx/%rbx: %rbx_xorl_r32_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

Register        -> %rbx
  translates to => %rcx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

Final state
%rcx/%rcx: 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0]

=====================================
-------------------------------------
Getting base circuit for xorq %rcx, %rbx

Final state:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]) = 0x0₆₄
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[63:63] = 0x1₁
%of: false

-------------------------------------
-------------------------------------
Getting base circuit for callq .set_szp_for_ebx

Final state:
%rax/%rax: %rax_xorl_r32_r32
%rdx/%rdx: %rdx_xorl_r32_r32

%xmm0: %ymm0_xorl_r32_r32[127:0]
%xmm1: %ymm1_xorl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xorl %r13d, %r13d

.target:
xchgl %ebx, %ecx
xorq %rcx, %rbx
callq .set_szp_for_ebx
retq 

Initial state:
%r13/%r13: %ymm2_vmovq_xmm_xmm[127:0][127:64]

%cf: %cf_vmovq_xmm_xmm
%pf: %pf_vmovq_xmm_xmm
%zf: %zf_vmovq_xmm_xmm
%sf: %sf_vmovq_xmm_xmm
%of: %of_vmovq_xmm_xmm

State for specgen instruction: xorl %ecx, %ebx:
%rbx/%rbx: 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]

%cf: false
%pf: !((0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][0:0] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][1:1] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][2:2] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][3:3] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][4:4] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][5:5] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][6:6] = 0x1₁ ⊕ (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][7:0][7:7] = 0x1₁)
%zf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0] = 0x0₃₂
%sf: (0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0])[31:0][31:31] = 0x1₁
%of: false

Register        -> %rbx
  translates to => %r13
Value is               -> 0x0₃₂ ∘ %rcx_xorl_r32_r32[31:0] ⊕ 0x0₃₂ ∘ %rbx_xorl_r32_r32[31:0]
  after renaming it is => 0x0₆₄

Final state
%r13/%r13: 0x0₆₄

%cf: false
%pf: true
%zf: true
%sf: false
%of: false

=====================================
-------------------------------------
Getting base circuit for callq .move_064_128_r12_r13_xmm1

Final state:
%rax/%rax: %rax_vmovq_xmm_xmm
%rdx/%rdx: %rdx_vmovq_xmm_xmm

%xmm0: 0x0₂₅₆[127:0]
%xmm1: (0x0₂₅₆[255:128] ∘ (0x0₆₄[63:0] ∘ %ymm2_vmovq_xmm_xmm[127:0][63:0][63:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vmovq %xmm1, %xmm10

.target:
callq .move_128_064_xmm2_r12_r13
vzeroall 
xorl %r13d, %r13d
callq .move_064_128_r12_r13_xmm1
retq 

Initial state:
%ymm10: %ymm10_vunpckhps_xmm_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (%ymm2_vunpckhps_xmm_xmm_xmm[255:128] ∘ (%ymm3_vunpckhps_xmm_xmm_xmm[127:64] ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:64]))[127:0][95:64])

State for specgen instruction: vmovq %xmm2, %xmm1:
%ymm1: 0x0₂₅₆[255:128] ∘ (0x0₆₄[63:0] ∘ %ymm2_vmovq_xmm_xmm[127:0][63:0][63:0])

Final state
%ymm10: 0x0₁₂₈ ∘ (0x0₆₄ ∘ (0x0₃₂ ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:96]))

=====================================
-------------------------------------
Getting base circuit for callq .move_128_64_xmm2_xmm8_xmm9

Final state:
%rax/%rax: %rax_vunpckhps_xmm_xmm_xmm
%rdx/%rdx: %rdx_vunpckhps_xmm_xmm_xmm

%xmm0: %ymm0_vunpckhps_xmm_xmm_xmm[127:0]
%xmm1: (0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:96] ∘ (0x0₃₂ ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:96])))[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1

Final state:
%rax/%rax: %rax_vunpckhps_xmm_xmm_xmm
%rdx/%rdx: %rdx_vunpckhps_xmm_xmm_xmm

%xmm0: %ymm0_vunpckhps_xmm_xmm_xmm[127:0]
%xmm1: ((0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:96] ∘ (0x0₃₂ ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:96])))[255:128] ∘ ((%ymm11_vunpckhps_xmm_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (%ymm2_vunpckhps_xmm_xmm_xmm[255:128] ∘ (%ymm3_vunpckhps_xmm_xmm_xmm[127:64] ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:64]))[127:0][127:96]))[127:0][31:0] ∘ (0x0₁₂₈ ∘ (0x0₆₄ ∘ (0x0₃₂ ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:96])))[127:0][31:0] ∘ ((%ymm9_vunpckhps_xmm_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (%ymm2_vunpckhps_xmm_xmm_xmm[255:128] ∘ (%ymm3_vunpckhps_xmm_xmm_xmm[127:64] ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:64]))[127:0][63:32]))[255:128] ∘ (0x0₆₄ ∘ (%ymm2_vunpckhps_xmm_xmm_xmm[255:128] ∘ (%ymm3_vunpckhps_xmm_xmm_xmm[127:64] ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:64]))[127:0][127:64]))[127:0][31:0] ∘ ((%ymm8_vunpckhps_xmm_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (%ymm2_vunpckhps_xmm_xmm_xmm[255:128] ∘ (%ymm3_vunpckhps_xmm_xmm_xmm[127:64] ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:64]))[127:0][31:0]))[255:128] ∘ (0x0₆₄ ∘ (%ymm2_vunpckhps_xmm_xmm_xmm[255:128] ∘ (%ymm3_vunpckhps_xmm_xmm_xmm[127:64] ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:64]))[127:0][63:0]))[127:0][31:0]))[127:0]

-------------------------------------
=====================================
Computing circuit for vunpckhps %xmm3, %xmm2, %xmm1

.target:
unpckhpd %xmm3, %xmm2
callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
vmovddup %xmm9, %xmm1
vmovq %xmm1, %xmm10
callq .move_128_64_xmm2_xmm8_xmm9
callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
retq 

Initial state:
%ymm1: %ymm1

State for specgen instruction: vunpckhps %xmm3, %xmm2, %xmm1:
%ymm1: (0x0₁₂₈ ∘ (0x0₃₂ ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:96] ∘ (0x0₃₂ ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:96])))[255:128] ∘ ((%ymm11_vunpckhps_xmm_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (%ymm2_vunpckhps_xmm_xmm_xmm[255:128] ∘ (%ymm3_vunpckhps_xmm_xmm_xmm[127:64] ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:64]))[127:0][127:96]))[127:0][31:0] ∘ (0x0₁₂₈ ∘ (0x0₆₄ ∘ (0x0₃₂ ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:96])))[127:0][31:0] ∘ ((%ymm9_vunpckhps_xmm_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (%ymm2_vunpckhps_xmm_xmm_xmm[255:128] ∘ (%ymm3_vunpckhps_xmm_xmm_xmm[127:64] ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:64]))[127:0][63:32]))[255:128] ∘ (0x0₆₄ ∘ (%ymm2_vunpckhps_xmm_xmm_xmm[255:128] ∘ (%ymm3_vunpckhps_xmm_xmm_xmm[127:64] ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:64]))[127:0][127:64]))[127:0][31:0] ∘ ((%ymm8_vunpckhps_xmm_xmm_xmm[255:128] ∘ (0x0₉₆ ∘ (%ymm2_vunpckhps_xmm_xmm_xmm[255:128] ∘ (%ymm3_vunpckhps_xmm_xmm_xmm[127:64] ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:64]))[127:0][31:0]))[255:128] ∘ (0x0₆₄ ∘ (%ymm2_vunpckhps_xmm_xmm_xmm[255:128] ∘ (%ymm3_vunpckhps_xmm_xmm_xmm[127:64] ∘ %ymm2_vunpckhps_xmm_xmm_xmm[127:64]))[127:0][63:0]))[127:0][31:0])

Final state
%ymm1: 0x0₁₂₈ ∘ (%ymm3[127:96] ∘ %ymm2[127:96] ∘ %ymm3[95:64] ∘ %ymm2[95:64])

=====================================
Circuits:

%ymm1  : 0x0₁₂₈ ∘ (%ymm3[127:96] ∘ %ymm2[127:96] ∘ %ymm3[95:64] ∘ %ymm2[95:64])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/