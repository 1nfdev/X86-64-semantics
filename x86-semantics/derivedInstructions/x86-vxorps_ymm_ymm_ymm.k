// Autogenerated using stratification.
requires "x86-configuration.k"

module VXORPS-YMM-YMM-YMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vxorps R1:Ymm, R2:Ymm, R3:Ymm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(orMInt(extractMInt(getParentValue(R2, RSMap), 0, 64), extractMInt(getParentValue(R1, RSMap), 0, 64)), xorMInt(orMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 0, 64), extractMInt(getParentValue(R2, RSMap), 0, 64)), extractMInt(getParentValue(R2, RSMap), 0, 64)), xorMInt(extractMInt(getParentValue(R1, RSMap), 0, 64), extractMInt(getParentValue(R2, RSMap), 0, 64)))), xorMInt(orMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 0, 64), extractMInt(getParentValue(R2, RSMap), 0, 64)), extractMInt(getParentValue(R2, RSMap), 0, 64)), xorMInt(extractMInt(getParentValue(R1, RSMap), 0, 64), extractMInt(getParentValue(R2, RSMap), 0, 64)))), xorMInt(orMInt(orMInt(extractMInt(getParentValue(R2, RSMap), 64, 128), extractMInt(getParentValue(R1, RSMap), 64, 128)), xorMInt(orMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 64, 128), extractMInt(getParentValue(R2, RSMap), 64, 128)), extractMInt(getParentValue(R2, RSMap), 64, 128)), xorMInt(extractMInt(getParentValue(R1, RSMap), 64, 128), extractMInt(getParentValue(R2, RSMap), 64, 128)))), xorMInt(orMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 64, 128), extractMInt(getParentValue(R2, RSMap), 64, 128)), extractMInt(getParentValue(R2, RSMap), 64, 128)), xorMInt(extractMInt(getParentValue(R1, RSMap), 64, 128), extractMInt(getParentValue(R2, RSMap), 64, 128))))), concatenateMInt(xorMInt(orMInt(xorMInt(orMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 128, 192), extractMInt(getParentValue(R2, RSMap), 128, 192)), extractMInt(getParentValue(R2, RSMap), 128, 192)), xorMInt(extractMInt(getParentValue(R1, RSMap), 128, 192), extractMInt(getParentValue(R2, RSMap), 128, 192))), orMInt(extractMInt(getParentValue(R2, RSMap), 128, 192), extractMInt(getParentValue(R1, RSMap), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 128, 192), extractMInt(getParentValue(R2, RSMap), 128, 192)), extractMInt(getParentValue(R2, RSMap), 128, 192)), xorMInt(extractMInt(getParentValue(R1, RSMap), 128, 192), extractMInt(getParentValue(R2, RSMap), 128, 192)))), xorMInt(orMInt(xorMInt(orMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 192, 256), extractMInt(getParentValue(R2, RSMap), 192, 256)), extractMInt(getParentValue(R2, RSMap), 192, 256)), xorMInt(extractMInt(getParentValue(R1, RSMap), 192, 256), extractMInt(getParentValue(R2, RSMap), 192, 256))), orMInt(extractMInt(getParentValue(R2, RSMap), 192, 256), extractMInt(getParentValue(R1, RSMap), 192, 256))), xorMInt(orMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 192, 256), extractMInt(getParentValue(R2, RSMap), 192, 256)), extractMInt(getParentValue(R2, RSMap), 192, 256)), xorMInt(extractMInt(getParentValue(R1, RSMap), 192, 256), extractMInt(getParentValue(R2, RSMap), 192, 256)))))) )


)

    </regstate>
endmodule

module VXORPS-YMM-YMM-YMM-SEMANTICS
  imports VXORPS-YMM-YMM-YMM
endmodule
/*
TargetInstr:
vxorps %ymm3, %ymm2, %ymm1
RWSet:
maybe read:{ %ymm2 %ymm3 }
must read:{ %ymm2 %ymm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:vpor %ymm2, %ymm3, %ymm14     #  1     0    4      OPC=vpor_ymm_ymm_ymm
circuit:vandps %ymm3, %ymm2, %ymm4    #  2     0x4  4      OPC=vandps_ymm_ymm_ymm
circuit:vandnpd %ymm14, %ymm4, %ymm1  #  3     0x8  5      OPC=vandnpd_ymm_ymm_ymm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vxorps %ymm3, %ymm2, %ymm1

  maybe read:      { %ymm2 %ymm3 }
  must read:       { %ymm2 %ymm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%ymm1  : (%ymm2[255:192] ⊕ %ymm3[255:192] ⊕ (%ymm2[255:192] | %ymm2[255:192] ⊕ %ymm3[255:192]) ⊕ (%ymm2[255:192] ⊕ %ymm3[255:192] ⊕ (%ymm2[255:192] | %ymm2[255:192] ⊕ %ymm3[255:192]) | (%ymm3[255:192] | %ymm2[255:192])) | 0x0₆₄) ∘ (%ymm2[191:128] ⊕ %ymm3[191:128] ⊕ (%ymm2[191:128] | %ymm2[191:128] ⊕ %ymm3[191:128]) ⊕ (%ymm2[191:128] ⊕ %ymm3[191:128] ⊕ (%ymm2[191:128] | %ymm2[191:128] ⊕ %ymm3[191:128]) | (%ymm3[191:128] | %ymm2[191:128])) | 0x0₆₄) ∘ ((%ymm2[127:64] ⊕ %ymm3[127:64] ⊕ (%ymm2[127:64] | %ymm2[127:64] ⊕ %ymm3[127:64]) ⊕ (%ymm3[127:64] | %ymm2[127:64] | %ymm2[127:64] ⊕ %ymm3[127:64] ⊕ (%ymm2[127:64] | %ymm2[127:64] ⊕ %ymm3[127:64]))) ∘ (%ymm2[63:0] ⊕ %ymm3[63:0] ⊕ (%ymm2[63:0] | %ymm2[63:0] ⊕ %ymm3[63:0]) ⊕ (%ymm3[63:0] | %ymm2[63:0] | %ymm2[63:0] ⊕ %ymm3[63:0] ⊕ (%ymm2[63:0] | %ymm2[63:0] ⊕ %ymm3[63:0]))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/