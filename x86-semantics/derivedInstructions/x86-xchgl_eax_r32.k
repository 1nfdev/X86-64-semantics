// Autogenerated using stratification.
requires "x86-configuration.k"

module XCHGL-EAX-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (xchgl R1:R32, %eax,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "RAX" |-> (concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64)) )

convToRegKeys(R1) |-> (concatenateMInt(mi(32, 0), extractMInt(getParentValue(%rax, RSMap), 32, 64))   )


)

    </regstate>
endmodule

module XCHGL-EAX-R32-SEMANTICS
  imports XCHGL-EAX-R32
endmodule
/*
TargetInstr:
xchgl %ebx, %eax
RWSet:
maybe read:{ %eax %ebx }
must read:{ %eax %ebx }
maybe write:{ %rax %rbx }
must write:{ %rax %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:xchgl %eax, %ebx  #  1     0    2      OPC=xchgl_r32_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

xchgl %ebx, %eax

  maybe read:      { %eax %ebx }
  must read:       { %eax %ebx }
  maybe write:     { %rax %rbx }
  must write:      { %rax %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for movswq %bx, %r10

Final state:
%r10/%r10: sign-extend-64(%rbx_xchgl_r32_r32[15:0])

-------------------------------------
-------------------------------------
Getting base circuit for movslq %ebx, %rbx

Final state:
%rbx/%rbx: sign-extend-64(%rbx_xchgl_r32_r32[31:0])

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_ecx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r10d_r11d

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %r10, %rcx

Final state:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_ebx

Final state:
%rax/%rax: %rax_xchgl_r32_r32
%rdx/%rdx: %rdx_xchgl_r32_r32

%xmm0: %ymm0_xchgl_r32_r32[127:0]
%xmm1: %ymm1_xchgl_r32_r32[127:0]

-------------------------------------
=====================================
Computing circuit for xchgl %eax, %ebx

.target:
movswq %bx, %r10
movslq %ebx, %rbx
callq .move_032_016_ecx_r8w_r9w
callq .move_064_032_rbx_r10d_r11d
movq %r10, %rcx
callq .move_016_032_r8w_r9w_ebx
retq 

Initial state:
%rax/%rax: %rax_xchgl_eax_r32
%rbx/%rbx: %rbx_xchgl_eax_r32

State for specgen instruction: xchgl %ecx, %ebx:
%rcx/%rcx: 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
%rbx/%rbx: 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])

Register        -> %rcx
  translates to => %rax
Value is               -> 0x0₃₂ ∘ sign-extend-64(%rbx_xchgl_r32_r32[31:0])[31:0]
  after renaming it is => 0x0₃₂ ∘ %rbx_xchgl_eax_r32[31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ ((%r9_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][31:16])[15:0][15:0] ∘ (%r8_xchgl_r32_r32[63:16] ∘ %rcx_xchgl_r32_r32[31:0][15:0])[15:0][15:0])
  after renaming it is => 0x0₃₂ ∘ %rax_xchgl_eax_r32[31:0]

Final state
%rax/%rax: 0x0₃₂ ∘ %rbx_xchgl_eax_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rax_xchgl_eax_r32[31:0]

=====================================
=====================================
Computing circuit for xchgl %ebx, %eax

.target:
xchgl %eax, %ebx
retq 

Initial state:
%rax/%rax: %rax
%rbx/%rbx: %rbx

State for specgen instruction: xchgl %ebx, %eax:
%rax/%rax: 0x0₃₂ ∘ %rbx_xchgl_eax_r32[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rax_xchgl_eax_r32[31:0]

Register        -> %rax
  translates to => %rax
Value is               -> 0x0₃₂ ∘ %rbx_xchgl_eax_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ %rbx[31:0]

Register        -> %rbx
  translates to => %rbx
Value is               -> 0x0₃₂ ∘ %rax_xchgl_eax_r32[31:0]
  after renaming it is => 0x0₃₂ ∘ %rax[31:0]

Final state
%rax/%rax: 0x0₃₂ ∘ %rbx[31:0]
%rbx/%rbx: 0x0₃₂ ∘ %rax[31:0]

=====================================
Circuits:

%rax   : 0x0₃₂ ∘ %rbx[31:0]
%rbx   : 0x0₃₂ ∘ %rax[31:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/