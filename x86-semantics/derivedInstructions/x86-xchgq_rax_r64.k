// Autogenerated using stratification.
requires "x86-configuration.k"

module XCHGQ-RAX-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (xchgq R1:R64, %rax,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "RAX" |-> (getParentValue(R1, RSMap) )

convToRegKeys(R1) |-> (getParentValue(%rax, RSMap)   )


)

    </regstate>
endmodule

module XCHGQ-RAX-R64-SEMANTICS
  imports XCHGQ-RAX-R64
endmodule
/*
TargetInstr:
xchgq %rbx, %rax
RWSet:
maybe read:{ %rax %rbx }
must read:{ %rax %rbx }
maybe write:{ %rax %rbx }
must write:{ %rax %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:xchgq %rbx, %rax  #  1     0    3      OPC=xchgq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

xchgq %rbx, %rax

  maybe read:      { %rax %rbx }
  must read:       { %rax %rbx }
  maybe write:     { %rax %rbx }
  must write:      { %rax %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

-------------------------------------
Getting base circuit for callq .move_064_032_rbx_r8d_r9d

Final state:
%rax/%rax: %rax_xchgq_r64_r64
%rdx/%rdx: %rdx_xchgq_r64_r64

%xmm0: %ymm0_xchgq_r64_r64[127:0]
%xmm1: %ymm1_xchgq_r64_r64[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for movq %rcx, %rbx

Final state:
%rbx/%rbx: %rcx_xchgq_r64_r64

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_016_032_r8w_r9w_edx

Final state:
%rax/%rax: %rax_xchgq_r64_r64
%rdx/%rdx: 0x0₃₂ ∘ ((0x0₃₂ ∘ %rbx_xchgq_r64_r64[63:32])[15:0][15:0] ∘ (0x0₃₂ ∘ %rbx_xchgq_r64_r64[31:0])[15:0][15:0])

%xmm0: %ymm0_xchgq_r64_r64[127:0]
%xmm1: %ymm1_xchgq_r64_r64[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_016_edx_r8w_r9w

Final state:
%rax/%rax: %rax_xchgq_r64_r64
%rdx/%rdx: 0x0₃₂ ∘ ((0x0₃₂ ∘ %rbx_xchgq_r64_r64[63:32])[15:0][15:0] ∘ (0x0₃₂ ∘ %rbx_xchgq_r64_r64[31:0])[15:0][15:0])

%xmm0: %ymm0_xchgq_r64_r64[127:0]
%xmm1: %ymm1_xchgq_r64_r64[127:0]

-------------------------------------
-------------------------------------
Getting base circuit for callq .move_032_064_r8d_r9d_rcx

Final state:
%rax/%rax: %rax_xchgq_r64_r64
%rdx/%rdx: 0x0₃₂ ∘ ((0x0₃₂ ∘ %rbx_xchgq_r64_r64[63:32])[15:0][15:0] ∘ (0x0₃₂ ∘ %rbx_xchgq_r64_r64[31:0])[15:0][15:0])

%xmm0: %ymm0_xchgq_r64_r64[127:0]
%xmm1: %ymm1_xchgq_r64_r64[127:0]

-------------------------------------
=====================================
Computing circuit for xchgq %rbx, %rax

.target:
callq .move_064_032_rbx_r8d_r9d
movq %rcx, %rbx
callq .move_016_032_r8w_r9w_edx
callq .move_032_016_edx_r8w_r9w
callq .move_032_064_r8d_r9d_rcx
retq 

Initial state:
%rax/%rax: %rax_xchgq_rax_r64
%rbx/%rbx: %rbx_xchgq_rax_r64

State for specgen instruction: xchgq %rcx, %rbx:
%rcx/%rcx: ((0x0₃₂ ∘ %rbx_xchgq_r64_r64[63:32])[63:16] ∘ (0x0₃₂ ∘ ((0x0₃₂ ∘ %rbx_xchgq_r64_r64[63:32])[15:0][15:0] ∘ (0x0₃₂ ∘ %rbx_xchgq_r64_r64[31:0])[15:0][15:0]))[31:0][31:16])[31:0][31:0] ∘ ((0x0₃₂ ∘ %rbx_xchgq_r64_r64[31:0])[63:16] ∘ (0x0₃₂ ∘ ((0x0₃₂ ∘ %rbx_xchgq_r64_r64[63:32])[15:0][15:0] ∘ (0x0₃₂ ∘ %rbx_xchgq_r64_r64[31:0])[15:0][15:0]))[31:0][15:0])[31:0][31:0]
%rbx/%rbx: %rcx_xchgq_r64_r64

Register        -> %rcx
  translates to => %rbx
Value is               -> ((0x0₃₂ ∘ %rbx_xchgq_r64_r64[63:32])[63:16] ∘ (0x0₃₂ ∘ ((0x0₃₂ ∘ %rbx_xchgq_r64_r64[63:32])[15:0][15:0] ∘ (0x0₃₂ ∘ %rbx_xchgq_r64_r64[31:0])[15:0][15:0]))[31:0][31:16])[31:0][31:0] ∘ ((0x0₃₂ ∘ %rbx_xchgq_r64_r64[31:0])[63:16] ∘ (0x0₃₂ ∘ ((0x0₃₂ ∘ %rbx_xchgq_r64_r64[63:32])[15:0][15:0] ∘ (0x0₃₂ ∘ %rbx_xchgq_r64_r64[31:0])[15:0][15:0]))[31:0][15:0])[31:0][31:0]
  after renaming it is => %rax_xchgq_rax_r64

Register        -> %rbx
  translates to => %rax
Value is               -> %rcx_xchgq_r64_r64
  after renaming it is => %rbx_xchgq_rax_r64

Final state
%rax/%rax: %rbx_xchgq_rax_r64
%rbx/%rbx: %rax_xchgq_rax_r64

=====================================
=====================================
Computing circuit for xchgq %rbx, %rax

.target:
xchgq %rbx, %rax
retq 

Initial state:
%rax/%rax: %rax
%rbx/%rbx: %rbx

State for specgen instruction: xchgq %rbx, %rax:
%rax/%rax: %rbx_xchgq_rax_r64
%rbx/%rbx: %rax_xchgq_rax_r64

Register        -> %rax
  translates to => %rax
Value is               -> %rbx_xchgq_rax_r64
  after renaming it is => %rbx

Register        -> %rbx
  translates to => %rbx
Value is               -> %rax_xchgq_rax_r64
  after renaming it is => %rax

Final state
%rax/%rax: %rbx
%rbx/%rbx: %rax

=====================================
Circuits:

%rax   : %rbx
%rbx   : %rax

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/