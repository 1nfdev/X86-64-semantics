// Autogenerated using stratification.
requires "x86-configuration.k"

module XORL-EAX-IMM32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (xorl I1_32:Imm, %eax:R32,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )

 "SF" |-> ((#ifMInt (eqMInt(mi(32, 1), lshrMInt(xorMInt(extractMInt(getParentValue(%eax, RSMap), 32, 64), handleImmediateWithSignExtend(I1_32, 32, 32 )), 31)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ((#ifBool ( notBool  (  ( uvalueMInt(xorMInt(andMInt(mi(64, countOnes(xorMInt(extractMInt(getParentValue(%eax, RSMap), 56, 64), handleImmediateWithSignExtend(I1_32, 32, 32 )), 0)), mi(64, 1)), mi(64, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> (mi(1, 0) )

convToRegKeys(%eax) |-> (xorMInt(concatenateMInt(mi(32, 0), extractMInt(getParentValue(%eax, RSMap), 32, 64)), concatenateMInt(mi(32, 0), handleImmediateWithSignExtend(I1_32, 32, 32 ))) )

 "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(getParentValue(%eax, RSMap), 32, 64), handleImmediateWithSignExtend(I1_32, 32, 32 )), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule
