<?xml version="1.0" encoding="UTF-8"?>
<x86:instruction summary="Convert Packed Dword Integers to Packed Double-Precision FP Values" xmlns="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg" xmlns:x86="http://www.felixcloutier.com/x86">
<x86:mnemonic name="CVTPI2PD"/>
<table>
<tr>
<th>Opcode/Instruction</th>
<th>Op/En</th>
<th>64-Bit Mode</th>
<th>Compat/Leg Mode</th>
<th>Description</th></tr>
<tr>
<td>66 0F 2A /<em>r</em> CVTPI2PD <em>xmm</em>, <em>mm/m64*</em></td>
<td>RM</td>
<td>Valid</td>
<td>Valid</td>
<td>Convert two packed signed doubleword integers from <em>mm/mem64</em> to two packed double-precision floating-point values in <em>xmm</em>.</td></tr></table>
<blockquote>
<p>*Operation is different for different operand sets; see the Description section.</p></blockquote>
<h2>Instruction Operand Encoding</h2>
<table>
<tr>
<td>Op/En</td>
<td>Operand 1</td>
<td>Operand 2</td>
<td>Operand 3</td>
<td>Operand 4</td></tr>
<tr>
<td>RM</td>
<td>ModRM:reg (w)</td>
<td>ModRM:r/m (r)</td>
<td>NA</td>
<td>NA</td></tr></table>
<h2>Description</h2>
<p>Converts two packed signed doubleword integers in the source operand (second operand) to two packed double-precision floating-point values in the destination operand (first operand).</p>
<p>The source operand can be an MMX technology register or a 64-bit memory location. The destination operand is an XMM register. In addition, depending on the operand configuration:</p>
<ul>
<li><strong>For operands </strong><strong><em>xmm</em></strong><strong>, </strong><strong><em>mm</em></strong><strong>: </strong>the instruction causes a transition from x87 FPU to MMX technology operation (that is, the x87 FPU top-of-stack pointer is set to 0 and the x87 FPU tag word is set to all 0s [valid]). If this instruction is executed while an x87 FPU floating-point exception is pending, the exception is handled before the CVTPI2PD instruction is executed.</li>
<li><strong>For operands </strong><strong><em>xmm</em></strong><strong>, </strong><strong><em>m64</em></strong><strong>: </strong>the instruction does not cause a transition to MMX technology and does not take x87 FPU exceptions.</li></ul>
<p>In 64-bit mode, use of the REX.R prefix permits this instruction to access additional registers (XMM8-XMM15).</p>
<h2>Operation</h2>
<pre>DEST[63:0] ← Convert_Integer_To_Double_Precision_Floating_Point(SRC[31:0]);
DEST[127:64] ← Convert_Integer_To_Double_Precision_Floating_Point(SRC[63:32]);
</pre>
<h2>Intel C/C++ Compiler Intrinsic Equivalent</h2>
<pre>CVTPI2PD: __m128d _mm_cvtpi32_pd(__m64 a)
</pre>
<h2>SIMD Floating-Point Exceptions</h2>
<p>None</p>
<h2>Other Exceptions</h2>
<p>See <x86:tblref>Table 22-6</x86:tblref>, “Exception Conditions for Legacy SIMD/MMX Instructions with XMM and without FP Exception,” in the <em>Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 3B</em>.</p></x86:instruction>