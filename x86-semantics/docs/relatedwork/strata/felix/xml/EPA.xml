<?xml version="1.0" encoding="UTF-8"?>
<x86:instruction summary="Add Version Array" xmlns="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg" xmlns:x86="http://www.felixcloutier.com/x86">
<x86:mnemonic name="EPA"/>
<table>
<tr>
<th>Opcode/Instruction</th>
<th>Op/En</th>
<th>64/32 bit Mode Support</th>
<th>CPUID Feature Flag</th>
<th>Description</th></tr>
<tr>
<td>EAX = 0AH ENCLS[EPA]</td>
<td>IR</td>
<td>V/V</td>
<td>SGX1</td>
<td>This leaf function adds a Version Array to the EPC.</td></tr></table>
<h2>Instruction Operand Encoding</h2>
<table>
<tr>
<td>Op/En</td>
<td>EAX</td>
<td>RBX</td>
<td>RCX</td></tr>
<tr>
<td>IR</td>
<td>EPA (In)</td>
<td>PT_VA (In, Constant)</td>
<td>Effective address of the EPC page (In)</td></tr></table>
<h3>Description</h3>
<p>This leaf function creates an empty version array in the EPC page whose logical address is given by DS:RCX, and sets up EPCM attributes for that page. At the time of execution of this instruction, the register RBX must be set to PT_VA.</p>
<p>The table below provides additional information on the memory parameter of EPA leaf function.</p>
<h2>EPA Memory Parameter Semantics</h2>
<table>
<tr>
<td>EPCPAGE</td></tr>
<tr>
<td>Write access permitted by Enclave</td></tr></table>
<h3>Concurrency Restrictions</h3>
<figure id="tbl-40-37">
<table>
<tr>
<th rowspan="2">Leaf</th>
<th rowspan="2">Parameter</th>
<th colspan="3">Base Concurrency Restrictions</th></tr>
<tr>
<th>Access</th>
<th>On Conflict</th>
<th>SGX_CONFLICT VM Exit Qualification</th></tr>
<tr>
<td>EPA</td>
<td>VA [DS:RCX]</td>
<td>Exclusive</td>
<td>#GP</td>
<td>EPC_PAGE_CONFLICT_EXCEPTION</td></tr></table>
<figcaption><x86:tblref>Table 40-37</x86:tblref>. Base Concurrency Restrictions of EPA</figcaption></figure>
<figure id="tbl-40-38">
<table>
<tr>
<th rowspan="3">Leaf</th>
<th rowspan="3">Parameter</th>
<th colspan="6">Additional Concurrency Restrictions</th></tr>
<tr>
<th colspan="2">vs. EACCEPT, EACCEPTCOPY, EMODPE, EMODPR, EMODT</th>
<th colspan="2">vs. EADD, EEXTEND, EINIT</th>
<th colspan="2">vs. ETRACK, ETRACKC</th></tr>
<tr>
<th>Access</th>
<th>On Conflict</th>
<th>Access</th>
<th>On Conflict</th>
<th>Access</th>
<th>On Conflict</th></tr>
<tr>
<td>EPA</td>
<td>VA [DS:RCX]</td>
<td>Concurrent</td>
<td>L</td>
<td>Concurrent</td>
<td/>
<td>Concurrent</td>
<td/></tr></table>
<figcaption><x86:tblref>Table 40-38</x86:tblref>. Additional Concurrency Restrictions of EPA</figcaption></figure>
<h3>Operation</h3>
<pre>IF (RBX ≠ PT_VA or DS:RCX is not 4KByte Aligned)
    THEN #GP(0); FI;
IF (DS:RCX does not resolve within an EPC)
    THEN #PF(DS:RCX); FI;
(* Check concurrency with other Intel SGX instructions *)
IF (Other Intel SGX instructions accessing the page)
    THEN
        IF (&lt;&lt;VMX non-root operation&gt;&gt; AND &lt;&lt;ENABLE_EPC_VIRTUALIZATION_EXTENSIONS&gt;&gt;)
            THEN
                VMCS.Exit_reason ← SGX_CONFLICT;
                VMCS.Exit_qualification.code ← EPC_PAGE_CONFLICT_EXCEPTION;
                VMCS.Exit_qualification.error ← 0;
                VMCS.Guest-physical_address ←&lt;&lt; translation of DS:RCX produced by paging &gt;&gt;;
                VMCS.Guest-linear_address ← DS:RCX;
            Deliver VMEXIT;
            ELSE
                #GP(0);
        FI;
FI;
(* Check EPC page must be empty *)
IF (EPCM(DS:RCX). VALID ≠ 0)
    THEN #PF(DS:RCX); FI;
(* Clears EPC page *)
DS:RCX[32767:0] ← 0;
EPCM(DS:RCX).PT ← PT_VA;
EPCM(DS:RCX).ENCLAVEADDRESS ← 0;
EPCM(DS:RCX).BLOCKED ← 0;
EPCM(DS:RCX).PENDING ← 0;
EPCM(DS:RCX).MODIFIED ← 0;
EPCM(DS:RCX).PR ← 0;
EPCM(DS:RCX).RWX ← 0;
EPCM(DS:RCX).VALID ← 1;
</pre>
<h3>Flags Affected</h3>
<p>None</p>
<h3>Protected Mode Exceptions</h3>
<table>
<tr>
<td rowspan="4">#GP(0)</td>
<td>If a memory operand effective address is outside the DS segment limit.</td></tr>
<tr>
<td>If a memory operand is not properly aligned.</td></tr>
<tr>
<td>If another Intel SGX instruction is accessing the EPC page.</td></tr>
<tr>
<td>If RBX is not set to PT_VA.</td></tr>
<tr>
<td rowspan="3">#PF(error</td>
<td>code) If a page fault occurs in accessing memory operands.</td></tr>
<tr>
<td>If a memory operand is not an EPC page.</td></tr>
<tr>
<td>If the EPC page is valid.</td></tr></table>
<h3>64-Bit Mode Exceptions</h3>
<table>
<tr>
<td rowspan="4">#GP(0)</td>
<td>If a memory operand is non-canonical form.</td></tr>
<tr>
<td>If a memory operand is not properly aligned.</td></tr>
<tr>
<td>If another Intel SGX instruction is accessing the EPC page.</td></tr>
<tr>
<td>If RBX is not set to PT_VA.</td></tr>
<tr>
<td rowspan="3">#PF(error</td>
<td>code) If a page fault occurs in accessing memory operands.</td></tr>
<tr>
<td>If a memory operand is not an EPC page.</td></tr>
<tr>
<td>If the EPC page is valid.</td></tr></table></x86:instruction>