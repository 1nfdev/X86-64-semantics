<?xml version="1.0" encoding="UTF-8"?>
<x86:instruction summary="Square Root" xmlns="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg" xmlns:x86="http://www.felixcloutier.com/x86">
<x86:mnemonic name="FSQRT"/>
<table>
<tr>
<th>Opcode</th>
<th>Instruction</th>
<th>64-Bit Mode</th>
<th>Compat/Leg Mode</th>
<th>Description</th></tr>
<tr>
<td>D9 FA</td>
<td>FSQRT</td>
<td>Valid</td>
<td>Valid</td>
<td>Computes square root of ST(0) and stores the result in ST(0).</td></tr></table>
<h2>Description</h2>
<p>Computes the square root of the source value in the ST(0) register and stores the result in ST(0).</p>
<p>The following table shows the results obtained when taking the square root of various classes of numbers, assuming that neither overflow nor underflow occurs.</p>
<figure id="tbl-3-37">
<table>
<tr>
<th>SRC (ST(0))</th>
<th>DEST (ST(0))</th></tr>
<tr>
<td>−∞</td>
<td>*</td></tr>
<tr>
<td>−F</td>
<td>*</td></tr>
<tr>
<td>−0</td>
<td>−0</td></tr>
<tr>
<td>+0</td>
<td>+0</td></tr>
<tr>
<td>+F</td>
<td>+F</td></tr>
<tr>
<td>+∞</td>
<td>+∞</td></tr>
<tr>
<td>NaN</td>
<td>NaN</td></tr></table>
<figcaption><x86:tblref>Table 3-37</x86:tblref>. FSQRT Results</figcaption></figure>
<blockquote>
<p>F Meansfinitefloating-pointvalue.</p>
<p>* Indicatesfloating-pointinvalid-arithmetic-operand(#IA)exception.</p></blockquote>
<p>This instruction’s operation is the same in non-64-bit modes and 64-bit mode.</p>
<h2>Operation</h2>
<pre>ST(0) ← SquareRoot(ST(0));
</pre>
<h2>FPU Flags Affected</h2>
<table>
<tr>
<td rowspan="2">C1</td>
<td>Set to 0 if stack underflow occurred.</td></tr>
<tr>
<td>Set if result was rounded up; cleared otherwise.</td></tr>
<tr>
<td>C0, C2, C3</td>
<td>Undefined.</td></tr></table>
<h2>Floating-Point Exceptions</h2>
<table>
<tr>
<td>#IS</td>
<td>Stack underflow occurred.</td></tr>
<tr>
<td rowspan="2">#IA</td>
<td>Source operand is an SNaN value or unsupported format.</td></tr>
<tr>
<td>Source operand is a negative value (except for −0).</td></tr>
<tr>
<td>#D</td>
<td>Source operand is a denormal value.</td></tr>
<tr>
<td>#P</td>
<td>Value cannot be represented exactly in destination format.</td></tr></table>
<h2>Protected Mode Exceptions</h2>
<table>
<tr>
<td>#NM</td>
<td>CR0.EM[bit 2] or CR0.TS[bit 3] = 1.</td></tr>
<tr>
<td>#MF</td>
<td>If there is a pending x87 FPU exception.</td></tr>
<tr>
<td>#UD</td>
<td>If the LOCK prefix is used.</td></tr></table>
<h2>Real-Address Mode Exceptions</h2>
<p>Same exceptions as in protected mode.</p>
<h2>Virtual-8086 Mode Exceptions</h2>
<p>Same exceptions as in protected mode.</p>
<h2>Compatibility Mode Exceptions</h2>
<p>Same exceptions as in protected mode.</p>
<h2>64-Bit Mode Exceptions</h2>
<p>Same exceptions as in protected mode.</p></x86:instruction>