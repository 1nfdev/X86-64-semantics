<?xml version="1.0" encoding="UTF-8"?>
<x86:instruction summary="Compute y ∗ log2x" xmlns="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg" xmlns:x86="http://www.felixcloutier.com/x86">
<x86:mnemonic name="FYL2X"/>
<table>
<tr>
<th>Opcode</th>
<th>Instruction</th>
<th>64-Bit Mode</th>
<th>Compat/Leg Mode</th>
<th>Description</th></tr>
<tr>
<td>D9 F1</td>
<td>FYL2X</td>
<td>Valid</td>
<td>Valid</td>
<td>Replace ST(1) with (ST(1) ∗ log<sub>2</sub>ST(0)) and pop the register stack.</td></tr></table>
<h2>Description</h2>
<p>Computes (ST(1) ∗ log<sub>2</sub> (ST(0))), stores the result in resister ST(1), and pops the FPU register stack. The source operand in ST(0) must be a non-zero positive number.</p>
<p>The following table shows the results obtained when taking the log of various classes of numbers, assuming that neither overflow nor underflow occurs.</p>
<figure id="tbl-3-48">
<table>
<tr>
<th colspan="10">ST(0)</th></tr>
<tr>
<td rowspan="8"><strong>ST(1)</strong></td>
<td/>
<td>−∞</td>
<td>−F</td>
<td>±0</td>
<td>+0&lt;+F&lt;+1</td>
<td>+1</td>
<td>+F&gt;+1</td>
<td>+∞</td>
<td>NaN</td></tr>
<tr>
<td>−∞</td>
<td>*</td>
<td>*</td>
<td>+∞</td>
<td>+∞</td>
<td>*</td>
<td>−∞</td>
<td>−∞</td>
<td>NaN</td></tr>
<tr>
<td>−F</td>
<td>*</td>
<td>*</td>
<td>**</td>
<td>+F</td>
<td>−0</td>
<td>−F</td>
<td>−∞</td>
<td>NaN</td></tr>
<tr>
<td>−0</td>
<td>*</td>
<td>*</td>
<td>*</td>
<td>+0</td>
<td>−0</td>
<td>−0</td>
<td>*</td>
<td>NaN</td></tr>
<tr>
<td>+0</td>
<td>*</td>
<td>*</td>
<td>*</td>
<td>−0</td>
<td>+0</td>
<td>+0</td>
<td>*</td>
<td>NaN</td></tr>
<tr>
<td>+F</td>
<td>*</td>
<td>*</td>
<td>**</td>
<td>−F</td>
<td>+0</td>
<td>+F</td>
<td>+∞</td>
<td>NaN</td></tr>
<tr>
<td>+∞</td>
<td>*</td>
<td>*</td>
<td>−∞</td>
<td>−∞</td>
<td>*</td>
<td>+∞</td>
<td>+∞</td>
<td>NaN</td></tr>
<tr>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td></tr></table>
<figcaption><x86:tblref>Table 3-48</x86:tblref>. FYL2X Results</figcaption></figure>
<blockquote>
<p>F Meansfinitefloating-pointvalue.</p>
<p>* Indicatesfloating-pointinvalid-operation(#IA)exception.</p>
<p>** Indicates floating-point zero-divide (#Z) exception.</p></blockquote>
<p>If the divide-by-zero exception is masked and register ST(0) contains ±0, the instruction returns ∞ with a sign that is the opposite of the sign of the source operand in register ST(1).</p>
<p>The FYL2X instruction is designed with a built-in multiplication to optimize the calculation of logarithms with an arbitrary positive base (b):</p>
<p>log<sub>b</sub>x ← (log<sub>2</sub>b)<sup>–1</sup> ∗ log<sub>2</sub>x</p>
<p>This instruction’s operation is the same in non-64-bit modes and 64-bit mode.</p>
<h2>Operation</h2>
<pre>ST(1) ← ST(1) ∗ log<sub>2</sub>ST(0);
PopRegisterStack;
</pre>
<h2>FPU Flags Affected</h2>
<table>
<tr>
<td rowspan="2">C1</td>
<td>Set to 0 if stack underflow occurred.</td></tr>
<tr>
<td>Set if result was rounded up; cleared otherwise.</td></tr>
<tr>
<td>C0, C2, C3</td>
<td>Undefined.</td></tr></table>
<h2>Floating-Point Exceptions</h2>
<table>
<tr>
<td>#IS</td>
<td>Stack underflow occurred.</td></tr>
<tr>
<td rowspan="2">#IA</td>
<td>Either operand is an SNaN or unsupported format.</td></tr>
<tr>
<td>Source operand in register ST(0) is a negative finite value (not -0).</td></tr>
<tr>
<td>#Z</td>
<td>Source operand in register ST(0) is ±0.</td></tr>
<tr>
<td>#D</td>
<td>Source operand is a denormal value.</td></tr>
<tr>
<td>#U</td>
<td>Result is too small for destination format.</td></tr>
<tr>
<td>#O</td>
<td>Result is too large for destination format.</td></tr>
<tr>
<td>#P</td>
<td>Value cannot be represented exactly in destination format.</td></tr></table>
<h2>Protected Mode Exceptions</h2>
<table>
<tr>
<td>#NM</td>
<td>CR0.EM[bit 2] or CR0.TS[bit 3] = 1.</td></tr>
<tr>
<td>#MF</td>
<td>If there is a pending x87 FPU exception.</td></tr>
<tr>
<td>#UD</td>
<td>If the LOCK prefix is used.</td></tr></table>
<h2>Real-Address Mode Exceptions</h2>
<p>Same exceptions as in protected mode.</p>
<h2>Virtual-8086 Mode Exceptions</h2>
<p>Same exceptions as in protected mode.</p>
<h2>Compatibility Mode Exceptions</h2>
<p>Same exceptions as in protected mode.</p>
<h2>64-Bit Mode Exceptions</h2>
<p>Same exceptions as in protected mode.</p></x86:instruction>