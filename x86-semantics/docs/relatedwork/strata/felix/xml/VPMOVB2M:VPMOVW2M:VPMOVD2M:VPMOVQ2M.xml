<?xml version="1.0" encoding="UTF-8"?>
<x86:instruction summary="Convert a Vector Register to a Mask" xmlns="http://www.w3.org/1999/xhtml" xmlns:svg="http://www.w3.org/2000/svg" xmlns:x86="http://www.felixcloutier.com/x86">
<x86:mnemonic name="VPMOVB2M"/>
<x86:mnemonic name="VPMOVW2M"/>
<x86:mnemonic name="VPMOVD2M"/>
<x86:mnemonic name="VPMOVQ2M"/>
<table>
<tr>
<th>Opcode/Instruction</th>
<th>Op/En</th>
<th>64/32 bit Mode Support</th>
<th>CPUID Feature Flag</th>
<th>Description</th></tr>
<tr>
<td>EVEX.128.F3.0F38.W0 29 /r VPMOVB2M k1, xmm1</td>
<td>RM</td>
<td>V/V</td>
<td>AVX512VL AVX512BW</td>
<td>Sets each bit in k1 to 1 or 0 based on the value of the most significant bit of the corresponding byte in XMM1.</td></tr>
<tr>
<td>EVEX.256.F3.0F38.W0 29 /r VPMOVB2M k1, ymm1</td>
<td>RM</td>
<td>V/V</td>
<td>AVX512VL AVX512BW</td>
<td>Sets each bit in k1 to 1 or 0 based on the value of the most significant bit of the corresponding byte in YMM1.</td></tr>
<tr>
<td>EVEX.512.F3.0F38.W0 29 /r VPMOVB2M k1, zmm1</td>
<td>RM</td>
<td>V/V</td>
<td>AVX512BW</td>
<td>Sets each bit in k1 to 1 or 0 based on the value of the most significant bit of the corresponding byte in ZMM1.</td></tr>
<tr>
<td>EVEX.128.F3.0F38.W1 29 /r VPMOVW2M k1, xmm1</td>
<td>RM</td>
<td>V/V</td>
<td>AVX512VL AVX512BW</td>
<td>Sets each bit in k1 to 1 or 0 based on the value of the most significant bit of the corresponding word in XMM1.</td></tr>
<tr>
<td>EVEX.256.F3.0F38.W1 29 /r VPMOVW2M k1, ymm1</td>
<td>RM</td>
<td>V/V</td>
<td>AVX512VL AVX512BW</td>
<td>Sets each bit in k1 to 1 or 0 based on the value of the most significant bit of the corresponding word in YMM1.</td></tr>
<tr>
<td>EVEX.512.F3.0F38.W1 29 /r VPMOVW2M k1, zmm1</td>
<td>RM</td>
<td>V/V</td>
<td>AVX512BW</td>
<td>Sets each bit in k1 to 1 or 0 based on the value of the most significant bit of the corresponding word in ZMM1.</td></tr>
<tr>
<td>EVEX.128.F3.0F38.W0 39 /r VPMOVD2M k1, xmm1</td>
<td>RM</td>
<td>V/V</td>
<td>AVX512VL AVX512DQ</td>
<td>Sets each bit in k1 to 1 or 0 based on the value of the most significant bit of the corresponding doubleword in XMM1.</td></tr>
<tr>
<td>EVEX.256.F3.0F38.W0 39 /r VPMOVD2M k1, ymm1</td>
<td>RM</td>
<td>V/V</td>
<td>AVX512VL AVX512DQ</td>
<td>Sets each bit in k1 to 1 or 0 based on the value of the most significant bit of the corresponding doubleword in YMM1.</td></tr>
<tr>
<td>EVEX.512.F3.0F38.W0 39 /r VPMOVD2M k1, zmm1</td>
<td>RM</td>
<td>V/V</td>
<td>AVX512DQ</td>
<td>Sets each bit in k1 to 1 or 0 based on the value of the most significant bit of the corresponding doubleword in ZMM1.</td></tr>
<tr>
<td>EVEX.128.F3.0F38.W1 39 /r VPMOVQ2M k1, xmm1</td>
<td>RM</td>
<td>V/V</td>
<td>AVX512VL AVX512DQ</td>
<td>Sets each bit in k1 to 1 or 0 based on the value of the most significant bit of the corresponding quadword in XMM1.</td></tr>
<tr>
<td>EVEX.256.F3.0F38.W1 39 /r VPMOVQ2M k1, ymm1</td>
<td>RM</td>
<td>V/V</td>
<td>AVX512VL AVX512DQ</td>
<td>Sets each bit in k1 to 1 or 0 based on the value of the most significant bit of the corresponding quadword in YMM1.</td></tr>
<tr>
<td>EVEX.512.F3.0F38.W1 39 /r VPMOVQ2M k1, zmm1</td>
<td>RM</td>
<td>V/V</td>
<td>AVX512DQ</td>
<td>Sets each bit in k1 to 1 or 0 based on the value of the most significant bit of the corresponding quadword in ZMM1.</td></tr></table>
<h2>Instruction Operand Encoding</h2>
<table>
<tr>
<td>Op/En</td>
<td>Operand 1</td>
<td>Operand 2</td>
<td>Operand 3</td>
<td>Operand 4</td></tr>
<tr>
<td>RM</td>
<td>ModRM:reg (w)</td>
<td>ModRM:r/m (r)</td>
<td>NA</td>
<td>NA</td></tr></table>
<h3>Description</h3>
<p>Converts a vector register to a mask register. Each element in the destination register is set to 1 or 0 depending on the value of most significant bit of the corresponding element in the source register.</p>
<p>The source operand is a ZMM/YMM/XMM register. The destination operand is a mask register.</p>
<p>EVEX.vvvv is reserved and must be 1111b otherwise instructions will #UD.</p>
<h3>Operation</h3>
<h4>VPMOVB2M (EVEX encoded versions)</h4>
<pre>(KL, VL) = (16, 128), (32, 256), (64, 512)
FOR j←0 TO KL-1
    i←j * 8
    IF SRC[i+7]
        THEN DEST[j] ← 1
        ELSE DEST[j] ← 0
    FI;
ENDFOR
DEST[MAX_KL-1:KL] ← 0
</pre>
<h4>VPMOVW2M (EVEX encoded versions)</h4>
<pre>(KL, VL) = (8, 128), (16, 256), (32, 512)
FOR j←0 TO KL-1
    i←j * 16
    IF SRC[i+15]
        THEN DEST[j] ← 1
        ELSE DEST[j] ← 0
    FI;
ENDFOR
DEST[MAX_KL-1:KL] ← 0
</pre>
<h4>VPMOVD2M (EVEX encoded versions)</h4>
<pre>(KL, VL) = (4, 128), (8, 256), (16, 512)
FOR j←0 TO KL-1
    i←j * 32
    IF SRC[i+31]
        THEN DEST[j] ← 1
        ELSE DEST[j] ← 0
    FI;
ENDFOR
DEST[MAX_KL-1:KL] ← 0
</pre>
<h4>VPMOVQ2M (EVEX encoded versions)</h4>
<pre>(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j←0 TO KL-1
    i←j * 64
    IF SRC[i+63]
        THEN DEST[j] ← 1
        ELSE DEST[j] ← 0
    FI;
ENDFOR
DEST[MAX_KL-1:KL] ← 0
</pre>
<h3>Intel C/C++ Compiler Intrinsic Equivalents</h3>
<pre>VPMPOVB2M __mmask64 _mm512_movepi8_mask( __m512i );
</pre>
<pre>VPMPOVD2M __mmask16 _mm512_movepi32_mask( __m512i );
</pre>
<pre>VPMPOVQ2M __mmask8 _mm512_movepi64_mask( __m512i );
</pre>
<pre>VPMPOVW2M __mmask32 _mm512_movepi16_mask( __m512i );
</pre>
<pre>VPMPOVB2M __mmask32 _mm256_movepi8_mask( __m256i );
</pre>
<pre>VPMPOVD2M __mmask8 _mm256_movepi32_mask( __m256i );
</pre>
<pre>VPMPOVQ2M __mmask8 _mm256_movepi64_mask( __m256i );
</pre>
<pre>VPMPOVW2M __mmask16 _mm256_movepi16_mask( __m256i );
</pre>
<pre>VPMPOVB2M __mmask16 _mm_movepi8_mask( __m128i );
</pre>
<pre>VPMPOVD2M __mmask8 _mm_movepi32_mask( __m128i );
</pre>
<pre>VPMPOVQ2M __mmask8 _mm_movepi64_mask( __m128i );
</pre>
<pre>VPMPOVW2M __mmask8 _mm_movepi16_mask( __m128i );
</pre>
<h3>SIMD Floating-Point Exceptions</h3>
<p>None</p>
<h3>Other Exceptions</h3>
<p>EVEX-encoded instruction, see Exceptions Type E7NM</p>
<table>
<tr>
<td>#UD</td>
<td>If EVEX.vvvv != 1111B.</td></tr></table></x86:instruction>