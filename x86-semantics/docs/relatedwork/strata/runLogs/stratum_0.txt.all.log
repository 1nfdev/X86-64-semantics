[4m[1m[34mCheck if supported: addq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/addq_r64_r64.s[0m
[4m[1m[34mcreatespec addq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addq_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/addq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddq_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/addq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/addq_r64_r64.s[0m
Circuit: orq %rbx, %rbx
%of -> 1
%zf -> 1
%sf -> 1
%af -> 1
%rbx -> 1
%pf -> 1
%cf -> 1

Circuit: adcq %rcx, %rbx
%pf -> 1
%cf -> 1
%rbx -> 1
%rcx -> 1
%sf -> 1
%af -> 1
%of -> 1
%zf -> 1

Total Circuit
SF -> 1
CF -> 1
RBX -> 1
OF -> 1
PF -> 1
RCX -> 1
ZF -> 1
AF -> 1

Target
CF -> 1
RBX -> 1
SF -> 1
OF -> 1
PF -> 1
RCX -> 1
AF -> 1
ZF -> 1

[4m[1m[34mkprove addq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput addq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput addq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddq_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _619)), concatenateMInt(mi(1, 0), mi(64, _618))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), MI619), concatenateMInt(mi(1, 0), MI618)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(mi(64, _619), mi(64, _618)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(MI619, MI618), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(64, _619), mi(64, _618)), addMInt(mi(64, _619), mi(64, _618))), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MI619, MI618), addMInt(MI619, MI618)), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(mi(64, _619), mi(64, _618)), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(MI619, MI618), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _619) )
echo Debug:  Result: "RCX" |-> (MI619 )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _619), 0, 1), extractMInt(mi(64, _618), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _619), 0, 1), extractMInt(addMInt(mi(64, _619), mi(64, _618)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI619, 0, 1), extractMInt(MI618, 0, 1))  andBool   notBool  ( eqMInt(extractMInt(MI619, 0, 1), extractMInt(addMInt(MI619, MI618), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (addMInt(mi(64, _619), mi(64, _618)) )
echo Debug:  Result: "RBX" |-> (addMInt(MI619, MI618) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(mi(64, _619), mi(64, _618)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(MI619, MI618), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn addq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-addq_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/addq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: andnq_r64_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andnq_r64_r64_r64.s[0m
[4m[1m[34mcreatespec andnq_r64_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andnq_r64_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andnq_r64_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandnq_r64_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: andnq_r64_r64_r64[0m
Undef Set
pf -> 1
af -> 1

[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andnq_r64_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andnq_r64_r64_r64.s[0m
Circuit: orq %rcx, %rdx
%cf -> 1
%pf -> 1
%rcx -> 1
%af -> 1
%sf -> 1
%rdx -> 1
%zf -> 1
%of -> 1

Circuit: xorq %rcx, %rdx
%rdx -> 1
%zf -> 1
%of -> 1
%af -> 1
%sf -> 1
%rcx -> 1
%cf -> 1
%pf -> 1

Circuit: movq %rdx, %rbx
%rdx -> 1
%rbx -> 1

Total Circuit
ZF -> 1
AF -> 1
RCX -> 1
RDX -> 1
PF -> 1
OF -> 1
SF -> 1
CF -> 1
RBX -> 1

Target
RDX -> 1
RCX -> 1
PF -> 1
ZF -> 1
AF -> 1
SF -> 1
CF -> 1
RBX -> 1
 -> 1
OF -> 1

[4m[1m[34mkprove andnq_r64_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andnq_r64_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andnq_r64_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput andnq_r64_r64_r64[0m
[4m[1m[34msanitizeSpecOutput andnq_r64_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandnq_r64_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(64, _621), 0, 1), orMInt(extractMInt(mi(64, _621), 0, 1), extractMInt(mi(64, _622), 0, 1))) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(MI621, 0, 1), orMInt(extractMInt(MI621, 0, 1), extractMInt(MI622, 0, 1))) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, _621), 56, 64), orMInt(extractMInt(mi(64, _621), 56, 64), extractMInt(mi(64, _622), 56, 64))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI621, 56, 64), orMInt(extractMInt(MI621, 56, 64), extractMInt(MI622, 56, 64))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _621) )
echo Debug:  Result: "RCX" |-> (MI621 )
echo Debug:  PreResult: "RDX" |-> (xorMInt(mi(64, _621), orMInt(mi(64, _621), mi(64, _622))) )
echo Debug:  Result: "RDX" |-> (xorMInt(MI621, orMInt(MI621, MI622)) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (xorMInt(mi(64, _621), orMInt(mi(64, _621), mi(64, _622))) )
echo Debug:  Result: "RBX" |-> (xorMInt(MI621, orMInt(MI621, MI622)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(mi(64, _621), orMInt(mi(64, _621), mi(64, _622))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(MI621, orMInt(MI621, MI622)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn andnq_r64_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-andnq_r64_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andnq_r64_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cbtw[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cbtw.s[0m
[4m[1m[34mcreatespec cbtw: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cbtw_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cbtw.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcbtw: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cbtw.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cbtw.s[0m
Circuit: movsbq %al, %r8
%al -> 1
%r8 -> 1

Circuit: movq $0x10, %r9
%r9 -> 1
\$0x10 -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%xmm1 -> 1
%r9 -> 1
%r8 -> 1

Circuit: callq .move_128_032_xmm1_eax_edx_r8d_r9d
%eax -> 1
%edx -> 1
%xmm1 -> 1
%r8d -> 1
%r9d -> 1

Total Circuit
RDX -> 1
R8 -> 1
RAX -> 1
R9 -> 1
YMM1 -> 1
 -> 1

Target
RAX -> 1

[4m[1m[34mkprove cbtw[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cbtw_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cbtw_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cbtw[0m
[4m[1m[34msanitizeSpecOutput cbtw[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcbtw: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(mi(64, 16), mi(64, svalueMInt(extractMInt(mi(64, _605), 56, 64))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(mi(64, 16), mi(64, svalueMInt(extractMInt(MI605, 56, 64))))) )
echo Debug:  PreResult: "R8" |-> (mi(64, 16) )
echo Debug:  Result: "R8" |-> (mi(64, 16) )
echo Debug:  PreResult: "R9" |-> (mi(64, 0) )
echo Debug:  Result: "R9" |-> (mi(64, 0) )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _605), 56, 64))), 0, 32)) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI605, 56, 64))), 0, 32)) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _605)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI605) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _605), 0, 48), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _605), 56, 64))), 48, 64)) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI605, 0, 48), extractMInt(mi(64, svalueMInt(extractMInt(MI605, 56, 64))), 48, 64)) )
[4m[1m[34mwriteKDefn cbtw: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cbtw.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cbtw.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: clc[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/clc.s[0m
[4m[1m[34mcreatespec clc: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_clc_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/clc.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mclc: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/clc.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/clc.s[0m
Circuit: xorq %rax, %rax
%pf -> 1
%cf -> 1
%of -> 1
%zf -> 1
%rax -> 1
%sf -> 1
%af -> 1

Circuit: adcb %al, %al
%zf -> 1
%of -> 1
%af -> 1
%sf -> 1
%al -> 1
%cf -> 1
%pf -> 1

Total Circuit
PF -> 1
ZF -> 1
AF -> 1
RAX -> 1
CF -> 1
SF -> 1
OF -> 1

Target
CF -> 1

[4m[1m[34mkprove clc[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_clc_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_clc_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput clc[0m
[4m[1m[34msanitizeSpecOutput clc[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mclc: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (mi(1, 0) )
echo Debug:  Result: "AF" |-> (mi(1, 0) )
echo Debug:  PreResult: "PF" |-> (mi(1, 1) )
echo Debug:  Result: "PF" |-> (mi(1, 1) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (mi(64, 0) )
echo Debug:  Result: "RAX" |-> (mi(64, 0) )
echo Debug:  PreResult: "ZF" |-> (mi(1, 1)   )
echo Debug:  Result: "ZF" |-> (mi(1, 1)   )
[4m[1m[34mwriteKDefn clc: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-clc.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/clc.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cltq[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cltq.s[0m
[4m[1m[34mcreatespec cltq: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cltq_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cltq.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcltq: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cltq.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cltq.s[0m
Circuit: xorq %rsi, %rsi
%pf -> 1
%cf -> 1
%sf -> 1
%af -> 1
%of -> 1
%zf -> 1
%rsi -> 1

Circuit: movslq %esi, %r9
%esi -> 1
%r9 -> 1

Circuit: adcl %r9d, %eax
%r9d -> 1
%pf -> 1
%cf -> 1
%of -> 1
%zf -> 1
%rax -> 1
%sf -> 1
%eax -> 1
%af -> 1

Circuit: movslq %eax, %rax
%rax -> 1
%eax -> 1

Total Circuit
CF -> 1
SF -> 1
R9 -> 1
RSI -> 1
OF -> 1
PF -> 1
ZF -> 1
AF -> 1
RAX -> 1

Target
RAX -> 1

[4m[1m[34mkprove cltq[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cltq_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cltq_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cltq[0m
[4m[1m[34msanitizeSpecOutput cltq[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcltq: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (extractMInt(mi(64, _608), 32, 33) )
echo Debug:  Result: "SF" |-> (extractMInt(MI608, 32, 33) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(32, 0), extractMInt(mi(64, _608), 32, 64)), extractMInt(mi(64, _608), 32, 64)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(32, 0), extractMInt(MI608, 32, 64)), extractMInt(MI608, 32, 64)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(mi(64, _608), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(MI608, 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R9" |-> (mi(64, 0) )
echo Debug:  Result: "R9" |-> (mi(64, 0) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 0), extractMInt(mi(64, _608), 32, 33))  andBool   notBool  ( eqMInt(mi(1, 0), extractMInt(mi(64, _608), 32, 33)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 0), extractMInt(MI608, 32, 33))  andBool   notBool  ( eqMInt(mi(1, 0), extractMInt(MI608, 32, 33)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (mi(64, svalueMInt(extractMInt(mi(64, _608), 32, 64))) )
echo Debug:  Result: "RAX" |-> (mi(64, svalueMInt(extractMInt(MI608, 32, 64))) )
echo Debug:  PreResult: "RSI" |-> (mi(64, 0) )
echo Debug:  Result: "RSI" |-> (mi(64, 0) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(mi(64, _608), 32, 64), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(MI608, 32, 64), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn cltq: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cltq.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cltq.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovzq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovzq_r64_r64.s[0m
[4m[1m[34mcreatespec cmovzq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovzq_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovzq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovzq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovzq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovzq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovzq_r64_r64.s[0m
Circuit: cmoveq %rcx, %rbx
%zf -> 1
%rbx -> 1
cmov -> 1
%rcx -> 1

Total Circuit
 -> 1
RBX -> 1
ZF -> 1
RCX -> 1

Target
ZF -> 1
RCX -> 1
 -> 1
RBX -> 1

[4m[1m[34mkprove cmovzq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovzq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovzq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovzq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput cmovzq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovzq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovzq_r64_r64[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _606), mi(1, 0)) ) #then ( mi(64, _604) ) #else ( mi(64, _605) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI606, mi(1, 0)) ) #then ( MI604 ) #else ( MI605 ) #fi)  )
echo Debug:  PreResult: "ZF" |-> (mi(1, _606) )
echo Debug:  Result: "ZF" |-> (MI606 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _605)   )
echo Debug:  Result: "RCX" |-> (MI605   )
[4m[1m[34mwriteKDefn cmovzq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovzq_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovzq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovzw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovzw_r16_r16.s[0m
[4m[1m[34mcreatespec cmovzw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovzw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovzw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovzw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovzw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovzw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovzw_r16_r16.s[0m
Circuit: movswq %cx, %r13
%r13 -> 1
%cx -> 1

Circuit: movslq %r13d, %r13
%r13d -> 1
%r13 -> 1

Circuit: cmoveq %r13, %rbx
%zf -> 1
cmov -> 1
%rbx -> 1
%r13 -> 1

Total Circuit
RCX -> 1
ZF -> 1
RBX -> 1
 -> 1
R13 -> 1

Target
ZF -> 1
RCX -> 1
 -> 1
RBX -> 1

[4m[1m[34mkprove cmovzw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovzw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovzw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovzw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovzw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovzw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovzw_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _608), mi(1, 0)) ) #then ( mi(64, _606) ) #else ( concatenateMInt(extractMInt(mi(64, _606), 0, 48), extractMInt(mi(64, _607), 48, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI608, mi(1, 0)) ) #then ( MI606 ) #else ( concatenateMInt(extractMInt(MI606, 0, 48), extractMInt(MI607, 48, 64)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> (mi(1, _608) )
echo Debug:  Result: "ZF" |-> (MI608 )
echo Debug:  PreResult: "R13" |-> (mi(64, svalueMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _607), 48, 64))), 32, 64))) )
echo Debug:  Result: "R13" |-> (mi(64, svalueMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI607, 48, 64))), 32, 64))) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _607) )
echo Debug:  Result: "RCX" |-> (MI607 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _606))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI606)   )
[4m[1m[34mwriteKDefn cmovzw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovzw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovzw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cvtss2sd_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cvtss2sd_xmm_xmm.s[0m
[4m[1m[34mcreatespec cvtss2sd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cvtss2sd_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cvtss2sd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcvtss2sd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cvtss2sd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cvtss2sd_xmm_xmm.s[0m
Circuit: callq .move_128_64_xmm1_xmm12_xmm13
%xmm1 -> 1
%xmm12 -> 1
%xmm13 -> 1

Circuit: vcvtps2pd %xmm2, %ymm12
avx -> 1
%mxcsr::rc[0] -> 1
%ymm12 -> 1
%xmm2 -> 1

Circuit: callq .move_64_128_xmm12_xmm13_xmm1
%xmm13 -> 1
%xmm1 -> 1
%xmm12 -> 1

Total Circuit
YMM2 -> 1
YMM12 -> 1
YMM1 -> 1
 -> 1
YMM13 -> 1

Target
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove cvtss2sd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cvtss2sd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cvtss2sd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cvtss2sd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput cvtss2sd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcvtss2sd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8)), 64), concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8)), 64), concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8)), 64), Float2MInt(Float2Double(MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8)), 64)))) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(MI606, 128, 160), 24, 8)), 64), concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(MI606, 160, 192), 24, 8)), 64), concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(MI606, 192, 224), 24, 8)), 64), Float2MInt(Float2Double(MInt2Float(extractMInt(MI606, 224, 256), 24, 8)), 64)))) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _606) )
echo Debug:  Result: "YMM2" |-> (MI606 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _605), 0, 192), Float2MInt(Float2Double(MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8)), 64)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI605, 0, 192), Float2MInt(Float2Double(MInt2Float(extractMInt(MI606, 224, 256), 24, 8)), 64)) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _605), 128, 192)) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(192, 0), extractMInt(MI605, 128, 192)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _605)   )
echo Debug:  Result: "SPAD1" |-> (MI605   )
[4m[1m[34mwriteKDefn cvtss2sd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cvtss2sd_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cvtss2sd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: decb_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/decb_r8.s[0m
[4m[1m[34mcreatespec decb_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_decb_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/decb_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mdecb_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/decb_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/decb_r8.s[0m
Circuit: movq $0xffffffffffffffff, %r9
%r9 -> 1
\$0xffffffffffffffff -> 1

Circuit: xorq %rcx, %rcx
%rcx -> 1
%cf -> 1
%pf -> 1
%zf -> 1
%of -> 1
%af -> 1
%sf -> 1

Circuit: adcb %r9b, %bl
%bl -> 1
%cf -> 1
%pf -> 1
%af -> 1
%r9b -> 1
%sf -> 1
%zf -> 1
%of -> 1

Total Circuit
R9 -> 1
SF -> 1
RBX -> 1
CF -> 1
 -> 1
OF -> 1
RCX -> 1
PF -> 1
AF -> 1
ZF -> 1

Target
SF -> 1
RBX -> 1
OF -> 1
PF -> 1
AF -> 1
ZF -> 1

[4m[1m[34mkprove decb_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_decb_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_decb_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput decb_r8[0m
[4m[1m[34msanitizeSpecOutput decb_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mdecb_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 56, 64))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(1, 0), extractMInt(MI617, 56, 64))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(mi(8, 255), extractMInt(mi(64, _617), 56, 64)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(mi(8, 255), extractMInt(MI617, 56, 64)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 255), extractMInt(mi(64, _617), 56, 64)), addMInt(mi(8, 255), extractMInt(mi(64, _617), 56, 64))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 255), extractMInt(MI617, 56, 64)), addMInt(mi(8, 255), extractMInt(MI617, 56, 64))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, 0) )
echo Debug:  Result: "RCX" |-> (mi(64, 0) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(mi(8, 255), extractMInt(mi(64, _617), 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(mi(8, 255), extractMInt(MI617, 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R9" |-> (mi(64, 18446744073709551615) )
echo Debug:  Result: "R9" |-> (mi(64, 18446744073709551615) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _617)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI617) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 1), extractMInt(mi(64, _617), 56, 57))  andBool   notBool  ( eqMInt(mi(1, 1), extractMInt(addMInt(mi(8, 255), extractMInt(mi(64, _617), 56, 64)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 1), extractMInt(MI617, 56, 57))  andBool   notBool  ( eqMInt(mi(1, 1), extractMInt(addMInt(mi(8, 255), extractMInt(MI617, 56, 64)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _617), 0, 56), addMInt(mi(8, 255), extractMInt(mi(64, _617), 56, 64))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI617, 0, 56), addMInt(mi(8, 255), extractMInt(MI617, 56, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(mi(8, 255), extractMInt(mi(64, _617), 56, 64)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(mi(8, 255), extractMInt(MI617, 56, 64)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn decb_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-decb_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/decb_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: incl_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/incl_r32.s[0m
[4m[1m[34mcreatespec incl_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_incl_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/incl_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mincl_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/incl_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/incl_r32.s[0m
Circuit: callq .clear_cf
%cf -> 1

Circuit: callq .set_pf
%pf -> 1

Circuit: callq .read_pf_into_rcx
%pf -> 1
%rcx -> 1

Circuit: adcl %ecx, %ebx
%af -> 1
%sf -> 1
%ecx -> 1
%zf -> 1
%of -> 1
%rbx -> 1
%cf -> 1
%ebx -> 1
%pf -> 1

Circuit: callq .set_szp_for_ebx
%zf -> 1
%sf -> 1
%pf -> 1
%ebx -> 1

Total Circuit
PF -> 1
RCX -> 1
ZF -> 1
AF -> 1
RBX -> 1
CF -> 1
SF -> 1
OF -> 1

Target
ZF -> 1
AF -> 1
PF -> 1
OF -> 1
RBX -> 1
SF -> 1

[4m[1m[34mkprove incl_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_incl_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_incl_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput incl_r32[0m
[4m[1m[34msanitizeSpecOutput incl_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mincl_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(mi(33, 1), concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 32, 64))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(mi(33, 1), concatenateMInt(mi(1, 0), extractMInt(MI615, 32, 64))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(mi(32, 1), extractMInt(mi(64, _615), 32, 64)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(mi(32, 1), extractMInt(MI615, 32, 64)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(32, 1), extractMInt(mi(64, _615), 32, 64)), addMInt(mi(32, 1), extractMInt(mi(64, _615), 32, 64))), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(32, 1), extractMInt(MI615, 32, 64)), addMInt(mi(32, 1), extractMInt(MI615, 32, 64))), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, 1) )
echo Debug:  Result: "RCX" |-> (mi(64, 1) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(mi(32, 1), extractMInt(mi(64, _615), 32, 64)), 24, 32), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(mi(32, 1), extractMInt(MI615, 32, 64)), 24, 32), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 0), extractMInt(mi(64, _615), 32, 33))  andBool   notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt(mi(32, 1), extractMInt(mi(64, _615), 32, 64)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 0), extractMInt(MI615, 32, 33))  andBool   notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt(mi(32, 1), extractMInt(MI615, 32, 64)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), addMInt(mi(32, 1), extractMInt(mi(64, _615), 32, 64))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), addMInt(mi(32, 1), extractMInt(MI615, 32, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(mi(32, 1), extractMInt(mi(64, _615), 32, 64)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(mi(32, 1), extractMInt(MI615, 32, 64)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn incl_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-incl_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/incl_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: incw_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/incw_r16.s[0m
[4m[1m[34mcreatespec incw_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_incw_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/incw_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mincw_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/incw_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/incw_r16.s[0m
Circuit: xorq %rax, %rax
%cf -> 1
%pf -> 1
%af -> 1
%sf -> 1
%zf -> 1
%of -> 1
%rax -> 1

Circuit: callq .set_cf
%cf -> 1

Circuit: adcw %ax, %bx
%zf -> 1
%of -> 1
%af -> 1
%sf -> 1
%ax -> 1
%bx -> 1
%cf -> 1
%pf -> 1

Circuit: callq .set_szp_for_bx
%zf -> 1
%sf -> 1
%bx -> 1
%pf -> 1

Total Circuit
PF -> 1
ZF -> 1
AF -> 1
RAX -> 1
RBX -> 1
SF -> 1
CF -> 1
OF -> 1

Target
OF -> 1
SF -> 1
RBX -> 1
ZF -> 1
AF -> 1
PF -> 1

[4m[1m[34mkprove incw_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_incw_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_incw_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput incw_r16[0m
[4m[1m[34msanitizeSpecOutput incw_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mincw_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 48, 64)), mi(17, 1)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 48, 64)), mi(17, 1)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(extractMInt(mi(64, _616), 48, 64), mi(16, 1)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(extractMInt(MI616, 48, 64), mi(16, 1)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(16, 0), extractMInt(mi(64, _616), 48, 64)), addMInt(extractMInt(mi(64, _616), 48, 64), mi(16, 1))), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(16, 0), extractMInt(MI616, 48, 64)), addMInt(extractMInt(MI616, 48, 64), mi(16, 1))), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(extractMInt(mi(64, _616), 48, 64), mi(16, 1)), 8, 16), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(extractMInt(MI616, 48, 64), mi(16, 1)), 8, 16), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _616)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI616) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 0), extractMInt(mi(64, _616), 48, 49))  andBool   notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt(extractMInt(mi(64, _616), 48, 64), mi(16, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 0), extractMInt(MI616, 48, 49))  andBool   notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt(extractMInt(MI616, 48, 64), mi(16, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (mi(64, 0) )
echo Debug:  Result: "RAX" |-> (mi(64, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _616), 0, 48), addMInt(extractMInt(mi(64, _616), 48, 64), mi(16, 1))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI616, 0, 48), addMInt(extractMInt(MI616, 48, 64), mi(16, 1))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(extractMInt(mi(64, _616), 48, 64), mi(16, 1)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(extractMInt(MI616, 48, 64), mi(16, 1)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn incw_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-incw_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/incw_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movapd_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movapd_xmm_xmm.s[0m
[4m[1m[34mcreatespec movapd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movapd_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movapd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovapd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movapd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movapd_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm2_r12_r13
%r12 -> 1
%xmm2 -> 1
%r13 -> 1

Circuit: callq .move_064_128_r12_r13_xmm1
%xmm1 -> 1
%r12 -> 1
%r13 -> 1

Total Circuit
YMM1 -> 1
R13 -> 1
YMM2 -> 1
R12 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove movapd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movapd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movapd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movapd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput movapd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovapd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _606) )
echo Debug:  Result: "YMM2" |-> (MI606 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _605), 0, 128), extractMInt(mi(256, _606), 128, 256)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI605, 0, 128), extractMInt(MI606, 128, 256)) )
echo Debug:  PreResult: "R12" |-> (extractMInt(mi(256, _606), 192, 256) )
echo Debug:  Result: "R12" |-> (extractMInt(MI606, 192, 256) )
echo Debug:  PreResult: "R13" |-> (extractMInt(mi(256, _606), 128, 192) )
echo Debug:  Result: "R13" |-> (extractMInt(MI606, 128, 192) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _605)   )
echo Debug:  Result: "SPAD1" |-> (MI605   )
[4m[1m[34mwriteKDefn movapd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movapd_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movapd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movaps_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movaps_xmm_xmm.s[0m
[4m[1m[34mcreatespec movaps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movaps_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movaps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovaps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movaps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movaps_xmm_xmm.s[0m
Circuit: callq .move_128_032_xmm2_xmm4_xmm5_xmm6_xmm7
%xmm5 -> 1
%xmm2 -> 1
%xmm4 -> 1
%xmm7 -> 1
%xmm6 -> 1

Circuit: callq .move_032_128_xmm4_xmm5_xmm6_xmm7_xmm1
%xmm1 -> 1
%xmm7 -> 1
%xmm6 -> 1
%xmm4 -> 1
%xmm5 -> 1

Total Circuit
YMM2 -> 1
YMM6 -> 1
YMM1 -> 1
YMM7 -> 1
YMM4 -> 1
YMM5 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove movaps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movaps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movaps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movaps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput movaps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovaps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _608) )
echo Debug:  Result: "YMM2" |-> (MI608 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _607), 0, 128), extractMInt(mi(256, _608), 128, 256)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI607, 0, 128), extractMInt(MI608, 128, 256)) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _608), 224, 256)) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(224, 0), extractMInt(MI608, 224, 256)) )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _608), 160, 192)) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(224, 0), extractMInt(MI608, 160, 192)) )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _608), 192, 224)) )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(mi(224, 0), extractMInt(MI608, 192, 224)) )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _608), 128, 160)) )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(224, 0), extractMInt(MI608, 128, 160)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _607) )
echo Debug:  Result: "SPAD1" |-> (MI607 )
[4m[1m[34mwriteKDefn movaps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movaps_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movaps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movd_r32_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movd_r32_xmm.s[0m
[4m[1m[34mcreatespec movd_r32_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movd_r32_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movd_r32_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovd_r32_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movd_r32_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movd_r32_xmm.s[0m
Circuit: callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11
%xmm11 -> 1
%xmm8 -> 1
%xmm9 -> 1
%xmm10 -> 1
%xmm1 -> 1

Circuit: callq .move_128_256_xmm8_xmm9_ymm1
%xmm8 -> 1
%xmm9 -> 1
%ymm1 -> 1

Circuit: callq .move_128_064_xmm1_r10_r11
%xmm1 -> 1
%r11 -> 1
%r10 -> 1

Circuit: callq .move_032_064_r10d_r11d_rbx
%r10d -> 1
%rbx -> 1
%r11d -> 1

Total Circuit
YMM1 -> 1
RBX -> 1
R10 -> 1
R11 -> 1
YMM9 -> 1
YMM8 -> 1
YMM11 -> 1
YMM10 -> 1

Target
 -> 1
RBX -> 1
YMM1 -> 1

[4m[1m[34mkprove movd_r32_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movd_r32_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movd_r32_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movd_r32_xmm[0m
[4m[1m[34msanitizeSpecOutput movd_r32_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovd_r32_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R10" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _609), 224, 256)) )
echo Debug:  Result: "R10" |-> (concatenateMInt(mi(32, 0), extractMInt(MI609, 224, 256)) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(mi(96, 0), extractMInt(mi(256, _609), 192, 224)), concatenateMInt(mi(96, 0), extractMInt(mi(256, _609), 224, 256))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(mi(96, 0), extractMInt(MI609, 192, 224)), concatenateMInt(mi(96, 0), extractMInt(MI609, 224, 256))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _609), 160, 192)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(MI609, 160, 192)) )
echo Debug:  PreResult: "R11" |-> (mi(64, 0) )
echo Debug:  Result: "R11" |-> (mi(64, 0) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _609), 128, 160)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(MI609, 128, 160)) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _609), 224, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(MI609, 224, 256)) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _609), 224, 256)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI609, 224, 256)) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _609), 192, 224))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(MI609, 192, 224))   )
[4m[1m[34mwriteKDefn movd_r32_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movd_r32_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movd_r32_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movddup_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movddup_xmm_xmm.s[0m
[4m[1m[34mcreatespec movddup_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movddup_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movddup_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovddup_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movddup_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movddup_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm2_r12_r13
%r13 -> 1
%xmm2 -> 1
%r12 -> 1

Circuit: movq %r12, %r13
%r13 -> 1
%r12 -> 1

Circuit: callq .move_064_128_r12_r13_xmm1
%xmm1 -> 1
%r12 -> 1
%r13 -> 1

Total Circuit
YMM1 -> 1
R13 -> 1
YMM2 -> 1
R12 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove movddup_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movddup_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movddup_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movddup_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput movddup_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovddup_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _606) )
echo Debug:  Result: "YMM2" |-> (MI606 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _605), 0, 128), concatenateMInt(extractMInt(mi(256, _606), 192, 256), extractMInt(mi(256, _606), 192, 256))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI605, 0, 128), concatenateMInt(extractMInt(MI606, 192, 256), extractMInt(MI606, 192, 256))) )
echo Debug:  PreResult: "R12" |-> (extractMInt(mi(256, _606), 192, 256) )
echo Debug:  Result: "R12" |-> (extractMInt(MI606, 192, 256) )
echo Debug:  PreResult: "R13" |-> (extractMInt(mi(256, _606), 192, 256) )
echo Debug:  Result: "R13" |-> (extractMInt(MI606, 192, 256) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _605)   )
echo Debug:  Result: "SPAD1" |-> (MI605   )
[4m[1m[34mwriteKDefn movddup_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movddup_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movddup_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movdqa_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movdqa_xmm_xmm.s[0m
[4m[1m[34mcreatespec movdqa_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movdqa_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movdqa_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovdqa_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movdqa_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movdqa_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm2_r8_r9
%xmm2 -> 1
%r9 -> 1
%r8 -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%r9 -> 1
%r8 -> 1
%xmm1 -> 1

Total Circuit
R9 -> 1
YMM1 -> 1
YMM2 -> 1
R8 -> 1

Target
YMM2 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove movdqa_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movdqa_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movdqa_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movdqa_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput movdqa_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovdqa_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _606) )
echo Debug:  Result: "YMM2" |-> (MI606 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _605), 0, 128), extractMInt(mi(256, _606), 128, 256)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI605, 0, 128), extractMInt(MI606, 128, 256)) )
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _606), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI606, 192, 256) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _606), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI606, 128, 192) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _605)   )
echo Debug:  Result: "SPAD1" |-> (MI605   )
[4m[1m[34mwriteKDefn movdqa_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movdqa_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movdqa_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movdqu_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movdqu_xmm_xmm.s[0m
[4m[1m[34mcreatespec movdqu_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movdqu_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movdqu_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovdqu_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movdqu_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movdqu_xmm_xmm.s[0m
Circuit: callq .move_128_64_xmm2_xmm10_xmm11
%xmm2 -> 1
%xmm11 -> 1
%xmm10 -> 1

Circuit: callq .move_64_128_xmm10_xmm11_xmm1
%xmm11 -> 1
%xmm10 -> 1
%xmm1 -> 1

Total Circuit
YMM1 -> 1
YMM2 -> 1
YMM11 -> 1
YMM10 -> 1

Target
YMM2 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove movdqu_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movdqu_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movdqu_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movdqu_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput movdqu_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovdqu_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _606) )
echo Debug:  Result: "YMM2" |-> (MI606 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _605), 0, 128), extractMInt(mi(256, _606), 128, 256)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI605, 0, 128), extractMInt(MI606, 128, 256)) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _606), 192, 256)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(192, 0), extractMInt(MI606, 192, 256)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _606), 128, 192)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(192, 0), extractMInt(MI606, 128, 192)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _605)   )
echo Debug:  Result: "SPAD1" |-> (MI605   )
[4m[1m[34mwriteKDefn movdqu_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movdqu_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movdqu_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movsbl_r32_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movsbl_r32_r8.s[0m
[4m[1m[34mcreatespec movsbl_r32_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movsbl_r32_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movsbl_r32_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovsbl_r32_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movsbl_r32_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movsbl_r32_r8.s[0m
Circuit: callq .set_of
%of -> 1

Circuit: callq .read_of_into_rbx
%of -> 1
%rbx -> 1

Circuit: callq .move_064_032_rbx_r10d_r11d
%r11d -> 1
%r10d -> 1
%rbx -> 1

Circuit: movsbq %cl, %r10
%r10 -> 1
%cl -> 1

Circuit: callq .move_032_064_r10d_r11d_rbx
%r11d -> 1
%rbx -> 1
%r10d -> 1

Total Circuit
RBX -> 1
R11 -> 1
R10 -> 1
OF -> 1
RCX -> 1

Target
RBX -> 1
RCX -> 1

[4m[1m[34mkprove movsbl_r32_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movsbl_r32_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movsbl_r32_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movsbl_r32_r8[0m
[4m[1m[34msanitizeSpecOutput movsbl_r32_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovsbl_r32_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R10" |-> (mi(64, svalueMInt(extractMInt(mi(64, _606), 56, 64))) )
echo Debug:  Result: "R10" |-> (mi(64, svalueMInt(extractMInt(MI606, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _606), 56, 64))), 32, 64)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI606, 56, 64))), 32, 64)) )
echo Debug:  PreResult: "R11" |-> (mi(64, 0) )
echo Debug:  Result: "R11" |-> (mi(64, 0) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _606) )
echo Debug:  Result: "RCX" |-> (MI606 )
echo Debug:  PreResult: "OF" |-> (mi(1, 1)   )
echo Debug:  Result: "OF" |-> (mi(1, 1)   )
[4m[1m[34mwriteKDefn movsbl_r32_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movsbl_r32_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movsbl_r32_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movups_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movups_xmm_xmm.s[0m
[4m[1m[34mcreatespec movups_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movups_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movups_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovups_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movups_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movups_xmm_xmm.s[0m
Circuit: callq .move_128_032_xmm2_xmm4_xmm5_xmm6_xmm7
%xmm5 -> 1
%xmm2 -> 1
%xmm4 -> 1
%xmm7 -> 1
%xmm6 -> 1

Circuit: callq .move_032_128_xmm4_xmm5_xmm6_xmm7_xmm1
%xmm5 -> 1
%xmm1 -> 1
%xmm7 -> 1
%xmm6 -> 1
%xmm4 -> 1

Total Circuit
YMM6 -> 1
YMM2 -> 1
YMM7 -> 1
YMM1 -> 1
YMM5 -> 1
YMM4 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove movups_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movups_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movups_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movups_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput movups_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovups_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _608) )
echo Debug:  Result: "YMM2" |-> (MI608 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _607), 0, 128), extractMInt(mi(256, _608), 128, 256)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI607, 0, 128), extractMInt(MI608, 128, 256)) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _608), 224, 256)) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(224, 0), extractMInt(MI608, 224, 256)) )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _608), 160, 192)) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(224, 0), extractMInt(MI608, 160, 192)) )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _608), 192, 224)) )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(mi(224, 0), extractMInt(MI608, 192, 224)) )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _608), 128, 160)) )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(224, 0), extractMInt(MI608, 128, 160)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _607) )
echo Debug:  Result: "SPAD1" |-> (MI607 )
[4m[1m[34mwriteKDefn movups_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movups_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movups_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movw_r16_r16.s[0m
[4m[1m[34mcreatespec movw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movw_r16_r16.s[0m
Circuit: movswq %cx, %rbx
%rbx -> 1
%cx -> 1

Total Circuit
RBX -> 1
RCX -> 1

Target
RCX -> 1
RBX -> 1

[4m[1m[34mkprove movw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput movw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _603), 0, 48), extractMInt(mi(64, _604), 48, 64)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI603, 0, 48), extractMInt(MI604, 48, 64)) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _604) )
echo Debug:  Result: "RCX" |-> (MI604 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _603))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI603)   )
[4m[1m[34mwriteKDefn movw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movzbl_r32_rh[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movzbl_r32_rh.s[0m
[4m[1m[34mcreatespec movzbl_r32_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movzbl_r32_rh_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movzbl_r32_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovzbl_r32_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movzbl_r32_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movzbl_r32_rh.s[0m
Circuit: movq $0x40, %rbx
\$0x40 -> 1
%rbx -> 1

Circuit: movb %ah, %bl
%bl -> 1
%ah -> 1

Total Circuit
RBX -> 1
 -> 1
RAX -> 1

Target
RBX -> 1
RAX -> 1

[4m[1m[34mkprove movzbl_r32_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movzbl_r32_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movzbl_r32_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movzbl_r32_rh[0m
[4m[1m[34msanitizeSpecOutput movzbl_r32_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovzbl_r32_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RAX" |-> (mi(64, _602) )
echo Debug:  Result: "RAX" |-> (MI602 )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _602), 48, 56))   )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(56, 0), extractMInt(MI602, 48, 56))   )
[4m[1m[34mwriteKDefn movzbl_r32_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movzbl_r32_rh.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movzbl_r32_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movzbw_r16_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movzbw_r16_r8.s[0m
[4m[1m[34mcreatespec movzbw_r16_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movzbw_r16_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movzbw_r16_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovzbw_r16_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movzbw_r16_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movzbw_r16_r8.s[0m
Circuit: movq $0x5, %rbx
%rbx -> 1
\$0x5 -> 1

Circuit: callq .move_064_032_rbx_r12d_r13d
%r12d -> 1
%rbx -> 1
%r13d -> 1

Circuit: movsbq %cl, %r12
%r12 -> 1
%cl -> 1

Circuit: callq .move_008_016_r12b_r13b_bx
%r12b -> 1
%bx -> 1
%r13b -> 1

Total Circuit
 -> 1
R13 -> 1
RBX -> 1
R12 -> 1
RCX -> 1

Target
RCX -> 1
RBX -> 1

[4m[1m[34mkprove movzbw_r16_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movzbw_r16_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movzbw_r16_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movzbw_r16_r8[0m
[4m[1m[34msanitizeSpecOutput movzbw_r16_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovzbw_r16_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _605), 0, 48), concatenateMInt(mi(8, 0), extractMInt(mi(64, _606), 56, 64))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI605, 0, 48), concatenateMInt(mi(8, 0), extractMInt(MI606, 56, 64))) )
echo Debug:  PreResult: "R12" |-> (mi(64, svalueMInt(extractMInt(mi(64, _606), 56, 64))) )
echo Debug:  Result: "R12" |-> (mi(64, svalueMInt(extractMInt(MI606, 56, 64))) )
echo Debug:  PreResult: "R13" |-> (mi(64, 0) )
echo Debug:  Result: "R13" |-> (mi(64, 0) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _606) )
echo Debug:  Result: "RCX" |-> (MI606 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _605))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI605)   )
[4m[1m[34mwriteKDefn movzbw_r16_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movzbw_r16_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movzbw_r16_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movzbw_r16_rh[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movzbw_r16_rh.s[0m
[4m[1m[34mcreatespec movzbw_r16_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movzbw_r16_rh_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movzbw_r16_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovzbw_r16_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movzbw_r16_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movzbw_r16_rh.s[0m
Circuit: xorq %rcx, %rcx
%af -> 1
%sf -> 1
%zf -> 1
%of -> 1
%cf -> 1
%pf -> 1
%rcx -> 1

Circuit: callq .read_sf_into_rbx
%rbx -> 1
%sf -> 1

Circuit: movb %ah, %bl
%bl -> 1
%ah -> 1

Total Circuit
RBX -> 1
CF -> 1
SF -> 1
OF -> 1
PF -> 1
RCX -> 1
ZF -> 1
RAX -> 1
AF -> 1

Target
RAX -> 1
RBX -> 1

[4m[1m[34mkprove movzbw_r16_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movzbw_r16_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movzbw_r16_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movzbw_r16_rh[0m
[4m[1m[34msanitizeSpecOutput movzbw_r16_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovzbw_r16_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "RCX" |-> (mi(64, 0) )
echo Debug:  Result: "RCX" |-> (mi(64, 0) )
echo Debug:  PreResult: "PF" |-> (mi(1, 1) )
echo Debug:  Result: "PF" |-> (mi(1, 1) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _611)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI611) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (mi(64, _610) )
echo Debug:  Result: "RAX" |-> (MI610 )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _611), 0, 48), concatenateMInt(mi(8, 0), extractMInt(mi(64, _610), 48, 56))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI611, 0, 48), concatenateMInt(mi(8, 0), extractMInt(MI610, 48, 56))) )
echo Debug:  PreResult: "ZF" |-> (mi(1, 1)   )
echo Debug:  Result: "ZF" |-> (mi(1, 1)   )
[4m[1m[34mwriteKDefn movzbw_r16_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movzbw_r16_rh.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movzbw_r16_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movzwl_r32_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movzwl_r32_r16.s[0m
[4m[1m[34mcreatespec movzwl_r32_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movzwl_r32_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movzwl_r32_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovzwl_r32_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movzwl_r32_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movzwl_r32_r16.s[0m
Circuit: movq $0x20, %rbx
%rbx -> 1
\$0x20 -> 1

Circuit: callq .move_016_008_cx_r12b_r13b
%cx -> 1
%r12b -> 1
%r13b -> 1

Circuit: callq .move_008_016_r12b_r13b_bx
%r12b -> 1
%bx -> 1
%r13b -> 1

Total Circuit
RCX -> 1
R12 -> 1
RBX -> 1
R13 -> 1
 -> 1

Target
RCX -> 1
RBX -> 1

[4m[1m[34mkprove movzwl_r32_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movzwl_r32_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movzwl_r32_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movzwl_r32_r16[0m
[4m[1m[34msanitizeSpecOutput movzwl_r32_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovzwl_r32_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _605), 48, 64)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(48, 0), extractMInt(MI605, 48, 64)) )
echo Debug:  PreResult: "R12" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _605), 56, 64)) )
echo Debug:  Result: "R12" |-> (concatenateMInt(mi(56, 0), extractMInt(MI605, 56, 64)) )
echo Debug:  PreResult: "R13" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _605), 48, 56)) )
echo Debug:  Result: "R13" |-> (concatenateMInt(mi(56, 0), extractMInt(MI605, 48, 56)) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _605)   )
echo Debug:  Result: "RCX" |-> (MI605   )
[4m[1m[34mwriteKDefn movzwl_r32_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movzwl_r32_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/movzwl_r32_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: nopl_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/nopl_r32.s[0m
[4m[1m[34mcreatespec nopl_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_nopl_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/nopl_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mnopl_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/nopl_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/nopl_r32.s[0m
Total Circuit

Target
RBX -> 1
 -> 1

[4m[1m[34mkprove nopl_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_nopl_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_nopl_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput nopl_r32[0m
[4m[1m[34msanitizeSpecOutput nopl_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mnopl_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
[4m[1m[34mwriteKDefn nopl_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-nopl_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/nopl_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: nopw_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/nopw_r16.s[0m
[4m[1m[34mcreatespec nopw_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_nopw_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/nopw_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mnopw_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/nopw_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/nopw_r16.s[0m
Total Circuit

Target
 -> 1
RBX -> 1

[4m[1m[34mkprove nopw_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_nopw_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_nopw_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput nopw_r16[0m
[4m[1m[34msanitizeSpecOutput nopw_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mnopw_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
[4m[1m[34mwriteKDefn nopw_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-nopw_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/nopw_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: rcll_r32_one[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rcll_r32_one.s[0m
[4m[1m[34mcreatespec rcll_r32_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rcll_r32_one_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rcll_r32_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrcll_r32_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rcll_r32_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rcll_r32_one.s[0m
Circuit: movslq %ebx, %rbx
%rbx -> 1
%ebx -> 1

Circuit: adcl %ebx, %ebx
%ebx -> 1
%cf -> 1
%pf -> 1
%rbx -> 1
%zf -> 1
%of -> 1
%af -> 1
%sf -> 1

Total Circuit
OF -> 1
CF -> 1
RBX -> 1
SF -> 1
ZF -> 1
AF -> 1
PF -> 1

Target
CF -> 1
RBX -> 1
 -> 1
OF -> 1

[4m[1m[34mkprove rcll_r32_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rcll_r32_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rcll_r32_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput rcll_r32_one[0m
[4m[1m[34msanitizeSpecOutput rcll_r32_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrcll_r32_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _610), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _610), 32, 64))), concatenateMInt(mi(32, 0), mi(1, _608))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI610, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI610, 32, 64))), concatenateMInt(mi(32, 0), MI608)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(mi(64, _610), 32, 64), extractMInt(mi(64, _610), 32, 64)), concatenateMInt(mi(31, 0), mi(1, _608))), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(MI610, 32, 64), extractMInt(MI610, 32, 64)), concatenateMInt(mi(31, 0), MI608)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(32, 0), addMInt(addMInt(extractMInt(mi(64, _610), 32, 64), extractMInt(mi(64, _610), 32, 64)), concatenateMInt(mi(31, 0), mi(1, _608)))), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(32, 0), addMInt(addMInt(extractMInt(MI610, 32, 64), extractMInt(MI610, 32, 64)), concatenateMInt(mi(31, 0), MI608))), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(extractMInt(mi(64, _610), 32, 64), extractMInt(mi(64, _610), 32, 64)), concatenateMInt(mi(31, 0), mi(1, _608))), 24, 32), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(extractMInt(MI610, 32, 64), extractMInt(MI610, 32, 64)), concatenateMInt(mi(31, 0), MI608)), 24, 32), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _610), 32, 33), extractMInt(mi(64, _610), 32, 33))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _610), 32, 33), extractMInt(addMInt(addMInt(extractMInt(mi(64, _610), 32, 64), extractMInt(mi(64, _610), 32, 64)), concatenateMInt(mi(31, 0), mi(1, _608))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI610, 32, 33), extractMInt(MI610, 32, 33))  andBool   notBool  ( eqMInt(extractMInt(MI610, 32, 33), extractMInt(addMInt(addMInt(extractMInt(MI610, 32, 64), extractMInt(MI610, 32, 64)), concatenateMInt(mi(31, 0), MI608)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), addMInt(addMInt(extractMInt(mi(64, _610), 32, 64), extractMInt(mi(64, _610), 32, 64)), concatenateMInt(mi(31, 0), mi(1, _608)))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), addMInt(addMInt(extractMInt(MI610, 32, 64), extractMInt(MI610, 32, 64)), concatenateMInt(mi(31, 0), MI608))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(mi(64, _610), 32, 64), extractMInt(mi(64, _610), 32, 64)), concatenateMInt(mi(31, 0), mi(1, _608))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(MI610, 32, 64), extractMInt(MI610, 32, 64)), concatenateMInt(mi(31, 0), MI608)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn rcll_r32_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-rcll_r32_one.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rcll_r32_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: rclq_r64_one[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rclq_r64_one.s[0m
[4m[1m[34mcreatespec rclq_r64_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rclq_r64_one_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rclq_r64_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrclq_r64_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rclq_r64_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rclq_r64_one.s[0m
Circuit: adcq %rbx, %rbx
%sf -> 1
%af -> 1
%of -> 1
%zf -> 1
%rbx -> 1
%pf -> 1
%cf -> 1

Total Circuit
RBX -> 1
CF -> 1
SF -> 1
OF -> 1
PF -> 1
AF -> 1
ZF -> 1

Target
OF -> 1
 -> 1
RBX -> 1
CF -> 1

[4m[1m[34mkprove rclq_r64_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rclq_r64_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rclq_r64_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput rclq_r64_one[0m
[4m[1m[34msanitizeSpecOutput rclq_r64_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrclq_r64_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _610)), concatenateMInt(mi(1, 0), mi(64, _610))), concatenateMInt(mi(64, 0), mi(1, _608))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), MI610), concatenateMInt(mi(1, 0), MI610)), concatenateMInt(mi(64, 0), MI608)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(mi(64, _610), mi(64, _610)), concatenateMInt(mi(63, 0), mi(1, _608))), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(MI610, MI610), concatenateMInt(mi(63, 0), MI608)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(64, 0), addMInt(addMInt(mi(64, _610), mi(64, _610)), concatenateMInt(mi(63, 0), mi(1, _608)))), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(64, 0), addMInt(addMInt(MI610, MI610), concatenateMInt(mi(63, 0), MI608))), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(mi(64, _610), mi(64, _610)), concatenateMInt(mi(63, 0), mi(1, _608))), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(MI610, MI610), concatenateMInt(mi(63, 0), MI608)), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _610), 0, 1), extractMInt(mi(64, _610), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _610), 0, 1), extractMInt(addMInt(addMInt(mi(64, _610), mi(64, _610)), concatenateMInt(mi(63, 0), mi(1, _608))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI610, 0, 1), extractMInt(MI610, 0, 1))  andBool   notBool  ( eqMInt(extractMInt(MI610, 0, 1), extractMInt(addMInt(addMInt(MI610, MI610), concatenateMInt(mi(63, 0), MI608)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (addMInt(addMInt(mi(64, _610), mi(64, _610)), concatenateMInt(mi(63, 0), mi(1, _608))) )
echo Debug:  Result: "RBX" |-> (addMInt(addMInt(MI610, MI610), concatenateMInt(mi(63, 0), MI608)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(64, _610), mi(64, _610)), concatenateMInt(mi(63, 0), mi(1, _608))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(MI610, MI610), concatenateMInt(mi(63, 0), MI608)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn rclq_r64_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-rclq_r64_one.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rclq_r64_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: rclw_r16_one[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rclw_r16_one.s[0m
[4m[1m[34mcreatespec rclw_r16_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rclw_r16_one_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rclw_r16_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrclw_r16_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rclw_r16_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rclw_r16_one.s[0m
Circuit: adcw %bx, %bx
%pf -> 1
%cf -> 1
%of -> 1
%zf -> 1
%bx -> 1
%sf -> 1
%af -> 1

Total Circuit
PF -> 1
ZF -> 1
AF -> 1
SF -> 1
RBX -> 1
CF -> 1
OF -> 1

Target
CF -> 1
RBX -> 1
OF -> 1
 -> 1

[4m[1m[34mkprove rclw_r16_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rclw_r16_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rclw_r16_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput rclw_r16_one[0m
[4m[1m[34msanitizeSpecOutput rclw_r16_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrclw_r16_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _611), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _611), 48, 64))), concatenateMInt(mi(16, 0), mi(1, _609))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI611, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI611, 48, 64))), concatenateMInt(mi(16, 0), MI609)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(mi(64, _611), 48, 64), extractMInt(mi(64, _611), 48, 64)), concatenateMInt(mi(15, 0), mi(1, _609))), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(MI611, 48, 64), extractMInt(MI611, 48, 64)), concatenateMInt(mi(15, 0), MI609)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(16, 0), addMInt(addMInt(extractMInt(mi(64, _611), 48, 64), extractMInt(mi(64, _611), 48, 64)), concatenateMInt(mi(15, 0), mi(1, _609)))), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(16, 0), addMInt(addMInt(extractMInt(MI611, 48, 64), extractMInt(MI611, 48, 64)), concatenateMInt(mi(15, 0), MI609))), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(extractMInt(mi(64, _611), 48, 64), extractMInt(mi(64, _611), 48, 64)), concatenateMInt(mi(15, 0), mi(1, _609))), 8, 16), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(extractMInt(MI611, 48, 64), extractMInt(MI611, 48, 64)), concatenateMInt(mi(15, 0), MI609)), 8, 16), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _611)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI611) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _611), 48, 49), extractMInt(mi(64, _611), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _611), 48, 49), extractMInt(addMInt(addMInt(extractMInt(mi(64, _611), 48, 64), extractMInt(mi(64, _611), 48, 64)), concatenateMInt(mi(15, 0), mi(1, _609))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI611, 48, 49), extractMInt(MI611, 48, 49))  andBool   notBool  ( eqMInt(extractMInt(MI611, 48, 49), extractMInt(addMInt(addMInt(extractMInt(MI611, 48, 64), extractMInt(MI611, 48, 64)), concatenateMInt(mi(15, 0), MI609)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _611), 0, 48), addMInt(addMInt(extractMInt(mi(64, _611), 48, 64), extractMInt(mi(64, _611), 48, 64)), concatenateMInt(mi(15, 0), mi(1, _609)))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI611, 0, 48), addMInt(addMInt(extractMInt(MI611, 48, 64), extractMInt(MI611, 48, 64)), concatenateMInt(mi(15, 0), MI609))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(mi(64, _611), 48, 64), extractMInt(mi(64, _611), 48, 64)), concatenateMInt(mi(15, 0), mi(1, _609))), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(MI611, 48, 64), extractMInt(MI611, 48, 64)), concatenateMInt(mi(15, 0), MI609)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn rclw_r16_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-rclw_r16_one.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rclw_r16_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: sarxq_r64_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarxq_r64_r64_r64.s[0m
[4m[1m[34mcreatespec sarxq_r64_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sarxq_r64_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarxq_r64_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msarxq_r64_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarxq_r64_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarxq_r64_r64_r64.s[0m
Circuit: callq .move_064_032_rdx_r10d_r11d
%r10d -> 1
%rdx -> 1
%r11d -> 1

Circuit: callq .move_064_032_rcx_r8d_r9d
%r8d -> 1
%r9d -> 1
%rcx -> 1

Circuit: callq .move_008_016_r10b_r11b_cx
%r10b -> 1
%r11b -> 1
%cx -> 1

Circuit: callq .move_032_064_r8d_r9d_rbx
%rbx -> 1
%r8d -> 1
%r9d -> 1

Circuit: sarq %cl, %rbx
%pf -> 1
%cf -> 1
%rbx -> 1
%cl -> 1
%sf -> 1
%af -> 1
%of -> 1
%zf -> 1

Total Circuit
AF -> 1
ZF -> 1
R8 -> 1
PF -> 1
RDX -> 1
RCX -> 1
OF -> 1
R11 -> 1
R10 -> 1
SF -> 1
RBX -> 1
CF -> 1
R9 -> 1

Target
 -> 1
RBX -> 1
RCX -> 1
RDX -> 1

[4m[1m[34mkprove sarxq_r64_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sarxq_r64_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sarxq_r64_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput sarxq_r64_r64_r64[0m
[4m[1m[34msanitizeSpecOutput sarxq_r64_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msarxq_r64_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( (#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 1)) ) #then ( extractMInt(mi(64, _615), 63, 64) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, _615))),  ( uvalueMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)))  -Int  1 ) ), 63, 64) ) #else ( extractMInt(mi(64, _615), 0, 1) ) #fi)  ) #fi)  ) #fi)  )
echo Debug:  Result: "CF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( (#ifMInt (eqMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 1)) ) #then ( extractMInt(MI615, 63, 64) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( extractMInt(ashrMInt(mi(64, svalueMInt(MI615)),  ( uvalueMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)))  -Int  1 ) ), 63, 64) ) #else ( extractMInt(MI615, 0, 1) ) #fi)  ) #fi)  ) #fi)  )
echo Debug:  PreResult: "AF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( undef ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( undef ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(extractMInt(mi(64, _615), 0, 48), concatenateMInt(extractMInt(mi(64, _616), 24, 32), extractMInt(mi(64, _616), 56, 64))) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(extractMInt(MI615, 0, 48), concatenateMInt(extractMInt(MI616, 24, 32), extractMInt(MI616, 56, 64))) )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 0, 32)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(32, 0), extractMInt(MI615, 0, 32)) )
echo Debug:  PreResult: "RDX" |-> (mi(64, _616) )
echo Debug:  Result: "RDX" |-> (MI616 )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( ashrMInt(mi(64, svalueMInt(mi(64, _615))), uvalueMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)))) ) #else ( (#ifMInt (eqMInt(extractMInt(mi(64, _615), 0, 1), mi(1, 0)) ) #then ( mi(64, 0) ) #else ( mi(64, -1) ) #fi)  ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (ultMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( ashrMInt(mi(64, svalueMInt(MI615)), uvalueMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)))) ) #else ( (#ifMInt (eqMInt(extractMInt(MI615, 0, 1), mi(1, 0)) ) #then ( mi(64, 0) ) #else ( mi(64, -1) ) #fi)  ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( (#ifMInt (eqMInt(ashrMInt(mi(64, svalueMInt(mi(64, _615))), uvalueMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( (#ifMInt (eqMInt(extractMInt(mi(64, _615), 0, 1), mi(1, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  ) #fi)  ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( (#ifMInt (eqMInt(ashrMInt(mi(64, svalueMInt(MI615)), uvalueMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( (#ifMInt (eqMInt(extractMInt(MI615, 0, 1), mi(1, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  ) #fi)  ) #fi)  )
echo Debug:  PreResult: "R10" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _616), 32, 64)) )
echo Debug:  Result: "R10" |-> (concatenateMInt(mi(32, 0), extractMInt(MI616, 32, 64)) )
echo Debug:  PreResult: "R11" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _616), 0, 32)) )
echo Debug:  Result: "R11" |-> (concatenateMInt(mi(32, 0), extractMInt(MI616, 0, 32)) )
echo Debug:  PreResult: "SF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, _615))), uvalueMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)))), 0, 1) ) #else ( extractMInt(mi(64, _615), 0, 1) ) #fi)  ) #fi)  )
echo Debug:  Result: "SF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( extractMInt(ashrMInt(mi(64, svalueMInt(MI615)), uvalueMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)))), 0, 1) ) #else ( extractMInt(MI615, 0, 1) ) #fi)  ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( (#ifMInt ( (  ( countOnes(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, _615))), uvalueMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)))), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( mi(1, 1) ) #fi)  ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( (#ifMInt ( (  ( countOnes(extractMInt(ashrMInt(mi(64, svalueMInt(MI615)), uvalueMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)))), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( mi(1, 1) ) #fi)  ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( (#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 1)) ) #then ( mi(1, 0) ) #else ( undef ) #fi)  ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( (#ifMInt (eqMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 1)) ) #then ( mi(1, 0) ) #else ( undef ) #fi)  ) #fi)  )
[4m[1m[34mwriteKDefn sarxq_r64_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-sarxq_r64_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarxq_r64_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setae_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setae_r8.s[0m
[4m[1m[34mcreatespec setae_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setae_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setae_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetae_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setae_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setae_r8.s[0m
Circuit: callq .read_cf_into_rbx
%rbx -> 1
%cf -> 1

Circuit: callq .set_szp_for_bl
%sf -> 1
%zf -> 1
%pf -> 1
%bl -> 1

Circuit: callq .read_zf_into_rbx
%rbx -> 1
%zf -> 1

Total Circuit
SF -> 1
CF -> 1
RBX -> 1
ZF -> 1
PF -> 1

Target
CF -> 1
RBX -> 1

[4m[1m[34mkprove setae_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setae_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setae_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setae_r8[0m
[4m[1m[34msanitizeSpecOutput setae_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetae_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, _606) )
echo Debug:  Result: "CF" |-> (MI606 )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(mi(1, _606))  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(MI606)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _607)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI607) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(7, 0), mi(1, _606)), mi(8, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _607), 0, 56), mi(8, 1)) ) #else ( concatenateMInt(extractMInt(mi(64, _607), 0, 56), mi(8, 0)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(7, 0), MI606), mi(8, 0)) ) #then ( concatenateMInt(extractMInt(MI607, 0, 56), mi(8, 1)) ) #else ( concatenateMInt(extractMInt(MI607, 0, 56), mi(8, 0)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(7, 0), mi(1, _606)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(7, 0), MI606), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn setae_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setae_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setae_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setb_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setb_r8.s[0m
[4m[1m[34mcreatespec setb_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setb_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setb_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetb_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setb_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setb_r8.s[0m
Circuit: callq .read_cf_into_rcx
%cf -> 1
%rcx -> 1

Circuit: movsbq %cl, %rbx
%cl -> 1
%rbx -> 1

Circuit: orq %rcx, %rbx
%rcx -> 1
%cf -> 1
%pf -> 1
%rbx -> 1
%zf -> 1
%of -> 1
%af -> 1
%sf -> 1

Total Circuit
RBX -> 1
CF -> 1
SF -> 1
OF -> 1
RCX -> 1
PF -> 1
ZF -> 1
AF -> 1

Target
CF -> 1
RBX -> 1

[4m[1m[34mkprove setb_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setb_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setb_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setb_r8[0m
[4m[1m[34msanitizeSpecOutput setb_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetb_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(63, 0), mi(1, _609)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(63, 0), MI609) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(mi(1, _609))  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(MI609)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _610)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI610) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _610), 0, 56), concatenateMInt(mi(7, 0), mi(1, _609))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI610, 0, 56), concatenateMInt(mi(7, 0), MI609)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(63, 0), mi(1, _609)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(63, 0), MI609), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn setb_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setb_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setb_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setbe_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setbe_r8.s[0m
[4m[1m[34mcreatespec setbe_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setbe_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setbe_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetbe_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setbe_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setbe_r8.s[0m
Circuit: callq .read_zf_into_rcx
%rcx -> 1
%zf -> 1

Circuit: callq .read_cf_into_rbx
%cf -> 1
%rbx -> 1

Circuit: cmoveq %rcx, %rbx
%rbx -> 1
cmov -> 1
%rcx -> 1
%zf -> 1

Circuit: callq .move_032_016_ecx_r8w_r9w
%ecx -> 1
%r8w -> 1
%r9w -> 1

Circuit: callq .move_r8b_to_byte_7_of_rbx
%r8b -> 1
%rbx -> 1

Total Circuit
 -> 1
R9 -> 1
CF -> 1
RBX -> 1
R8 -> 1
ZF -> 1
RCX -> 1

Target
ZF -> 1
CF -> 1
RBX -> 1

[4m[1m[34mkprove setbe_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setbe_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setbe_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setbe_r8[0m
[4m[1m[34msanitizeSpecOutput setbe_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetbe_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, _608) )
echo Debug:  Result: "CF" |-> (MI608 )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(63, 0), mi(1, _610)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(63, 0), MI610) )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(63, 0), mi(1, _610)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(63, 0), MI610) )
echo Debug:  PreResult: "R9" |-> (mi(64, 0) )
echo Debug:  Result: "R9" |-> (mi(64, 0) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _609)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI609) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _610), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _609), 0, 56), concatenateMInt(mi(7, 0), mi(1, _608))) ) #else ( concatenateMInt(extractMInt(mi(64, _609), 0, 56), concatenateMInt(mi(7, 0), mi(1, _610))) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI610, mi(1, 0)) ) #then ( concatenateMInt(extractMInt(MI609, 0, 56), concatenateMInt(mi(7, 0), MI608)) ) #else ( concatenateMInt(extractMInt(MI609, 0, 56), concatenateMInt(mi(7, 0), MI610)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> (mi(1, _610)   )
echo Debug:  Result: "ZF" |-> (MI610   )
[4m[1m[34mwriteKDefn setbe_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setbe_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setbe_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setc_rh[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setc_rh.s[0m
[4m[1m[34mcreatespec setc_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setc_rh_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setc_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetc_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setc_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setc_rh.s[0m
Circuit: callq .read_cf_into_rcx
%cf -> 1
%rcx -> 1

Circuit: movb %cl, %ah
%ah -> 1
%cl -> 1

Total Circuit
CF -> 1
RAX -> 1
RCX -> 1

Target
RAX -> 1
CF -> 1

[4m[1m[34mkprove setc_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setc_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setc_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setc_rh[0m
[4m[1m[34msanitizeSpecOutput setc_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetc_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _605), 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _604)), extractMInt(mi(64, _605), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI605, 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), MI604), extractMInt(MI605, 56, 64))) )
echo Debug:  PreResult: "CF" |-> (mi(1, _604) )
echo Debug:  Result: "CF" |-> (MI604 )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(63, 0), mi(1, _604)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(63, 0), MI604) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _605))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI605)   )
[4m[1m[34mwriteKDefn setc_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setc_rh.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setc_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: sete_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sete_r8.s[0m
[4m[1m[34mcreatespec sete_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sete_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sete_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msete_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sete_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sete_r8.s[0m
Circuit: callq .read_zf_into_rbx
%rbx -> 1
%zf -> 1

Total Circuit
ZF -> 1
RBX -> 1

Target
ZF -> 1
RBX -> 1

[4m[1m[34mkprove sete_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sete_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sete_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput sete_r8[0m
[4m[1m[34msanitizeSpecOutput sete_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msete_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _603), 0, 56), concatenateMInt(mi(7, 0), mi(1, _604))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI603, 0, 56), concatenateMInt(mi(7, 0), MI604)) )
echo Debug:  PreResult: "ZF" |-> (mi(1, _604) )
echo Debug:  Result: "ZF" |-> (MI604 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _603))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI603)   )
[4m[1m[34mwriteKDefn sete_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-sete_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sete_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setnae_rh[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setnae_rh.s[0m
[4m[1m[34mcreatespec setnae_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnae_rh_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setnae_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnae_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setnae_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setnae_rh.s[0m
Circuit: callq .read_cf_into_rbx
%cf -> 1
%rbx -> 1

Circuit: movb %bl, %ah
%ah -> 1
%bl -> 1

Total Circuit
CF -> 1
RBX -> 1
RAX -> 1

Target
RAX -> 1
CF -> 1

[4m[1m[34mkprove setnae_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnae_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnae_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setnae_rh[0m
[4m[1m[34msanitizeSpecOutput setnae_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnae_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _605), 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _604)), extractMInt(mi(64, _605), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI605, 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), MI604), extractMInt(MI605, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(63, 0), mi(1, _604)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(63, 0), MI604) )
echo Debug:  PreResult: "CF" |-> (mi(1, _604) )
echo Debug:  Result: "CF" |-> (MI604 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _605))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI605)   )
[4m[1m[34mwriteKDefn setnae_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setnae_rh.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setnae_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setno_rh[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setno_rh.s[0m
[4m[1m[34mcreatespec setno_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setno_rh_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setno_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetno_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setno_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setno_rh.s[0m
Circuit: callq .read_of_into_rbx
%rbx -> 1
%of -> 1

Circuit: callq .set_szp_for_ebx
%sf -> 1
%zf -> 1
%ebx -> 1
%pf -> 1

Circuit: callq .read_zf_into_rcx
%zf -> 1
%rcx -> 1

Circuit: movb %cl, %ah
%cl -> 1
%ah -> 1

Total Circuit
OF -> 1
RBX -> 1
SF -> 1
RAX -> 1
ZF -> 1
PF -> 1
RCX -> 1

Target
OF -> 1
RAX -> 1

[4m[1m[34mkprove setno_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setno_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setno_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setno_rh[0m
[4m[1m[34msanitizeSpecOutput setno_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetno_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RCX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(31, 0), mi(1, _608)), mi(32, 0)) ) #then ( mi(64, 1) ) #else ( mi(64, 0) ) #fi)  )
echo Debug:  Result: "RCX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(31, 0), MI608), mi(32, 0)) ) #then ( mi(64, 1) ) #else ( mi(64, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(mi(1, _608))  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(MI608)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _609)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI609) )
echo Debug:  PreResult: "OF" |-> (mi(1, _608) )
echo Debug:  Result: "OF" |-> (MI608 )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _609), 0, 48), concatenateMInt((#ifMInt (eqMInt(concatenateMInt(mi(31, 0), mi(1, _608)), mi(32, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) , extractMInt(mi(64, _609), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI609, 0, 48), concatenateMInt((#ifMInt (eqMInt(concatenateMInt(mi(31, 0), MI608), mi(32, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) , extractMInt(MI609, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(63, 0), mi(1, _608)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(63, 0), MI608) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(31, 0), mi(1, _608)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(31, 0), MI608), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn setno_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setno_rh.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setno_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setnp_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setnp_r8.s[0m
[4m[1m[34mcreatespec setnp_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnp_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setnp_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnp_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setnp_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setnp_r8.s[0m
Circuit: callq .read_pf_into_rbx
%pf -> 1
%rbx -> 1

Circuit: callq .set_szp_for_bx
%pf -> 1
%zf -> 1
%sf -> 1
%bx -> 1

Circuit: callq .read_zf_into_rbx
%rbx -> 1
%zf -> 1

Total Circuit
SF -> 1
RBX -> 1
ZF -> 1
PF -> 1

Target
PF -> 1
RBX -> 1

[4m[1m[34mkprove setnp_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnp_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnp_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setnp_r8[0m
[4m[1m[34msanitizeSpecOutput setnp_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnp_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(15, 0), mi(1, _605)), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _606), 0, 56), mi(8, 1)) ) #else ( concatenateMInt(extractMInt(mi(64, _606), 0, 56), mi(8, 0)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(15, 0), MI605), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(MI606, 0, 56), mi(8, 1)) ) #else ( concatenateMInt(extractMInt(MI606, 0, 56), mi(8, 0)) ) #fi)  )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(15, 0), mi(1, _605)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(15, 0), MI605), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(mi(1, _605))  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(MI605)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _606))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI606)   )
[4m[1m[34mwriteKDefn setnp_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setnp_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setnp_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setnp_rh[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setnp_rh.s[0m
[4m[1m[34mcreatespec setnp_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnp_rh_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setnp_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnp_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setnp_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setnp_rh.s[0m
Circuit: callq .read_pf_into_rbx
%rbx -> 1
%pf -> 1

Circuit: callq .move_032_016_ebx_r8w_r9w
%r8w -> 1
%ebx -> 1
%r9w -> 1

Circuit: callq .move_r8b_to_byte_2_of_rbx
%r8b -> 1
%rbx -> 1

Circuit: callq .set_szp_for_bx
%sf -> 1
%bx -> 1
%zf -> 1
%pf -> 1

Circuit: callq .read_zf_into_rbx
%rbx -> 1
%zf -> 1

Circuit: movb %bl, %ah
%bl -> 1
%ah -> 1

Total Circuit
RAX -> 1
ZF -> 1
R8 -> 1
PF -> 1
R9 -> 1
SF -> 1
RBX -> 1

Target
PF -> 1
RAX -> 1

[4m[1m[34mkprove setnp_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnp_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnp_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setnp_rh[0m
[4m[1m[34msanitizeSpecOutput setnp_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnp_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(63, 0), mi(1, _608)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(63, 0), MI608) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(mi(1, _608))  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(MI608)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R9" |-> (mi(64, 0) )
echo Debug:  Result: "R9" |-> (mi(64, 0) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _609)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI609) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _609), 0, 48), concatenateMInt((#ifMInt (eqMInt(concatenateMInt(mi(15, 0), mi(1, _608)), mi(16, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) , extractMInt(mi(64, _609), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI609, 0, 48), concatenateMInt((#ifMInt (eqMInt(concatenateMInt(mi(15, 0), MI608), mi(16, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) , extractMInt(MI609, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(15, 0), mi(1, _608)), mi(16, 0)) ) #then ( mi(64, 1) ) #else ( mi(64, 0) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(15, 0), MI608), mi(16, 0)) ) #then ( mi(64, 1) ) #else ( mi(64, 0) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(15, 0), mi(1, _608)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(15, 0), MI608), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn setnp_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setnp_rh.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setnp_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: seto_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/seto_r8.s[0m
[4m[1m[34mcreatespec seto_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_seto_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/seto_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mseto_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/seto_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/seto_r8.s[0m
Circuit: callq .read_of_into_rbx
%of -> 1
%rbx -> 1

Circuit: callq .move_byte_6_of_rbx_to_r9b
%r9b -> 1
%rbx -> 1

Circuit: callq .move_r9b_to_byte_6_of_rbx
%r9b -> 1
%rbx -> 1

Total Circuit
OF -> 1
R9 -> 1
RBX -> 1

Target
OF -> 1
RBX -> 1

[4m[1m[34mkprove seto_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_seto_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_seto_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput seto_r8[0m
[4m[1m[34msanitizeSpecOutput seto_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mseto_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _605), 0, 56), concatenateMInt(mi(7, 0), mi(1, _604))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI605, 0, 56), concatenateMInt(mi(7, 0), MI604)) )
echo Debug:  PreResult: "R9" |-> (mi(64, 0) )
echo Debug:  Result: "R9" |-> (mi(64, 0) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _605)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI605) )
echo Debug:  PreResult: "OF" |-> (mi(1, _604)   )
echo Debug:  Result: "OF" |-> (MI604   )
[4m[1m[34mwriteKDefn seto_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-seto_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/seto_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setp_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setp_r8.s[0m
[4m[1m[34mcreatespec setp_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setp_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setp_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetp_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setp_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setp_r8.s[0m
Circuit: callq .read_pf_into_rbx
%pf -> 1
%rbx -> 1

Total Circuit
PF -> 1
RBX -> 1

Target
PF -> 1
RBX -> 1

[4m[1m[34mkprove setp_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setp_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setp_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setp_r8[0m
[4m[1m[34msanitizeSpecOutput setp_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetp_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _604), 0, 56), concatenateMInt(mi(7, 0), mi(1, _603))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI604, 0, 56), concatenateMInt(mi(7, 0), MI603)) )
echo Debug:  PreResult: "PF" |-> (mi(1, _603) )
echo Debug:  Result: "PF" |-> (MI603 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _604))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI604)   )
[4m[1m[34mwriteKDefn setp_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setp_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setp_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: sets_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sets_r8.s[0m
[4m[1m[34mcreatespec sets_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sets_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sets_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msets_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sets_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sets_r8.s[0m
Circuit: callq .read_sf_into_rbx
%sf -> 1
%rbx -> 1

Total Circuit
RBX -> 1
SF -> 1

Target
SF -> 1
RBX -> 1

[4m[1m[34mkprove sets_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sets_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sets_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput sets_r8[0m
[4m[1m[34msanitizeSpecOutput sets_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msets_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _603), 0, 56), concatenateMInt(mi(7, 0), mi(1, _604))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI603, 0, 56), concatenateMInt(mi(7, 0), MI604)) )
echo Debug:  PreResult: "SF" |-> (mi(1, _604) )
echo Debug:  Result: "SF" |-> (MI604 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _603))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI603)   )
[4m[1m[34mwriteKDefn sets_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-sets_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sets_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setz_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setz_r8.s[0m
[4m[1m[34mcreatespec setz_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setz_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setz_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetz_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setz_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setz_r8.s[0m
Circuit: callq .read_zf_into_rbx
%zf -> 1
%rbx -> 1

Total Circuit
RBX -> 1
ZF -> 1

Target
RBX -> 1
ZF -> 1

[4m[1m[34mkprove setz_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setz_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setz_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setz_r8[0m
[4m[1m[34msanitizeSpecOutput setz_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetz_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _603), 0, 56), concatenateMInt(mi(7, 0), mi(1, _604))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI603, 0, 56), concatenateMInt(mi(7, 0), MI604)) )
echo Debug:  PreResult: "ZF" |-> (mi(1, _604) )
echo Debug:  Result: "ZF" |-> (MI604 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _603))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI603)   )
[4m[1m[34mwriteKDefn setz_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setz_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setz_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: shlq_r64_cl[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/shlq_r64_cl.s[0m
[4m[1m[34mcreatespec shlq_r64_cl: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shlq_r64_cl_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/shlq_r64_cl.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mshlq_r64_cl: Check if May == Must[0m
Warn: [4m[1m[35mMay Write pf does not belong to Must Write: shlq_r64_cl[0m
Warn: [4m[1m[35mMay Write sf does not belong to Must Write: shlq_r64_cl[0m
Warn: [4m[1m[35mMay Write cf does not belong to Must Write: shlq_r64_cl[0m
Warn: [4m[1m[35mMay Write of does not belong to Must Write: shlq_r64_cl[0m
Warn: [4m[1m[35mMay Write zf does not belong to Must Write: shlq_r64_cl[0m
Warn: [4m[1m[35mMay Undef cf does not belong to Must Undef: shlq_r64_cl[0m
Warn: [4m[1m[35mMay Undef of does not belong to Must Undef: shlq_r64_cl[0m
Warn: [4m[1m[35mMay Undef af does not belong to Must Undef: shlq_r64_cl[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: shlq_r64_cl[0m
Undef Set
af -> 1
cf -> 1
of -> 1

[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/shlq_r64_cl.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/shlq_r64_cl.s[0m
Circuit: salq %cl, %rbx
%rbx -> 1
%pf -> 1
%cf -> 1
%sf -> 1
%af -> 1
%cl -> 1
%of -> 1
%zf -> 1

Total Circuit
ZF -> 1
AF -> 1
RCX -> 1
PF -> 1
OF -> 1
CF -> 1
SF -> 1
RBX -> 1

Target
PF -> 1
RCX -> 1
AF -> 1
ZF -> 1
SF -> 1
CF -> 1
RBX -> 1
OF -> 1

[4m[1m[34mkprove shlq_r64_cl[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shlq_r64_cl_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shlq_r64_cl_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput shlq_r64_cl[0m
[4m[1m[34msanitizeSpecOutput shlq_r64_cl[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mshlq_r64_cl: Check if May == Must[0m
Warn: [4m[1m[35mMay Write OF does not belong to Must Write: shlq_r64_cl[0m
Warn: [4m[1m[35mMay Write ZF does not belong to Must Write: shlq_r64_cl[0m
Warn: [4m[1m[35mMay Write SF does not belong to Must Write: shlq_r64_cl[0m
Warn: [4m[1m[35mMay Write CF does not belong to Must Write: shlq_r64_cl[0m
Warn: [4m[1m[35mMay Write PF does not belong to Must Write: shlq_r64_cl[0m
Warn: [4m[1m[35mMay Undef OF does not belong to Must Undef: shlq_r64_cl[0m
Warn: [4m[1m[35mMay Undef AF does not belong to Must Undef: shlq_r64_cl[0m
Warn: [4m[1m[35mMay Undef CF does not belong to Must Undef: shlq_r64_cl[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, _615) ) #else ( (#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 63)), mi(8, 1)) ) #then ( extractMInt(mi(64, _618), 0, 1) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( extractMInt(shlMInt(mi(64, _618),  ( uvalueMInt(andMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 63)))  -Int  1 ) ), 0, 1) ) #else ( undef ) #fi)  ) #fi)  ) #fi)  )
echo Debug:  Result: "CF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI619, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( MI615 ) #else ( (#ifMInt (eqMInt(andMInt(extractMInt(MI619, 56, 64), mi(8, 63)), mi(8, 1)) ) #then ( extractMInt(MI618, 0, 1) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI619, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( extractMInt(shlMInt(MI618,  ( uvalueMInt(andMInt(extractMInt(MI619, 56, 64), mi(8, 63)))  -Int  1 ) ), 0, 1) ) #else ( undef ) #fi)  ) #fi)  ) #fi)  )
echo Debug:  PreResult: "SF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, _620) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( extractMInt(shlMInt(mi(64, _618), uvalueMInt(andMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 63)))), 0, 1) ) #else ( mi(1, 0) ) #fi)  ) #fi)  )
echo Debug:  Result: "SF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI619, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( MI620 ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI619, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( extractMInt(shlMInt(MI618, uvalueMInt(andMInt(extractMInt(MI619, 56, 64), mi(8, 63)))), 0, 1) ) #else ( mi(1, 0) ) #fi)  ) #fi)  )
echo Debug:  PreResult: "AF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, _614) ) #else ( undef ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI619, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( MI614 ) #else ( undef ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, _617) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( (#ifMInt ( (  ( countOnes(extractMInt(shlMInt(mi(64, _618), uvalueMInt(andMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 63)))), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( mi(1, 1) ) #fi)  ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI619, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( MI617 ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI619, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( (#ifMInt ( (  ( countOnes(extractMInt(shlMInt(MI618, uvalueMInt(andMInt(extractMInt(MI619, 56, 64), mi(8, 63)))), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( mi(1, 1) ) #fi)  ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _619) )
echo Debug:  Result: "RCX" |-> (MI619 )
echo Debug:  PreResult: "OF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, _616) ) #else ( (#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 63)), mi(8, 1)) ) #then ( xorMInt(extractMInt(mi(64, _618), 0, 1), extractMInt(shlMInt(mi(64, _618), 1), 0, 1)) ) #else ( undef ) #fi)  ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI619, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( MI616 ) #else ( (#ifMInt (eqMInt(andMInt(extractMInt(MI619, 56, 64), mi(8, 63)), mi(8, 1)) ) #then ( xorMInt(extractMInt(MI618, 0, 1), extractMInt(shlMInt(MI618, 1), 0, 1)) ) #else ( undef ) #fi)  ) #fi)  )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( shlMInt(mi(64, _618), uvalueMInt(andMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 63)))) ) #else ( mi(64, 0) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (ultMInt(andMInt(extractMInt(MI619, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( shlMInt(MI618, uvalueMInt(andMInt(extractMInt(MI619, 56, 64), mi(8, 63)))) ) #else ( mi(64, 0) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, _621) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( (#ifMInt (eqMInt(shlMInt(mi(64, _618), uvalueMInt(andMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 63)))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( mi(1, 1) ) #fi)  ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI619, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( MI621 ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI619, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( (#ifMInt (eqMInt(shlMInt(MI618, uvalueMInt(andMInt(extractMInt(MI619, 56, 64), mi(8, 63)))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( mi(1, 1) ) #fi)  ) #fi)    )
[4m[1m[34mwriteKDefn shlq_r64_cl: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-shlq_r64_cl.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/shlq_r64_cl.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: shlxq_r64_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/shlxq_r64_r64_r64.s[0m
[4m[1m[34mcreatespec shlxq_r64_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shlxq_r64_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/shlxq_r64_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mshlxq_r64_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/shlxq_r64_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/shlxq_r64_r64_r64.s[0m
Circuit: callq .move_064_032_rcx_r10d_r11d
%r11d -> 1
%r10d -> 1
%rcx -> 1

Circuit: callq .move_064_032_rdx_r8d_r9d
%rdx -> 1
%r8d -> 1
%r9d -> 1

Circuit: callq .move_032_064_r10d_r11d_rbx
%r10d -> 1
%rbx -> 1
%r11d -> 1

Circuit: callq .move_032_064_r8d_r9d_rcx
%r8d -> 1
%rcx -> 1
%r9d -> 1

Circuit: salq %cl, %rbx
%cl -> 1
%af -> 1
%sf -> 1
%zf -> 1
%of -> 1
%cf -> 1
%pf -> 1
%rbx -> 1

Total Circuit
OF -> 1
R10 -> 1
R11 -> 1
CF -> 1
RBX -> 1
SF -> 1
R9 -> 1
AF -> 1
ZF -> 1
R8 -> 1
PF -> 1
RCX -> 1
RDX -> 1

Target
 -> 1
RBX -> 1
RDX -> 1
RCX -> 1

[4m[1m[34mkprove shlxq_r64_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shlxq_r64_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shlxq_r64_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput shlxq_r64_r64_r64[0m
[4m[1m[34msanitizeSpecOutput shlxq_r64_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mshlxq_r64_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( (#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 1)) ) #then ( extractMInt(mi(64, _615), 0, 1) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( extractMInt(shlMInt(mi(64, _615),  ( uvalueMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)))  -Int  1 ) ), 0, 1) ) #else ( undef ) #fi)  ) #fi)  ) #fi)  )
echo Debug:  Result: "CF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( (#ifMInt (eqMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 1)) ) #then ( extractMInt(MI615, 0, 1) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( extractMInt(shlMInt(MI615,  ( uvalueMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)))  -Int  1 ) ), 0, 1) ) #else ( undef ) #fi)  ) #fi)  ) #fi)  )
echo Debug:  PreResult: "AF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( undef ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( undef ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _616) )
echo Debug:  Result: "RCX" |-> (MI616 )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _616), 32, 64)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(MI616, 32, 64)) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _616), 0, 32)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(32, 0), extractMInt(MI616, 0, 32)) )
echo Debug:  PreResult: "RDX" |-> (mi(64, _616) )
echo Debug:  Result: "RDX" |-> (MI616 )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( shlMInt(mi(64, _615), uvalueMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)))) ) #else ( mi(64, 0) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (ultMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( shlMInt(MI615, uvalueMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)))) ) #else ( mi(64, 0) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( (#ifMInt (eqMInt(shlMInt(mi(64, _615), uvalueMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( mi(1, 1) ) #fi)  ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( (#ifMInt (eqMInt(shlMInt(MI615, uvalueMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( mi(1, 1) ) #fi)  ) #fi)  )
echo Debug:  PreResult: "R10" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)) )
echo Debug:  Result: "R10" |-> (concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)) )
echo Debug:  PreResult: "R11" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 0, 32)) )
echo Debug:  Result: "R11" |-> (concatenateMInt(mi(32, 0), extractMInt(MI615, 0, 32)) )
echo Debug:  PreResult: "SF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( extractMInt(shlMInt(mi(64, _615), uvalueMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)))), 0, 1) ) #else ( mi(1, 0) ) #fi)  ) #fi)  )
echo Debug:  Result: "SF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( extractMInt(shlMInt(MI615, uvalueMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)))), 0, 1) ) #else ( mi(1, 0) ) #fi)  ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( (#ifMInt ( (  ( countOnes(extractMInt(shlMInt(mi(64, _615), uvalueMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)))), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( mi(1, 1) ) #fi)  ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( (#ifMInt (ultMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( (#ifMInt ( (  ( countOnes(extractMInt(shlMInt(MI615, uvalueMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)))), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi) ) #else ( mi(1, 1) ) #fi)  ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( (#ifMInt (eqMInt(andMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 63)), mi(8, 1)) ) #then ( xorMInt(extractMInt(mi(64, _615), 0, 1), extractMInt(shlMInt(mi(64, _615), 1), 0, 1)) ) #else ( undef ) #fi)  ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt (eqMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 0)) ) #then ( mi(1, 0) ) #else ( (#ifMInt (eqMInt(andMInt(extractMInt(MI616, 56, 64), mi(8, 63)), mi(8, 1)) ) #then ( xorMInt(extractMInt(MI615, 0, 1), extractMInt(shlMInt(MI615, 1), 0, 1)) ) #else ( undef ) #fi)  ) #fi)  )
[4m[1m[34mwriteKDefn shlxq_r64_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-shlxq_r64_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/shlxq_r64_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: stc[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/stc.s[0m
[4m[1m[34mcreatespec stc: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_stc_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/stc.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mstc: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/stc.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/stc.s[0m
Circuit: callq .set_cf
%cf -> 1

Total Circuit
CF -> 1

Target
CF -> 1

[4m[1m[34mkprove stc[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_stc_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_stc_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput stc[0m
[4m[1m[34msanitizeSpecOutput stc[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mstc: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 1)   )
echo Debug:  Result: "CF" |-> (mi(1, 1)   )
[4m[1m[34mwriteKDefn stc: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-stc.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/stc.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vaddpd_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vaddpd_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vaddpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vaddpd_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vaddpd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvaddpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vaddpd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vaddpd_xmm_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm2_r10_r11
%r10 -> 1
%xmm2 -> 1
%r11 -> 1

Circuit: callq .move_128_064_xmm3_r8_r9
%r8 -> 1
%r9 -> 1
%xmm3 -> 1

Circuit: vzeroall
%ymm4 -> 1
%ymm12 -> 1
%ymm5 -> 1
%ymm2 -> 1
%ymm1 -> 1
%ymm6 -> 1
%ymm7 -> 1
%ymm8 -> 1
%ymm10 -> 1
%ymm14 -> 1
%ymm13 -> 1
avx -> 1
%ymm11 -> 1
%ymm9 -> 1
%ymm15 -> 1
%ymm0 -> 1
%ymm3 -> 1

Circuit: callq .move_064_128_r10_r11_xmm1
%r10 -> 1
%r11 -> 1
%xmm1 -> 1

Circuit: callq .move_064_128_r8_r9_xmm3
%xmm3 -> 1
%r8 -> 1
%r9 -> 1

Circuit: vaddpd %ymm3, %ymm1, %ymm1
%ymm3 -> 1
avx -> 1
%ymm1 -> 1

Total Circuit
 -> 1
YMM13 -> 1
YMM7 -> 1
YMM14 -> 1
YMM0 -> 1
YMM12 -> 1
YMM9 -> 1
YMM6 -> 1
YMM8 -> 1
YMM5 -> 1
R10 -> 1
R11 -> 1
YMM4 -> 1
R9 -> 1
YMM1 -> 1
R8 -> 1
YMM10 -> 1
YMM11 -> 1
YMM15 -> 1
YMM3 -> 1
YMM2 -> 1

Target
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1
 -> 1

[4m[1m[34mkprove vaddpd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vaddpd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vaddpd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vaddpd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vaddpd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvaddpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _623), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI623, 192, 256) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _623), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI623, 128, 192) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "R10" |-> (extractMInt(mi(256, _622), 192, 256) )
echo Debug:  Result: "R10" |-> (extractMInt(MI622, 192, 256) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _623), 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _622), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _623), 192, 256), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _622), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI623, 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(MI622, 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI623, 192, 256), 53, 11)  +Float  MInt2Float(extractMInt(MI622, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _623), 128, 256)) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(MI623, 128, 256)) )
echo Debug:  PreResult: "R11" |-> (extractMInt(mi(256, _622), 128, 192) )
echo Debug:  Result: "R11" |-> (extractMInt(MI622, 128, 192) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vaddpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vaddpd_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vaddpd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vcvtdq2ps_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vcvtdq2ps_xmm_xmm.s[0m
[4m[1m[34mcreatespec vcvtdq2ps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vcvtdq2ps_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vcvtdq2ps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvcvtdq2ps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vcvtdq2ps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vcvtdq2ps_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm2_r8_r9
%r8 -> 1
%r9 -> 1
%xmm2 -> 1

Circuit: vzeroall
%ymm2 -> 1
%ymm4 -> 1
%ymm12 -> 1
%ymm5 -> 1
%ymm8 -> 1
%ymm7 -> 1
%ymm10 -> 1
%ymm14 -> 1
avx -> 1
%ymm13 -> 1
%ymm1 -> 1
%ymm6 -> 1
%ymm15 -> 1
%ymm11 -> 1
%ymm9 -> 1
%ymm3 -> 1
%ymm0 -> 1

Circuit: callq .move_064_128_r8_r9_xmm2
%r9 -> 1
%r8 -> 1
%xmm2 -> 1

Circuit: vcvtdq2ps %ymm2, %ymm12
avx -> 1
%ymm12 -> 1
%ymm2 -> 1

Circuit: callq .move_128_256_xmm12_xmm13_ymm1
%xmm12 -> 1
%ymm1 -> 1
%xmm13 -> 1

Total Circuit
YMM4 -> 1
YMM5 -> 1
YMM1 -> 1
R9 -> 1
YMM10 -> 1
YMM11 -> 1
R8 -> 1
YMM2 -> 1
YMM3 -> 1
YMM15 -> 1
YMM13 -> 1
 -> 1
YMM14 -> 1
YMM0 -> 1
YMM7 -> 1
YMM12 -> 1
YMM8 -> 1
YMM6 -> 1
YMM9 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove vcvtdq2ps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vcvtdq2ps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vcvtdq2ps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vcvtdq2ps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vcvtdq2ps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvcvtdq2ps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _619), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI619, 192, 256) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _619), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI619, 128, 192) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _619), 128, 160)), 24, 8), 32), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _619), 160, 192)), 24, 8), 32), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _619), 192, 224)), 24, 8), 32), Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _619), 224, 256)), 24, 8), 32))))) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(MI619, 128, 160)), 24, 8), 32), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(MI619, 160, 192)), 24, 8), 32), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(MI619, 192, 224)), 24, 8), 32), Float2MInt(Int2Float(svalueMInt(extractMInt(MI619, 224, 256)), 24, 8), 32))))) )
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _619), 128, 256)) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), extractMInt(MI619, 128, 256)) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _619), 128, 160)), 24, 8), 32), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _619), 160, 192)), 24, 8), 32), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _619), 192, 224)), 24, 8), 32), Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _619), 224, 256)), 24, 8), 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(MI619, 128, 160)), 24, 8), 32), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(MI619, 160, 192)), 24, 8), 32), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(MI619, 192, 224)), 24, 8), 32), Float2MInt(Int2Float(svalueMInt(extractMInt(MI619, 224, 256)), 24, 8), 32))))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vcvtdq2ps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvtdq2ps_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vcvtdq2ps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vcvtpd2ps_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vcvtpd2ps_xmm_xmm.s[0m
vcvtpd2ps_xmm_xmm 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvtpd2ps_xmm_ymm.k
Warn: [4m[1m[35mvcvtpd2ps_xmm_xmm: UnSupported[0m
[4m[1m[34mCheck if supported: vcvtps2dq_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vcvtps2dq_xmm_xmm.s[0m
vcvtps2dq_xmm_xmm 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvtps2dq_ymm_ymm.k
Warn: [4m[1m[35mvcvtps2dq_xmm_xmm: UnSupported[0m
[4m[1m[34mCheck if supported: vcvtps2pd_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vcvtps2pd_xmm_xmm.s[0m
[4m[1m[34mcreatespec vcvtps2pd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vcvtps2pd_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vcvtps2pd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvcvtps2pd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vcvtps2pd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vcvtps2pd_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm2_r8_r9
%xmm2 -> 1
%r9 -> 1
%r8 -> 1

Circuit: vzeroall
%ymm15 -> 1
%ymm11 -> 1
%ymm9 -> 1
%ymm3 -> 1
%ymm0 -> 1
%ymm2 -> 1
%ymm4 -> 1
%ymm5 -> 1
%ymm12 -> 1
%ymm7 -> 1
%ymm8 -> 1
%ymm10 -> 1
%ymm14 -> 1
%ymm13 -> 1
avx -> 1
%ymm6 -> 1
%ymm1 -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%r9 -> 1
%r8 -> 1
%xmm1 -> 1

Circuit: vcvtps2pd %xmm1, %ymm10
%mxcsr::rc[0] -> 1
avx -> 1
%xmm1 -> 1
%ymm10 -> 1

Circuit: callq .move_128_256_xmm10_xmm11_ymm1
%ymm1 -> 1
%xmm11 -> 1
%xmm10 -> 1

Total Circuit
YMM12 -> 1
YMM8 -> 1
YMM9 -> 1
YMM6 -> 1
YMM13 -> 1
 -> 1
YMM0 -> 1
YMM14 -> 1
YMM7 -> 1
YMM11 -> 1
YMM10 -> 1
R8 -> 1
YMM2 -> 1
YMM3 -> 1
YMM15 -> 1
YMM4 -> 1
YMM5 -> 1
YMM1 -> 1
R9 -> 1

Target
YMM2 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove vcvtps2pd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vcvtps2pd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vcvtps2pd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vcvtps2pd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vcvtps2pd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvcvtps2pd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _619), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI619, 192, 256) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _619), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI619, 128, 192) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(mi(256, _619), 192, 224), 24, 8)), 64), Float2MInt(Float2Double(MInt2Float(extractMInt(mi(256, _619), 224, 256), 24, 8)), 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(MI619, 192, 224), 24, 8)), 64), Float2MInt(Float2Double(MInt2Float(extractMInt(MI619, 224, 256), 24, 8)), 64))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(mi(256, _619), 128, 160), 24, 8)), 64), concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(mi(256, _619), 160, 192), 24, 8)), 64), concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(mi(256, _619), 192, 224), 24, 8)), 64), Float2MInt(Float2Double(MInt2Float(extractMInt(mi(256, _619), 224, 256), 24, 8)), 64)))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(MI619, 128, 160), 24, 8)), 64), concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(MI619, 160, 192), 24, 8)), 64), concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(MI619, 192, 224), 24, 8)), 64), Float2MInt(Float2Double(MInt2Float(extractMInt(MI619, 224, 256), 24, 8)), 64)))) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vcvtps2pd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvtps2pd_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vcvtps2pd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmadd213pd_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213pd_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vfmadd213pd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd213pd_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213pd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd213pd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213pd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213pd_ymm_ymm_ymm.s[0m
Circuit: vfmadd132pd %ymm1, %ymm3, %ymm2
%ymm3 -> 1
fma -> 1
%ymm2 -> 1
%ymm1 -> 1

Circuit: vminpd %ymm2, %ymm2, %ymm1
%ymm2 -> 1
avx -> 1
%ymm1 -> 1

Total Circuit
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1
 -> 1

Target
 -> 1
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1

[4m[1m[34mkprove vfmadd213pd_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd213pd_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd213pd_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmadd213pd_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vfmadd213pd_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd213pd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 0, 64), 53, 11)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 0, 64), 53, 11) )  ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 64, 128), 53, 11)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 64, 128), 53, 11) )  ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 128, 192), 53, 11)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 128, 192), 53, 11) )  ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) )  ) , 64)))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 0, 64), 53, 11)  +Float  ( MInt2Float(extractMInt(MI605, 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 0, 64), 53, 11) )  ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 64, 128), 53, 11)  +Float  ( MInt2Float(extractMInt(MI605, 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 64, 128), 53, 11) )  ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 128, 192), 53, 11)  +Float  ( MInt2Float(extractMInt(MI605, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 128, 192), 53, 11) )  ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI606, 192, 256), 53, 11)  +Float  ( MInt2Float(extractMInt(MI605, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) )  ) , 64)))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 0, 64), 53, 11)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 0, 64), 53, 11) )  ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 64, 128), 53, 11)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 64, 128), 53, 11) )  ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 128, 192), 53, 11)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 128, 192), 53, 11) )  ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) )  ) , 64)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 0, 64), 53, 11)  +Float  ( MInt2Float(extractMInt(MI605, 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 0, 64), 53, 11) )  ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 64, 128), 53, 11)  +Float  ( MInt2Float(extractMInt(MI605, 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 64, 128), 53, 11) )  ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 128, 192), 53, 11)  +Float  ( MInt2Float(extractMInt(MI605, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 128, 192), 53, 11) )  ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI606, 192, 256), 53, 11)  +Float  ( MInt2Float(extractMInt(MI605, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) )  ) , 64)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _606)   )
echo Debug:  Result: "YMM3" |-> (MI606   )
[4m[1m[34mwriteKDefn vfmadd213pd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmadd213pd_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213pd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmadd213ps_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213ps_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vfmadd213ps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd213ps_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd213ps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213ps_ymm_ymm_ymm.s[0m
Circuit: vfmadd132ps %ymm1, %ymm3, %ymm2
%ymm1 -> 1
%ymm2 -> 1
fma -> 1
%ymm3 -> 1

Circuit: vmaxpd %ymm2, %ymm2, %ymm1
avx -> 1
%ymm1 -> 1
%ymm2 -> 1

Total Circuit
 -> 1
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1

Target
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove vfmadd213ps_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd213ps_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd213ps_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmadd213ps_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vfmadd213ps_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd213ps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 0, 32), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 0, 32), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 32, 64), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 32, 64), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 64, 96), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 64, 96), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 96, 128), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 96, 128), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 128, 160), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 160, 192), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 192, 224), 24, 8) )  ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 224, 256), 24, 8) )  ) , 32)))))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 0, 32), 24, 8)  +Float  ( MInt2Float(extractMInt(MI605, 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 0, 32), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 32, 64), 24, 8)  +Float  ( MInt2Float(extractMInt(MI605, 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 32, 64), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 64, 96), 24, 8)  +Float  ( MInt2Float(extractMInt(MI605, 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 64, 96), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 96, 128), 24, 8)  +Float  ( MInt2Float(extractMInt(MI605, 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 96, 128), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 128, 160), 24, 8)  +Float  ( MInt2Float(extractMInt(MI605, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 128, 160), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 160, 192), 24, 8)  +Float  ( MInt2Float(extractMInt(MI605, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 160, 192), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 192, 224), 24, 8)  +Float  ( MInt2Float(extractMInt(MI605, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 192, 224), 24, 8) )  ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI606, 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(MI605, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 224, 256), 24, 8) )  ) , 32)))))))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 0, 32), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 0, 32), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 32, 64), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 32, 64), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 64, 96), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 64, 96), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 96, 128), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 96, 128), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 128, 160), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 160, 192), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 192, 224), 24, 8) )  ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _605), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 224, 256), 24, 8) )  ) , 32)))))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 0, 32), 24, 8)  +Float  ( MInt2Float(extractMInt(MI605, 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 0, 32), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 32, 64), 24, 8)  +Float  ( MInt2Float(extractMInt(MI605, 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 32, 64), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 64, 96), 24, 8)  +Float  ( MInt2Float(extractMInt(MI605, 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 64, 96), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 96, 128), 24, 8)  +Float  ( MInt2Float(extractMInt(MI605, 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 96, 128), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 128, 160), 24, 8)  +Float  ( MInt2Float(extractMInt(MI605, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 128, 160), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 160, 192), 24, 8)  +Float  ( MInt2Float(extractMInt(MI605, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 160, 192), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 192, 224), 24, 8)  +Float  ( MInt2Float(extractMInt(MI605, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 192, 224), 24, 8) )  ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI606, 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(MI605, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 224, 256), 24, 8) )  ) , 32)))))))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _606)   )
echo Debug:  Result: "YMM3" |-> (MI606   )
[4m[1m[34mwriteKDefn vfmadd213ps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmadd213ps_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmadd231ps_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd231ps_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vfmadd231ps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd231ps_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd231ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd231ps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd231ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd231ps_ymm_ymm_ymm.s[0m
Circuit: vfmadd132ps %ymm3, %ymm1, %ymm2
%ymm3 -> 1
%ymm2 -> 1
fma -> 1
%ymm1 -> 1

Circuit: vminps %ymm2, %ymm2, %ymm10
%ymm10 -> 1
avx -> 1
%ymm2 -> 1

Circuit: vmaxpd %ymm10, %ymm2, %ymm1
%ymm2 -> 1
%ymm1 -> 1
%ymm10 -> 1
avx -> 1

Total Circuit
YMM1 -> 1
YMM10 -> 1
YMM3 -> 1
YMM2 -> 1
 -> 1

Target
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vfmadd231ps_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd231ps_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd231ps_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmadd231ps_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vfmadd231ps_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd231ps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 0, 32), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 0, 32), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 32, 64), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 32, 64), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 64, 96), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 64, 96), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 96, 128), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 96, 128), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 128, 160), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 128, 160), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 160, 192), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 160, 192), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 192, 224), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 192, 224), 24, 8) )  ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 224, 256), 24, 8) )  ) , 32)))))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 0, 32), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 0, 32), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 32, 64), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 32, 64), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 64, 96), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 64, 96), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 96, 128), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 96, 128), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 128, 160), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 128, 160), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 160, 192), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 160, 192), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 192, 224), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 192, 224), 24, 8) )  ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI605, 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 224, 256), 24, 8) )  ) , 32)))))))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 0, 32), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 0, 32), 24, 8) )  ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 32, 64), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 32, 64), 24, 8) )  ) , 32)), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 64, 96), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 64, 96), 24, 8) )  ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 96, 128), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 96, 128), 24, 8) )  ) , 32)), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 128, 160), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 128, 160), 24, 8) )  ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 160, 192), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 160, 192), 24, 8) )  ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 192, 224), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 192, 224), 24, 8) )  ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 224, 256), 24, 8) )  ) , 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 0, 32), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 0, 32), 24, 8) )  ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI605, 32, 64), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 32, 64), 24, 8) )  ) , 32)), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 64, 96), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 64, 96), 24, 8) )  ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI605, 96, 128), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 96, 128), 24, 8) )  ) , 32)), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 128, 160), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 128, 160), 24, 8) )  ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI605, 160, 192), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 160, 192), 24, 8) )  ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 192, 224), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 192, 224), 24, 8) )  ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI605, 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 224, 256), 24, 8) )  ) , 32))))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 0, 32), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 0, 32), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 32, 64), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 32, 64), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 64, 96), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 64, 96), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 96, 128), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 96, 128), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 128, 160), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 128, 160), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 160, 192), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 160, 192), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 192, 224), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 192, 224), 24, 8) )  ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 224, 256), 24, 8) )  ) , 32)))))))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 0, 32), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 0, 32), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 32, 64), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 32, 64), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 64, 96), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 64, 96), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 96, 128), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 96, 128), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 128, 160), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 128, 160), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 160, 192), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 160, 192), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 192, 224), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 192, 224), 24, 8) )  ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI605, 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(MI606, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 224, 256), 24, 8) )  ) , 32)))))))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _607)   )
echo Debug:  Result: "YMM3" |-> (MI607   )
[4m[1m[34mwriteKDefn vfmadd231ps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmadd231ps_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd231ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmsub213pd_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsub213pd_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vfmsub213pd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub213pd_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsub213pd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub213pd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsub213pd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsub213pd_ymm_ymm_ymm.s[0m
Circuit: vfmsub132pd %ymm1, %ymm3, %ymm2
%ymm3 -> 1
fma -> 1
%ymm2 -> 1
%ymm1 -> 1

Circuit: vminpd %ymm2, %ymm2, %ymm1
%ymm2 -> 1
%ymm1 -> 1
avx -> 1

Total Circuit
 -> 1
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1

Target
 -> 1
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vfmsub213pd_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub213pd_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub213pd_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmsub213pd_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vfmsub213pd_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub213pd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 0, 64), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _606), 0, 64), 53, 11) ) , 64), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 64, 128), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _606), 64, 128), 53, 11) ) , 64), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _606), 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11) ) , 64)))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI605, 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 0, 64), 53, 11) )  -Float  MInt2Float(extractMInt(MI606, 0, 64), 53, 11) ) , 64), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI605, 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 64, 128), 53, 11) )  -Float  MInt2Float(extractMInt(MI606, 64, 128), 53, 11) ) , 64), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI605, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(MI606, 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI605, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI606, 192, 256), 53, 11) ) , 64)))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 0, 64), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _606), 0, 64), 53, 11) ) , 64), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 64, 128), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _606), 64, 128), 53, 11) ) , 64), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _606), 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11) ) , 64)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI605, 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 0, 64), 53, 11) )  -Float  MInt2Float(extractMInt(MI606, 0, 64), 53, 11) ) , 64), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI605, 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 64, 128), 53, 11) )  -Float  MInt2Float(extractMInt(MI606, 64, 128), 53, 11) ) , 64), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI605, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(MI606, 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI605, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI606, 192, 256), 53, 11) ) , 64)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _606)   )
echo Debug:  Result: "YMM3" |-> (MI606   )
[4m[1m[34mwriteKDefn vfmsub213pd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmsub213pd_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsub213pd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmsub213ps_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsub213ps_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vfmsub213ps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub213ps_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsub213ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub213ps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsub213ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsub213ps_ymm_ymm_ymm.s[0m
Circuit: vfmsub132ps %ymm1, %ymm3, %ymm2
%ymm3 -> 1
%ymm1 -> 1
%ymm2 -> 1
fma -> 1

Circuit: vmaxpd %ymm2, %ymm2, %ymm1
%ymm2 -> 1
%ymm1 -> 1
avx -> 1

Total Circuit
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1
 -> 1

Target
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1
 -> 1

[4m[1m[34mkprove vfmsub213ps_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub213ps_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub213ps_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmsub213ps_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vfmsub213ps_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub213ps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 0, 32), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _606), 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 32, 64), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _606), 32, 64), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 64, 96), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _606), 64, 96), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 96, 128), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _606), 96, 128), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 128, 160), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 192, 224), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8) ) , 32)))))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI605, 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 0, 32), 24, 8) )  -Float  MInt2Float(extractMInt(MI606, 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI605, 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 32, 64), 24, 8) )  -Float  MInt2Float(extractMInt(MI606, 32, 64), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI605, 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 64, 96), 24, 8) )  -Float  MInt2Float(extractMInt(MI606, 64, 96), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI605, 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 96, 128), 24, 8) )  -Float  MInt2Float(extractMInt(MI606, 96, 128), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI605, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 128, 160), 24, 8) )  -Float  MInt2Float(extractMInt(MI606, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI605, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(MI606, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI605, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 192, 224), 24, 8) )  -Float  MInt2Float(extractMInt(MI606, 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI605, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(MI606, 224, 256), 24, 8) ) , 32)))))))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 0, 32), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _606), 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 32, 64), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _606), 32, 64), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 64, 96), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _606), 64, 96), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 96, 128), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _606), 96, 128), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 128, 160), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 192, 224), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8) ) , 32)))))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI605, 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 0, 32), 24, 8) )  -Float  MInt2Float(extractMInt(MI606, 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI605, 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 32, 64), 24, 8) )  -Float  MInt2Float(extractMInt(MI606, 32, 64), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI605, 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 64, 96), 24, 8) )  -Float  MInt2Float(extractMInt(MI606, 64, 96), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI605, 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 96, 128), 24, 8) )  -Float  MInt2Float(extractMInt(MI606, 96, 128), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI605, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 128, 160), 24, 8) )  -Float  MInt2Float(extractMInt(MI606, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI605, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(MI606, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI605, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 192, 224), 24, 8) )  -Float  MInt2Float(extractMInt(MI606, 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI605, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(MI606, 224, 256), 24, 8) ) , 32)))))))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _606)   )
echo Debug:  Result: "YMM3" |-> (MI606   )
[4m[1m[34mwriteKDefn vfmsub213ps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmsub213ps_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsub213ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmsub231pd_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsub231pd_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vfmsub231pd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub231pd_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsub231pd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub231pd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsub231pd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsub231pd_ymm_ymm_ymm.s[0m
Circuit: vfmsub132pd %ymm3, %ymm1, %ymm2
%ymm3 -> 1
fma -> 1
%ymm2 -> 1
%ymm1 -> 1

Circuit: callq .move_128_064_xmm2_r10_r11
%xmm2 -> 1
%r11 -> 1
%r10 -> 1

Circuit: vminpd %ymm2, %ymm2, %ymm1
%ymm2 -> 1
%ymm1 -> 1
avx -> 1

Circuit: callq .move_064_128_r10_r11_xmm1
%r10 -> 1
%xmm1 -> 1
%r11 -> 1

Total Circuit
 -> 1
R11 -> 1
R10 -> 1
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1

Target
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove vfmsub231pd_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub231pd_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub231pd_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmsub231pd_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vfmsub231pd_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub231pd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R10" |-> (Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _607), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _608), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11) ) , 64) )
echo Debug:  Result: "R10" |-> (Float2MInt( (  ( MInt2Float(extractMInt(MI607, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI608, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI606, 192, 256), 53, 11) ) , 64) )
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _607), 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _608), 0, 64), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _606), 0, 64), 53, 11) ) , 64), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _607), 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _608), 64, 128), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _606), 64, 128), 53, 11) ) , 64), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _607), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _608), 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _606), 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _607), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _608), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11) ) , 64)))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI607, 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(MI608, 0, 64), 53, 11) )  -Float  MInt2Float(extractMInt(MI606, 0, 64), 53, 11) ) , 64), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI607, 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(MI608, 64, 128), 53, 11) )  -Float  MInt2Float(extractMInt(MI606, 64, 128), 53, 11) ) , 64), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI607, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI608, 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(MI606, 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI607, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI608, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI606, 192, 256), 53, 11) ) , 64)))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _607), 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _608), 0, 64), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _606), 0, 64), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _607), 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _608), 64, 128), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _606), 64, 128), 53, 11) ) , 64)), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _607), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _608), 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _606), 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _607), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _608), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI607, 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(MI608, 0, 64), 53, 11) )  -Float  MInt2Float(extractMInt(MI606, 0, 64), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI607, 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(MI608, 64, 128), 53, 11) )  -Float  MInt2Float(extractMInt(MI606, 64, 128), 53, 11) ) , 64)), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI607, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI608, 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(MI606, 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI607, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI608, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI606, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "R11" |-> (Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _607), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _608), 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _606), 128, 192), 53, 11) ) , 64) )
echo Debug:  Result: "R11" |-> (Float2MInt( (  ( MInt2Float(extractMInt(MI607, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI608, 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(MI606, 128, 192), 53, 11) ) , 64) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _608)   )
echo Debug:  Result: "YMM3" |-> (MI608   )
[4m[1m[34mwriteKDefn vfmsub231pd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmsub231pd_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsub231pd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmsub231ps_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsub231ps_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vfmsub231ps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub231ps_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsub231ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub231ps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsub231ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsub231ps_ymm_ymm_ymm.s[0m
Circuit: vminps %ymm1, %ymm1, %ymm9
%ymm1 -> 1
avx -> 1
%ymm9 -> 1

Circuit: vfmsub132ps %ymm3, %ymm9, %ymm2
%ymm9 -> 1
%ymm3 -> 1
%ymm2 -> 1
fma -> 1

Circuit: vminps %ymm2, %ymm2, %ymm1
%ymm1 -> 1
avx -> 1
%ymm2 -> 1

Total Circuit
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1
YMM9 -> 1
 -> 1

Target
 -> 1
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vfmsub231ps_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub231ps_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub231ps_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmsub231ps_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vfmsub231ps_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub231ps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _606), 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 0, 32), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _605), 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _606), 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 32, 64), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _605), 32, 64), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _606), 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 64, 96), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _605), 64, 96), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _606), 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 96, 128), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _605), 96, 128), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 128, 160), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _605), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _605), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 192, 224), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _605), 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _605), 224, 256), 24, 8) ) , 32)))))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI606, 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 0, 32), 24, 8) )  -Float  MInt2Float(extractMInt(MI605, 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI606, 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 32, 64), 24, 8) )  -Float  MInt2Float(extractMInt(MI605, 32, 64), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI606, 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 64, 96), 24, 8) )  -Float  MInt2Float(extractMInt(MI605, 64, 96), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI606, 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 96, 128), 24, 8) )  -Float  MInt2Float(extractMInt(MI605, 96, 128), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI606, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 128, 160), 24, 8) )  -Float  MInt2Float(extractMInt(MI605, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI606, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(MI605, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI606, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 192, 224), 24, 8) )  -Float  MInt2Float(extractMInt(MI605, 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI606, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(MI605, 224, 256), 24, 8) ) , 32)))))))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _606), 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 0, 32), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _605), 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _606), 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 32, 64), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _605), 32, 64), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _606), 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 64, 96), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _605), 64, 96), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _606), 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 96, 128), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _605), 96, 128), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 128, 160), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _605), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _605), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 192, 224), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _605), 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _607), 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _605), 224, 256), 24, 8) ) , 32)))))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI606, 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 0, 32), 24, 8) )  -Float  MInt2Float(extractMInt(MI605, 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI606, 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 32, 64), 24, 8) )  -Float  MInt2Float(extractMInt(MI605, 32, 64), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI606, 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 64, 96), 24, 8) )  -Float  MInt2Float(extractMInt(MI605, 64, 96), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI606, 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 96, 128), 24, 8) )  -Float  MInt2Float(extractMInt(MI605, 96, 128), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI606, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 128, 160), 24, 8) )  -Float  MInt2Float(extractMInt(MI605, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI606, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(MI605, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI606, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 192, 224), 24, 8) )  -Float  MInt2Float(extractMInt(MI605, 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI606, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI607, 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(MI605, 224, 256), 24, 8) ) , 32)))))))) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, _605) )
echo Debug:  Result: "YMM9" |-> (MI605 )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _607)   )
echo Debug:  Result: "YMM3" |-> (MI607   )
[4m[1m[34mwriteKDefn vfmsub231ps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmsub231ps_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsub231ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmadd213pd_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd213pd_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vfnmadd213pd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd213pd_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd213pd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd213pd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd213pd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd213pd_ymm_ymm_ymm.s[0m
Circuit: vfnmadd132pd %ymm1, %ymm3, %ymm2
%ymm3 -> 1
fma -> 1
%ymm2 -> 1
%ymm1 -> 1

Circuit: vmaxpd %ymm2, %ymm2, %ymm1
%ymm1 -> 1
avx -> 1
%ymm2 -> 1

Total Circuit
 -> 1
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1

Target
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1
 -> 1

[4m[1m[34mkprove vfnmadd213pd_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd213pd_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd213pd_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmadd213pd_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vfnmadd213pd_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd213pd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 0, 64), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 0, 64), 53, 11) ) ) ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 64, 128), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 64, 128), 53, 11) ) ) ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 128, 192), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 128, 192), 53, 11) ) ) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) ) ) ) , 64)))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 0, 64), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 0, 64), 53, 11) ) ) ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 64, 128), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 64, 128), 53, 11) ) ) ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 128, 192), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 128, 192), 53, 11) ) ) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI606, 192, 256), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) ) ) ) , 64)))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 0, 64), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 0, 64), 53, 11) ) ) ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 64, 128), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 64, 128), 53, 11) ) ) ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 128, 192), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 128, 192), 53, 11) ) ) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) ) ) ) , 64)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 0, 64), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 0, 64), 53, 11) ) ) ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 64, 128), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 64, 128), 53, 11) ) ) ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 128, 192), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 128, 192), 53, 11) ) ) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI606, 192, 256), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) ) ) ) , 64)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _606)   )
echo Debug:  Result: "YMM3" |-> (MI606   )
[4m[1m[34mwriteKDefn vfnmadd213pd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmadd213pd_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd213pd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmadd213ps_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd213ps_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vfnmadd213ps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd213ps_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd213ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd213ps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd213ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd213ps_ymm_ymm_ymm.s[0m
Circuit: vfnmadd132ps %ymm1, %ymm3, %ymm2
%ymm3 -> 1
%ymm1 -> 1
fma -> 1
%ymm2 -> 1

Circuit: vmaxpd %ymm2, %ymm2, %ymm1
%ymm2 -> 1
avx -> 1
%ymm1 -> 1

Total Circuit
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1
 -> 1

Target
 -> 1
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove vfnmadd213ps_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd213ps_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd213ps_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmadd213ps_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vfnmadd213ps_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd213ps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 0, 32), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 0, 32), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 32, 64), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 32, 64), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 64, 96), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 64, 96), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 96, 128), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 96, 128), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 128, 160), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 160, 192), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 192, 224), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 224, 256), 24, 8) ) ) ) , 32)))))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 0, 32), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 0, 32), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 32, 64), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 32, 64), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 64, 96), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 64, 96), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 96, 128), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 96, 128), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 128, 160), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 128, 160), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 160, 192), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 160, 192), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 192, 224), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 192, 224), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI606, 224, 256), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 224, 256), 24, 8) ) ) ) , 32)))))))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 0, 32), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 0, 32), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 32, 64), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 32, 64), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 64, 96), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 64, 96), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 96, 128), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 96, 128), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 128, 160), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 160, 192), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 192, 224), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 224, 256), 24, 8) ) ) ) , 32)))))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 0, 32), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 0, 32), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 32, 64), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 32, 64), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 64, 96), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 64, 96), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 96, 128), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 96, 128), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 128, 160), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 128, 160), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 160, 192), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 160, 192), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 192, 224), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 192, 224), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI606, 224, 256), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI605, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 224, 256), 24, 8) ) ) ) , 32)))))))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _606)   )
echo Debug:  Result: "YMM3" |-> (MI606   )
[4m[1m[34mwriteKDefn vfnmadd213ps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmadd213ps_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd213ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmadd231pd_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd231pd_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vfnmadd231pd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd231pd_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd231pd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd231pd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd231pd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd231pd_ymm_ymm_ymm.s[0m
Circuit: vfnmadd132pd %ymm3, %ymm1, %ymm2
%ymm1 -> 1
fma -> 1
%ymm2 -> 1
%ymm3 -> 1

Circuit: callq .move_256_128_ymm2_xmm10_xmm11
%xmm11 -> 1
%xmm10 -> 1
%ymm2 -> 1

Circuit: callq .move_128_256_xmm10_xmm11_ymm1
%xmm11 -> 1
%xmm10 -> 1
%ymm1 -> 1

Total Circuit
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1
YMM10 -> 1
YMM11 -> 1
 -> 1

Target
 -> 1
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove vfnmadd231pd_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd231pd_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd231pd_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmadd231pd_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vfnmadd231pd_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd231pd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 0, 64), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _608), 0, 64), 53, 11) ) ) ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 64, 128), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _608), 64, 128), 53, 11) ) ) ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 128, 192), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _608), 128, 192), 53, 11) ) ) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _608), 192, 256), 53, 11) ) ) ) , 64)))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 0, 64), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(MI608, 0, 64), 53, 11) ) ) ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 64, 128), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(MI608, 64, 128), 53, 11) ) ) ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 128, 192), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI608, 128, 192), 53, 11) ) ) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI606, 192, 256), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI608, 192, 256), 53, 11) ) ) ) , 64)))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 0, 64), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _608), 0, 64), 53, 11) ) ) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 64, 128), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _608), 64, 128), 53, 11) ) ) ) , 64)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 128, 192), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _608), 128, 192), 53, 11) ) ) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _608), 192, 256), 53, 11) ) ) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 0, 64), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(MI608, 0, 64), 53, 11) ) ) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI606, 64, 128), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(MI608, 64, 128), 53, 11) ) ) ) , 64)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 128, 192), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI608, 128, 192), 53, 11) ) ) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI606, 192, 256), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI608, 192, 256), 53, 11) ) ) ) , 64))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 128, 192), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _608), 128, 192), 53, 11) ) ) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _608), 192, 256), 53, 11) ) ) ) , 64))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 128, 192), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI608, 128, 192), 53, 11) ) ) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI606, 192, 256), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI608, 192, 256), 53, 11) ) ) ) , 64))) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 0, 64), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _608), 0, 64), 53, 11) ) ) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 64, 128), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _608), 64, 128), 53, 11) ) ) ) , 64))) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 0, 64), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(MI608, 0, 64), 53, 11) ) ) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI606, 64, 128), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(MI608, 64, 128), 53, 11) ) ) ) , 64))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _608)   )
echo Debug:  Result: "YMM3" |-> (MI608   )
[4m[1m[34mwriteKDefn vfnmadd231pd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmadd231pd_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd231pd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmadd231ps_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd231ps_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vfnmadd231ps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd231ps_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd231ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd231ps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd231ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd231ps_ymm_ymm_ymm.s[0m
Circuit: vfnmadd132ps %ymm3, %ymm1, %ymm2
%ymm1 -> 1
%ymm2 -> 1
fma -> 1
%ymm3 -> 1

Circuit: callq .move_256_128_ymm2_xmm12_xmm13
%xmm13 -> 1
%ymm2 -> 1
%xmm12 -> 1

Circuit: callq .move_128_256_xmm12_xmm13_ymm1
%xmm13 -> 1
%xmm12 -> 1
%ymm1 -> 1

Total Circuit
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1
 -> 1
YMM13 -> 1
YMM12 -> 1

Target
 -> 1
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1

[4m[1m[34mkprove vfnmadd231ps_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd231ps_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd231ps_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmadd231ps_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vfnmadd231ps_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd231ps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 128, 160), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 160, 192), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 192, 224), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 224, 256), 24, 8) ) ) ) , 32))))) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 128, 160), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 128, 160), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 160, 192), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 160, 192), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 192, 224), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 192, 224), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI606, 224, 256), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 224, 256), 24, 8) ) ) ) , 32))))) )
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 0, 32), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 0, 32), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 32, 64), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 32, 64), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 64, 96), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 64, 96), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 96, 128), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 96, 128), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 128, 160), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 160, 192), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 192, 224), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 224, 256), 24, 8) ) ) ) , 32)))))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 0, 32), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 0, 32), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 32, 64), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 32, 64), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 64, 96), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 64, 96), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 96, 128), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 96, 128), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 128, 160), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 128, 160), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 160, 192), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 160, 192), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 192, 224), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 192, 224), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI606, 224, 256), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 224, 256), 24, 8) ) ) ) , 32)))))))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 0, 32), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 0, 32), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 32, 64), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 32, 64), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 64, 96), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 64, 96), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 96, 128), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 96, 128), 24, 8) ) ) ) , 32)))), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 128, 160), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 160, 192), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 192, 224), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 224, 256), 24, 8) ) ) ) , 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 0, 32), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 0, 32), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 32, 64), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 32, 64), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 64, 96), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 64, 96), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI606, 96, 128), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 96, 128), 24, 8) ) ) ) , 32)))), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 128, 160), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 128, 160), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 160, 192), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 160, 192), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 192, 224), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 192, 224), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI606, 224, 256), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 224, 256), 24, 8) ) ) ) , 32))))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 0, 32), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 0, 32), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 32, 64), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 32, 64), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 64, 96), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 64, 96), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 96, 128), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 96, 128), 24, 8) ) ) ) , 32))))) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 0, 32), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 0, 32), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 32, 64), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 32, 64), 24, 8) ) ) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 64, 96), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 64, 96), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI606, 96, 128), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI607, 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 96, 128), 24, 8) ) ) ) , 32))))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _608)   )
echo Debug:  Result: "YMM3" |-> (MI608   )
[4m[1m[34mwriteKDefn vfnmadd231ps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmadd231ps_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd231ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmsub213pd_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub213pd_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vfnmsub213pd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub213pd_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub213pd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub213pd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub213pd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub213pd_ymm_ymm_ymm.s[0m
Circuit: vfnmsub132pd %ymm1, %ymm3, %ymm2
%ymm1 -> 1
%ymm2 -> 1
fma -> 1
%ymm3 -> 1

Circuit: vmaxpd %ymm2, %ymm2, %ymm1
%ymm1 -> 1
avx -> 1
%ymm2 -> 1

Total Circuit
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1
 -> 1

Target
 -> 1
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove vfnmsub213pd_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub213pd_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub213pd_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmsub213pd_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vfnmsub213pd_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub213pd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 0, 64), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 0, 64), 53, 11) ) , 64), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 64, 128), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 64, 128), 53, 11) ) , 64), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 128, 192), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 128, 192), 53, 11) ) , 64), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11) ) , 64)))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 0, 64), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI606, 0, 64), 53, 11) ) , 64), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 64, 128), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI606, 64, 128), 53, 11) ) , 64), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 128, 192), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI606, 128, 192), 53, 11) ) , 64), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI606, 192, 256), 53, 11) ) , 64)))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 0, 64), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 0, 64), 53, 11) ) , 64), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 64, 128), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 64, 128), 53, 11) ) , 64), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 128, 192), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 128, 192), 53, 11) ) , 64), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11) ) , 64)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 0, 64), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI606, 0, 64), 53, 11) ) , 64), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 64, 128), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI606, 64, 128), 53, 11) ) , 64), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 128, 192), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI606, 128, 192), 53, 11) ) , 64), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI606, 192, 256), 53, 11) ) , 64)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _606)   )
echo Debug:  Result: "YMM3" |-> (MI606   )
[4m[1m[34mwriteKDefn vfnmsub213pd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmsub213pd_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub213pd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmsub213ps_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub213ps_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vfnmsub213ps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub213ps_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub213ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub213ps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub213ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub213ps_ymm_ymm_ymm.s[0m
Circuit: vfnmsub132ps %ymm1, %ymm3, %ymm2
%ymm3 -> 1
%ymm1 -> 1
%ymm2 -> 1
fma -> 1

Circuit: vmaxps %ymm2, %ymm2, %ymm1
avx -> 1
%ymm1 -> 1
%ymm2 -> 1

Total Circuit
 -> 1
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1

Target
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vfnmsub213ps_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub213ps_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub213ps_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmsub213ps_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vfnmsub213ps_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub213ps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 0, 32), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 32, 64), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 32, 64), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 64, 96), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 64, 96), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 96, 128), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 96, 128), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 128, 160), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 160, 192), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 192, 224), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8) ) , 32)))))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 0, 32), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 32, 64), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 32, 64), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 64, 96), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 64, 96), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 96, 128), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 96, 128), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 128, 160), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 160, 192), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 192, 224), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 224, 256), 24, 8) ) , 32)))))))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 0, 32), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 32, 64), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 32, 64), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 64, 96), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 64, 96), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 96, 128), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 96, 128), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 128, 160), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 160, 192), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 192, 224), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8) ) , 32)))))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 0, 32), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 32, 64), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 32, 64), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 64, 96), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 64, 96), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 96, 128), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 96, 128), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 128, 160), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 160, 192), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 192, 224), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 224, 256), 24, 8) ) , 32)))))))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _606)   )
echo Debug:  Result: "YMM3" |-> (MI606   )
[4m[1m[34mwriteKDefn vfnmsub213ps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmsub213ps_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub213ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmsub231pd_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231pd_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vfnmsub231pd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub231pd_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231pd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub231pd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231pd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231pd_ymm_ymm_ymm.s[0m
Circuit: vfnmsub132pd %ymm3, %ymm1, %ymm2
%ymm2 -> 1
fma -> 1
%ymm1 -> 1
%ymm3 -> 1

Circuit: vmaxpd %ymm2, %ymm2, %ymm1
%ymm1 -> 1
avx -> 1
%ymm2 -> 1

Total Circuit
 -> 1
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1

Target
 -> 1
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vfnmsub231pd_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub231pd_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub231pd_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmsub231pd_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vfnmsub231pd_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub231pd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _606), 0, 64), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _604), 0, 64), 53, 11) ) , 64), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _606), 64, 128), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _604), 64, 128), 53, 11) ) , 64), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _606), 128, 192), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _604), 128, 192), 53, 11) ) , 64), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) ) , 64)))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(MI606, 0, 64), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI604, 0, 64), 53, 11) ) , 64), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(MI606, 64, 128), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI604, 64, 128), 53, 11) ) , 64), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI606, 128, 192), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI604, 128, 192), 53, 11) ) , 64), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI606, 192, 256), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) ) , 64)))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _606), 0, 64), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _604), 0, 64), 53, 11) ) , 64), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _606), 64, 128), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _604), 64, 128), 53, 11) ) , 64), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _606), 128, 192), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _604), 128, 192), 53, 11) ) , 64), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) ) , 64)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(MI606, 0, 64), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI604, 0, 64), 53, 11) ) , 64), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(MI606, 64, 128), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI604, 64, 128), 53, 11) ) , 64), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI606, 128, 192), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI604, 128, 192), 53, 11) ) , 64), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI606, 192, 256), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) ) , 64)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _606)   )
echo Debug:  Result: "YMM3" |-> (MI606   )
[4m[1m[34mwriteKDefn vfnmsub231pd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmsub231pd_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231pd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmsub231ps_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231ps_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vfnmsub231ps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub231ps_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub231ps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231ps_ymm_ymm_ymm.s[0m
Circuit: vfnmsub132ps %ymm3, %ymm1, %ymm2
%ymm3 -> 1
fma -> 1
%ymm2 -> 1
%ymm1 -> 1

Circuit: callq .move_256_128_ymm2_xmm12_xmm13
%ymm2 -> 1
%xmm12 -> 1
%xmm13 -> 1

Circuit: callq .move_128_256_xmm12_xmm13_ymm1
%xmm13 -> 1
%ymm1 -> 1
%xmm12 -> 1

Total Circuit
 -> 1
YMM13 -> 1
YMM12 -> 1
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1

Target
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1
 -> 1

[4m[1m[34mkprove vfnmsub231ps_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub231ps_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub231ps_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmsub231ps_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vfnmsub231ps_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub231ps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 128, 160), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 160, 192), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 192, 224), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 128, 160), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 160, 192), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 192, 224), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 0, 32), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 32, 64), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 32, 64), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 64, 96), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 64, 96), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 96, 128), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 96, 128), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 128, 160), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 160, 192), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 192, 224), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8) ) , 32)))))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 0, 32), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 32, 64), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 32, 64), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 64, 96), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 64, 96), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 96, 128), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 96, 128), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 128, 160), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 160, 192), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 192, 224), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 224, 256), 24, 8) ) , 32)))))))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 0, 32), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 32, 64), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 32, 64), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 64, 96), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 64, 96), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 96, 128), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 96, 128), 24, 8) ) , 32)))), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 128, 160), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 160, 192), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 192, 224), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 0, 32), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 32, 64), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 32, 64), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 64, 96), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 64, 96), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 96, 128), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 96, 128), 24, 8) ) , 32)))), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 128, 160), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 160, 192), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 192, 224), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 0, 32), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 32, 64), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 32, 64), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 64, 96), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 64, 96), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _607), 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _608), 96, 128), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _606), 96, 128), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 0, 32), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 0, 32), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 32, 64), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 32, 64), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 32, 64), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 64, 96), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 64, 96), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 64, 96), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI607, 96, 128), 24, 8)  *Float  MInt2Float(extractMInt(MI608, 96, 128), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI606, 96, 128), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _608)   )
echo Debug:  Result: "YMM3" |-> (MI608   )
[4m[1m[34mwriteKDefn vfnmsub231ps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmsub231ps_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231ps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovapd_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovapd_xmm_xmm.s[0m
[4m[1m[34mcreatespec vmovapd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovapd_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovapd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovapd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovapd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovapd_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm2_r8_r9
%r9 -> 1
%r8 -> 1
%xmm2 -> 1

Circuit: vzeroall
%ymm6 -> 1
%ymm1 -> 1
%ymm10 -> 1
%ymm8 -> 1
%ymm7 -> 1
%ymm13 -> 1
avx -> 1
%ymm14 -> 1
%ymm4 -> 1
%ymm12 -> 1
%ymm5 -> 1
%ymm2 -> 1
%ymm0 -> 1
%ymm3 -> 1
%ymm11 -> 1
%ymm9 -> 1
%ymm15 -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%r9 -> 1
%r8 -> 1
%xmm1 -> 1

Total Circuit
YMM10 -> 1
YMM11 -> 1
R8 -> 1
YMM2 -> 1
YMM3 -> 1
YMM15 -> 1
YMM4 -> 1
YMM5 -> 1
YMM1 -> 1
R9 -> 1
YMM12 -> 1
YMM8 -> 1
YMM9 -> 1
YMM6 -> 1
YMM13 -> 1
 -> 1
YMM14 -> 1
YMM0 -> 1
YMM7 -> 1

Target
YMM2 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove vmovapd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovapd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovapd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovapd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vmovapd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovapd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _619), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI619, 192, 256) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _619), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI619, 128, 192) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _619), 128, 256)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), extractMInt(MI619, 128, 256)) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vmovapd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovapd_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovapd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovaps_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovaps_xmm_xmm.s[0m
[4m[1m[34mcreatespec vmovaps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovaps_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovaps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovaps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovaps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovaps_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm2_r12_r13
%r12 -> 1
%xmm2 -> 1
%r13 -> 1

Circuit: vzeroall
%ymm6 -> 1
%ymm1 -> 1
%ymm10 -> 1
%ymm7 -> 1
%ymm8 -> 1
%ymm13 -> 1
avx -> 1
%ymm14 -> 1
%ymm4 -> 1
%ymm12 -> 1
%ymm5 -> 1
%ymm2 -> 1
%ymm0 -> 1
%ymm3 -> 1
%ymm11 -> 1
%ymm9 -> 1
%ymm15 -> 1

Circuit: callq .move_064_128_r12_r13_xmm1
%r12 -> 1
%xmm1 -> 1
%r13 -> 1

Total Circuit
YMM10 -> 1
YMM11 -> 1
YMM3 -> 1
YMM15 -> 1
YMM2 -> 1
R13 -> 1
YMM5 -> 1
YMM4 -> 1
YMM1 -> 1
YMM12 -> 1
R12 -> 1
YMM9 -> 1
YMM6 -> 1
YMM8 -> 1
 -> 1
YMM13 -> 1
YMM7 -> 1
YMM0 -> 1
YMM14 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vmovaps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovaps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovaps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovaps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vmovaps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovaps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _619), 128, 256)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), extractMInt(MI619, 128, 256)) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "R12" |-> (extractMInt(mi(256, _619), 192, 256) )
echo Debug:  Result: "R12" |-> (extractMInt(MI619, 192, 256) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "R13" |-> (extractMInt(mi(256, _619), 128, 192) )
echo Debug:  Result: "R13" |-> (extractMInt(MI619, 128, 192) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vmovaps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovaps_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovaps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovdqa_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovdqa_xmm_xmm.s[0m
[4m[1m[34mcreatespec vmovdqa_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovdqa_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovdqa_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovdqa_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovdqa_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovdqa_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm2_r12_r13
%r12 -> 1
%xmm2 -> 1
%r13 -> 1

Circuit: vzeroall
%ymm6 -> 1
%ymm1 -> 1
%ymm10 -> 1
%ymm7 -> 1
%ymm8 -> 1
avx -> 1
%ymm13 -> 1
%ymm14 -> 1
%ymm4 -> 1
%ymm12 -> 1
%ymm5 -> 1
%ymm2 -> 1
%ymm0 -> 1
%ymm3 -> 1
%ymm11 -> 1
%ymm9 -> 1
%ymm15 -> 1

Circuit: callq .move_064_128_r12_r13_xmm1
%xmm1 -> 1
%r13 -> 1
%r12 -> 1

Total Circuit
YMM13 -> 1
 -> 1
YMM0 -> 1
YMM14 -> 1
YMM7 -> 1
R12 -> 1
YMM12 -> 1
YMM8 -> 1
YMM9 -> 1
YMM6 -> 1
YMM4 -> 1
R13 -> 1
YMM5 -> 1
YMM1 -> 1
YMM10 -> 1
YMM11 -> 1
YMM2 -> 1
YMM3 -> 1
YMM15 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove vmovdqa_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovdqa_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovdqa_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovdqa_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vmovdqa_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovdqa_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _619), 128, 256)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), extractMInt(MI619, 128, 256)) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "R12" |-> (extractMInt(mi(256, _619), 192, 256) )
echo Debug:  Result: "R12" |-> (extractMInt(MI619, 192, 256) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "R13" |-> (extractMInt(mi(256, _619), 128, 192) )
echo Debug:  Result: "R13" |-> (extractMInt(MI619, 128, 192) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vmovdqa_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovdqa_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovdqa_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovdqa_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovdqa_ymm_ymm.s[0m
[4m[1m[34mcreatespec vmovdqa_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovdqa_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovdqa_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovdqa_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovdqa_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovdqa_ymm_ymm.s[0m
Circuit: vminpd %ymm2, %ymm2, %ymm1
avx -> 1
%ymm1 -> 1
%ymm2 -> 1

Total Circuit
 -> 1
YMM1 -> 1
YMM2 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove vmovdqa_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovdqa_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovdqa_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovdqa_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vmovdqa_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovdqa_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _603) )
echo Debug:  Result: "YMM2" |-> (MI603 )
echo Debug:  PreResult: "YMM1" |-> (mi(256, _603)   )
echo Debug:  Result: "YMM1" |-> (MI603   )
[4m[1m[34mwriteKDefn vmovdqa_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovdqa_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovdqa_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovdqu_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovdqu_xmm_xmm.s[0m
[4m[1m[34mcreatespec vmovdqu_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovdqu_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovdqu_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovdqu_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovdqu_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovdqu_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm2_r10_r11
%r11 -> 1
%xmm2 -> 1
%r10 -> 1

Circuit: vzeroall
%ymm12 -> 1
%ymm5 -> 1
%ymm4 -> 1
%ymm2 -> 1
%ymm6 -> 1
%ymm1 -> 1
%ymm13 -> 1
avx -> 1
%ymm14 -> 1
%ymm10 -> 1
%ymm8 -> 1
%ymm7 -> 1
%ymm9 -> 1
%ymm11 -> 1
%ymm15 -> 1
%ymm0 -> 1
%ymm3 -> 1

Circuit: callq .move_064_128_r10_r11_xmm3
%r11 -> 1
%xmm3 -> 1
%r10 -> 1

Circuit: callq .move_256_128_ymm3_xmm12_xmm13
%ymm3 -> 1
%xmm13 -> 1
%xmm12 -> 1

Circuit: callq .move_128_256_xmm12_xmm13_ymm1
%xmm13 -> 1
%xmm12 -> 1
%ymm1 -> 1

Total Circuit
YMM2 -> 1
YMM3 -> 1
YMM15 -> 1
YMM11 -> 1
YMM10 -> 1
YMM1 -> 1
YMM4 -> 1
YMM5 -> 1
R11 -> 1
R10 -> 1
YMM8 -> 1
YMM6 -> 1
YMM9 -> 1
YMM12 -> 1
YMM14 -> 1
YMM0 -> 1
YMM7 -> 1
YMM13 -> 1
 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove vmovdqu_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovdqu_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovdqu_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovdqu_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vmovdqu_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovdqu_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _619), 128, 256)) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(128, 0), extractMInt(MI619, 128, 256)) )
echo Debug:  PreResult: "R10" |-> (extractMInt(mi(256, _619), 192, 256) )
echo Debug:  Result: "R10" |-> (extractMInt(MI619, 192, 256) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _619), 128, 256)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), extractMInt(MI619, 128, 256)) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _619), 128, 256)) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(MI619, 128, 256)) )
echo Debug:  PreResult: "R11" |-> (extractMInt(mi(256, _619), 128, 192) )
echo Debug:  Result: "R11" |-> (extractMInt(MI619, 128, 192) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vmovdqu_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovdqu_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovdqu_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovdqu_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovdqu_ymm_ymm.s[0m
[4m[1m[34mcreatespec vmovdqu_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovdqu_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovdqu_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovdqu_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovdqu_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovdqu_ymm_ymm.s[0m
Circuit: vmaxps %ymm2, %ymm2, %ymm10
avx -> 1
%ymm10 -> 1
%ymm2 -> 1

Circuit: vmaxpd %ymm10, %ymm2, %ymm1
%ymm2 -> 1
%ymm1 -> 1
avx -> 1
%ymm10 -> 1

Total Circuit
YMM10 -> 1
YMM2 -> 1
YMM1 -> 1
 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vmovdqu_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovdqu_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovdqu_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovdqu_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vmovdqu_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovdqu_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _604) )
echo Debug:  Result: "YMM2" |-> (MI604 )
echo Debug:  PreResult: "YMM1" |-> (mi(256, _604) )
echo Debug:  Result: "YMM1" |-> (MI604 )
echo Debug:  PreResult: "YMM10" |-> (mi(256, _604)   )
echo Debug:  Result: "YMM10" |-> (MI604   )
[4m[1m[34mwriteKDefn vmovdqu_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovdqu_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovdqu_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovhlps_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovhlps_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vmovhlps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovhlps_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovhlps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovhlps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovhlps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovhlps_xmm_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm3_r10_r11
%r11 -> 1
%r10 -> 1
%xmm3 -> 1

Circuit: callq .move_128_064_xmm2_r12_r13
%r12 -> 1
%xmm2 -> 1
%r13 -> 1

Circuit: vzeroall
%ymm15 -> 1
%ymm9 -> 1
%ymm11 -> 1
%ymm3 -> 1
%ymm0 -> 1
%ymm2 -> 1
%ymm5 -> 1
%ymm12 -> 1
%ymm4 -> 1
%ymm14 -> 1
%ymm13 -> 1
avx -> 1
%ymm7 -> 1
%ymm8 -> 1
%ymm10 -> 1
%ymm6 -> 1
%ymm1 -> 1

Circuit: movq %r11, %r12
%r11 -> 1
%r12 -> 1

Circuit: callq .move_064_128_r12_r13_xmm1
%xmm1 -> 1
%r13 -> 1
%r12 -> 1

Total Circuit
YMM4 -> 1
R13 -> 1
R11 -> 1
R10 -> 1
YMM5 -> 1
YMM1 -> 1
YMM11 -> 1
YMM10 -> 1
YMM2 -> 1
YMM3 -> 1
YMM15 -> 1
YMM13 -> 1
 -> 1
YMM0 -> 1
YMM14 -> 1
YMM7 -> 1
R12 -> 1
YMM12 -> 1
YMM8 -> 1
YMM6 -> 1
YMM9 -> 1

Target
 -> 1
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1

[4m[1m[34mkprove vmovhlps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovhlps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovhlps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovhlps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vmovhlps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovhlps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "R10" |-> (extractMInt(mi(256, _623), 192, 256) )
echo Debug:  Result: "R10" |-> (extractMInt(MI623, 192, 256) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _622), 128, 192), extractMInt(mi(256, _623), 128, 192))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI622, 128, 192), extractMInt(MI623, 128, 192))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "R12" |-> (extractMInt(mi(256, _623), 128, 192) )
echo Debug:  Result: "R12" |-> (extractMInt(MI623, 128, 192) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "R11" |-> (extractMInt(mi(256, _623), 128, 192) )
echo Debug:  Result: "R11" |-> (extractMInt(MI623, 128, 192) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "R13" |-> (extractMInt(mi(256, _622), 128, 192) )
echo Debug:  Result: "R13" |-> (extractMInt(MI622, 128, 192) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vmovhlps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovhlps_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovhlps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovq_r64_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovq_r64_xmm.s[0m
[4m[1m[34mcreatespec vmovq_r64_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovq_r64_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovq_r64_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovq_r64_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovq_r64_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovq_r64_xmm.s[0m
Circuit: callq .move_128_032_xmm1_r10d_r11d_r12d_r13d
%r12d -> 1
%r13d -> 1
%r10d -> 1
%xmm1 -> 1
%r11d -> 1

Circuit: callq .move_032_064_r10d_r11d_rbx
%r11d -> 1
%r10d -> 1
%rbx -> 1

Total Circuit
R11 -> 1
R13 -> 1
R10 -> 1
YMM1 -> 1
RBX -> 1
R12 -> 1

Target
YMM1 -> 1
 -> 1
RBX -> 1

[4m[1m[34mkprove vmovq_r64_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovq_r64_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovq_r64_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovq_r64_xmm[0m
[4m[1m[34msanitizeSpecOutput vmovq_r64_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovq_r64_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R10" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _607), 224, 256)) )
echo Debug:  Result: "R10" |-> (concatenateMInt(mi(32, 0), extractMInt(MI607, 224, 256)) )
echo Debug:  PreResult: "YMM1" |-> (mi(256, _607) )
echo Debug:  Result: "YMM1" |-> (MI607 )
echo Debug:  PreResult: "R12" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _607), 160, 192)) )
echo Debug:  Result: "R12" |-> (concatenateMInt(mi(32, 0), extractMInt(MI607, 160, 192)) )
echo Debug:  PreResult: "R11" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _607), 192, 224)) )
echo Debug:  Result: "R11" |-> (concatenateMInt(mi(32, 0), extractMInt(MI607, 192, 224)) )
echo Debug:  PreResult: "R13" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _607), 128, 160)) )
echo Debug:  Result: "R13" |-> (concatenateMInt(mi(32, 0), extractMInt(MI607, 128, 160)) )
echo Debug:  PreResult: "RBX" |-> (extractMInt(mi(256, _607), 192, 256)   )
echo Debug:  Result: "RBX" |-> (extractMInt(MI607, 192, 256)   )
[4m[1m[34mwriteKDefn vmovq_r64_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovq_r64_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovq_r64_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovq_xmm_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovq_xmm_r64.s[0m
[4m[1m[34mcreatespec vmovq_xmm_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovq_xmm_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovq_xmm_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovq_xmm_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovq_xmm_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovq_xmm_r64.s[0m
Circuit: vzeroall
%ymm3 -> 1
%ymm0 -> 1
%ymm15 -> 1
%ymm11 -> 1
%ymm9 -> 1
%ymm7 -> 1
%ymm8 -> 1
%ymm10 -> 1
%ymm14 -> 1
avx -> 1
%ymm13 -> 1
%ymm6 -> 1
%ymm1 -> 1
%ymm2 -> 1
%ymm4 -> 1
%ymm12 -> 1
%ymm5 -> 1

Circuit: callq .move_128_064_xmm1_r8_r9
%r8 -> 1
%r9 -> 1
%xmm1 -> 1

Circuit: xorq %rbx, %r8
%zf -> 1
%of -> 1
%sf -> 1
%r8 -> 1
%af -> 1
%pf -> 1
%cf -> 1
%rbx -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%xmm1 -> 1
%r8 -> 1
%r9 -> 1

Total Circuit
R9 -> 1
YMM1 -> 1
SF -> 1
CF -> 1
YMM5 -> 1
YMM4 -> 1
OF -> 1
YMM3 -> 1
YMM15 -> 1
YMM2 -> 1
PF -> 1
R8 -> 1
YMM11 -> 1
YMM10 -> 1
YMM7 -> 1
YMM14 -> 1
RBX -> 1
YMM0 -> 1
 -> 1
YMM13 -> 1
YMM6 -> 1
YMM9 -> 1
YMM8 -> 1
ZF -> 1
AF -> 1
YMM12 -> 1

Target
 -> 1
RBX -> 1
YMM1 -> 1

[4m[1m[34mkprove vmovq_xmm_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovq_xmm_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovq_xmm_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovq_xmm_r64[0m
[4m[1m[34msanitizeSpecOutput vmovq_xmm_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovq_xmm_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(64, _625), 0, 1), mi(1, 0)) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(MI625, 0, 1), mi(1, 0)) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "R8" |-> (xorMInt(mi(64, _625), mi(64, 0)) )
echo Debug:  Result: "R8" |-> (xorMInt(MI625, mi(64, 0)) )
echo Debug:  PreResult: "R9" |-> (mi(64, 0) )
echo Debug:  Result: "R9" |-> (mi(64, 0) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _625) )
echo Debug:  Result: "RBX" |-> (MI625 )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(mi(64, _625), mi(64, 0)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(MI625, mi(64, 0)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(192, 0), xorMInt(mi(64, _625), mi(64, 0))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(192, 0), xorMInt(MI625, mi(64, 0))) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, _625), 56, 64), mi(8, 0)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI625, 56, 64), mi(8, 0)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vmovq_xmm_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovq_xmm_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovq_xmm_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovupd_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovupd_xmm_xmm.s[0m
[4m[1m[34mcreatespec vmovupd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovupd_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovupd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovupd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovupd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovupd_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm2_r8_r9
%xmm2 -> 1
%r9 -> 1
%r8 -> 1

Circuit: vzeroall
%ymm15 -> 1
%ymm9 -> 1
%ymm11 -> 1
%ymm3 -> 1
%ymm0 -> 1
%ymm2 -> 1
%ymm12 -> 1
%ymm5 -> 1
%ymm4 -> 1
%ymm14 -> 1
avx -> 1
%ymm13 -> 1
%ymm8 -> 1
%ymm7 -> 1
%ymm10 -> 1
%ymm1 -> 1
%ymm6 -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%r8 -> 1
%r9 -> 1
%xmm1 -> 1

Total Circuit
YMM2 -> 1
YMM15 -> 1
YMM3 -> 1
YMM11 -> 1
YMM10 -> 1
R8 -> 1
YMM1 -> 1
R9 -> 1
YMM4 -> 1
YMM5 -> 1
YMM8 -> 1
YMM6 -> 1
YMM9 -> 1
YMM12 -> 1
YMM14 -> 1
YMM0 -> 1
YMM7 -> 1
YMM13 -> 1
 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vmovupd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovupd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovupd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovupd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vmovupd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovupd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _619), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI619, 192, 256) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _619), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI619, 128, 192) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _619), 128, 256)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), extractMInt(MI619, 128, 256)) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vmovupd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovupd_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovupd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovupd_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovupd_ymm_ymm.s[0m
[4m[1m[34mcreatespec vmovupd_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovupd_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovupd_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovupd_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovupd_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovupd_ymm_ymm.s[0m
Circuit: callq .move_128_064_xmm2_r12_r13
%r12 -> 1
%xmm2 -> 1
%r13 -> 1

Circuit: vminps %ymm2, %ymm2, %ymm1
%ymm2 -> 1
%ymm1 -> 1
avx -> 1

Circuit: callq .move_064_128_r12_r13_xmm1
%r13 -> 1
%xmm1 -> 1
%r12 -> 1

Total Circuit
YMM2 -> 1
R13 -> 1
YMM1 -> 1
R12 -> 1
 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove vmovupd_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovupd_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovupd_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovupd_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vmovupd_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovupd_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _605) )
echo Debug:  Result: "YMM2" |-> (MI605 )
echo Debug:  PreResult: "YMM1" |-> (mi(256, _605) )
echo Debug:  Result: "YMM1" |-> (MI605 )
echo Debug:  PreResult: "R12" |-> (extractMInt(mi(256, _605), 192, 256) )
echo Debug:  Result: "R12" |-> (extractMInt(MI605, 192, 256) )
echo Debug:  PreResult: "R13" |-> (extractMInt(mi(256, _605), 128, 192)   )
echo Debug:  Result: "R13" |-> (extractMInt(MI605, 128, 192)   )
[4m[1m[34mwriteKDefn vmovupd_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovupd_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovupd_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovups_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovups_xmm_xmm.s[0m
[4m[1m[34mcreatespec vmovups_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovups_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovups_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovups_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovups_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovups_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm2_r8_r9
%xmm2 -> 1
%r9 -> 1
%r8 -> 1

Circuit: vzeroall
%ymm15 -> 1
%ymm11 -> 1
%ymm9 -> 1
%ymm3 -> 1
%ymm0 -> 1
%ymm2 -> 1
%ymm4 -> 1
%ymm5 -> 1
%ymm12 -> 1
%ymm7 -> 1
%ymm8 -> 1
%ymm10 -> 1
%ymm14 -> 1
avx -> 1
%ymm13 -> 1
%ymm1 -> 1
%ymm6 -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%xmm1 -> 1
%r8 -> 1
%r9 -> 1

Total Circuit
YMM14 -> 1
YMM0 -> 1
YMM7 -> 1
YMM13 -> 1
 -> 1
YMM8 -> 1
YMM6 -> 1
YMM9 -> 1
YMM12 -> 1
YMM1 -> 1
R9 -> 1
YMM4 -> 1
YMM5 -> 1
YMM2 -> 1
YMM3 -> 1
YMM15 -> 1
YMM11 -> 1
YMM10 -> 1
R8 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove vmovups_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovups_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovups_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovups_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vmovups_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovups_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _619), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI619, 192, 256) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _619), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI619, 128, 192) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _619), 128, 256)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), extractMInt(MI619, 128, 256)) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vmovups_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovups_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovups_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmulps_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmulps_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vmulps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmulps_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmulps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmulps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmulps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmulps_xmm_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm3_r10_r11
%xmm3 -> 1
%r10 -> 1
%r11 -> 1

Circuit: callq .move_128_064_xmm2_r8_r9
%xmm2 -> 1
%r8 -> 1
%r9 -> 1

Circuit: vzeroall
%ymm0 -> 1
%ymm3 -> 1
%ymm11 -> 1
%ymm9 -> 1
%ymm15 -> 1
%ymm6 -> 1
%ymm1 -> 1
%ymm7 -> 1
%ymm8 -> 1
%ymm10 -> 1
%ymm14 -> 1
%ymm13 -> 1
avx -> 1
%ymm4 -> 1
%ymm12 -> 1
%ymm5 -> 1
%ymm2 -> 1

Circuit: callq .move_064_128_r10_r11_xmm1
%r10 -> 1
%xmm1 -> 1
%r11 -> 1

Circuit: callq .move_064_128_r8_r9_xmm2
%xmm2 -> 1
%r8 -> 1
%r9 -> 1

Circuit: vmulps %ymm1, %ymm2, %ymm1
%ymm2 -> 1
%ymm1 -> 1
avx -> 1

Total Circuit
YMM4 -> 1
YMM5 -> 1
R10 -> 1
R11 -> 1
YMM1 -> 1
R9 -> 1
YMM10 -> 1
YMM11 -> 1
R8 -> 1
YMM2 -> 1
YMM15 -> 1
YMM3 -> 1
YMM13 -> 1
 -> 1
YMM14 -> 1
YMM0 -> 1
YMM7 -> 1
YMM12 -> 1
YMM8 -> 1
YMM9 -> 1
YMM6 -> 1

Target
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove vmulps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmulps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmulps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmulps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vmulps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmulps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _622), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI622, 192, 256) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _622), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI622, 128, 192) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _622), 128, 256)) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), extractMInt(MI622, 128, 256)) )
echo Debug:  PreResult: "R10" |-> (extractMInt(mi(256, _623), 192, 256) )
echo Debug:  Result: "R10" |-> (extractMInt(MI623, 192, 256) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _623), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _622), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _623), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _622), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _623), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _622), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _623), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _622), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI623, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI622, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI623, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI622, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI623, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI622, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI623, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI622, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "R11" |-> (extractMInt(mi(256, _623), 128, 192) )
echo Debug:  Result: "R11" |-> (extractMInt(MI623, 128, 192) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vmulps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmulps_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmulps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vorpd_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vorpd_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vorpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vorpd_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vorpd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvorpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vorpd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vorpd_xmm_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm3_r10_r11
%r10 -> 1
%xmm3 -> 1
%r11 -> 1

Circuit: callq .move_128_064_xmm2_r8_r9
%xmm2 -> 1
%r9 -> 1
%r8 -> 1

Circuit: vzeroall
%ymm4 -> 1
%ymm12 -> 1
%ymm5 -> 1
%ymm2 -> 1
%ymm1 -> 1
%ymm6 -> 1
%ymm8 -> 1
%ymm7 -> 1
%ymm10 -> 1
%ymm14 -> 1
avx -> 1
%ymm13 -> 1
%ymm11 -> 1
%ymm9 -> 1
%ymm15 -> 1
%ymm0 -> 1
%ymm3 -> 1

Circuit: orq %r9, %r11
%zf -> 1
%cf -> 1
%pf -> 1
%r9 -> 1
%af -> 1
%sf -> 1
%of -> 1
%r11 -> 1

Circuit: orq %r8, %r10
%zf -> 1
%r10 -> 1
%af -> 1
%r8 -> 1
%sf -> 1
%of -> 1
%cf -> 1
%pf -> 1

Circuit: callq .move_064_128_r10_r11_xmm1
%r10 -> 1
%r11 -> 1
%xmm1 -> 1

Total Circuit
R8 -> 1
YMM10 -> 1
YMM11 -> 1
YMM15 -> 1
YMM3 -> 1
PF -> 1
YMM2 -> 1
R11 -> 1
R10 -> 1
YMM5 -> 1
OF -> 1
YMM4 -> 1
R9 -> 1
CF -> 1
SF -> 1
YMM1 -> 1
AF -> 1
YMM12 -> 1
ZF -> 1
YMM9 -> 1
YMM6 -> 1
YMM8 -> 1
 -> 1
YMM13 -> 1
YMM7 -> 1
YMM0 -> 1
YMM14 -> 1

Target
 -> 1
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vorpd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vorpd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vorpd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vorpd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vorpd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvorpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "SF" |-> (orMInt(extractMInt(mi(256, _628), 192, 193), extractMInt(mi(256, _629), 192, 193)) )
echo Debug:  Result: "SF" |-> (orMInt(extractMInt(MI628, 192, 193), extractMInt(MI629, 192, 193)) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _628), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI628, 192, 256) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _628), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI628, 128, 192) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(orMInt(extractMInt(mi(256, _628), 192, 256), extractMInt(mi(256, _629), 192, 256)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(orMInt(extractMInt(MI628, 192, 256), extractMInt(MI629, 192, 256)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R10" |-> (orMInt(extractMInt(mi(256, _628), 192, 256), extractMInt(mi(256, _629), 192, 256)) )
echo Debug:  Result: "R10" |-> (orMInt(extractMInt(MI628, 192, 256), extractMInt(MI629, 192, 256)) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(orMInt(extractMInt(mi(256, _628), 128, 192), extractMInt(mi(256, _629), 128, 192)), orMInt(extractMInt(mi(256, _628), 192, 256), extractMInt(mi(256, _629), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(orMInt(extractMInt(MI628, 128, 192), extractMInt(MI629, 128, 192)), orMInt(extractMInt(MI628, 192, 256), extractMInt(MI629, 192, 256)))) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "R11" |-> (orMInt(extractMInt(mi(256, _628), 128, 192), extractMInt(mi(256, _629), 128, 192)) )
echo Debug:  Result: "R11" |-> (orMInt(extractMInt(MI628, 128, 192), extractMInt(MI629, 128, 192)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(orMInt(extractMInt(mi(256, _628), 248, 256), extractMInt(mi(256, _629), 248, 256)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(orMInt(extractMInt(MI628, 248, 256), extractMInt(MI629, 248, 256)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vorpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vorpd_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vorpd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpbroadcastq_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpbroadcastq_xmm_xmm.s[0m
[4m[1m[34mcreatespec vpbroadcastq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastq_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpbroadcastq_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpbroadcastq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpbroadcastq_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpbroadcastq_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm2_r10_r11
%r10 -> 1
%xmm2 -> 1
%r11 -> 1

Circuit: vzeroall
%ymm10 -> 1
%ymm8 -> 1
%ymm7 -> 1
avx -> 1
%ymm13 -> 1
%ymm14 -> 1
%ymm1 -> 1
%ymm6 -> 1
%ymm2 -> 1
%ymm4 -> 1
%ymm12 -> 1
%ymm5 -> 1
%ymm3 -> 1
%ymm0 -> 1
%ymm15 -> 1
%ymm11 -> 1
%ymm9 -> 1

Circuit: movq %r10, %r11
%r11 -> 1
%r10 -> 1

Circuit: callq .move_064_128_r10_r11_xmm1
%r10 -> 1
%xmm1 -> 1
%r11 -> 1

Total Circuit
 -> 1
YMM13 -> 1
YMM7 -> 1
YMM14 -> 1
YMM0 -> 1
YMM12 -> 1
YMM9 -> 1
YMM6 -> 1
YMM8 -> 1
YMM5 -> 1
R11 -> 1
R10 -> 1
YMM4 -> 1
YMM1 -> 1
YMM11 -> 1
YMM10 -> 1
YMM15 -> 1
YMM3 -> 1
YMM2 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove vpbroadcastq_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastq_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastq_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpbroadcastq_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpbroadcastq_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpbroadcastq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "R10" |-> (extractMInt(mi(256, _619), 192, 256) )
echo Debug:  Result: "R10" |-> (extractMInt(MI619, 192, 256) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _619), 192, 256), extractMInt(mi(256, _619), 192, 256))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI619, 192, 256), extractMInt(MI619, 192, 256))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "R11" |-> (extractMInt(mi(256, _619), 192, 256) )
echo Debug:  Result: "R11" |-> (extractMInt(MI619, 192, 256) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vpbroadcastq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpbroadcastq_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpbroadcastq_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpmovsxdq_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovsxdq_xmm_xmm.s[0m
[4m[1m[34mcreatespec vpmovsxdq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovsxdq_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovsxdq_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpmovsxdq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovsxdq_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovsxdq_xmm_xmm.s[0m
Circuit: callq .move_128_032_xmm2_eax_edx_r8d_r9d
%eax -> 1
%xmm2 -> 1
%edx -> 1
%r9d -> 1
%r8d -> 1

Circuit: movslq %edx, %r11
%r11 -> 1
%edx -> 1

Circuit: vzeroall
%ymm8 -> 1
%ymm7 -> 1
%ymm10 -> 1
%ymm14 -> 1
avx -> 1
%ymm13 -> 1
%ymm6 -> 1
%ymm1 -> 1
%ymm2 -> 1
%ymm4 -> 1
%ymm5 -> 1
%ymm12 -> 1
%ymm3 -> 1
%ymm0 -> 1
%ymm15 -> 1
%ymm11 -> 1
%ymm9 -> 1

Circuit: movslq %eax, %r10
%r10 -> 1
%eax -> 1

Circuit: callq .move_064_128_r10_r11_xmm1
%xmm1 -> 1
%r11 -> 1
%r10 -> 1

Total Circuit
R9 -> 1
YMM1 -> 1
YMM5 -> 1
R10 -> 1
R11 -> 1
YMM4 -> 1
YMM15 -> 1
YMM3 -> 1
YMM2 -> 1
R8 -> 1
YMM11 -> 1
YMM10 -> 1
YMM7 -> 1
YMM14 -> 1
YMM0 -> 1
 -> 1
YMM13 -> 1
RDX -> 1
YMM6 -> 1
YMM9 -> 1
YMM8 -> 1
RAX -> 1
YMM12 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vpmovsxdq_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovsxdq_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovsxdq_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpmovsxdq_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpmovsxdq_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpmovsxdq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _623), 160, 192)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(MI623, 160, 192)) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _623), 128, 160)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(32, 0), extractMInt(MI623, 128, 160)) )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _623), 192, 224)) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI623, 192, 224)) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _623), 224, 256)) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI623, 224, 256)) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "R10" |-> (mi(64, svalueMInt(extractMInt(mi(256, _623), 224, 256))) )
echo Debug:  Result: "R10" |-> (mi(64, svalueMInt(extractMInt(MI623, 224, 256))) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(mi(64, svalueMInt(extractMInt(mi(256, _623), 192, 224))), mi(64, svalueMInt(extractMInt(mi(256, _623), 224, 256))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(mi(64, svalueMInt(extractMInt(MI623, 192, 224))), mi(64, svalueMInt(extractMInt(MI623, 224, 256))))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "R11" |-> (mi(64, svalueMInt(extractMInt(mi(256, _623), 192, 224))) )
echo Debug:  Result: "R11" |-> (mi(64, svalueMInt(extractMInt(MI623, 192, 224))) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vpmovsxdq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpmovsxdq_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovsxdq_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpmovzxdq_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovzxdq_xmm_xmm.s[0m
[4m[1m[34mcreatespec vpmovzxdq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovzxdq_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovzxdq_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpmovzxdq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovzxdq_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovzxdq_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm2_r8_r9
%r8 -> 1
%r9 -> 1
%xmm2 -> 1

Circuit: vzeroall
%ymm3 -> 1
%ymm0 -> 1
%ymm15 -> 1
%ymm9 -> 1
%ymm11 -> 1
%ymm14 -> 1
%ymm13 -> 1
avx -> 1
%ymm8 -> 1
%ymm7 -> 1
%ymm10 -> 1
%ymm6 -> 1
%ymm1 -> 1
%ymm2 -> 1
%ymm12 -> 1
%ymm5 -> 1
%ymm4 -> 1

Circuit: callq .move_byte_5_of_ymm1_to_r9b
%ymm1 -> 1
%r9b -> 1

Circuit: callq .move_064_128_r8_r9_xmm2
%r8 -> 1
%r9 -> 1
%xmm2 -> 1

Circuit: callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
%xmm2 -> 1
%xmm8 -> 1
%xmm11 -> 1
%xmm10 -> 1
%xmm9 -> 1

Circuit: callq .move_64_128_xmm8_xmm9_xmm1
%xmm9 -> 1
%xmm8 -> 1
%xmm1 -> 1

Total Circuit
YMM12 -> 1
YMM8 -> 1
YMM9 -> 1
YMM6 -> 1
YMM13 -> 1
 -> 1
YMM0 -> 1
YMM14 -> 1
YMM7 -> 1
YMM11 -> 1
YMM10 -> 1
R8 -> 1
YMM2 -> 1
YMM15 -> 1
YMM3 -> 1
YMM4 -> 1
YMM5 -> 1
YMM1 -> 1
R9 -> 1

Target
YMM2 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove vpmovzxdq_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovzxdq_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovzxdq_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpmovzxdq_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpmovzxdq_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpmovzxdq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _619), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI619, 192, 256) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(extractMInt(mi(256, _619), 128, 184), mi(8, 0)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(extractMInt(MI619, 128, 184), mi(8, 0)) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 192, 224)) )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 192, 224)) )
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _619), 128, 184), mi(8, 0)), extractMInt(mi(256, _619), 192, 256))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI619, 128, 184), mi(8, 0)), extractMInt(MI619, 192, 256))) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _619), 192, 224)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _619), 224, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(MI619, 192, 224)), concatenateMInt(mi(32, 0), extractMInt(MI619, 224, 256)))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(224, 0), concatenateMInt(extractMInt(mi(256, _619), 160, 184), mi(8, 0))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(224, 0), concatenateMInt(extractMInt(MI619, 160, 184), mi(8, 0))) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 128, 160)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 128, 160)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 224, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 224, 256)) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vpmovzxdq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpmovzxdq_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovzxdq_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpmovzxwq_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovzxwq_xmm_xmm.s[0m
[4m[1m[34mcreatespec vpmovzxwq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovzxwq_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovzxwq_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpmovzxwq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovzxwq_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovzxwq_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm2_r12_r13
%r13 -> 1
%xmm2 -> 1
%r12 -> 1

Circuit: vzeroall
%ymm15 -> 1
%ymm11 -> 1
%ymm9 -> 1
%ymm3 -> 1
%ymm0 -> 1
%ymm2 -> 1
%ymm4 -> 1
%ymm5 -> 1
%ymm12 -> 1
%ymm8 -> 1
%ymm7 -> 1
%ymm10 -> 1
%ymm14 -> 1
avx -> 1
%ymm13 -> 1
%ymm6 -> 1
%ymm1 -> 1

Circuit: callq .move_128_064_xmm2_r10_r11
%r11 -> 1
%xmm2 -> 1
%r10 -> 1

Circuit: callq .move_032_064_r12d_r13d_rdx
%r13d -> 1
%rdx -> 1
%r12d -> 1

Circuit: callq .move_032_016_edx_r10w_r11w
%edx -> 1
%r11w -> 1
%r10w -> 1

Circuit: callq .move_064_128_r10_r11_xmm1
%r10 -> 1
%r11 -> 1
%xmm1 -> 1

Total Circuit
YMM1 -> 1
R10 -> 1
R13 -> 1
R11 -> 1
YMM5 -> 1
YMM4 -> 1
YMM3 -> 1
YMM15 -> 1
YMM2 -> 1
YMM10 -> 1
YMM11 -> 1
YMM7 -> 1
YMM0 -> 1
YMM14 -> 1
 -> 1
YMM13 -> 1
YMM9 -> 1
YMM6 -> 1
RDX -> 1
YMM8 -> 1
YMM12 -> 1
R12 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove vpmovzxwq_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovzxwq_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovzxwq_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpmovzxwq_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpmovzxwq_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpmovzxwq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(extractMInt(mi(256, _622), 160, 192), extractMInt(mi(256, _622), 224, 256)) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(extractMInt(MI622, 160, 192), extractMInt(MI622, 224, 256)) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "R10" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(256, _622), 240, 256)) )
echo Debug:  Result: "R10" |-> (concatenateMInt(mi(48, 0), extractMInt(MI622, 240, 256)) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(48, 0), extractMInt(mi(256, _622), 224, 240)), concatenateMInt(mi(48, 0), extractMInt(mi(256, _622), 240, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(48, 0), extractMInt(MI622, 224, 240)), concatenateMInt(mi(48, 0), extractMInt(MI622, 240, 256)))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "R12" |-> (extractMInt(mi(256, _622), 192, 256) )
echo Debug:  Result: "R12" |-> (extractMInt(MI622, 192, 256) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "R11" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(256, _622), 224, 240)) )
echo Debug:  Result: "R11" |-> (concatenateMInt(mi(48, 0), extractMInt(MI622, 224, 240)) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "R13" |-> (extractMInt(mi(256, _622), 128, 192) )
echo Debug:  Result: "R13" |-> (extractMInt(MI622, 128, 192) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vpmovzxwq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpmovzxwq_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovzxwq_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpunpckhqdq_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpckhqdq_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vpunpckhqdq_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpckhqdq_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpckhqdq_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpunpckhqdq_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpckhqdq_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpckhqdq_xmm_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm3_r10_r11
%r11 -> 1
%r10 -> 1
%xmm3 -> 1

Circuit: callq .move_128_064_xmm2_r8_r9
%r9 -> 1
%r8 -> 1
%xmm2 -> 1

Circuit: vzeroall
%ymm9 -> 1
%ymm11 -> 1
%ymm15 -> 1
%ymm0 -> 1
%ymm3 -> 1
%ymm5 -> 1
%ymm12 -> 1
%ymm4 -> 1
%ymm2 -> 1
%ymm1 -> 1
%ymm6 -> 1
%ymm14 -> 1
avx -> 1
%ymm13 -> 1
%ymm8 -> 1
%ymm7 -> 1
%ymm10 -> 1

Circuit: movq %r9, %r10
%r10 -> 1
%r9 -> 1

Circuit: callq .move_064_128_r10_r11_xmm1
%r10 -> 1
%xmm1 -> 1
%r11 -> 1

Total Circuit
R9 -> 1
YMM1 -> 1
R11 -> 1
R10 -> 1
YMM5 -> 1
YMM4 -> 1
YMM15 -> 1
YMM3 -> 1
YMM2 -> 1
R8 -> 1
YMM10 -> 1
YMM11 -> 1
YMM7 -> 1
YMM0 -> 1
YMM14 -> 1
 -> 1
YMM13 -> 1
YMM6 -> 1
YMM9 -> 1
YMM8 -> 1
YMM12 -> 1

Target
 -> 1
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1

[4m[1m[34mkprove vpunpckhqdq_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpckhqdq_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpckhqdq_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpunpckhqdq_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpunpckhqdq_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpunpckhqdq_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _622), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI622, 192, 256) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _622), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI622, 128, 192) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "R10" |-> (extractMInt(mi(256, _622), 128, 192) )
echo Debug:  Result: "R10" |-> (extractMInt(MI622, 128, 192) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _623), 128, 192), extractMInt(mi(256, _622), 128, 192))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI623, 128, 192), extractMInt(MI622, 128, 192))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "R11" |-> (extractMInt(mi(256, _623), 128, 192) )
echo Debug:  Result: "R11" |-> (extractMInt(MI623, 128, 192) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vpunpckhqdq_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpunpckhqdq_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpckhqdq_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpunpcklqdq_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpcklqdq_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vpunpcklqdq_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpcklqdq_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpcklqdq_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpunpcklqdq_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpcklqdq_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpcklqdq_xmm_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm3_r8_r9
%r9 -> 1
%r8 -> 1
%xmm3 -> 1

Circuit: callq .move_128_064_xmm2_r10_r11
%r10 -> 1
%xmm2 -> 1
%r11 -> 1

Circuit: vzeroall
%ymm2 -> 1
%ymm12 -> 1
%ymm5 -> 1
%ymm4 -> 1
%ymm14 -> 1
%ymm13 -> 1
avx -> 1
%ymm8 -> 1
%ymm7 -> 1
%ymm10 -> 1
%ymm6 -> 1
%ymm1 -> 1
%ymm15 -> 1
%ymm9 -> 1
%ymm11 -> 1
%ymm3 -> 1
%ymm0 -> 1

Circuit: movq %r8, %r11
%r11 -> 1
%r8 -> 1

Circuit: callq .move_064_128_r10_r11_xmm1
%r10 -> 1
%xmm1 -> 1
%r11 -> 1

Total Circuit
YMM14 -> 1
YMM0 -> 1
YMM7 -> 1
YMM13 -> 1
 -> 1
YMM8 -> 1
YMM9 -> 1
YMM6 -> 1
YMM12 -> 1
YMM1 -> 1
R9 -> 1
YMM4 -> 1
YMM5 -> 1
R10 -> 1
R11 -> 1
YMM2 -> 1
YMM3 -> 1
YMM15 -> 1
YMM10 -> 1
YMM11 -> 1
R8 -> 1

Target
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove vpunpcklqdq_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpcklqdq_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpcklqdq_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpunpcklqdq_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpunpcklqdq_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpunpcklqdq_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _623), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI623, 192, 256) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _623), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI623, 128, 192) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "R10" |-> (extractMInt(mi(256, _622), 192, 256) )
echo Debug:  Result: "R10" |-> (extractMInt(MI622, 192, 256) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _623), 192, 256), extractMInt(mi(256, _622), 192, 256))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI623, 192, 256), extractMInt(MI622, 192, 256))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "R11" |-> (extractMInt(mi(256, _623), 192, 256) )
echo Debug:  Result: "R11" |-> (extractMInt(MI623, 192, 256) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vpunpcklqdq_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpunpcklqdq_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpcklqdq_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vrcpps_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vrcpps_xmm_xmm.s[0m
[4m[1m[34mcreatespec vrcpps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vrcpps_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vrcpps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvrcpps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vrcpps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vrcpps_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm2_r12_r13
%r12 -> 1
%r13 -> 1
%xmm2 -> 1

Circuit: vzeroall
%ymm2 -> 1
%ymm12 -> 1
%ymm5 -> 1
%ymm4 -> 1
avx -> 1
%ymm13 -> 1
%ymm14 -> 1
%ymm10 -> 1
%ymm8 -> 1
%ymm7 -> 1
%ymm1 -> 1
%ymm6 -> 1
%ymm15 -> 1
%ymm9 -> 1
%ymm11 -> 1
%ymm3 -> 1
%ymm0 -> 1

Circuit: callq .move_064_128_r12_r13_xmm1
%r13 -> 1
%xmm1 -> 1
%r12 -> 1

Circuit: vrcpps %ymm1, %ymm10
%ymm1 -> 1
avx -> 1
%ymm10 -> 1

Circuit: callq .move_128_256_xmm10_xmm11_ymm1
%xmm11 -> 1
%xmm10 -> 1
%ymm1 -> 1

Total Circuit
R13 -> 1
YMM5 -> 1
YMM4 -> 1
YMM1 -> 1
YMM10 -> 1
YMM11 -> 1
YMM3 -> 1
YMM15 -> 1
YMM2 -> 1
 -> 1
YMM13 -> 1
YMM7 -> 1
YMM0 -> 1
YMM14 -> 1
YMM12 -> 1
R12 -> 1
YMM6 -> 1
YMM9 -> 1
YMM8 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove vrcpps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vrcpps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vrcpps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vrcpps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vrcpps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvrcpps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _619), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _619), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _619), 192, 224), 24, 8) ) , 32), Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _619), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI619, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI619, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI619, 192, 224), 24, 8) ) , 32), Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI619, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _619), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _619), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _619), 192, 224), 24, 8) ) , 32), Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _619), 224, 256), 24, 8) ) , 32)))))))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI619, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI619, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI619, 192, 224), 24, 8) ) , 32), Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI619, 224, 256), 24, 8) ) , 32)))))))) )
echo Debug:  PreResult: "R12" |-> (extractMInt(mi(256, _619), 192, 256) )
echo Debug:  Result: "R12" |-> (extractMInt(MI619, 192, 256) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "R13" |-> (extractMInt(mi(256, _619), 128, 192) )
echo Debug:  Result: "R13" |-> (extractMInt(MI619, 128, 192) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vrcpps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vrcpps_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vrcpps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vrsqrtps_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vrsqrtps_xmm_xmm.s[0m
[4m[1m[34mcreatespec vrsqrtps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vrsqrtps_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vrsqrtps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvrsqrtps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vrsqrtps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vrsqrtps_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm2_r8_r9
%xmm2 -> 1
%r9 -> 1
%r8 -> 1

Circuit: vzeroall
%ymm0 -> 1
%ymm3 -> 1
%ymm11 -> 1
%ymm9 -> 1
%ymm15 -> 1
%ymm6 -> 1
%ymm1 -> 1
%ymm10 -> 1
%ymm8 -> 1
%ymm7 -> 1
%ymm13 -> 1
avx -> 1
%ymm14 -> 1
%ymm4 -> 1
%ymm12 -> 1
%ymm5 -> 1
%ymm2 -> 1

Circuit: callq .move_064_128_r8_r9_xmm3
%r9 -> 1
%r8 -> 1
%xmm3 -> 1

Circuit: vrsqrtps %ymm3, %ymm12
avx -> 1
%ymm12 -> 1
%ymm3 -> 1

Circuit: callq .move_128_256_xmm12_xmm13_ymm1
%xmm12 -> 1
%ymm1 -> 1
%xmm13 -> 1

Total Circuit
YMM10 -> 1
YMM11 -> 1
R8 -> 1
YMM2 -> 1
YMM15 -> 1
YMM3 -> 1
YMM4 -> 1
YMM5 -> 1
YMM1 -> 1
R9 -> 1
YMM12 -> 1
YMM8 -> 1
YMM9 -> 1
YMM6 -> 1
YMM13 -> 1
 -> 1
YMM14 -> 1
YMM0 -> 1
YMM7 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove vrsqrtps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vrsqrtps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vrsqrtps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vrsqrtps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vrsqrtps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvrsqrtps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _619), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI619, 192, 256) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _619), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI619, 128, 192) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(mi(256, _619), 128, 160), 24, 8), 2) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(mi(256, _619), 160, 192), 24, 8), 2) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(mi(256, _619), 192, 224), 24, 8), 2) ) , 32), Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(mi(256, _619), 224, 256), 24, 8), 2) ) , 32)))))))) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(MI619, 128, 160), 24, 8), 2) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(MI619, 160, 192), 24, 8), 2) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(MI619, 192, 224), 24, 8), 2) ) , 32), Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(MI619, 224, 256), 24, 8), 2) ) , 32)))))))) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(mi(256, _619), 128, 160), 24, 8), 2) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(mi(256, _619), 160, 192), 24, 8), 2) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(mi(256, _619), 192, 224), 24, 8), 2) ) , 32), Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(mi(256, _619), 224, 256), 24, 8), 2) ) , 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(MI619, 128, 160), 24, 8), 2) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(MI619, 160, 192), 24, 8), 2) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(MI619, 192, 224), 24, 8), 2) ) , 32), Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(MI619, 224, 256), 24, 8), 2) ) , 32))))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _619), 128, 256)) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(MI619, 128, 256)) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vrsqrtps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vrsqrtps_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vrsqrtps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vsqrtps_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vsqrtps_xmm_xmm.s[0m
[4m[1m[34mcreatespec vsqrtps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsqrtps_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vsqrtps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvsqrtps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vsqrtps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vsqrtps_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm2_r8_r9
%r8 -> 1
%r9 -> 1
%xmm2 -> 1

Circuit: vzeroall
%ymm5 -> 1
%ymm12 -> 1
%ymm4 -> 1
%ymm2 -> 1
%ymm1 -> 1
%ymm6 -> 1
%ymm14 -> 1
%ymm13 -> 1
avx -> 1
%ymm7 -> 1
%ymm8 -> 1
%ymm10 -> 1
%ymm9 -> 1
%ymm11 -> 1
%ymm15 -> 1
%ymm0 -> 1
%ymm3 -> 1

Circuit: callq .move_064_128_r8_r9_xmm2
%r8 -> 1
%r9 -> 1
%xmm2 -> 1

Circuit: vsqrtps %ymm2, %ymm10
%ymm10 -> 1
avx -> 1
%ymm2 -> 1

Circuit: callq .move_128_256_xmm10_xmm11_ymm1
%xmm10 -> 1
%xmm11 -> 1
%ymm1 -> 1

Total Circuit
YMM5 -> 1
YMM4 -> 1
R9 -> 1
YMM1 -> 1
R8 -> 1
YMM11 -> 1
YMM10 -> 1
YMM15 -> 1
YMM3 -> 1
YMM2 -> 1
 -> 1
YMM13 -> 1
YMM7 -> 1
YMM14 -> 1
YMM0 -> 1
YMM12 -> 1
YMM6 -> 1
YMM9 -> 1
YMM8 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove vsqrtps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsqrtps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsqrtps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vsqrtps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vsqrtps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvsqrtps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _619), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI619, 192, 256) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _619), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI619, 128, 192) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _619), 128, 256)) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), extractMInt(MI619, 128, 256)) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _619), 128, 160), 24, 8), 2), 32), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _619), 160, 192), 24, 8), 2), 32), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _619), 192, 224), 24, 8), 2), 32), Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _619), 224, 256), 24, 8), 2), 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(MI619, 128, 160), 24, 8), 2), 32), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(MI619, 160, 192), 24, 8), 2), 32), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(MI619, 192, 224), 24, 8), 2), 32), Float2MInt(rootFloat(MInt2Float(extractMInt(MI619, 224, 256), 24, 8), 2), 32))))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _619), 128, 160), 24, 8), 2), 32), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _619), 160, 192), 24, 8), 2), 32), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _619), 192, 224), 24, 8), 2), 32), Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _619), 224, 256), 24, 8), 2), 32))))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(MI619, 128, 160), 24, 8), 2), 32), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(MI619, 160, 192), 24, 8), 2), 32), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(MI619, 192, 224), 24, 8), 2), 32), Float2MInt(rootFloat(MInt2Float(extractMInt(MI619, 224, 256), 24, 8), 2), 32))))) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vsqrtps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vsqrtps_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vsqrtps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vxorps_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vxorps_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vxorps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vxorps_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vxorps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvxorps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vxorps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vxorps_xmm_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm3_r12_r13
%r12 -> 1
%xmm3 -> 1
%r13 -> 1

Circuit: callq .move_128_064_xmm2_r8_r9
%r8 -> 1
%r9 -> 1
%xmm2 -> 1

Circuit: vzeroall
%ymm9 -> 1
%ymm11 -> 1
%ymm15 -> 1
%ymm0 -> 1
%ymm3 -> 1
%ymm12 -> 1
%ymm5 -> 1
%ymm4 -> 1
%ymm2 -> 1
%ymm6 -> 1
%ymm1 -> 1
%ymm14 -> 1
avx -> 1
%ymm13 -> 1
%ymm8 -> 1
%ymm7 -> 1
%ymm10 -> 1

Circuit: xorq %r13, %r9
%zf -> 1
%pf -> 1
%r13 -> 1
%cf -> 1
%of -> 1
%r9 -> 1
%sf -> 1
%af -> 1

Circuit: xorq %r12, %r8
%of -> 1
%af -> 1
%sf -> 1
%r8 -> 1
%cf -> 1
%pf -> 1
%zf -> 1
%r12 -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%xmm1 -> 1
%r8 -> 1
%r9 -> 1

Total Circuit
YMM4 -> 1
OF -> 1
YMM5 -> 1
R13 -> 1
SF -> 1
CF -> 1
YMM1 -> 1
R9 -> 1
YMM10 -> 1
YMM11 -> 1
R8 -> 1
YMM2 -> 1
PF -> 1
YMM15 -> 1
YMM3 -> 1
YMM13 -> 1
 -> 1
YMM14 -> 1
YMM0 -> 1
YMM7 -> 1
R12 -> 1
ZF -> 1
AF -> 1
YMM12 -> 1
YMM8 -> 1
YMM9 -> 1
YMM6 -> 1

Target
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove vxorps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vxorps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vxorps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vxorps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vxorps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvxorps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(256, _629), 192, 193), extractMInt(mi(256, _628), 192, 193)) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(MI629, 192, 193), extractMInt(MI628, 192, 193)) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "R8" |-> (xorMInt(extractMInt(mi(256, _629), 192, 256), extractMInt(mi(256, _628), 192, 256)) )
echo Debug:  Result: "R8" |-> (xorMInt(extractMInt(MI629, 192, 256), extractMInt(MI628, 192, 256)) )
echo Debug:  PreResult: "R9" |-> (xorMInt(extractMInt(mi(256, _629), 128, 192), extractMInt(mi(256, _628), 128, 192)) )
echo Debug:  Result: "R9" |-> (xorMInt(extractMInt(MI629, 128, 192), extractMInt(MI628, 128, 192)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(256, _629), 192, 256), extractMInt(mi(256, _628), 192, 256)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(MI629, 192, 256), extractMInt(MI628, 192, 256)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(extractMInt(mi(256, _629), 128, 192), extractMInt(mi(256, _628), 128, 192)), xorMInt(extractMInt(mi(256, _629), 192, 256), extractMInt(mi(256, _628), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(extractMInt(MI629, 128, 192), extractMInt(MI628, 128, 192)), xorMInt(extractMInt(MI629, 192, 256), extractMInt(MI628, 192, 256)))) )
echo Debug:  PreResult: "R12" |-> (extractMInt(mi(256, _629), 192, 256) )
echo Debug:  Result: "R12" |-> (extractMInt(MI629, 192, 256) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "R13" |-> (extractMInt(mi(256, _629), 128, 192) )
echo Debug:  Result: "R13" |-> (extractMInt(MI629, 128, 192) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(256, _629), 248, 256), extractMInt(mi(256, _628), 248, 256)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI629, 248, 256), extractMInt(MI628, 248, 256)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vxorps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vxorps_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vxorps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: xchgl_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/xchgl_r32_r32.s[0m
[4m[1m[34mcreatespec xchgl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xchgl_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/xchgl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxchgl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/xchgl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/xchgl_r32_r32.s[0m
Circuit: movswq %bx, %r10
%r10 -> 1
%bx -> 1

Circuit: movslq %ebx, %rbx
%rbx -> 1
%ebx -> 1

Circuit: callq .move_032_016_ecx_r8w_r9w
%ecx -> 1
%r9w -> 1
%r8w -> 1

Circuit: callq .move_064_032_rbx_r10d_r11d
%r11d -> 1
%r10d -> 1
%rbx -> 1

Circuit: movq %r10, %rcx
%rcx -> 1
%r10 -> 1

Circuit: callq .move_016_032_r8w_r9w_ebx
%r8w -> 1
%ebx -> 1
%r9w -> 1

Total Circuit
RCX -> 1
RBX -> 1
R8 -> 1
R11 -> 1
R10 -> 1
R9 -> 1

Target
RBX -> 1
RCX -> 1

[4m[1m[34mkprove xchgl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xchgl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xchgl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput xchgl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput xchgl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxchgl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35mxchgl_r32_r32: More that one writes. May Need to schedule.[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R10" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _606), 32, 64)) )
echo Debug:  Result: "R10" |-> (concatenateMInt(mi(32, 0), extractMInt(MI606, 32, 64)) )
echo Debug:  PreResult: "R11" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _606), 32, 64))), 0, 32)) )
echo Debug:  Result: "R11" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI606, 32, 64))), 0, 32)) )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _606), 32, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI606, 32, 64)) )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _607), 48, 64)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(48, 0), extractMInt(MI607, 48, 64)) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _607), 32, 48)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(48, 0), extractMInt(MI607, 32, 48)) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _607), 32, 64))   )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI607, 32, 64))   )
[4m[1m[34mwriteKDefn xchgl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-xchgl_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/xchgl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: xchgq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/xchgq_r64_r64.s[0m
[4m[1m[34mcreatespec xchgq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xchgq_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/xchgq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxchgq_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/xchgq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/xchgq_r64_r64.s[0m
Circuit: callq .move_064_032_rbx_r8d_r9d
%rbx -> 1
%r9d -> 1
%r8d -> 1

Circuit: movq %rcx, %rbx
%rcx -> 1
%rbx -> 1

Circuit: callq .move_016_032_r8w_r9w_edx
%r9w -> 1
%r8w -> 1
%edx -> 1

Circuit: callq .move_032_016_edx_r8w_r9w
%edx -> 1
%r9w -> 1
%r8w -> 1

Circuit: callq .move_032_064_r8d_r9d_rcx
%r8d -> 1
%r9d -> 1
%rcx -> 1

Total Circuit
R8 -> 1
R9 -> 1
RDX -> 1
RCX -> 1
RBX -> 1

Target
RCX -> 1
RBX -> 1

[4m[1m[34mkprove xchgq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xchgq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xchgq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput xchgq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput xchgq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxchgq_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35mxchgq_r64_r64: More that one writes. May Need to schedule.[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (mi(64, _606) )
echo Debug:  Result: "RBX" |-> (MI606 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _605) )
echo Debug:  Result: "RCX" |-> (MI605 )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(64, _605), 32, 48)), extractMInt(mi(64, _605), 48, 64)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(MI605, 32, 48)), extractMInt(MI605, 48, 64)) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(64, _605), 0, 16)), extractMInt(mi(64, _605), 16, 32)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(MI605, 0, 16)), extractMInt(MI605, 16, 32)) )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(32, 0), concatenateMInt(extractMInt(mi(64, _605), 16, 32), extractMInt(mi(64, _605), 48, 64)))   )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(32, 0), concatenateMInt(extractMInt(MI605, 16, 32), extractMInt(MI605, 48, 64)))   )
[4m[1m[34mwriteKDefn xchgq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-xchgq_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/xchgq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: xchgw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/xchgw_r16_r16.s[0m
[4m[1m[34mcreatespec xchgw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xchgw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/xchgw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxchgw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/xchgw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/xchgw_r16_r16.s[0m
Circuit: callq .move_016_008_bx_r10b_r11b
%r10b -> 1
%bx -> 1
%r11b -> 1

Circuit: callq .move_016_008_cx_r8b_r9b
%r8b -> 1
%cx -> 1
%r9b -> 1

Circuit: callq .move_008_016_r10b_r11b_cx
%r11b -> 1
%cx -> 1
%r10b -> 1

Circuit: callq .move_008_016_r8b_r9b_bx
%r9b -> 1
%bx -> 1
%r8b -> 1

Total Circuit
RBX -> 1
RCX -> 1
R11 -> 1
R10 -> 1
R9 -> 1
R8 -> 1

Target
RBX -> 1
RCX -> 1

[4m[1m[34mkprove xchgw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xchgw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xchgw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput xchgw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput xchgw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxchgw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35mxchgw_r16_r16: More that one writes. May Need to schedule.[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R10" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _608), 56, 64)) )
echo Debug:  Result: "R10" |-> (concatenateMInt(mi(56, 0), extractMInt(MI608, 56, 64)) )
echo Debug:  PreResult: "R11" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _608), 48, 56)) )
echo Debug:  Result: "R11" |-> (concatenateMInt(mi(56, 0), extractMInt(MI608, 48, 56)) )
echo Debug:  PreResult: "SPAD2" |-> (concatenateMInt(mi(192, 0), mi(64, _609)) )
echo Debug:  Result: "SPAD2" |-> (concatenateMInt(mi(192, 0), MI609) )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(extractMInt(mi(64, _609), 0, 48), extractMInt(mi(64, _608), 48, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(extractMInt(MI609, 0, 48), extractMInt(MI608, 48, 64)) )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _609), 56, 64)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(56, 0), extractMInt(MI609, 56, 64)) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _609), 48, 56)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(56, 0), extractMInt(MI609, 48, 56)) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _608)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI608) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _608), 0, 48), extractMInt(mi(64, _609), 48, 64))   )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI608, 0, 48), extractMInt(MI609, 48, 64))   )
[4m[1m[34mwriteKDefn xchgw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-xchgw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/xchgw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: xorw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/xorw_r16_r16.s[0m
[4m[1m[34mcreatespec xorw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/xorw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxorw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: xorw_r16_r16[0m
Undef Set
af -> 1

[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/xorw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/xorw_r16_r16.s[0m
Circuit: callq .move_016_008_cx_r8b_r9b
%cx -> 1
%r9b -> 1
%r8b -> 1

Circuit: movswq %bx, %r12
%bx -> 1
%r12 -> 1

Circuit: callq .move_008_016_r8b_r9b_bx
%r9b -> 1
%r8b -> 1
%bx -> 1

Circuit: callq .set_szp_for_bx
%bx -> 1
%sf -> 1
%pf -> 1
%zf -> 1

Circuit: callq .read_sf_into_rbx
%rbx -> 1
%sf -> 1

Circuit: callq .move_008_016_r8b_r9b_bx
%bx -> 1
%r8b -> 1
%r9b -> 1

Circuit: xorq %rbx, %r12
%of -> 1
%af -> 1
%sf -> 1
%cf -> 1
%pf -> 1
%rbx -> 1
%zf -> 1
%r12 -> 1

Circuit: movswq %r12w, %rbx
%r12w -> 1
%rbx -> 1

Circuit: callq .set_szp_for_bx
%zf -> 1
%pf -> 1
%sf -> 1
%bx -> 1

Total Circuit
R9 -> 1
CF -> 1
SF -> 1
OF -> 1
PF -> 1
R8 -> 1
RBX -> 1
RCX -> 1
ZF -> 1
AF -> 1
R12 -> 1

Target
PF -> 1
CF -> 1
SF -> 1
OF -> 1
RCX -> 1
AF -> 1
ZF -> 1
RBX -> 1

[4m[1m[34mkprove xorw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput xorw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput xorw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxorw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _623), 56, 64)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(56, 0), extractMInt(MI623, 56, 64)) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _623) )
echo Debug:  Result: "RCX" |-> (MI623 )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _623), 48, 56)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(56, 0), extractMInt(MI623, 48, 56)) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _622)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI622) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _622), 0, 48), xorMInt(extractMInt(mi(64, _623), 48, 64), extractMInt(mi(64, _622), 48, 64))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI622, 0, 48), xorMInt(extractMInt(MI623, 48, 64), extractMInt(MI622, 48, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, _623), 48, 64), extractMInt(mi(64, _622), 48, 64)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(MI623, 48, 64), extractMInt(MI622, 48, 64)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R12" |-> (xorMInt(concatenateMInt(mi(48, 0), extractMInt(mi(64, _623), 48, 64)), mi(64, svalueMInt(extractMInt(mi(64, _622), 48, 64)))) )
echo Debug:  Result: "R12" |-> (xorMInt(concatenateMInt(mi(48, 0), extractMInt(MI623, 48, 64)), mi(64, svalueMInt(extractMInt(MI622, 48, 64)))) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(64, _623), 48, 49), extractMInt(mi(64, _622), 48, 49)) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(MI623, 48, 49), extractMInt(MI622, 48, 49)) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, _623), 56, 64), extractMInt(mi(64, _622), 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI623, 56, 64), extractMInt(MI622, 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
[4m[1m[34mwriteKDefn xorw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-xorw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/xorw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

