[4m[1m[34mCheck if supported: adcb_rh_r8[0m
[4m[1m[34mcreatespec adcb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_adcb_rh_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34madcb_rh_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movzbl %ah, %edi
%rdi -> 1
%edi -> 1
%ah -> 1

Circuit: adcb %dil, %bl
%cf -> 1
%bl -> 1
%dil -> 1
%af -> 1
%zf -> 1
%sf -> 1
%pf -> 1
%of -> 1

Circuit: callq .set_szp_for_bl
%bl -> 1
%zf -> 1
%pf -> 1
%sf -> 1

Circuit: movb %bl, %ah
%bl -> 1
%ah -> 1

Total Circuit
ZF -> 1
OF -> 1
CF -> 1
SF -> 1
RAX -> 1
PF -> 1
AF -> 1
RDI -> 1
RBX -> 1

Target
AF -> 1
PF -> 1
RBX -> 1
RAX -> 1
SF -> 1
CF -> 1
OF -> 1
ZF -> 1

[4m[1m[34mkprove adcb_rh_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_adcb_rh_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_adcb_rh_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput adcb_rh_r8[0m
[4m[1m[34msanitizeSpecOutput adcb_rh_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34madcb_rh_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 56, 64))), concatenateMInt(mi(8, 0), mi(1, _626))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 56, 64))), concatenateMInt(mi(8, 0), MI626)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 56, 64))), concatenateMInt(mi(8, 0), mi(1, _626))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 56, 64))), concatenateMInt(mi(8, 0), MI626)), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _629), 48, 56), extractMInt(mi(64, _630), 56, 64)), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 56, 64))), concatenateMInt(mi(8, 0), mi(1, _626))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI629, 48, 56), extractMInt(MI630, 56, 64)), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 56, 64))), concatenateMInt(mi(8, 0), MI626)), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 56, 64))), concatenateMInt(mi(8, 0), mi(1, _626))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 56, 64))), concatenateMInt(mi(8, 0), MI626)), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RDI" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _629), 48, 56)) )
echo Debug:  Result: "RDI" |-> (concatenateMInt(mi(56, 0), extractMInt(MI629, 48, 56)) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _629)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI629) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _629), 48, 49), extractMInt(mi(64, _630), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _629), 48, 49), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 56, 64))), concatenateMInt(mi(8, 0), mi(1, _626))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI629, 48, 49), extractMInt(MI630, 56, 57))  andBool   notBool  ( eqMInt(extractMInt(MI629, 48, 49), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 56, 64))), concatenateMInt(mi(8, 0), MI626)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _629), 0, 48), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 56, 64))), concatenateMInt(mi(8, 0), mi(1, _626))), 1, 9), extractMInt(mi(64, _629), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI629, 0, 48), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 56, 64))), concatenateMInt(mi(8, 0), MI626)), 1, 9), extractMInt(MI629, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _630), 0, 56), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 56, 64))), concatenateMInt(mi(8, 0), mi(1, _626))), 1, 9)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI630, 0, 56), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 56, 64))), concatenateMInt(mi(8, 0), MI626)), 1, 9)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 56, 64))), concatenateMInt(mi(8, 0), mi(1, _626))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 56, 64))), concatenateMInt(mi(8, 0), MI626)), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn adcb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-adcb_rh_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: addpd_xmm_xmm[0m
[4m[1m[34mcreatespec addpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addpd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vaddpd %xmm2, %xmm1, %xmm9
%xmm2 -> 1
%xmm9 -> 1
%ymm9 -> 1
%xmm1 -> 1
avx -> 1

Circuit: vminpd %ymm9, %ymm9, %ymm12
%ymm12 -> 1
%ymm9 -> 1
avx -> 1

Circuit: movaps %xmm12, %xmm1
%xmm1 -> 1
%xmm12 -> 1
sse -> 1

Total Circuit
YMM12 -> 1
YMM9 -> 1
YMM1 -> 1
 -> 1
YMM2 -> 1

Target
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove addpd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addpd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addpd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput addpd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput addpd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _614), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(MI614, 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  +Float  MInt2Float(extractMInt(MI614, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _614), 0, 128), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _614), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI614, 0, 128), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(MI614, 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  +Float  MInt2Float(extractMInt(MI614, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _614), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(MI614, 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  +Float  MInt2Float(extractMInt(MI614, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _614)   )
echo Debug:  Result: "SPAD1" |-> (MI614   )
[4m[1m[34mwriteKDefn addpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-addpd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: addw_r16_r16[0m
[4m[1m[34mcreatespec addw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addw_r16_r16_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: clc
%cf -> 1

Circuit: adcw %cx, %bx
%of -> 1
%cx -> 1
%af -> 1
%cf -> 1
%sf -> 1
%pf -> 1
%bx -> 1
%zf -> 1

Circuit: callq .set_szp_for_bx
%zf -> 1
%bx -> 1
%pf -> 1
%sf -> 1

Total Circuit
OF -> 1
ZF -> 1
CF -> 1
SF -> 1
RCX -> 1
AF -> 1
PF -> 1
RBX -> 1

Target
RBX -> 1
AF -> 1
RCX -> 1
PF -> 1
SF -> 1
CF -> 1
OF -> 1
ZF -> 1

[4m[1m[34mkprove addw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput addw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput addw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 64))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 64))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 64))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 64))), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _629), 48, 64), extractMInt(mi(64, _628), 48, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 64))), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI629, 48, 64), extractMInt(MI628, 48, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 64))), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 64))), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 64))), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _629) )
echo Debug:  Result: "RCX" |-> (MI629 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _628)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI628) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _629), 48, 49), extractMInt(mi(64, _628), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _629), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI629, 48, 49), extractMInt(MI628, 48, 49))  andBool   notBool  ( eqMInt(extractMInt(MI629, 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _628), 0, 48), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 64))), 1, 17)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI628, 0, 48), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 64))), 1, 17)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 64))), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 64))), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn addw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-addw_r16_r16.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnzw_r16_r16[0m
[4m[1m[34mcreatespec cmovnzw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnzw_r16_r16_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnzw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovnzw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movzbl %ch, %ebp
%ebp -> 1
%rbp -> 1
%ch -> 1

Circuit: movw %bx, %bp
%bp -> 1
%bx -> 1

Circuit: callq .move_016_008_cx_r8b_r9b
%cx -> 1
%r8b -> 1
%r9b -> 1

Circuit: callq .move_008_016_r8b_r9b_bx
%r8b -> 1
%r9b -> 1
%bx -> 1

Circuit: cmoveq %rbp, %rbx
%rbx -> 1
%rbp -> 1
%zf -> 1
cmov -> 1

Total Circuit
RBX -> 1
RCX -> 1
R9 -> 1
R8 -> 1
 -> 1
RBP -> 1
ZF -> 1

Target
ZF -> 1
 -> 1
RBX -> 1
RCX -> 1

[4m[1m[34mkprove cmovnzw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnzw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnzw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnzw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovnzw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnzw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnzw_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBP" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _617), 48, 64)) )
echo Debug:  Result: "RBP" |-> (concatenateMInt(mi(48, 0), extractMInt(MI617, 48, 64)) )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _618), 56, 64)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(56, 0), extractMInt(MI618, 56, 64)) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _618) )
echo Debug:  Result: "RCX" |-> (MI618 )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _618), 48, 56)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(56, 0), extractMInt(MI618, 48, 56)) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _617)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI617) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _619), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _617), 0, 48), extractMInt(mi(64, _618), 48, 64)) ) #else ( mi(64, _617) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI619, mi(1, 0)) ) #then ( concatenateMInt(extractMInt(MI617, 0, 48), extractMInt(MI618, 48, 64)) ) #else ( MI617 ) #fi)  )
echo Debug:  PreResult: "ZF" |-> (mi(1, _619)   )
echo Debug:  Result: "ZF" |-> (MI619   )
[4m[1m[34mwriteKDefn cmovnzw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnzw_r16_r16.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cqto[0m
[4m[1m[34mcreatespec cqto: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cqto_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcqto: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq $0xffffffffffffffff, %r8
\$0xffffffffffffffff -> 1
%r8 -> 1

Circuit: sarxq %r8, %rax, %rdx
%rax -> 1
%r8 -> 1
bmi2 -> 1
%rdx -> 1

Total Circuit
R8 -> 1
 -> 1
RDX -> 1
RAX -> 1

Target
RAX -> 1
RDX -> 1

[4m[1m[34mkprove cqto[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cqto_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cqto_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cqto[0m
[4m[1m[34msanitizeSpecOutput cqto[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcqto: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RAX" |-> (mi(64, _612) )
echo Debug:  Result: "RAX" |-> (MI612 )
echo Debug:  PreResult: "R8" |-> (mi(64, -1) )
echo Debug:  Result: "R8" |-> (mi(64, -1) )
echo Debug:  PreResult: "RDX" |-> (ashrMInt(mi(64, svalueMInt(mi(64, _612))), 63)   )
echo Debug:  Result: "RDX" |-> (ashrMInt(mi(64, svalueMInt(MI612)), 63)   )
[4m[1m[34mwriteKDefn cqto: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cqto.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cvtps2dq_xmm_xmm[0m
cvtps2dq_xmm_xmm 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvtps2dq_xmm_xmm.k
Warn: [4m[1m[35mcvtps2dq_xmm_xmm: UnSupported[0m
[4m[1m[34mCheck if supported: cvtps2pd_xmm_xmm[0m
[4m[1m[34mcreatespec cvtps2pd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cvtps2pd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcvtps2pd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vcvtps2pd %xmm2, %ymm13
%ymm13 -> 1
%mxcsr::rc[0] -> 1
avx -> 1
%xmm2 -> 1

Circuit: movaps %xmm13, %xmm1
%xmm1 -> 1
%xmm13 -> 1
sse -> 1

Total Circuit
YMM1 -> 1
YMM2 -> 1
YMM13 -> 1
 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove cvtps2pd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cvtps2pd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cvtps2pd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cvtps2pd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput cvtps2pd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcvtps2pd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _613), 0, 128), concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(mi(256, _614), 192, 224), 24, 8)), 64), Float2MInt(Float2Double(MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8)), 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI613, 0, 128), concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(MI614, 192, 224), 24, 8)), 64), Float2MInt(Float2Double(MInt2Float(extractMInt(MI614, 224, 256), 24, 8)), 64))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(mi(256, _614), 128, 160), 24, 8)), 64), concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(mi(256, _614), 160, 192), 24, 8)), 64), concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(mi(256, _614), 192, 224), 24, 8)), 64), Float2MInt(Float2Double(MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8)), 64)))) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(MI614, 128, 160), 24, 8)), 64), concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(MI614, 160, 192), 24, 8)), 64), concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(MI614, 192, 224), 24, 8)), 64), Float2MInt(Float2Double(MInt2Float(extractMInt(MI614, 224, 256), 24, 8)), 64)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _613)   )
echo Debug:  Result: "SPAD1" |-> (MI613   )
[4m[1m[34mwriteKDefn cvtps2pd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cvtps2pd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cvtss2sil_r32_xmm[0m
cvtss2sil_r32_xmm 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvtps2dq_ymm_ymm.k
Warn: [4m[1m[35mcvtss2sil_r32_xmm: UnSupported[0m
[4m[1m[34mCheck if supported: cvttss2sil_r32_xmm[0m
cvttss2sil_r32_xmm 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvttps2dq_ymm_ymm.k
Warn: [4m[1m[35mcvttss2sil_r32_xmm: UnSupported[0m
[4m[1m[34mCheck if supported: decq_r64[0m
[4m[1m[34mcreatespec decq_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_decq_r64_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mdecq_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq $0xffffffffffffffff, %rax
%rax -> 1
\$0xffffffffffffffff -> 1

Circuit: addq %rax, %rbx
%cf -> 1
%af -> 1
%zf -> 1
%sf -> 1
%pf -> 1
%rbx -> 1
%of -> 1
%rax -> 1

Total Circuit
SF -> 1
RAX -> 1
RBX -> 1
AF -> 1
PF -> 1
ZF -> 1
OF -> 1
CF -> 1
 -> 1

Target
SF -> 1
RBX -> 1
PF -> 1
AF -> 1
OF -> 1
ZF -> 1

[4m[1m[34mkprove decq_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_decq_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_decq_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput decq_r64[0m
[4m[1m[34msanitizeSpecOutput decq_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mdecq_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(1, 0), mi(64, _624))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(1, 0), MI624)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(1, 0), mi(64, _624))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(1, 0), MI624)), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(64, -1), mi(64, _624)), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(1, 0), mi(64, _624))), 1, 65)), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(64, -1), MI624), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(1, 0), MI624)), 1, 65)), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(1, 0), mi(64, _624))), 57, 65), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(1, 0), MI624)), 57, 65), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 1), extractMInt(mi(64, _624), 0, 1))  andBool   notBool  ( eqMInt(mi(1, 1), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(1, 0), mi(64, _624))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 1), extractMInt(MI624, 0, 1))  andBool   notBool  ( eqMInt(mi(1, 1), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(1, 0), MI624)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (mi(64, -1) )
echo Debug:  Result: "RAX" |-> (mi(64, -1) )
echo Debug:  PreResult: "RBX" |-> (extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(1, 0), mi(64, _624))), 1, 65) )
echo Debug:  Result: "RBX" |-> (extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(1, 0), MI624)), 1, 65) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(1, 0), mi(64, _624))), 1, 65), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(1, 0), MI624)), 1, 65), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn decq_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-decq_r64.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: divpd_xmm_xmm[0m
[4m[1m[34mcreatespec divpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_divpd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mdivpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovapd %xmm2, %xmm0
%xmm0 -> 1
%ymm0 -> 1
%xmm2 -> 1
avx -> 1

Circuit: vmovups %xmm1, %xmm5
avx -> 1
%xmm1 -> 1
%ymm5 -> 1
%xmm5 -> 1

Circuit: vdivpd %ymm0, %ymm5, %ymm7
avx -> 1
%ymm5 -> 1
%ymm7 -> 1
%ymm0 -> 1

Circuit: movups %xmm7, %xmm1
sse -> 1
%xmm7 -> 1
%xmm1 -> 1

Total Circuit
YMM2 -> 1
YMM0 -> 1
 -> 1
YMM7 -> 1
YMM1 -> 1
YMM5 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove divpd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_divpd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_divpd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput divpd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput divpd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mdivpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _615), 0, 128), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11)  /Float  MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11)  /Float  MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI615, 0, 128), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI616, 128, 192), 53, 11)  /Float  MInt2Float(extractMInt(MI615, 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI616, 192, 256), 53, 11)  /Float  MInt2Float(extractMInt(MI615, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 256)) )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 256)) )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(Float2MInt(Float@FLOAT-SYNTAX"NaN", 64), concatenateMInt(Float2MInt(Float@FLOAT-SYNTAX"NaN", 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11)  /Float  MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11)  /Float  MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11) ) , 64)))) )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(Float2MInt(Float@FLOAT-SYNTAX"NaN", 64), concatenateMInt(Float2MInt(Float@FLOAT-SYNTAX"NaN", 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI616, 128, 192), 53, 11)  /Float  MInt2Float(extractMInt(MI615, 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI616, 192, 256), 53, 11)  /Float  MInt2Float(extractMInt(MI615, 192, 256), 53, 11) ) , 64)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _615) )
echo Debug:  Result: "SPAD1" |-> (MI615 )
echo Debug:  PreResult: "YMM0" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _616), 128, 256))   )
echo Debug:  Result: "YMM0" |-> (concatenateMInt(mi(128, 0), extractMInt(MI616, 128, 256))   )
[4m[1m[34mwriteKDefn divpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-divpd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: divps_xmm_xmm[0m
[4m[1m[34mcreatespec divps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_divps_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mdivps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovupd %xmm2, %xmm5
avx -> 1
%ymm5 -> 1
%xmm5 -> 1
%xmm2 -> 1

Circuit: vmovupd %xmm1, %xmm6
avx -> 1
%xmm1 -> 1
%xmm6 -> 1
%ymm6 -> 1

Circuit: vdivps %ymm5, %ymm6, %ymm2
avx -> 1
%ymm5 -> 1
%ymm2 -> 1
%ymm6 -> 1

Circuit: callq .move_128_64_xmm2_xmm8_xmm9
%xmm9 -> 1
%xmm2 -> 1
%xmm8 -> 1

Circuit: callq .move_64_128_xmm8_xmm9_xmm1
%xmm9 -> 1
%xmm8 -> 1
%xmm1 -> 1

Total Circuit
YMM9 -> 1
YMM5 -> 1
YMM1 -> 1
YMM8 -> 1
YMM2 -> 1
 -> 1
YMM6 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove divps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_divps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_divps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput divps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput divps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mdivps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(Float2MInt(Float@FLOAT-SYNTAX"NaNf", 32), concatenateMInt(Float2MInt(Float@FLOAT-SYNTAX"NaNf", 32), concatenateMInt(Float2MInt(Float@FLOAT-SYNTAX"NaNf", 32), concatenateMInt(Float2MInt(Float@FLOAT-SYNTAX"NaNf", 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32)))))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(Float2MInt(Float@FLOAT-SYNTAX"NaNf", 32), concatenateMInt(Float2MInt(Float@FLOAT-SYNTAX"NaNf", 32), concatenateMInt(Float2MInt(Float@FLOAT-SYNTAX"NaNf", 32), concatenateMInt(Float2MInt(Float@FLOAT-SYNTAX"NaNf", 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 128, 160), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 160, 192), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 192, 224), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI617, 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32)))))))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _616), 0, 128), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI616, 0, 128), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 128, 160), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI617, 160, 192), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 192, 224), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI617, 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _616), 128, 256)) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(128, 0), extractMInt(MI616, 128, 256)) )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _617), 128, 256)) )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(mi(128, 0), extractMInt(MI617, 128, 256)) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(192, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32))) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(192, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 192, 224), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI617, 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _616) )
echo Debug:  Result: "SPAD1" |-> (MI616 )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(192, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8) ) , 32)))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(192, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 128, 160), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI617, 160, 192), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 160, 192), 24, 8) ) , 32)))   )
[4m[1m[34mwriteKDefn divps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-divps_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: incb_r8[0m
[4m[1m[34mcreatespec incb_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_incb_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mincb_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: xorq %rax, %rax
%zf -> 1
%sf -> 1
%pf -> 1
%cf -> 1
%af -> 1
%of -> 1
%rax -> 1

Circuit: clc
%cf -> 1

Circuit: callq .read_zf_into_rcx
%zf -> 1
%rcx -> 1

Circuit: adcb %cl, %bl
%cl -> 1
%of -> 1
%bl -> 1
%af -> 1
%cf -> 1
%sf -> 1
%pf -> 1
%zf -> 1

Total Circuit
PF -> 1
AF -> 1
RCX -> 1
RBX -> 1
SF -> 1
RAX -> 1
CF -> 1
ZF -> 1
OF -> 1

Target
RBX -> 1
AF -> 1
PF -> 1
SF -> 1
ZF -> 1
OF -> 1

[4m[1m[34mkprove incb_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_incb_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_incb_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput incb_r8[0m
[4m[1m[34msanitizeSpecOutput incb_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mincb_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(mi(9, 1), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 56, 64))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(mi(9, 1), concatenateMInt(mi(1, 0), extractMInt(MI626, 56, 64))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(mi(9, 1), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 56, 64))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(mi(9, 1), concatenateMInt(mi(1, 0), extractMInt(MI626, 56, 64))), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 1), extractMInt(mi(64, _626), 56, 64)), extractMInt(addMInt(mi(9, 1), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 1), extractMInt(MI626, 56, 64)), extractMInt(addMInt(mi(9, 1), concatenateMInt(mi(1, 0), extractMInt(MI626, 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, 1) )
echo Debug:  Result: "RCX" |-> (mi(64, 1) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(mi(9, 1), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(mi(9, 1), concatenateMInt(mi(1, 0), extractMInt(MI626, 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _626)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI626) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 0), extractMInt(mi(64, _626), 56, 57))  andBool   notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt(mi(9, 1), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 0), extractMInt(MI626, 56, 57))  andBool   notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt(mi(9, 1), concatenateMInt(mi(1, 0), extractMInt(MI626, 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (mi(64, 0) )
echo Debug:  Result: "RAX" |-> (mi(64, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _626), 0, 56), extractMInt(addMInt(mi(9, 1), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 56, 64))), 1, 9)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI626, 0, 56), extractMInt(addMInt(mi(9, 1), concatenateMInt(mi(1, 0), extractMInt(MI626, 56, 64))), 1, 9)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 1), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 1), concatenateMInt(mi(1, 0), extractMInt(MI626, 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn incb_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-incb_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movb_rh_rh[0m
[4m[1m[34mcreatespec movb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movb_rh_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movzbl %bh, %edx
%edx -> 1
%rdx -> 1
%bh -> 1

Circuit: callq .move_064_032_rdx_r8d_r9d
%rdx -> 1
%r9d -> 1
%r8d -> 1

Circuit: callq .move_032_064_r8d_r9d_rcx
%r8d -> 1
%r9d -> 1
%rcx -> 1

Circuit: movb %cl, %ah
%ah -> 1
%cl -> 1

Total Circuit
R8 -> 1
RBX -> 1
RCX -> 1
R9 -> 1
RAX -> 1
RDX -> 1

Target
RAX -> 1
RBX -> 1

[4m[1m[34mkprove movb_rh_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movb_rh_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movb_rh_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movb_rh_rh[0m
[4m[1m[34msanitizeSpecOutput movb_rh_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _617), 48, 56)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(56, 0), extractMInt(MI617, 48, 56)) )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _617), 48, 56)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(56, 0), extractMInt(MI617, 48, 56)) )
echo Debug:  PreResult: "R9" |-> (mi(64, 0) )
echo Debug:  Result: "R9" |-> (mi(64, 0) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _616)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI616) )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _617), 48, 56)) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(56, 0), extractMInt(MI617, 48, 56)) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _616), 0, 48), concatenateMInt(extractMInt(mi(64, _617), 48, 56), extractMInt(mi(64, _616), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI616, 0, 48), concatenateMInt(extractMInt(MI617, 48, 56), extractMInt(MI616, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _617)   )
echo Debug:  Result: "RBX" |-> (MI617   )
[4m[1m[34mwriteKDefn movb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movb_rh_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movlhps_xmm_xmm[0m
[4m[1m[34mcreatespec movlhps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movlhps_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovlhps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_64_xmm1_xmm10_xmm11
%xmm10 -> 1
%xmm1 -> 1
%xmm11 -> 1

Circuit: vmovdqa %xmm2, %xmm11
%xmm11 -> 1
%xmm2 -> 1
avx -> 1
%ymm11 -> 1

Circuit: callq .move_64_128_xmm10_xmm11_xmm1
%xmm10 -> 1
%xmm1 -> 1
%xmm11 -> 1

Total Circuit
 -> 1
YMM10 -> 1
YMM11 -> 1
YMM2 -> 1
YMM1 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove movlhps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movlhps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movlhps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movlhps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput movlhps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovlhps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _614), 0, 128), concatenateMInt(extractMInt(mi(256, _615), 192, 256), extractMInt(mi(256, _614), 192, 256))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI614, 0, 128), concatenateMInt(extractMInt(MI615, 192, 256), extractMInt(MI614, 192, 256))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _614), 192, 256)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(192, 0), extractMInt(MI614, 192, 256)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 256)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 256)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _614)   )
echo Debug:  Result: "SPAD1" |-> (MI614   )
[4m[1m[34mwriteKDefn movlhps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movlhps_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movq_r64_xmm[0m
[4m[1m[34mcreatespec movq_r64_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movq_r64_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovq_r64_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovq %xmm1, %r10
avx -> 1
%xmm1 -> 1
%r10 -> 1

Circuit: movq %r10, %rbx
%r10 -> 1
%rbx -> 1

Total Circuit
 -> 1
R10 -> 1
RBX -> 1
YMM1 -> 1

Target
 -> 1
YMM1 -> 1
RBX -> 1

[4m[1m[34mkprove movq_r64_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movq_r64_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movq_r64_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movq_r64_xmm[0m
[4m[1m[34msanitizeSpecOutput movq_r64_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovq_r64_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R10" |-> (extractMInt(mi(256, _613), 192, 256) )
echo Debug:  Result: "R10" |-> (extractMInt(MI613, 192, 256) )
echo Debug:  PreResult: "RBX" |-> (extractMInt(mi(256, _613), 192, 256) )
echo Debug:  Result: "RBX" |-> (extractMInt(MI613, 192, 256) )
echo Debug:  PreResult: "YMM1" |-> (mi(256, _613)   )
echo Debug:  Result: "YMM1" |-> (MI613   )
[4m[1m[34mwriteKDefn movq_r64_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movq_r64_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movq_xmm_xmm[0m
[4m[1m[34mcreatespec movq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movq_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_64_xmm2_xmm10_xmm11
%xmm10 -> 1
%xmm2 -> 1
%xmm11 -> 1

Circuit: movdqa %xmm10, %xmm1
%xmm1 -> 1
%xmm10 -> 1
sse2 -> 1

Total Circuit
YMM10 -> 1
 -> 1
YMM11 -> 1
YMM2 -> 1
YMM1 -> 1

Target
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove movq_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movq_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movq_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movq_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput movq_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _614), 0, 128), concatenateMInt(mi(64, 0), extractMInt(mi(256, _615), 192, 256))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI614, 0, 128), concatenateMInt(mi(64, 0), extractMInt(MI615, 192, 256))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _615), 192, 256)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(192, 0), extractMInt(MI615, 192, 256)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _615), 128, 192)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(192, 0), extractMInt(MI615, 128, 192)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _614)   )
echo Debug:  Result: "SPAD1" |-> (MI614   )
[4m[1m[34mwriteKDefn movq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movq_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movsbl_r32_rh[0m
[4m[1m[34mcreatespec movsbl_r32_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movsbl_r32_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovsbl_r32_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movb %ah, %cl
%ah -> 1
%cl -> 1

Circuit: movsbl %cl, %ebp
%rbp -> 1
%cl -> 1
%ebp -> 1

Circuit: movq %rbp, %rbx
%rbx -> 1
%rbp -> 1

Total Circuit
RBP -> 1
RCX -> 1
RBX -> 1
RAX -> 1

Target
RBX -> 1
RAX -> 1

[4m[1m[34mkprove movsbl_r32_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movsbl_r32_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movsbl_r32_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movsbl_r32_rh[0m
[4m[1m[34msanitizeSpecOutput movsbl_r32_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovsbl_r32_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RAX" |-> (mi(64, _613) )
echo Debug:  Result: "RAX" |-> (MI613 )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _613), 48, 56))), 32, 64)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI613, 48, 56))), 32, 64)) )
echo Debug:  PreResult: "RBP" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _613), 48, 56))), 32, 64)) )
echo Debug:  Result: "RBP" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI613, 48, 56))), 32, 64)) )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _613), 48, 56))   )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(56, 0), extractMInt(MI613, 48, 56))   )
[4m[1m[34mwriteKDefn movsbl_r32_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movsbl_r32_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movsbw_r16_rh[0m
[4m[1m[34mcreatespec movsbw_r16_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movsbw_r16_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovsbw_r16_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movb %ah, %cl
%cl -> 1
%ah -> 1

Circuit: movsbl %cl, %ebx
%rbx -> 1
%ebx -> 1
%cl -> 1

Total Circuit
RCX -> 1
RBX -> 1
RAX -> 1

Target
RBX -> 1
RAX -> 1

[4m[1m[34mkprove movsbw_r16_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movsbw_r16_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movsbw_r16_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movsbw_r16_rh[0m
[4m[1m[34msanitizeSpecOutput movsbw_r16_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovsbw_r16_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RAX" |-> (mi(64, _613) )
echo Debug:  Result: "RAX" |-> (MI613 )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _614), 0, 48), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _613), 48, 56))), 48, 64)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI614, 0, 48), extractMInt(mi(64, svalueMInt(extractMInt(MI613, 48, 56))), 48, 64)) )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _613), 48, 56)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(56, 0), extractMInt(MI613, 48, 56)) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _614))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI614)   )
[4m[1m[34mwriteKDefn movsbw_r16_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movsbw_r16_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movsd_xmm_xmm[0m
[4m[1m[34mcreatespec movsd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movsd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovsd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_64_xmm1_xmm8_xmm9
%xmm8 -> 1
%xmm9 -> 1
%xmm1 -> 1

Circuit: movups %xmm2, %xmm8
%xmm2 -> 1
sse -> 1
%xmm8 -> 1

Circuit: callq .move_64_128_xmm8_xmm9_xmm1
%xmm9 -> 1
%xmm8 -> 1
%xmm1 -> 1

Total Circuit
YMM1 -> 1
YMM9 -> 1
YMM8 -> 1
YMM2 -> 1
 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove movsd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movsd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movsd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movsd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput movsd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovsd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _614), 0, 192), extractMInt(mi(256, _615), 192, 256)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI614, 0, 192), extractMInt(MI615, 192, 256)) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _614), 128, 192)) )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(192, 0), extractMInt(MI614, 128, 192)) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 256)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _614)   )
echo Debug:  Result: "SPAD1" |-> (MI614   )
[4m[1m[34mwriteKDefn movsd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movsd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movss_xmm_xmm[0m
[4m[1m[34mcreatespec movss_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movss_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovss_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11
%xmm9 -> 1
%xmm8 -> 1
%xmm11 -> 1
%xmm1 -> 1
%xmm10 -> 1

Circuit: vpmovzxdq %xmm2, %xmm8
%xmm8 -> 1
%xmm2 -> 1
avx -> 1
%ymm8 -> 1

Circuit: callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
%xmm9 -> 1
%xmm11 -> 1
%xmm8 -> 1
%xmm1 -> 1
%xmm10 -> 1

Total Circuit
YMM11 -> 1
 -> 1
YMM10 -> 1
YMM2 -> 1
YMM8 -> 1
YMM1 -> 1
YMM9 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove movss_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movss_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movss_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movss_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput movss_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovss_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _617) )
echo Debug:  Result: "YMM2" |-> (MI617 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _616), 0, 224), extractMInt(mi(256, _617), 224, 256)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI616, 0, 224), extractMInt(MI617, 224, 256)) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _616), 160, 192)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(MI616, 160, 192)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _616), 128, 160)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(MI616, 128, 160)) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _617), 192, 224)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _617), 224, 256)))) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(MI617, 192, 224)), concatenateMInt(mi(32, 0), extractMInt(MI617, 224, 256)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _616) )
echo Debug:  Result: "SPAD1" |-> (MI616 )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _616), 192, 224))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(MI616, 192, 224))   )
[4m[1m[34mwriteKDefn movss_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movss_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movswl_r32_r16[0m
[4m[1m[34mcreatespec movswl_r32_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movswl_r32_r16_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovswl_r32_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movzwl %cx, %ebx
%ebx -> 1
%rbx -> 1
%cx -> 1

Circuit: callq .move_064_032_rbx_r8d_r9d
%rbx -> 1
%r8d -> 1
%r9d -> 1

Circuit: movq $0xffffffffffffffc0, %rbx
\$0xffffffffffffffc0 -> 1
%rbx -> 1

Circuit: movw %r8w, %bx
%bx -> 1
%r8w -> 1

Circuit: movswq %bx, %r9
%r9 -> 1
%bx -> 1

Circuit: xchgl %ebx, %r9d
%r9 -> 1
%r9d -> 1
%ebx -> 1
%rbx -> 1

Total Circuit
R9 -> 1
RCX -> 1
RBX -> 1
 -> 1
R8 -> 1

Target
RBX -> 1
RCX -> 1

[4m[1m[34mkprove movswl_r32_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movswl_r32_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movswl_r32_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movswl_r32_r16[0m
[4m[1m[34msanitizeSpecOutput movswl_r32_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovswl_r32_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 48, 64))), 32, 64)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI614, 48, 64))), 32, 64)) )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _614), 48, 64)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(48, 0), extractMInt(MI614, 48, 64)) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _614) )
echo Debug:  Result: "RCX" |-> (MI614 )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(32, 0), concatenateMInt(mi(16, 65535), extractMInt(mi(64, _614), 48, 64)))   )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(32, 0), concatenateMInt(mi(16, 65535), extractMInt(MI614, 48, 64)))   )
[4m[1m[34mwriteKDefn movswl_r32_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movswl_r32_r16.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movupd_xmm_xmm[0m
[4m[1m[34mcreatespec movupd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movupd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovupd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movdqa %xmm2, %xmm1
%xmm1 -> 1
%xmm2 -> 1
sse2 -> 1

Total Circuit
YMM2 -> 1
 -> 1
YMM1 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove movupd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movupd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movupd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movupd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput movupd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovupd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _613) )
echo Debug:  Result: "YMM2" |-> (MI613 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _612), 0, 128), extractMInt(mi(256, _613), 128, 256)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI612, 0, 128), extractMInt(MI613, 128, 256)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _612)   )
echo Debug:  Result: "SPAD1" |-> (MI612   )
[4m[1m[34mwriteKDefn movupd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movupd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movzbq_r64_r8[0m
[4m[1m[34mcreatespec movzbq_r64_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movzbq_r64_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovzbq_r64_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq $0x0, %rbx
\$0x0 -> 1
%rbx -> 1

Circuit: clc
%cf -> 1

Circuit: movsbq %cl, %rdi
%rdi -> 1
%cl -> 1

Circuit: adcb %dil, %bl
%of -> 1
%pf -> 1
%sf -> 1
%zf -> 1
%af -> 1
%bl -> 1
%dil -> 1
%cf -> 1

Total Circuit
 -> 1
CF -> 1
OF -> 1
ZF -> 1
AF -> 1
PF -> 1
RCX -> 1
RBX -> 1
RDI -> 1
SF -> 1

Target
RCX -> 1
RBX -> 1

[4m[1m[34mkprove movzbq_r64_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movzbq_r64_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movzbq_r64_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movzbq_r64_r8[0m
[4m[1m[34msanitizeSpecOutput movzbq_r64_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovzbq_r64_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (extractMInt(mi(64, _619), 56, 57) )
echo Debug:  Result: "SF" |-> (extractMInt(MI619, 56, 57) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 0)), extractMInt(mi(64, _619), 56, 64)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI619, 56, 64), mi(8, 0)), extractMInt(MI619, 56, 64)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RDI" |-> (mi(64, svalueMInt(extractMInt(mi(64, _619), 56, 64))) )
echo Debug:  Result: "RDI" |-> (mi(64, svalueMInt(extractMInt(MI619, 56, 64))) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(mi(64, _619), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(MI619, 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _619) )
echo Debug:  Result: "RCX" |-> (MI619 )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _619), 56, 57), mi(1, 0))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _619), 56, 57), extractMInt(mi(64, _619), 56, 57)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI619, 56, 57), mi(1, 0))  andBool   notBool  ( eqMInt(extractMInt(MI619, 56, 57), extractMInt(MI619, 56, 57)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _619), 56, 64)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(56, 0), extractMInt(MI619, 56, 64)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(MI619, 56, 64), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn movzbq_r64_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movzbq_r64_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: mulpd_xmm_xmm[0m
[4m[1m[34mcreatespec mulpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_mulpd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmulpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovapd %xmm1, %xmm3
avx -> 1
%xmm1 -> 1
%ymm3 -> 1
%xmm3 -> 1

Circuit: vmovaps %xmm2, %xmm8
%ymm8 -> 1
avx -> 1
%xmm2 -> 1
%xmm8 -> 1

Circuit: vmulpd %ymm8, %ymm3, %ymm6
%ymm6 -> 1
avx -> 1
%ymm8 -> 1
%ymm3 -> 1

Circuit: movdqa %xmm6, %xmm1
sse2 -> 1
%xmm6 -> 1
%xmm1 -> 1

Total Circuit
YMM2 -> 1
YMM3 -> 1
 -> 1
YMM6 -> 1
YMM1 -> 1
YMM8 -> 1

Target
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove mulpd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_mulpd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_mulpd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput mulpd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput mulpd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmulpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _615), 0, 128), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI615, 0, 128), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI616, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI616, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 256)) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 256)) )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI616, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI616, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _616), 128, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), extractMInt(MI616, 128, 256)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _615) )
echo Debug:  Result: "SPAD1" |-> (MI615 )
[4m[1m[34mwriteKDefn mulpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-mulpd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: mulps_xmm_xmm[0m
[4m[1m[34mcreatespec mulps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_mulps_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmulps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmulps %xmm2, %xmm1, %xmm3
%xmm2 -> 1
%xmm1 -> 1
%ymm3 -> 1
%xmm3 -> 1
avx -> 1

Circuit: callq .move_128_032_xmm3_xmm8_xmm9_xmm10_xmm11
%xmm10 -> 1
%xmm3 -> 1
%xmm8 -> 1
%xmm11 -> 1
%xmm9 -> 1

Circuit: callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
%xmm8 -> 1
%xmm11 -> 1
%xmm9 -> 1
%xmm10 -> 1
%xmm1 -> 1

Total Circuit
YMM8 -> 1
YMM1 -> 1
YMM9 -> 1
YMM11 -> 1
 -> 1
YMM10 -> 1
YMM3 -> 1
YMM2 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove mulps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_mulps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_mulps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput mulps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput mulps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmulps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _618) )
echo Debug:  Result: "YMM2" |-> (MI618 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _617), 0, 128), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _618), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _618), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _618), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _618), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI617, 0, 128), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI618, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI618, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI618, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI618, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 224, 256), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(mi(256, _618), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(MI618, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 160, 192), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(mi(256, _618), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(MI618, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 128, 160), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _618), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _618), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _618), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _618), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI618, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI618, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI618, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI618, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(mi(256, _618), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(MI618, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 224, 256), 24, 8) ) , 32)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _617) )
echo Debug:  Result: "SPAD1" |-> (MI617 )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(mi(256, _618), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8) ) , 32))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(MI618, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 192, 224), 24, 8) ) , 32))   )
[4m[1m[34mwriteKDefn mulps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-mulps_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: mulsd_xmm_xmm[0m
[4m[1m[34mcreatespec mulsd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_mulsd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmulsd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovupd %xmm2, %xmm4
%xmm2 -> 1
%ymm4 -> 1
%xmm4 -> 1
avx -> 1

Circuit: callq .move_128_64_xmm1_xmm12_xmm13
%xmm13 -> 1
%xmm1 -> 1
%xmm12 -> 1

Circuit: vmovdqa %xmm4, %xmm14
%xmm4 -> 1
%xmm14 -> 1
%ymm14 -> 1
avx -> 1

Circuit: callq .move_128_256_xmm12_xmm13_ymm3
%xmm12 -> 1
%ymm3 -> 1
%xmm13 -> 1

Circuit: vmulpd %ymm14, %ymm3, %ymm12
%ymm12 -> 1
%ymm3 -> 1
%ymm14 -> 1
avx -> 1

Circuit: callq .move_64_128_xmm12_xmm13_xmm1
%xmm13 -> 1
%xmm1 -> 1
%xmm12 -> 1

Total Circuit
YMM4 -> 1
YMM1 -> 1
YMM12 -> 1
YMM14 -> 1
YMM13 -> 1
YMM2 -> 1
YMM3 -> 1
 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove mulsd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_mulsd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_mulsd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput mulsd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput mulsd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmulsd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(192, 0), Float2MInt( ( MInt2Float(extractMInt(mi(256, _618), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11) ) , 64)) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(192, 0), Float2MInt( ( MInt2Float(extractMInt(MI618, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI617, 192, 256), 53, 11) ) , 64)) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _618) )
echo Debug:  Result: "YMM2" |-> (MI618 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _617), 0, 192), Float2MInt( ( MInt2Float(extractMInt(mi(256, _618), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11) ) , 64)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI617, 0, 192), Float2MInt( ( MInt2Float(extractMInt(MI618, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI617, 192, 256), 53, 11) ) , 64)) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _617), 128, 192)) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(192, 0), extractMInt(MI617, 128, 192)) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _618), 128, 256)) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(128, 0), extractMInt(MI618, 128, 256)) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(concatenateMInt(mi(64, 0), extractMInt(mi(256, _617), 128, 192)), concatenateMInt(mi(64, 0), extractMInt(mi(256, _617), 192, 256))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(concatenateMInt(mi(64, 0), extractMInt(MI617, 128, 192)), concatenateMInt(mi(64, 0), extractMInt(MI617, 192, 256))) )
echo Debug:  PreResult: "YMM14" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _618), 128, 256)) )
echo Debug:  Result: "YMM14" |-> (concatenateMInt(mi(128, 0), extractMInt(MI618, 128, 256)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _617) )
echo Debug:  Result: "SPAD1" |-> (MI617 )
[4m[1m[34mwriteKDefn mulsd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-mulsd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: mulss_xmm_xmm[0m
[4m[1m[34mcreatespec mulss_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_mulss_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmulss_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movdqa %xmm1, %xmm0
%xmm1 -> 1
sse2 -> 1
%xmm0 -> 1

Circuit: callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11
%xmm11 -> 1
%xmm8 -> 1
%xmm9 -> 1
%xmm10 -> 1
%xmm1 -> 1

Circuit: vmulps %xmm2, %xmm0, %xmm8
%xmm2 -> 1
%xmm8 -> 1
%xmm0 -> 1
%ymm8 -> 1
avx -> 1

Circuit: callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
%xmm10 -> 1
%xmm1 -> 1
%xmm11 -> 1
%xmm8 -> 1
%xmm9 -> 1

Total Circuit
YMM11 -> 1
 -> 1
YMM10 -> 1
YMM2 -> 1
YMM0 -> 1
YMM8 -> 1
YMM1 -> 1
YMM9 -> 1

Target
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove mulss_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_mulss_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_mulss_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput mulss_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput mulss_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmulss_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _618) )
echo Debug:  Result: "YMM2" |-> (MI618 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _617), 0, 224), Float2MInt( ( MInt2Float(extractMInt(mi(256, _618), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI617, 0, 224), Float2MInt( ( MInt2Float(extractMInt(MI618, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 224, 256), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _617), 160, 192)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(MI617, 160, 192)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _617), 128, 160)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(MI617, 128, 160)) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _618), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _618), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _618), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _618), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI618, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI618, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI618, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI618, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _617) )
echo Debug:  Result: "SPAD1" |-> (MI617 )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _617), 192, 224)) )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(MI617, 192, 224)) )
echo Debug:  PreResult: "YMM0" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _617), 128, 256))   )
echo Debug:  Result: "YMM0" |-> (concatenateMInt(mi(128, 0), extractMInt(MI617, 128, 256))   )
[4m[1m[34mwriteKDefn mulss_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-mulss_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: notw_r16[0m
[4m[1m[34mcreatespec notw_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_notw_r16_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mnotw_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq $0xffffffffffffffff, %r14
\$0xffffffffffffffff -> 1
%r14 -> 1

Circuit: movswq %bx, %r12
%bx -> 1
%r12 -> 1

Circuit: xorw %r14w, %r12w
%pf -> 1
%sf -> 1
%zf -> 1
%af -> 1
%cf -> 1
%r14w -> 1
%of -> 1
%r12w -> 1

Circuit: movslq %r12d, %rbx
%rbx -> 1
%r12d -> 1

Total Circuit
 -> 1
CF -> 1
OF -> 1
R14 -> 1
ZF -> 1
R12 -> 1
AF -> 1
PF -> 1
RBX -> 1
SF -> 1

Target
RBX -> 1

[4m[1m[34mkprove notw_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_notw_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_notw_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput notw_r16[0m
[4m[1m[34msanitizeSpecOutput notw_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mnotw_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R12" |-> (concatenateMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 0, 48), xorMInt(mi(16, 65535), extractMInt(mi(64, _618), 48, 64))) )
echo Debug:  Result: "R12" |-> (concatenateMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 0, 48), xorMInt(mi(16, 65535), extractMInt(MI618, 48, 64))) )
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (xorMInt(mi(1, 1), extractMInt(mi(64, _618), 48, 49)) )
echo Debug:  Result: "SF" |-> (xorMInt(mi(1, 1), extractMInt(MI618, 48, 49)) )
echo Debug:  PreResult: "R14" |-> (mi(64, -1) )
echo Debug:  Result: "R14" |-> (mi(64, -1) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(mi(8, 255), extractMInt(mi(64, _618), 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(mi(8, 255), extractMInt(MI618, 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _618)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI618) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _618), 0, 48), xorMInt(mi(16, 65535), extractMInt(mi(64, _618), 48, 64))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI618, 0, 48), xorMInt(mi(16, 65535), extractMInt(MI618, 48, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(mi(16, 65535), extractMInt(mi(64, _618), 48, 64)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(mi(16, 65535), extractMInt(MI618, 48, 64)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn notw_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-notw_r16.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: orps_xmm_xmm[0m
[4m[1m[34mcreatespec orps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orps_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34morps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vorpd %xmm1, %xmm2, %xmm3
%xmm2 -> 1
avx -> 1
%xmm3 -> 1
%xmm1 -> 1
%ymm3 -> 1

Circuit: callq .move_256_128_ymm3_xmm10_xmm11
%ymm3 -> 1
%xmm10 -> 1
%xmm11 -> 1

Circuit: movdqa %xmm10, %xmm1
%xmm10 -> 1
%xmm1 -> 1
sse2 -> 1

Total Circuit
YMM2 -> 1
 -> 1
YMM10 -> 1
YMM3 -> 1
YMM11 -> 1
YMM1 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove orps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput orps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput orps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34morps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _615), 0, 128), concatenateMInt(orMInt(extractMInt(mi(256, _616), 128, 192), extractMInt(mi(256, _615), 128, 192)), orMInt(extractMInt(mi(256, _616), 192, 256), extractMInt(mi(256, _615), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI615, 0, 128), concatenateMInt(orMInt(extractMInt(MI616, 128, 192), extractMInt(MI615, 128, 192)), orMInt(extractMInt(MI616, 192, 256), extractMInt(MI615, 192, 256)))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(orMInt(extractMInt(mi(256, _616), 128, 192), extractMInt(mi(256, _615), 128, 192)), orMInt(extractMInt(mi(256, _616), 192, 256), extractMInt(mi(256, _615), 192, 256)))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(orMInt(extractMInt(MI616, 128, 192), extractMInt(MI615, 128, 192)), orMInt(extractMInt(MI616, 192, 256), extractMInt(MI615, 192, 256)))) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(orMInt(extractMInt(mi(256, _616), 128, 192), extractMInt(mi(256, _615), 128, 192)), orMInt(extractMInt(mi(256, _616), 192, 256), extractMInt(mi(256, _615), 192, 256)))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(orMInt(extractMInt(MI616, 128, 192), extractMInt(MI615, 128, 192)), orMInt(extractMInt(MI616, 192, 256), extractMInt(MI615, 192, 256)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _615) )
echo Debug:  Result: "SPAD1" |-> (MI615 )
[4m[1m[34mwriteKDefn orps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-orps_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: orw_r16_r16[0m
[4m[1m[34mcreatespec orw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orw_r16_r16_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34morw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: orw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: movswq %cx, %rdx
%rdx -> 1
%cx -> 1

Circuit: xchgw %cx, %bx
%bx -> 1
%cx -> 1

Circuit: movswq %cx, %rax
%rax -> 1
%cx -> 1

Circuit: orq %rax, %rdx
%zf -> 1
%sf -> 1
%pf -> 1
%cf -> 1
%rdx -> 1
%af -> 1
%of -> 1
%rax -> 1

Circuit: movslq %edx, %rbx
%rbx -> 1
%edx -> 1

Total Circuit
ZF -> 1
OF -> 1
CF -> 1
SF -> 1
RAX -> 1
RDX -> 1
AF -> 1
PF -> 1
RCX -> 1
RBX -> 1

Target
CF -> 1
ZF -> 1
OF -> 1
RBX -> 1
PF -> 1
AF -> 1
RCX -> 1
SF -> 1

[4m[1m[34mkprove orw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput orw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput orw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34morw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (orMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _630), 48, 64))), 0, 1), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _631), 48, 64))), 0, 1)) )
echo Debug:  Result: "SF" |-> (orMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI630, 48, 64))), 0, 1), extractMInt(mi(64, svalueMInt(extractMInt(MI631, 48, 64))), 0, 1)) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(extractMInt(mi(64, _631), 0, 48), extractMInt(mi(64, _630), 48, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(extractMInt(MI631, 0, 48), extractMInt(MI630, 48, 64)) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(orMInt(extractMInt(mi(64, _630), 56, 64), extractMInt(mi(64, _631), 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(orMInt(extractMInt(MI630, 56, 64), extractMInt(MI631, 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RDX" |-> (orMInt(mi(64, svalueMInt(extractMInt(mi(64, _630), 48, 64))), mi(64, svalueMInt(extractMInt(mi(64, _631), 48, 64)))) )
echo Debug:  Result: "RDX" |-> (orMInt(mi(64, svalueMInt(extractMInt(MI630, 48, 64))), mi(64, svalueMInt(extractMInt(MI631, 48, 64)))) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _630)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI630) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (mi(64, svalueMInt(extractMInt(mi(64, _630), 48, 64))) )
echo Debug:  Result: "RAX" |-> (mi(64, svalueMInt(extractMInt(MI630, 48, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _630), 0, 48), orMInt(extractMInt(mi(64, _630), 48, 64), extractMInt(mi(64, _631), 48, 64))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI630, 0, 48), orMInt(extractMInt(MI630, 48, 64), extractMInt(MI631, 48, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(orMInt(mi(64, svalueMInt(extractMInt(mi(64, _630), 48, 64))), mi(64, svalueMInt(extractMInt(mi(64, _631), 48, 64)))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(orMInt(mi(64, svalueMInt(extractMInt(MI630, 48, 64))), mi(64, svalueMInt(extractMInt(MI631, 48, 64)))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn orw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-orw_r16_r16.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: paddq_xmm_xmm[0m
[4m[1m[34mcreatespec paddq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_paddq_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpaddq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_064_xmm2_r10_r11
%xmm2 -> 1
%r11 -> 1
%r10 -> 1

Circuit: callq .move_128_064_xmm1_r8_r9
%r8 -> 1
%xmm1 -> 1
%r9 -> 1

Circuit: addq %r10, %r8
%r10 -> 1
%of -> 1
%r8 -> 1
%cf -> 1
%af -> 1
%zf -> 1
%pf -> 1
%sf -> 1

Circuit: xchgw %r8w, %r8w
%r8w -> 1

Circuit: addq %r11, %r9
%sf -> 1
%r9 -> 1
%pf -> 1
%zf -> 1
%af -> 1
%r11 -> 1
%cf -> 1
%of -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%r9 -> 1
%xmm1 -> 1
%r8 -> 1

Total Circuit
AF -> 1
PF -> 1
R11 -> 1
YMM1 -> 1
SF -> 1
R9 -> 1
CF -> 1
R8 -> 1
ZF -> 1
YMM2 -> 1
R10 -> 1
OF -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove paddq_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_paddq_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_paddq_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput paddq_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput paddq_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpaddq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(256, _623), 128, 192)), concatenateMInt(mi(1, 0), extractMInt(mi(256, _622), 128, 192))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI623, 128, 192)), concatenateMInt(mi(1, 0), extractMInt(MI622, 128, 192))), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(256, _623), 128, 192), extractMInt(mi(256, _622), 128, 192)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(256, _623), 128, 192)), concatenateMInt(mi(1, 0), extractMInt(mi(256, _622), 128, 192))), 1, 65)), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI623, 128, 192), extractMInt(MI622, 128, 192)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI623, 128, 192)), concatenateMInt(mi(1, 0), extractMInt(MI622, 128, 192))), 1, 65)), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R8" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(256, _623), 192, 256)), concatenateMInt(mi(1, 0), extractMInt(mi(256, _622), 192, 256))), 1, 65) )
echo Debug:  Result: "R8" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI623, 192, 256)), concatenateMInt(mi(1, 0), extractMInt(MI622, 192, 256))), 1, 65) )
echo Debug:  PreResult: "R9" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(256, _623), 128, 192)), concatenateMInt(mi(1, 0), extractMInt(mi(256, _622), 128, 192))), 1, 65) )
echo Debug:  Result: "R9" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI623, 128, 192)), concatenateMInt(mi(1, 0), extractMInt(MI622, 128, 192))), 1, 65) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _622) )
echo Debug:  Result: "SPAD1" |-> (MI622 )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(256, _623), 128, 192)), concatenateMInt(mi(1, 0), extractMInt(mi(256, _622), 128, 192))), 1, 65), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI623, 128, 192)), concatenateMInt(mi(1, 0), extractMInt(MI622, 128, 192))), 1, 65), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R10" |-> (extractMInt(mi(256, _623), 192, 256) )
echo Debug:  Result: "R10" |-> (extractMInt(MI623, 192, 256) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _623) )
echo Debug:  Result: "YMM2" |-> (MI623 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _622), 0, 128), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(256, _623), 128, 192)), concatenateMInt(mi(1, 0), extractMInt(mi(256, _622), 128, 192))), 1, 65), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(256, _623), 192, 256)), concatenateMInt(mi(1, 0), extractMInt(mi(256, _622), 192, 256))), 1, 65))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI622, 0, 128), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI623, 128, 192)), concatenateMInt(mi(1, 0), extractMInt(MI622, 128, 192))), 1, 65), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI623, 192, 256)), concatenateMInt(mi(1, 0), extractMInt(MI622, 192, 256))), 1, 65))) )
echo Debug:  PreResult: "R11" |-> (extractMInt(mi(256, _623), 128, 192) )
echo Debug:  Result: "R11" |-> (extractMInt(MI623, 128, 192) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(256, _623), 128, 192)), concatenateMInt(mi(1, 0), extractMInt(mi(256, _622), 128, 192))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI623, 128, 192)), concatenateMInt(mi(1, 0), extractMInt(MI622, 128, 192))), 1, 2) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(256, _623), 128, 192)), concatenateMInt(mi(1, 0), extractMInt(mi(256, _622), 128, 192))), 57, 65), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI623, 128, 192)), concatenateMInt(mi(1, 0), extractMInt(MI622, 128, 192))), 57, 65), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(256, _623), 128, 129), extractMInt(mi(256, _622), 128, 129))  andBool   notBool  ( eqMInt(extractMInt(mi(256, _623), 128, 129), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(256, _623), 128, 192)), concatenateMInt(mi(1, 0), extractMInt(mi(256, _622), 128, 192))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI623, 128, 129), extractMInt(MI622, 128, 129))  andBool   notBool  ( eqMInt(extractMInt(MI623, 128, 129), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI623, 128, 192)), concatenateMInt(mi(1, 0), extractMInt(MI622, 128, 192))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
[4m[1m[34mwriteKDefn paddq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-paddq_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: pmovsxdq_xmm_xmm[0m
[4m[1m[34mcreatespec pmovsxdq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_pmovsxdq_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpmovsxdq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vpmovsxdq %xmm2, %xmm13
avx -> 1
%ymm13 -> 1
%xmm13 -> 1
%xmm2 -> 1

Circuit: movdqa %xmm13, %xmm1
%xmm13 -> 1
sse2 -> 1
%xmm1 -> 1

Total Circuit
 -> 1
YMM2 -> 1
YMM13 -> 1
YMM1 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove pmovsxdq_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_pmovsxdq_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_pmovsxdq_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput pmovsxdq_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput pmovsxdq_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpmovsxdq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _613), 0, 128), concatenateMInt(mi(64, svalueMInt(extractMInt(mi(256, _614), 192, 224))), mi(64, svalueMInt(extractMInt(mi(256, _614), 224, 256))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI613, 0, 128), concatenateMInt(mi(64, svalueMInt(extractMInt(MI614, 192, 224))), mi(64, svalueMInt(extractMInt(MI614, 224, 256))))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(mi(64, svalueMInt(extractMInt(mi(256, _614), 192, 224))), mi(64, svalueMInt(extractMInt(mi(256, _614), 224, 256))))) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(mi(64, svalueMInt(extractMInt(MI614, 192, 224))), mi(64, svalueMInt(extractMInt(MI614, 224, 256))))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _613)   )
echo Debug:  Result: "SPAD1" |-> (MI613   )
[4m[1m[34mwriteKDefn pmovsxdq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-pmovsxdq_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: pmovzxwq_xmm_xmm[0m
[4m[1m[34mcreatespec pmovzxwq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_pmovzxwq_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpmovzxwq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_032_xmm2_xmm4_xmm5_xmm6_xmm7
%xmm7 -> 1
%xmm5 -> 1
%xmm6 -> 1
%xmm2 -> 1
%xmm4 -> 1

Circuit: vpmovzxwq %xmm4, %xmm3
%ymm3 -> 1
%xmm3 -> 1
avx -> 1
%xmm4 -> 1

Circuit: vmovapd %xmm3, %xmm14
%xmm3 -> 1
%ymm14 -> 1
avx -> 1
%xmm14 -> 1

Circuit: movdqa %xmm14, %xmm1
sse2 -> 1
%xmm14 -> 1
%xmm1 -> 1

Total Circuit
YMM1 -> 1
YMM4 -> 1
YMM5 -> 1
YMM6 -> 1
YMM3 -> 1
 -> 1
YMM7 -> 1
YMM14 -> 1
YMM2 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove pmovzxwq_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_pmovzxwq_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_pmovzxwq_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput pmovzxwq_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput pmovzxwq_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpmovzxwq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _619) )
echo Debug:  Result: "YMM2" |-> (MI619 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _618), 0, 128), concatenateMInt(concatenateMInt(mi(48, 0), extractMInt(mi(256, _619), 224, 240)), concatenateMInt(mi(48, 0), extractMInt(mi(256, _619), 240, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI618, 0, 128), concatenateMInt(concatenateMInt(mi(48, 0), extractMInt(MI619, 224, 240)), concatenateMInt(mi(48, 0), extractMInt(MI619, 240, 256)))) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 224, 256)) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 224, 256)) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(48, 0), extractMInt(mi(256, _619), 224, 240)), concatenateMInt(mi(48, 0), extractMInt(mi(256, _619), 240, 256)))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(48, 0), extractMInt(MI619, 224, 240)), concatenateMInt(mi(48, 0), extractMInt(MI619, 240, 256)))) )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 160, 192)) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 160, 192)) )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 192, 224)) )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 192, 224)) )
echo Debug:  PreResult: "YMM14" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(48, 0), extractMInt(mi(256, _619), 224, 240)), concatenateMInt(mi(48, 0), extractMInt(mi(256, _619), 240, 256)))) )
echo Debug:  Result: "YMM14" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(48, 0), extractMInt(MI619, 224, 240)), concatenateMInt(mi(48, 0), extractMInt(MI619, 240, 256)))) )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 128, 160)) )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 128, 160)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _618) )
echo Debug:  Result: "SPAD1" |-> (MI618 )
[4m[1m[34mwriteKDefn pmovzxwq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-pmovzxwq_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: popcntw_r16_r16[0m
[4m[1m[34mcreatespec popcntw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_popcntw_r16_r16_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpopcntw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: xorq %rax, %rax
%of -> 1
%rax -> 1
%zf -> 1
%sf -> 1
%pf -> 1
%cf -> 1
%af -> 1

Circuit: clc
%cf -> 1

Circuit: adcw %cx, %ax
%ax -> 1
%of -> 1
%cx -> 1
%sf -> 1
%pf -> 1
%zf -> 1
%af -> 1
%cf -> 1

Circuit: popcntq %rax, %rbx
%of -> 1
%rbx -> 1
%rax -> 1
popcnt -> 1
%zf -> 1
%sf -> 1
%pf -> 1
%cf -> 1
%af -> 1

Circuit: clc
%cf -> 1

Total Circuit
OF -> 1
ZF -> 1
 -> 1
CF -> 1
SF -> 1
RAX -> 1
PF -> 1
AF -> 1
RCX -> 1
RBX -> 1

Target
SF -> 1
PF -> 1
RCX -> 1
AF -> 1
RBX -> 1
OF -> 1
ZF -> 1
 -> 1
CF -> 1

[4m[1m[34mkprove popcntw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_popcntw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_popcntw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput popcntw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput popcntw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpopcntw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (mi(1, 0) )
echo Debug:  Result: "AF" |-> (mi(1, 0) )
echo Debug:  PreResult: "PF" |-> (mi(1, 0) )
echo Debug:  Result: "PF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _630) )
echo Debug:  Result: "RCX" |-> (MI630 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _629)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI629) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _630), 48, 64)) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(mi(48, 0), extractMInt(MI630, 48, 64)) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _629), 0, 48), extractMInt(mi(64, countOnes(extractMInt(mi(64, _630), 48, 64), 0)), 48, 64)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI629, 0, 48), extractMInt(mi(64, countOnes(extractMInt(MI630, 48, 64), 0)), 48, 64)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(48, 0), extractMInt(mi(64, _630), 48, 64)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(48, 0), extractMInt(MI630, 48, 64)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn popcntw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-popcntw_r16_r16.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: por_xmm_xmm[0m
[4m[1m[34mcreatespec por_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_por_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpor_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovapd %xmm2, %xmm2
%xmm2 -> 1
%ymm2 -> 1
avx -> 1

Circuit: vorpd %xmm1, %xmm2, %xmm3
%ymm3 -> 1
%xmm1 -> 1
%xmm3 -> 1
avx -> 1
%xmm2 -> 1

Circuit: movdqa %xmm3, %xmm1
sse2 -> 1
%xmm1 -> 1
%xmm3 -> 1

Total Circuit
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1
 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove por_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_por_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_por_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput por_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput por_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpor_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _614), 128, 256)) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), extractMInt(MI614, 128, 256)) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _613), 0, 128), concatenateMInt(orMInt(extractMInt(mi(256, _614), 128, 192), extractMInt(mi(256, _613), 128, 192)), orMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _613), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI613, 0, 128), concatenateMInt(orMInt(extractMInt(MI614, 128, 192), extractMInt(MI613, 128, 192)), orMInt(extractMInt(MI614, 192, 256), extractMInt(MI613, 192, 256)))) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(orMInt(extractMInt(mi(256, _614), 128, 192), extractMInt(mi(256, _613), 128, 192)), orMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _613), 192, 256)))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(orMInt(extractMInt(MI614, 128, 192), extractMInt(MI613, 128, 192)), orMInt(extractMInt(MI614, 192, 256), extractMInt(MI613, 192, 256)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _613)   )
echo Debug:  Result: "SPAD1" |-> (MI613   )
[4m[1m[34mwriteKDefn por_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-por_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: rcpps_xmm_xmm[0m
[4m[1m[34mcreatespec rcpps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rcpps_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrcpps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vrcpps %xmm2, %xmm6
avx -> 1
%xmm6 -> 1
%ymm6 -> 1
%xmm2 -> 1

Circuit: movdqa %xmm6, %xmm1
%xmm6 -> 1
sse2 -> 1
%xmm1 -> 1

Total Circuit
YMM6 -> 1
 -> 1
YMM2 -> 1
YMM1 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove rcpps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rcpps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rcpps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput rcpps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput rcpps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrcpps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _613), 0, 128), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _614), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _614), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _614), 192, 224), 24, 8) ) , 32), Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI613, 0, 128), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI614, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI614, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI614, 192, 224), 24, 8) ) , 32), Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI614, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _614), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _614), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _614), 192, 224), 24, 8) ) , 32), Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI614, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI614, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI614, 192, 224), 24, 8) ) , 32), Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI614, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _613)   )
echo Debug:  Result: "SPAD1" |-> (MI613   )
[4m[1m[34mwriteKDefn rcpps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-rcpps_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: rcpss_xmm_xmm[0m
[4m[1m[34mcreatespec rcpss_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rcpss_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrcpss_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vrcpps %xmm2, %xmm3
%xmm2 -> 1
%ymm3 -> 1
%xmm3 -> 1
avx -> 1

Circuit: callq .move_128_032_xmm1_xmm4_xmm5_xmm6_xmm7
%xmm6 -> 1
%xmm5 -> 1
%xmm4 -> 1
%xmm7 -> 1
%xmm1 -> 1

Circuit: vmovupd %xmm3, %xmm4
avx -> 1
%xmm3 -> 1
%xmm4 -> 1
%ymm4 -> 1

Circuit: callq .move_032_128_xmm4_xmm5_xmm6_xmm7_xmm1
%xmm6 -> 1
%xmm5 -> 1
%xmm4 -> 1
%xmm7 -> 1
%xmm1 -> 1

Total Circuit
YMM5 -> 1
YMM4 -> 1
YMM1 -> 1
YMM3 -> 1
YMM7 -> 1
 -> 1
YMM6 -> 1
YMM2 -> 1

Target
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove rcpss_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rcpss_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rcpss_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput rcpss_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput rcpss_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrcpss_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _618) )
echo Debug:  Result: "YMM2" |-> (MI618 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _617), 0, 224), Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _618), 224, 256), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI617, 0, 224), Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI618, 224, 256), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _618), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _618), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _618), 192, 224), 24, 8) ) , 32), Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _618), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI618, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI618, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI618, 192, 224), 24, 8) ) , 32), Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI618, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _618), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _618), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _618), 192, 224), 24, 8) ) , 32), Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(mi(256, _618), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI618, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI618, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI618, 192, 224), 24, 8) ) , 32), Float2MInt( ( 1e+00  /Float  MInt2Float(extractMInt(MI618, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _617), 160, 192)) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(224, 0), extractMInt(MI617, 160, 192)) )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _617), 192, 224)) )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(mi(224, 0), extractMInt(MI617, 192, 224)) )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _617), 128, 160)) )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(224, 0), extractMInt(MI617, 128, 160)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _617) )
echo Debug:  Result: "SPAD1" |-> (MI617 )
[4m[1m[34mwriteKDefn rcpss_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-rcpss_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: rolq_r64_one[0m
[4m[1m[34mcreatespec rolq_r64_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rolq_r64_one_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrolq_r64_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_064_032_rbx_r12d_r13d
%r13d -> 1
%rbx -> 1
%r12d -> 1

Circuit: callq .move_032_064_r12d_r13d_rcx
%r13d -> 1
%r12d -> 1
%rcx -> 1

Circuit: movq %rcx, %r9
%r9 -> 1
%rcx -> 1

Circuit: addq %rcx, %r9
%of -> 1
%zf -> 1
%rcx -> 1
%sf -> 1
%pf -> 1
%r9 -> 1
%cf -> 1
%af -> 1

Circuit: xchgw %bx, %bx
%bx -> 1

Circuit: adcq %rbx, %rbx
%of -> 1
%rbx -> 1
%af -> 1
%cf -> 1
%sf -> 1
%pf -> 1
%zf -> 1

Total Circuit
R12 -> 1
RBX -> 1
RCX -> 1
PF -> 1
AF -> 1
R13 -> 1
R9 -> 1
SF -> 1
CF -> 1
OF -> 1
ZF -> 1

Target
CF -> 1
 -> 1
OF -> 1
RBX -> 1

[4m[1m[34mkprove rolq_r64_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rolq_r64_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rolq_r64_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput rolq_r64_one[0m
[4m[1m[34msanitizeSpecOutput rolq_r64_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrolq_r64_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R12" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _623), 32, 64)) )
echo Debug:  Result: "R12" |-> (concatenateMInt(mi(32, 0), extractMInt(MI623, 32, 64)) )
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _623)), concatenateMInt(mi(1, 0), mi(64, _623))), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _623)), concatenateMInt(mi(1, 0), mi(64, _623))), 0, 1))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), MI623), concatenateMInt(mi(1, 0), MI623)), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), MI623), concatenateMInt(mi(1, 0), MI623)), 0, 1))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _623)), concatenateMInt(mi(1, 0), mi(64, _623))), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _623)), concatenateMInt(mi(1, 0), mi(64, _623))), 0, 1))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), MI623), concatenateMInt(mi(1, 0), MI623)), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), MI623), concatenateMInt(mi(1, 0), MI623)), 0, 1))), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(64, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _623)), concatenateMInt(mi(1, 0), mi(64, _623))), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _623)), concatenateMInt(mi(1, 0), mi(64, _623))), 0, 1))), 1, 65)), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(64, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), MI623), concatenateMInt(mi(1, 0), MI623)), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), MI623), concatenateMInt(mi(1, 0), MI623)), 0, 1))), 1, 65)), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R13" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _623), 0, 32)) )
echo Debug:  Result: "R13" |-> (concatenateMInt(mi(32, 0), extractMInt(MI623, 0, 32)) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _623) )
echo Debug:  Result: "RCX" |-> (MI623 )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _623)), concatenateMInt(mi(1, 0), mi(64, _623))), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _623)), concatenateMInt(mi(1, 0), mi(64, _623))), 0, 1))), 57, 65), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), MI623), concatenateMInt(mi(1, 0), MI623)), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), MI623), concatenateMInt(mi(1, 0), MI623)), 0, 1))), 57, 65), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R9" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _623)), concatenateMInt(mi(1, 0), mi(64, _623))), 1, 65) )
echo Debug:  Result: "R9" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), MI623), concatenateMInt(mi(1, 0), MI623)), 1, 65) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _623), 0, 1), extractMInt(mi(64, _623), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _623), 0, 1), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _623)), concatenateMInt(mi(1, 0), mi(64, _623))), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _623)), concatenateMInt(mi(1, 0), mi(64, _623))), 0, 1))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI623, 0, 1), extractMInt(MI623, 0, 1))  andBool   notBool  ( eqMInt(extractMInt(MI623, 0, 1), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), MI623), concatenateMInt(mi(1, 0), MI623)), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), MI623), concatenateMInt(mi(1, 0), MI623)), 0, 1))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _623)), concatenateMInt(mi(1, 0), mi(64, _623))), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _623)), concatenateMInt(mi(1, 0), mi(64, _623))), 0, 1))), 1, 65) )
echo Debug:  Result: "RBX" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), MI623), concatenateMInt(mi(1, 0), MI623)), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), MI623), concatenateMInt(mi(1, 0), MI623)), 0, 1))), 1, 65) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _623)), concatenateMInt(mi(1, 0), mi(64, _623))), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _623)), concatenateMInt(mi(1, 0), mi(64, _623))), 0, 1))), 1, 65), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), MI623), concatenateMInt(mi(1, 0), MI623)), concatenateMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), MI623), concatenateMInt(mi(1, 0), MI623)), 0, 1))), 1, 65), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn rolq_r64_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-rolq_r64_one.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: rolw_r16_one[0m
[4m[1m[34mcreatespec rolw_r16_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rolw_r16_one_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrolw_r16_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movswq %bx, %r8
%bx -> 1
%r8 -> 1

Circuit: clc
%cf -> 1

Circuit: adcw %r8w, %r8w
%zf -> 1
%sf -> 1
%pf -> 1
%cf -> 1
%af -> 1
%of -> 1
%r8w -> 1

Circuit: adcw %bx, %bx
%of -> 1
%zf -> 1
%bx -> 1
%pf -> 1
%sf -> 1
%cf -> 1
%af -> 1

Total Circuit
SF -> 1
RBX -> 1
PF -> 1
AF -> 1
OF -> 1
ZF -> 1
R8 -> 1
CF -> 1

Target
OF -> 1
 -> 1
CF -> 1
RBX -> 1

[4m[1m[34mkprove rolw_r16_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rolw_r16_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rolw_r16_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput rolw_r16_one[0m
[4m[1m[34msanitizeSpecOutput rolw_r16_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrolw_r16_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64))), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64))), 0, 1))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64))), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64))), 0, 1))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64))), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64))), 0, 1))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64))), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64))), 0, 1))), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64))), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64))), 0, 1))), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64))), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64))), 0, 1))), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 48, 64))), 0, 48), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64))), 1, 17)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI621, 48, 64))), 0, 48), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64))), 1, 17)) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64))), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64))), 0, 1))), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64))), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64))), 0, 1))), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _621)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI621) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _621), 48, 49), extractMInt(mi(64, _621), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _621), 48, 49), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64))), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64))), 0, 1))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI621, 48, 49), extractMInt(MI621, 48, 49))  andBool   notBool  ( eqMInt(extractMInt(MI621, 48, 49), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64))), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64))), 0, 1))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _621), 0, 48), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64))), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64))), 0, 1))), 1, 17)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI621, 0, 48), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64))), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64))), 0, 1))), 1, 17)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64))), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 48, 64))), 0, 1))), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64))), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 48, 64))), 0, 1))), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn rolw_r16_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-rolw_r16_one.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: rsqrtps_xmm_xmm[0m
[4m[1m[34mcreatespec rsqrtps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rsqrtps_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrsqrtps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vrsqrtps %xmm2, %xmm8
%ymm8 -> 1
avx -> 1
%xmm2 -> 1
%xmm8 -> 1

Circuit: movapd %xmm8, %xmm1
%xmm1 -> 1
sse2 -> 1
%xmm8 -> 1

Total Circuit
YMM2 -> 1
 -> 1
YMM1 -> 1
YMM8 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove rsqrtps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rsqrtps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rsqrtps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput rsqrtps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput rsqrtps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrsqrtps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _613), 0, 128), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(mi(256, _614), 128, 160), 24, 8), 2) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(mi(256, _614), 160, 192), 24, 8), 2) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(mi(256, _614), 192, 224), 24, 8), 2) ) , 32), Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8), 2) ) , 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI613, 0, 128), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(MI614, 128, 160), 24, 8), 2) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(MI614, 160, 192), 24, 8), 2) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(MI614, 192, 224), 24, 8), 2) ) , 32), Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(MI614, 224, 256), 24, 8), 2) ) , 32))))) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(mi(256, _614), 128, 160), 24, 8), 2) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(mi(256, _614), 160, 192), 24, 8), 2) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(mi(256, _614), 192, 224), 24, 8), 2) ) , 32), Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8), 2) ) , 32))))) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(MI614, 128, 160), 24, 8), 2) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(MI614, 160, 192), 24, 8), 2) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(MI614, 192, 224), 24, 8), 2) ) , 32), Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(MI614, 224, 256), 24, 8), 2) ) , 32))))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _613)   )
echo Debug:  Result: "SPAD1" |-> (MI613   )
[4m[1m[34mwriteKDefn rsqrtps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-rsqrtps_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setb_rh[0m
[4m[1m[34mcreatespec setb_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setb_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetb_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: setnae %ah
%ah -> 1
%cf -> 1

Total Circuit
RAX -> 1
CF -> 1

Target
RAX -> 1
CF -> 1

[4m[1m[34mkprove setb_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setb_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setb_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setb_rh[0m
[4m[1m[34msanitizeSpecOutput setb_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetb_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _613), 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _612)), extractMInt(mi(64, _613), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI613, 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), MI612), extractMInt(MI613, 56, 64))) )
echo Debug:  PreResult: "CF" |-> (mi(1, _612) )
echo Debug:  Result: "CF" |-> (MI612 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _613))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI613)   )
[4m[1m[34mwriteKDefn setb_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setb_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setc_r8[0m
[4m[1m[34mcreatespec setc_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setc_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetc_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: setb %bl
%bl -> 1
%cf -> 1

Total Circuit
RBX -> 1
CF -> 1

Target
RBX -> 1
CF -> 1

[4m[1m[34mkprove setc_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setc_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setc_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setc_r8[0m
[4m[1m[34msanitizeSpecOutput setc_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetc_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _613), 0, 56), concatenateMInt(mi(7, 0), mi(1, _612))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI613, 0, 56), concatenateMInt(mi(7, 0), MI612)) )
echo Debug:  PreResult: "CF" |-> (mi(1, _612) )
echo Debug:  Result: "CF" |-> (MI612 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _613))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI613)   )
[4m[1m[34mwriteKDefn setc_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setc_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setnge_rh[0m
[4m[1m[34mcreatespec setnge_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnge_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnge_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .read_of_into_rcx
%of -> 1
%rcx -> 1

Circuit: callq .read_sf_into_rbx
%sf -> 1
%rbx -> 1

Circuit: xorw %bx, %cx
%of -> 1
%cx -> 1
%cf -> 1
%af -> 1
%zf -> 1
%bx -> 1
%pf -> 1
%sf -> 1

Circuit: movslq %ecx, %rdx
%ecx -> 1
%rdx -> 1

Circuit: movb %dl, %ah
%ah -> 1
%dl -> 1

Total Circuit
RDX -> 1
RAX -> 1
SF -> 1
RBX -> 1
AF -> 1
PF -> 1
RCX -> 1
OF -> 1
ZF -> 1
CF -> 1

Target
SF -> 1
RAX -> 1
OF -> 1

[4m[1m[34mkprove setnge_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnge_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnge_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setnge_rh[0m
[4m[1m[34msanitizeSpecOutput setnge_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnge_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(48, 0), xorMInt(concatenateMInt(mi(15, 0), mi(1, _623)), concatenateMInt(mi(15, 0), mi(1, _621)))) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(48, 0), xorMInt(concatenateMInt(mi(15, 0), MI623), concatenateMInt(mi(15, 0), MI621))) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(concatenateMInt(mi(7, 0), mi(1, _623)), concatenateMInt(mi(7, 0), mi(1, _621))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(concatenateMInt(mi(7, 0), MI623), concatenateMInt(mi(7, 0), MI621)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(48, 0), xorMInt(concatenateMInt(mi(15, 0), mi(1, _623)), concatenateMInt(mi(15, 0), mi(1, _621)))) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(48, 0), xorMInt(concatenateMInt(mi(15, 0), MI623), concatenateMInt(mi(15, 0), MI621))) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _622)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI622) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _622), 0, 48), concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _623)), concatenateMInt(mi(7, 0), mi(1, _621))), extractMInt(mi(64, _622), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI622, 0, 48), concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), MI623), concatenateMInt(mi(7, 0), MI621)), extractMInt(MI622, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(63, 0), mi(1, _623)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(63, 0), MI623) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(concatenateMInt(mi(15, 0), mi(1, _623)), concatenateMInt(mi(15, 0), mi(1, _621))), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(concatenateMInt(mi(15, 0), MI623), concatenateMInt(mi(15, 0), MI621)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn setnge_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setnge_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setno_r8[0m
[4m[1m[34mcreatespec setno_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setno_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetno_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .read_of_into_rcx
%rcx -> 1
%of -> 1

Circuit: callq .set_cf
%cf -> 1

Circuit: callq .read_cf_into_rbx
%cf -> 1
%rbx -> 1

Circuit: movslq %ecx, %r8
%r8 -> 1
%ecx -> 1

Circuit: xorw %r8w, %bx
%af -> 1
%cf -> 1
%sf -> 1
%pf -> 1
%bx -> 1
%zf -> 1
%r8w -> 1
%of -> 1

Total Circuit
SF -> 1
AF -> 1
RCX -> 1
PF -> 1
RBX -> 1
ZF -> 1
OF -> 1
CF -> 1
R8 -> 1

Target
RBX -> 1
OF -> 1

[4m[1m[34mkprove setno_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setno_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setno_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setno_r8[0m
[4m[1m[34msanitizeSpecOutput setno_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetno_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(63, 0), mi(1, _619)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(63, 0), MI619) )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(63, 0), mi(1, _619)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(63, 0), MI619) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _620)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI620) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _620), 0, 56), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI620, 0, 56), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(concatenateMInt(mi(15, 0), mi(1, _619)), mi(16, 1)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(concatenateMInt(mi(15, 0), MI619), mi(16, 1)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn setno_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setno_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setnz_rh[0m
[4m[1m[34mcreatespec setnz_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnz_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnz_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .set_cf
%cf -> 1

Circuit: setnae %ah
%cf -> 1
%ah -> 1

Circuit: callq .read_cf_into_rcx
%cf -> 1
%rcx -> 1

Circuit: cmoveq %rcx, %rax
cmov -> 1
%zf -> 1
%rcx -> 1
%rax -> 1

Total Circuit
RCX -> 1
RAX -> 1
 -> 1
CF -> 1
ZF -> 1

Target
RAX -> 1
ZF -> 1

[4m[1m[34mkprove setnz_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnz_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnz_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setnz_rh[0m
[4m[1m[34msanitizeSpecOutput setnz_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnz_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RAX" |-> ((#ifMInt (eqMInt(mi(1, _615), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _614), 0, 48), concatenateMInt(mi(8, 1), extractMInt(mi(64, _614), 56, 64))) ) #else ( concatenateMInt(extractMInt(mi(64, _614), 0, 48), concatenateMInt(mi(8, 0), extractMInt(mi(64, _614), 56, 64))) ) #fi)  )
echo Debug:  Result: "RAX" |-> ((#ifMInt (eqMInt(MI615, mi(1, 0)) ) #then ( concatenateMInt(extractMInt(MI614, 0, 48), concatenateMInt(mi(8, 1), extractMInt(MI614, 56, 64))) ) #else ( concatenateMInt(extractMInt(MI614, 0, 48), concatenateMInt(mi(8, 0), extractMInt(MI614, 56, 64))) ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, 1) )
echo Debug:  Result: "CF" |-> (mi(1, 1) )
echo Debug:  PreResult: "ZF" |-> (mi(1, _615) )
echo Debug:  Result: "ZF" |-> (MI615 )
echo Debug:  PreResult: "RCX" |-> (mi(64, 1) )
echo Debug:  Result: "RCX" |-> (mi(64, 1) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _614))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI614)   )
[4m[1m[34mwriteKDefn setnz_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setnz_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setpo_r8[0m
[4m[1m[34mcreatespec setpo_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setpo_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetpo_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .read_pf_into_rbx
%rbx -> 1
%pf -> 1

Circuit: callq .move_064_032_rbx_r8d_r9d
%r9d -> 1
%r8d -> 1
%rbx -> 1

Circuit: callq .move_byte_3_of_rbx_to_r9b
%rbx -> 1
%r9b -> 1

Circuit: xchgl %r8d, %r9d
%r9 -> 1
%r9d -> 1
%r8d -> 1
%r8 -> 1

Circuit: xorq %rbx, %rbx
%rbx -> 1
%of -> 1
%sf -> 1
%pf -> 1
%zf -> 1
%af -> 1
%cf -> 1

Circuit: callq .read_pf_into_rbx
%rbx -> 1
%pf -> 1

Circuit: xorq %r9, %rbx
%zf -> 1
%r9 -> 1
%pf -> 1
%sf -> 1
%cf -> 1
%af -> 1
%of -> 1
%rbx -> 1

Total Circuit
ZF -> 1
OF -> 1
CF -> 1
R8 -> 1
R9 -> 1
SF -> 1
AF -> 1
PF -> 1
RBX -> 1

Target
PF -> 1
RBX -> 1

[4m[1m[34mkprove setpo_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setpo_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setpo_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setpo_r8[0m
[4m[1m[34msanitizeSpecOutput setpo_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetpo_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "R8" |-> (mi(64, 0) )
echo Debug:  Result: "R8" |-> (mi(64, 0) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(63, 0), mi(1, _619)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(63, 0), MI619) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _620)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI620) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _620), 0, 56), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI620, 0, 56), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(concatenateMInt(mi(63, 0), mi(1, _619)), mi(64, 1)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(concatenateMInt(mi(63, 0), MI619), mi(64, 1)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn setpo_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setpo_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: shlb_r8_one[0m
[4m[1m[34mcreatespec shlb_r8_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shlb_r8_one_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mshlb_r8_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: shlb_r8_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: xorq %rax, %rax
%of -> 1
%rax -> 1
%cf -> 1
%af -> 1
%zf -> 1
%sf -> 1
%pf -> 1

Circuit: clc
%cf -> 1

Circuit: adcb %al, %al
%of -> 1
%af -> 1
%cf -> 1
%sf -> 1
%pf -> 1
%al -> 1
%zf -> 1

Circuit: adcb %bl, %bl
%zf -> 1
%sf -> 1
%pf -> 1
%cf -> 1
%bl -> 1
%af -> 1
%of -> 1

Circuit: callq .set_szp_for_bl
%zf -> 1
%pf -> 1
%sf -> 1
%bl -> 1

Total Circuit
RAX -> 1
SF -> 1
RBX -> 1
AF -> 1
PF -> 1
ZF -> 1
OF -> 1
CF -> 1

Target
ZF -> 1
OF -> 1
CF -> 1
 -> 1
SF -> 1
RBX -> 1
AF -> 1
PF -> 1

[4m[1m[34mkprove shlb_r8_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shlb_r8_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shlb_r8_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput shlb_r8_one[0m
[4m[1m[34msanitizeSpecOutput shlb_r8_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mshlb_r8_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64))), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _627)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI627) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _627), 56, 57), extractMInt(mi(64, _627), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _627), 56, 57), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI627, 56, 57), extractMInt(MI627, 56, 57))  andBool   notBool  ( eqMInt(extractMInt(MI627, 56, 57), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (mi(64, 0) )
echo Debug:  Result: "RAX" |-> (mi(64, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _627), 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64))), 1, 9)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI627, 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64))), 1, 9)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn shlb_r8_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-shlb_r8_one.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: shll_r32_one[0m
[4m[1m[34mcreatespec shll_r32_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shll_r32_one_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mshll_r32_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: shll_r32_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: xorq %rax, %rax
%rax -> 1
%of -> 1
%pf -> 1
%sf -> 1
%zf -> 1
%af -> 1
%cf -> 1

Circuit: clc
%cf -> 1

Circuit: adcb %al, %bl
%of -> 1
%zf -> 1
%al -> 1
%pf -> 1
%sf -> 1
%cf -> 1
%af -> 1
%bl -> 1

Circuit: rcll $0x1, %ebx
%of -> 1
%rbx -> 1
%ebx -> 1
%cf -> 1
\$0x1 -> 1

Circuit: callq .set_szp_for_ebx
%ebx -> 1
%pf -> 1
%sf -> 1
%zf -> 1

Total Circuit
CF -> 1
 -> 1
ZF -> 1
OF -> 1
RBX -> 1
PF -> 1
AF -> 1
SF -> 1
RAX -> 1

Target
 -> 1
CF -> 1
OF -> 1
ZF -> 1
PF -> 1
AF -> 1
RBX -> 1
SF -> 1

[4m[1m[34mkprove shll_r32_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shll_r32_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shll_r32_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput shll_r32_one[0m
[4m[1m[34msanitizeSpecOutput shll_r32_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mshll_r32_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 32, 64))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI626, 32, 64))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 32, 64))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI626, 32, 64))), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), extractMInt(mi(64, _626), 56, 64)), extractMInt(mi(64, _626), 56, 64)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), extractMInt(MI626, 56, 64)), extractMInt(MI626, 56, 64)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 32, 64))), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI626, 32, 64))), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _626), 32, 33), extractMInt(mi(64, _626), 32, 33))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _626), 32, 33), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 32, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI626, 32, 33), extractMInt(MI626, 32, 33))  andBool   notBool  ( eqMInt(extractMInt(MI626, 32, 33), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI626, 32, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (mi(64, 0) )
echo Debug:  Result: "RAX" |-> (mi(64, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 32, 64))), 1, 33)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI626, 32, 64))), 1, 33)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 32, 64))), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI626, 32, 64))), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn shll_r32_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-shll_r32_one.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: shlq_r64_one[0m
[4m[1m[34mcreatespec shlq_r64_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shlq_r64_one_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mshlq_r64_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: shlq_r64_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: clc
%cf -> 1

Circuit: adcq %rbx, %rbx
%af -> 1
%cf -> 1
%sf -> 1
%pf -> 1
%zf -> 1
%of -> 1
%rbx -> 1

Total Circuit
RBX -> 1
PF -> 1
AF -> 1
SF -> 1
CF -> 1
ZF -> 1
OF -> 1

Target
SF -> 1
RBX -> 1
AF -> 1
PF -> 1
ZF -> 1
OF -> 1
CF -> 1
 -> 1

[4m[1m[34mkprove shlq_r64_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shlq_r64_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shlq_r64_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput shlq_r64_one[0m
[4m[1m[34msanitizeSpecOutput shlq_r64_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mshlq_r64_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _625)), concatenateMInt(mi(1, 0), mi(64, _625))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), MI625), concatenateMInt(mi(1, 0), MI625)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _625)), concatenateMInt(mi(1, 0), mi(64, _625))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), MI625), concatenateMInt(mi(1, 0), MI625)), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _625)), concatenateMInt(mi(1, 0), mi(64, _625))), 1, 65)), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(64, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), MI625), concatenateMInt(mi(1, 0), MI625)), 1, 65)), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _625)), concatenateMInt(mi(1, 0), mi(64, _625))), 57, 65), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), MI625), concatenateMInt(mi(1, 0), MI625)), 57, 65), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _625), 0, 1), extractMInt(mi(64, _625), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _625), 0, 1), extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _625)), concatenateMInt(mi(1, 0), mi(64, _625))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI625, 0, 1), extractMInt(MI625, 0, 1))  andBool   notBool  ( eqMInt(extractMInt(MI625, 0, 1), extractMInt(addMInt(concatenateMInt(mi(1, 0), MI625), concatenateMInt(mi(1, 0), MI625)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _625)), concatenateMInt(mi(1, 0), mi(64, _625))), 1, 65) )
echo Debug:  Result: "RBX" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), MI625), concatenateMInt(mi(1, 0), MI625)), 1, 65) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _625)), concatenateMInt(mi(1, 0), mi(64, _625))), 1, 65), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), MI625), concatenateMInt(mi(1, 0), MI625)), 1, 65), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn shlq_r64_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-shlq_r64_one.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: sqrtps_xmm_xmm[0m
[4m[1m[34mcreatespec sqrtps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sqrtps_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msqrtps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovdqu %xmm2, %xmm4
%ymm4 -> 1
%xmm2 -> 1
%xmm4 -> 1
avx -> 1

Circuit: vsqrtps %ymm4, %ymm7
%ymm4 -> 1
%ymm7 -> 1
avx -> 1

Circuit: movdqa %xmm7, %xmm1
sse2 -> 1
%xmm7 -> 1
%xmm1 -> 1

Total Circuit
YMM1 -> 1
YMM4 -> 1
 -> 1
YMM7 -> 1
YMM2 -> 1

Target
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove sqrtps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sqrtps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sqrtps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput sqrtps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput sqrtps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msqrtps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _614), 0, 128), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8), 2), 32), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8), 2), 32), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8), 2), 32), Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8), 2), 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI614, 0, 128), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(MI615, 128, 160), 24, 8), 2), 32), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(MI615, 160, 192), 24, 8), 2), 32), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(MI615, 192, 224), 24, 8), 2), 32), Float2MInt(rootFloat(MInt2Float(extractMInt(MI615, 224, 256), 24, 8), 2), 32))))) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 256)) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 256)) )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8), 2), 32), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8), 2), 32), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8), 2), 32), Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8), 2), 32))))) )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(MI615, 128, 160), 24, 8), 2), 32), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(MI615, 160, 192), 24, 8), 2), 32), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(MI615, 192, 224), 24, 8), 2), 32), Float2MInt(rootFloat(MInt2Float(extractMInt(MI615, 224, 256), 24, 8), 2), 32))))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _614)   )
echo Debug:  Result: "SPAD1" |-> (MI614   )
[4m[1m[34mwriteKDefn sqrtps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-sqrtps_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: unpcklpd_xmm_xmm[0m
[4m[1m[34mcreatespec unpcklpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_unpcklpd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34munpcklpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_64_xmm1_xmm10_xmm11
%xmm11 -> 1
%xmm10 -> 1
%xmm1 -> 1

Circuit: vmovdqu %xmm2, %xmm11
%ymm11 -> 1
avx -> 1
%xmm11 -> 1
%xmm2 -> 1

Circuit: callq .move_64_128_xmm10_xmm11_xmm1
%xmm1 -> 1
%xmm10 -> 1
%xmm11 -> 1

Total Circuit
 -> 1
YMM10 -> 1
YMM11 -> 1
YMM2 -> 1
YMM1 -> 1

Target
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove unpcklpd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_unpcklpd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_unpcklpd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput unpcklpd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput unpcklpd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34munpcklpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _614), 0, 128), concatenateMInt(extractMInt(mi(256, _615), 192, 256), extractMInt(mi(256, _614), 192, 256))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI614, 0, 128), concatenateMInt(extractMInt(MI615, 192, 256), extractMInt(MI614, 192, 256))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _614), 192, 256)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(192, 0), extractMInt(MI614, 192, 256)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 256)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 256)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _614)   )
echo Debug:  Result: "SPAD1" |-> (MI614   )
[4m[1m[34mwriteKDefn unpcklpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-unpcklpd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vaddps_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vaddps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vaddps_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvaddps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovdqu %xmm3, %xmm10
%xmm3 -> 1
%xmm10 -> 1
avx -> 1
%ymm10 -> 1

Circuit: vmovups %xmm2, %xmm11
%xmm11 -> 1
%xmm2 -> 1
%ymm11 -> 1
avx -> 1

Circuit: vaddps %ymm10, %ymm11, %ymm3
%ymm10 -> 1
%ymm11 -> 1
avx -> 1
%ymm3 -> 1

Circuit: vmovdqa %xmm3, %xmm1
%ymm1 -> 1
avx -> 1
%xmm1 -> 1
%xmm3 -> 1

Total Circuit
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1
YMM10 -> 1
 -> 1
YMM11 -> 1

Target
YMM2 -> 1
 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vaddps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vaddps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vaddps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vaddps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vaddps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvaddps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI616, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 160, 192), 24, 8)  +Float  MInt2Float(extractMInt(MI616, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI617, 224, 256), 24, 8)  +Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _617), 128, 256)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), extractMInt(MI617, 128, 256)) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI616, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 160, 192), 24, 8)  +Float  MInt2Float(extractMInt(MI616, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI617, 224, 256), 24, 8)  +Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _616), 128, 256)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(MI616, 128, 256)) )
[4m[1m[34mwriteKDefn vaddps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vaddps_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vbroadcastsd_ymm_xmm[0m
[4m[1m[34mcreatespec vbroadcastsd_ymm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vbroadcastsd_ymm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvbroadcastsd_ymm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_64_xmm2_xmm10_xmm11
%xmm10 -> 1
%xmm11 -> 1
%xmm2 -> 1

Circuit: vpunpcklqdq %xmm10, %xmm10, %xmm11
%ymm11 -> 1
%xmm10 -> 1
avx -> 1
%xmm11 -> 1

Circuit: vmovdqu %ymm11, %ymm10
avx -> 1
%ymm10 -> 1
%ymm11 -> 1

Circuit: callq .move_128_256_xmm10_xmm11_ymm1
%xmm10 -> 1
%ymm1 -> 1
%xmm11 -> 1

Total Circuit
YMM2 -> 1
YMM11 -> 1
YMM10 -> 1
 -> 1
YMM1 -> 1

Target
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove vbroadcastsd_ymm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vbroadcastsd_ymm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vbroadcastsd_ymm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vbroadcastsd_ymm_xmm[0m
[4m[1m[34msanitizeSpecOutput vbroadcastsd_ymm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvbroadcastsd_ymm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _614), 192, 256)), concatenateMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _614), 192, 256))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(extractMInt(MI614, 192, 256), extractMInt(MI614, 192, 256)), concatenateMInt(extractMInt(MI614, 192, 256), extractMInt(MI614, 192, 256))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _614), 192, 256))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI614, 192, 256), extractMInt(MI614, 192, 256))) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _614), 192, 256)))   )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI614, 192, 256), extractMInt(MI614, 192, 256)))   )
[4m[1m[34mwriteKDefn vbroadcastsd_ymm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vbroadcastsd_ymm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vbroadcastss_xmm_xmm[0m
[4m[1m[34mcreatespec vbroadcastss_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vbroadcastss_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvbroadcastss_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movd %xmm2, %r8d
sse2 -> 1
%xmm2 -> 1
%r8 -> 1
%r8d -> 1

Circuit: vzeroall
%ymm0 -> 1
%ymm9 -> 1
%ymm5 -> 1
%ymm3 -> 1
avx -> 1
%ymm11 -> 1
%ymm10 -> 1
%ymm12 -> 1
%ymm1 -> 1
%ymm2 -> 1
%ymm4 -> 1
%ymm6 -> 1
%ymm7 -> 1
%ymm13 -> 1
%ymm8 -> 1
%ymm14 -> 1
%ymm15 -> 1

Circuit: movslq %r8d, %r9
%r9 -> 1
%r8d -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%xmm1 -> 1
%r8 -> 1
%r9 -> 1

Circuit: callq .move_128_64_xmm1_xmm10_xmm11
%xmm1 -> 1
%xmm11 -> 1
%xmm10 -> 1

Circuit: callq .move_128_64_xmm1_xmm8_xmm9
%xmm8 -> 1
%xmm9 -> 1
%xmm1 -> 1

Circuit: callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
%xmm10 -> 1
%xmm8 -> 1
%xmm9 -> 1
%xmm1 -> 1
%xmm11 -> 1

Total Circuit
YMM4 -> 1
YMM0 -> 1
YMM13 -> 1
YMM10 -> 1
R8 -> 1
YMM15 -> 1
YMM11 -> 1
YMM9 -> 1
YMM5 -> 1
R9 -> 1
YMM1 -> 1
YMM8 -> 1
YMM12 -> 1
YMM2 -> 1
YMM14 -> 1
 -> 1
YMM7 -> 1
YMM3 -> 1
YMM6 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vbroadcastss_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vbroadcastss_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vbroadcastss_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vbroadcastss_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vbroadcastss_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvbroadcastss_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _628), 224, 256)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(MI628, 224, 256)) )
echo Debug:  PreResult: "R9" |-> (mi(64, svalueMInt(extractMInt(mi(256, _628), 224, 256))) )
echo Debug:  Result: "R9" |-> (mi(64, svalueMInt(extractMInt(MI628, 224, 256))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(192, 0), mi(64, svalueMInt(extractMInt(mi(256, _628), 224, 256)))) )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(192, 0), mi(64, svalueMInt(extractMInt(MI628, 224, 256)))) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _628), 224, 256), extractMInt(mi(256, _628), 224, 256)), concatenateMInt(extractMInt(mi(256, _628), 224, 256), extractMInt(mi(256, _628), 224, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI628, 224, 256), extractMInt(MI628, 224, 256)), concatenateMInt(extractMInt(MI628, 224, 256), extractMInt(MI628, 224, 256)))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _628), 224, 256)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(MI628, 224, 256)) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(192, 0), mi(64, svalueMInt(extractMInt(mi(256, _628), 224, 256)))) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(192, 0), mi(64, svalueMInt(extractMInt(MI628, 224, 256)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _628), 224, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(MI628, 224, 256)) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vbroadcastss_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vbroadcastss_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vcvtsd2sil_r32_xmm[0m
vcvtsd2sil_r32_xmm 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvtpd2dq_xmm_ymm.k
Warn: [4m[1m[35mvcvtsd2sil_r32_xmm: UnSupported[0m
[4m[1m[34mCheck if supported: vcvtss2sd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vcvtss2sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vcvtss2sd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvcvtss2sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovapd %xmm2, %xmm1
%ymm1 -> 1
%xmm1 -> 1
avx -> 1
%xmm2 -> 1

Circuit: callq .move_128_64_xmm2_xmm10_xmm11
%xmm2 -> 1
%xmm11 -> 1
%xmm10 -> 1

Circuit: vcvtps2pd %xmm3, %ymm10
avx -> 1
%mxcsr::rc[0] -> 1
%ymm10 -> 1
%xmm3 -> 1

Circuit: callq .move_64_128_xmm10_xmm11_xmm1
%xmm1 -> 1
%xmm11 -> 1
%xmm10 -> 1

Total Circuit
YMM2 -> 1
YMM3 -> 1
 -> 1
YMM1 -> 1
YMM10 -> 1
YMM11 -> 1

Target
YMM1 -> 1
YMM3 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove vcvtss2sd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vcvtss2sd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vcvtss2sd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vcvtss2sd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vcvtss2sd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvcvtss2sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _616), 128, 192), Float2MInt(Float2Double(MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8)), 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI616, 128, 192), Float2MInt(Float2Double(MInt2Float(extractMInt(MI617, 224, 256), 24, 8)), 64))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8)), 64), concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8)), 64), concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8)), 64), Float2MInt(Float2Double(MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8)), 64)))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(MI617, 128, 160), 24, 8)), 64), concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(MI617, 160, 192), 24, 8)), 64), concatenateMInt(Float2MInt(Float2Double(MInt2Float(extractMInt(MI617, 192, 224), 24, 8)), 64), Float2MInt(Float2Double(MInt2Float(extractMInt(MI617, 224, 256), 24, 8)), 64)))) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _616), 128, 192)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(192, 0), extractMInt(MI616, 128, 192)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _617)   )
echo Debug:  Result: "YMM3" |-> (MI617   )
[4m[1m[34mwriteKDefn vcvtss2sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvtss2sd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vcvtss2sil_r32_xmm[0m
vcvtss2sil_r32_xmm 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvtps2dq_ymm_ymm.k
Warn: [4m[1m[35mvcvtss2sil_r32_xmm: UnSupported[0m
[4m[1m[34mCheck if supported: vcvttpd2dq_xmm_xmm[0m
vcvttpd2dq_xmm_xmm 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvttpd2dq_xmm_ymm.k
Warn: [4m[1m[35mvcvttpd2dq_xmm_xmm: UnSupported[0m
[4m[1m[34mCheck if supported: vcvttsd2sil_r32_xmm[0m
vcvttsd2sil_r32_xmm 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvttpd2dq_xmm_ymm.k
Warn: [4m[1m[35mvcvttsd2sil_r32_xmm: UnSupported[0m
[4m[1m[34mCheck if supported: vfmadd231pd_ymm_ymm_ymm[0m
[4m[1m[34mcreatespec vfmadd231pd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd231pd_ymm_ymm_ymm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd231pd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vfmadd132pd %ymm3, %ymm1, %ymm2
%ymm3 -> 1
fma -> 1
%ymm2 -> 1
%ymm1 -> 1

Circuit: vmovdqa %ymm2, %ymm1
avx -> 1
%ymm1 -> 1
%ymm2 -> 1

Total Circuit
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1
 -> 1

Target
YMM1 -> 1
 -> 1
YMM3 -> 1
YMM2 -> 1

[4m[1m[34mkprove vfmadd231pd_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd231pd_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd231pd_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmadd231pd_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vfmadd231pd_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd231pd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _613), 0, 64), 53, 11)  +Float  ( MInt2Float(extractMInt(mi(256, _614), 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 0, 64), 53, 11) )  ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _613), 64, 128), 53, 11)  +Float  ( MInt2Float(extractMInt(mi(256, _614), 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 64, 128), 53, 11) )  ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _613), 128, 192), 53, 11)  +Float  ( MInt2Float(extractMInt(mi(256, _614), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11) )  ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _613), 192, 256), 53, 11)  +Float  ( MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11) )  ) , 64)))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI613, 0, 64), 53, 11)  +Float  ( MInt2Float(extractMInt(MI614, 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 0, 64), 53, 11) )  ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI613, 64, 128), 53, 11)  +Float  ( MInt2Float(extractMInt(MI614, 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 64, 128), 53, 11) )  ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI613, 128, 192), 53, 11)  +Float  ( MInt2Float(extractMInt(MI614, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 128, 192), 53, 11) )  ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI613, 192, 256), 53, 11)  +Float  ( MInt2Float(extractMInt(MI614, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 192, 256), 53, 11) )  ) , 64)))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _613), 0, 64), 53, 11)  +Float  ( MInt2Float(extractMInt(mi(256, _614), 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 0, 64), 53, 11) )  ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _613), 64, 128), 53, 11)  +Float  ( MInt2Float(extractMInt(mi(256, _614), 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 64, 128), 53, 11) )  ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _613), 128, 192), 53, 11)  +Float  ( MInt2Float(extractMInt(mi(256, _614), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11) )  ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _613), 192, 256), 53, 11)  +Float  ( MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11) )  ) , 64)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI613, 0, 64), 53, 11)  +Float  ( MInt2Float(extractMInt(MI614, 0, 64), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 0, 64), 53, 11) )  ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI613, 64, 128), 53, 11)  +Float  ( MInt2Float(extractMInt(MI614, 64, 128), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 64, 128), 53, 11) )  ) , 64), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI613, 128, 192), 53, 11)  +Float  ( MInt2Float(extractMInt(MI614, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 128, 192), 53, 11) )  ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI613, 192, 256), 53, 11)  +Float  ( MInt2Float(extractMInt(MI614, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 192, 256), 53, 11) )  ) , 64)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _615)   )
echo Debug:  Result: "YMM3" |-> (MI615   )
[4m[1m[34mwriteKDefn vfmadd231pd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmadd231pd_ymm_ymm_ymm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmadd231ps_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfmadd231ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd231ps_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd231ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovupd %xmm1, %xmm12
avx -> 1
%xmm1 -> 1
%xmm12 -> 1
%ymm12 -> 1

Circuit: vmovdqu %xmm2, %xmm6
%xmm2 -> 1
avx -> 1
%ymm6 -> 1
%xmm6 -> 1

Circuit: vmovaps %xmm3, %xmm1
%xmm3 -> 1
%ymm1 -> 1
%xmm1 -> 1
avx -> 1

Circuit: vfmadd213ps %ymm12, %ymm6, %ymm1
%ymm1 -> 1
%ymm12 -> 1
fma -> 1
%ymm6 -> 1

Total Circuit
YMM12 -> 1
YMM1 -> 1
YMM6 -> 1
YMM3 -> 1
 -> 1
YMM2 -> 1

Target
 -> 1
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove vfmadd231ps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd231ps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd231ps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmadd231ps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmadd231ps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd231ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 256)) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 256)) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8) )  ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8) )  ) , 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 128, 160), 24, 8)  +Float  ( MInt2Float(extractMInt(MI616, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 128, 160), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 160, 192), 24, 8)  +Float  ( MInt2Float(extractMInt(MI616, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 160, 192), 24, 8) )  ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 224), 24, 8)  +Float  ( MInt2Float(extractMInt(MI616, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 192, 224), 24, 8) )  ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI615, 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(MI616, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 224, 256), 24, 8) )  ) , 32))))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _617) )
echo Debug:  Result: "YMM3" |-> (MI617 )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _616), 128, 256)) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(128, 0), extractMInt(MI616, 128, 256)) )
[4m[1m[34mwriteKDefn vfmadd231ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmadd231ps_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmsub132ps_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfmsub132ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub132ps_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub132ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovdqa %xmm1, %xmm1
%ymm1 -> 1
avx -> 1
%xmm1 -> 1

Circuit: vmovupd %xmm3, %xmm0
%xmm0 -> 1
%xmm3 -> 1
%ymm0 -> 1
avx -> 1

Circuit: vmovupd %xmm2, %xmm4
%ymm4 -> 1
%xmm4 -> 1
%xmm2 -> 1
avx -> 1

Circuit: vfmsub132ps %ymm0, %ymm4, %ymm1
%ymm0 -> 1
%ymm1 -> 1
fma -> 1
%ymm4 -> 1

Total Circuit
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1
 -> 1
YMM4 -> 1
YMM0 -> 1

Target
YMM2 -> 1
 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vfmsub132ps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub132ps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub132ps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmsub132ps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmsub132ps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub132ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI615, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 128, 160), 24, 8) )  -Float  MInt2Float(extractMInt(MI616, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI615, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(MI616, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI615, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 192, 224), 24, 8) )  -Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI615, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _616), 128, 256)) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(128, 0), extractMInt(MI616, 128, 256)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _617) )
echo Debug:  Result: "YMM3" |-> (MI617 )
echo Debug:  PreResult: "YMM0" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _617), 128, 256))   )
echo Debug:  Result: "YMM0" |-> (concatenateMInt(mi(128, 0), extractMInt(MI617, 128, 256))   )
[4m[1m[34mwriteKDefn vfmsub132ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmsub132ps_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmsub231ps_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfnmsub231ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub231ps_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub231ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovupd %xmm1, %xmm13
%xmm13 -> 1
%ymm13 -> 1
%xmm1 -> 1
avx -> 1

Circuit: vmovdqu %xmm2, %xmm6
avx -> 1
%xmm2 -> 1
%ymm6 -> 1
%xmm6 -> 1

Circuit: vmovapd %xmm3, %xmm1
avx -> 1
%xmm1 -> 1
%xmm3 -> 1
%ymm1 -> 1

Circuit: vfnmsub132ps %ymm1, %ymm13, %ymm6
%ymm13 -> 1
%ymm1 -> 1
fma -> 1
%ymm6 -> 1

Circuit: vmovapd %xmm6, %xmm1
%xmm6 -> 1
%ymm1 -> 1
avx -> 1
%xmm1 -> 1

Total Circuit
YMM13 -> 1
YMM2 -> 1
YMM3 -> 1
 -> 1
YMM6 -> 1
YMM1 -> 1

Target
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1
 -> 1

[4m[1m[34mkprove vfnmsub231ps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub231ps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub231ps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmsub231ps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmsub231ps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub231ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI616, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 128, 160), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI615, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI616, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 160, 192), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI615, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI616, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 192, 224), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI615, 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI616, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI615, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 256)) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 256)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _617) )
echo Debug:  Result: "YMM3" |-> (MI617 )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(32, -2147483648), concatenateMInt(mi(32, -2147483648), concatenateMInt(mi(32, -2147483648), concatenateMInt(mi(32, -2147483648), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8) ) , 32)))))))) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(32, -2147483648), concatenateMInt(mi(32, -2147483648), concatenateMInt(mi(32, -2147483648), concatenateMInt(mi(32, -2147483648), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI616, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 128, 160), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI615, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI616, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 160, 192), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI615, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI616, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 192, 224), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI615, 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI616, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI615, 224, 256), 24, 8) ) , 32)))))))) )
[4m[1m[34mwriteKDefn vfnmsub231ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmsub231ps_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmaxps_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vmaxps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmaxps_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmaxps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovdqa %xmm3, %xmm3
%xmm3 -> 1
avx -> 1
%ymm3 -> 1

Circuit: vmovdqa %xmm2, %xmm11
%ymm11 -> 1
avx -> 1
%xmm11 -> 1
%xmm2 -> 1

Circuit: vmaxps %ymm3, %ymm11, %ymm1
%ymm1 -> 1
%ymm3 -> 1
avx -> 1
%ymm11 -> 1

Total Circuit
YMM11 -> 1
YMM1 -> 1
YMM2 -> 1
 -> 1
YMM3 -> 1

Target
YMM1 -> 1
 -> 1
YMM3 -> 1
YMM2 -> 1

[4m[1m[34mkprove vmaxps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmaxps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmaxps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmaxps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vmaxps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmaxps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8), MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8)), 32), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8), MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8)), 32), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8), MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8)), 32), Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8), MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8)), 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(MI616, 128, 160), 24, 8), MInt2Float(extractMInt(MI615, 128, 160), 24, 8)), 32), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(MI616, 160, 192), 24, 8), MInt2Float(extractMInt(MI615, 160, 192), 24, 8)), 32), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(MI616, 192, 224), 24, 8), MInt2Float(extractMInt(MI615, 192, 224), 24, 8)), 32), Float2MInt(maxFloat(MInt2Float(extractMInt(MI616, 224, 256), 24, 8), MInt2Float(extractMInt(MI615, 224, 256), 24, 8)), 32))))) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 256)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 256)) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _616), 128, 256))   )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(MI616, 128, 256))   )
[4m[1m[34mwriteKDefn vmaxps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmaxps_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vminps_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vminps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vminps_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvminps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovdqa %xmm3, %xmm1
%xmm3 -> 1
%ymm1 -> 1
avx -> 1
%xmm1 -> 1

Circuit: vmovdqu %xmm2, %xmm14
%xmm14 -> 1
%ymm14 -> 1
%xmm2 -> 1
avx -> 1

Circuit: vminps %ymm1, %ymm14, %ymm1
avx -> 1
%ymm14 -> 1
%ymm1 -> 1

Total Circuit
YMM1 -> 1
YMM14 -> 1
YMM2 -> 1
YMM3 -> 1
 -> 1

Target
YMM2 -> 1
 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vminps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vminps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vminps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vminps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vminps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvminps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8), MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8)), 32), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8), MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8)), 32), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8), MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8)), 32), Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8), MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8)), 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(MI616, 128, 160), 24, 8), MInt2Float(extractMInt(MI615, 128, 160), 24, 8)), 32), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(MI616, 160, 192), 24, 8), MInt2Float(extractMInt(MI615, 160, 192), 24, 8)), 32), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(MI616, 192, 224), 24, 8), MInt2Float(extractMInt(MI615, 192, 224), 24, 8)), 32), Float2MInt(minFloat(MInt2Float(extractMInt(MI616, 224, 256), 24, 8), MInt2Float(extractMInt(MI615, 224, 256), 24, 8)), 32))))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _616) )
echo Debug:  Result: "YMM3" |-> (MI616 )
echo Debug:  PreResult: "YMM14" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 256))   )
echo Debug:  Result: "YMM14" |-> (concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 256))   )
[4m[1m[34mwriteKDefn vminps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vminps_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovapd_ymm_ymm[0m
[4m[1m[34mcreatespec vmovapd_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovapd_ymm_ymm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovapd_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_032_xmm2_eax_edx_r8d_r9d
%xmm2 -> 1
%r9d -> 1
%edx -> 1
%r8d -> 1
%eax -> 1

Circuit: vmovdqa %ymm2, %ymm1
avx -> 1
%ymm2 -> 1
%ymm1 -> 1

Circuit: callq .move_r9b_to_byte_12_of_ymm1
%r9b -> 1
%ymm1 -> 1

Total Circuit
 -> 1
YMM2 -> 1
R9 -> 1
RDX -> 1
YMM1 -> 1
R8 -> 1
RAX -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vmovapd_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovapd_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovapd_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovapd_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vmovapd_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovapd_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (mi(256, _616) )
echo Debug:  Result: "YMM1" |-> (MI616 )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _616), 160, 192)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(MI616, 160, 192)) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _616), 128, 160)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(32, 0), extractMInt(MI616, 128, 160)) )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _616), 192, 224)) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI616, 192, 224)) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _616), 224, 256)) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI616, 224, 256)) )
[4m[1m[34mwriteKDefn vmovapd_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovapd_ymm_ymm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovaps_ymm_ymm[0m
[4m[1m[34mcreatespec vmovaps_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovaps_ymm_ymm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovaps_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovdqa %ymm2, %ymm1
avx -> 1
%ymm1 -> 1
%ymm2 -> 1

Total Circuit
YMM1 -> 1
 -> 1
YMM2 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove vmovaps_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovaps_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovaps_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovaps_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vmovaps_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovaps_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _612) )
echo Debug:  Result: "YMM2" |-> (MI612 )
echo Debug:  PreResult: "YMM1" |-> (mi(256, _612)   )
echo Debug:  Result: "YMM1" |-> (MI612   )
[4m[1m[34mwriteKDefn vmovaps_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovaps_ymm_ymm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovddup_xmm_xmm[0m
[4m[1m[34mcreatespec vmovddup_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovddup_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovddup_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_064_xmm2_r12_r13
%r12 -> 1
%xmm2 -> 1
%r13 -> 1

Circuit: callq .move_064_128_r12_r13_xmm1
%xmm1 -> 1
%r12 -> 1
%r13 -> 1

Circuit: vpbroadcastq %xmm1, %xmm1
%xmm1 -> 1
avx2 -> 1
%ymm1 -> 1

Total Circuit
R13 -> 1
YMM2 -> 1
 -> 1
YMM1 -> 1
R12 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove vmovddup_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovddup_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovddup_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovddup_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vmovddup_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovddup_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _614), 192, 256))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI614, 192, 256), extractMInt(MI614, 192, 256))) )
echo Debug:  PreResult: "R12" |-> (extractMInt(mi(256, _614), 192, 256) )
echo Debug:  Result: "R12" |-> (extractMInt(MI614, 192, 256) )
echo Debug:  PreResult: "R13" |-> (extractMInt(mi(256, _614), 128, 192)   )
echo Debug:  Result: "R13" |-> (extractMInt(MI614, 128, 192)   )
[4m[1m[34mwriteKDefn vmovddup_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovddup_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovlhps_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vmovlhps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovlhps_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovlhps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vpunpcklqdq %xmm3, %xmm2, %xmm2
avx -> 1
%xmm2 -> 1
%xmm3 -> 1
%ymm2 -> 1

Circuit: callq .move_128_064_xmm2_r8_r9
%r9 -> 1
%r8 -> 1
%xmm2 -> 1

Circuit: vzeroall
%ymm0 -> 1
%ymm9 -> 1
%ymm3 -> 1
%ymm5 -> 1
avx -> 1
%ymm11 -> 1
%ymm10 -> 1
%ymm4 -> 1
%ymm2 -> 1
%ymm1 -> 1
%ymm12 -> 1
%ymm6 -> 1
%ymm7 -> 1
%ymm14 -> 1
%ymm8 -> 1
%ymm13 -> 1
%ymm15 -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%r8 -> 1
%xmm1 -> 1
%r9 -> 1

Total Circuit
YMM4 -> 1
R8 -> 1
YMM10 -> 1
YMM15 -> 1
YMM11 -> 1
YMM0 -> 1
YMM13 -> 1
YMM8 -> 1
YMM12 -> 1
YMM9 -> 1
YMM5 -> 1
YMM1 -> 1
R9 -> 1
YMM3 -> 1
YMM7 -> 1
 -> 1
YMM6 -> 1
YMM14 -> 1
YMM2 -> 1

Target
YMM3 -> 1
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove vmovlhps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovlhps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovlhps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovlhps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vmovlhps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovlhps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _629), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI629, 192, 256) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _630), 192, 256) )
echo Debug:  Result: "R9" |-> (extractMInt(MI630, 192, 256) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _630), 192, 256), extractMInt(mi(256, _629), 192, 256))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI630, 192, 256), extractMInt(MI629, 192, 256))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vmovlhps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovlhps_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovsd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vmovsd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovsd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovsd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_64_xmm2_xmm8_xmm9
%xmm2 -> 1
%xmm9 -> 1
%xmm8 -> 1

Circuit: vmovapd %xmm3, %xmm13
%xmm13 -> 1
%xmm3 -> 1
%ymm13 -> 1
avx -> 1

Circuit: vpunpcklqdq %xmm9, %xmm13, %xmm1
avx -> 1
%xmm1 -> 1
%xmm13 -> 1
%xmm9 -> 1
%ymm1 -> 1

Total Circuit
YMM8 -> 1
YMM9 -> 1
YMM1 -> 1
 -> 1
YMM3 -> 1
YMM2 -> 1
YMM13 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1
YMM3 -> 1

[4m[1m[34mkprove vmovsd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovsd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovsd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovsd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vmovsd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovsd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _617) )
echo Debug:  Result: "YMM2" |-> (MI617 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _617), 128, 192), extractMInt(mi(256, _618), 192, 256))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI617, 128, 192), extractMInt(MI618, 192, 256))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _618), 128, 256)) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(128, 0), extractMInt(MI618, 128, 256)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _618) )
echo Debug:  Result: "YMM3" |-> (MI618 )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _617), 192, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(192, 0), extractMInt(MI617, 192, 256)) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _617), 128, 192))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(192, 0), extractMInt(MI617, 128, 192))   )
[4m[1m[34mwriteKDefn vmovsd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovsd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovss_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vmovss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovss_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vrcpps %xmm3, %xmm1
%xmm1 -> 1
avx -> 1
%ymm1 -> 1
%xmm3 -> 1

Circuit: callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
%xmm2 -> 1
%xmm11 -> 1
%xmm10 -> 1
%xmm9 -> 1
%xmm8 -> 1

Circuit: vmovdqu %xmm3, %xmm8
avx -> 1
%xmm8 -> 1
%ymm8 -> 1
%xmm3 -> 1

Circuit: callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
%xmm10 -> 1
%xmm8 -> 1
%xmm9 -> 1
%xmm1 -> 1
%xmm11 -> 1

Total Circuit
YMM9 -> 1
YMM1 -> 1
YMM8 -> 1
YMM2 -> 1
 -> 1
YMM3 -> 1
YMM10 -> 1
YMM11 -> 1

Target
YMM1 -> 1
YMM3 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove vmovss_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovss_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovss_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovss_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vmovss_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _618) )
echo Debug:  Result: "YMM2" |-> (MI618 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _618), 128, 224), extractMInt(mi(256, _619), 224, 256))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI618, 128, 224), extractMInt(MI619, 224, 256))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _618), 160, 192)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(MI618, 160, 192)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _618), 128, 160)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(MI618, 128, 160)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _619) )
echo Debug:  Result: "YMM3" |-> (MI619 )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _619), 128, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), extractMInt(MI619, 128, 256)) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _618), 192, 224))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(MI618, 192, 224))   )
[4m[1m[34mwriteKDefn vmovss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovss_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovups_ymm_ymm[0m
[4m[1m[34mcreatespec vmovups_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovups_ymm_ymm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovups_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_032_xmm2_eax_edx_r8d_r9d
%xmm2 -> 1
%r9d -> 1
%edx -> 1
%eax -> 1
%r8d -> 1

Circuit: vmovupd %ymm2, %ymm1
avx -> 1
%ymm1 -> 1
%ymm2 -> 1

Circuit: callq .move_r8b_to_byte_8_of_ymm1
%r8b -> 1
%ymm1 -> 1

Total Circuit
RAX -> 1
R8 -> 1
RDX -> 1
R9 -> 1
YMM1 -> 1
 -> 1
YMM2 -> 1

Target
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove vmovups_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovups_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovups_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovups_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vmovups_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovups_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (mi(256, _616) )
echo Debug:  Result: "YMM1" |-> (MI616 )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _616), 160, 192)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(MI616, 160, 192)) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _616), 128, 160)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(32, 0), extractMInt(MI616, 128, 160)) )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _616), 192, 224)) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI616, 192, 224)) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(256, _616), 224, 256)) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI616, 224, 256)) )
[4m[1m[34mwriteKDefn vmovups_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovups_ymm_ymm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vorps_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vorps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vorps_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvorps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vorpd %xmm3, %xmm2, %xmm1
%xmm3 -> 1
%ymm1 -> 1
avx -> 1
%xmm1 -> 1
%xmm2 -> 1

Total Circuit
YMM3 -> 1
 -> 1
YMM2 -> 1
YMM1 -> 1

Target
YMM3 -> 1
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove vorps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vorps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vorps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vorps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vorps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvorps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(orMInt(extractMInt(mi(256, _614), 128, 192), extractMInt(mi(256, _615), 128, 192)), orMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _615), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(orMInt(extractMInt(MI614, 128, 192), extractMInt(MI615, 128, 192)), orMInt(extractMInt(MI614, 192, 256), extractMInt(MI615, 192, 256)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _615)   )
echo Debug:  Result: "YMM3" |-> (MI615   )
[4m[1m[34mwriteKDefn vorps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vorps_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpbroadcastq_ymm_xmm[0m
[4m[1m[34mcreatespec vpbroadcastq_ymm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastq_ymm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpbroadcastq_ymm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vpbroadcastq %xmm2, %xmm1
%ymm1 -> 1
%xmm1 -> 1
avx2 -> 1
%xmm2 -> 1

Circuit: vmovupd %xmm1, %xmm8
%xmm8 -> 1
%ymm8 -> 1
avx -> 1
%xmm1 -> 1

Circuit: vmovdqa %ymm1, %ymm9
%ymm9 -> 1
avx -> 1
%ymm1 -> 1

Circuit: callq .move_128_256_xmm8_xmm9_ymm1
%xmm8 -> 1
%xmm9 -> 1
%ymm1 -> 1

Total Circuit
YMM2 -> 1
 -> 1
YMM9 -> 1
YMM1 -> 1
YMM8 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vpbroadcastq_ymm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastq_ymm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastq_ymm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpbroadcastq_ymm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpbroadcastq_ymm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpbroadcastq_ymm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _614), 192, 256)), concatenateMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _614), 192, 256))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(extractMInt(MI614, 192, 256), extractMInt(MI614, 192, 256)), concatenateMInt(extractMInt(MI614, 192, 256), extractMInt(MI614, 192, 256))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _614), 192, 256))) )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI614, 192, 256), extractMInt(MI614, 192, 256))) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _614), 192, 256)))   )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI614, 192, 256), extractMInt(MI614, 192, 256)))   )
[4m[1m[34mwriteKDefn vpbroadcastq_ymm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpbroadcastq_ymm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpxor_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vpxor_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpxor_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpxor_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_064_xmm2_r12_r13
%r12 -> 1
%xmm2 -> 1
%r13 -> 1

Circuit: vmovdqa %xmm3, %xmm1
avx -> 1
%xmm1 -> 1
%xmm3 -> 1
%ymm1 -> 1

Circuit: callq .move_128_064_xmm1_r8_r9
%xmm1 -> 1
%r8 -> 1
%r9 -> 1

Circuit: xorq %r8, %r12
%cf -> 1
%sf -> 1
%zf -> 1
%of -> 1
%af -> 1
%r12 -> 1
%pf -> 1
%r8 -> 1

Circuit: xorq %r9, %r13
%af -> 1
%r13 -> 1
%pf -> 1
%of -> 1
%cf -> 1
%sf -> 1
%r9 -> 1
%zf -> 1

Circuit: callq .move_064_128_r12_r13_xmm1
%r13 -> 1
%r12 -> 1
%xmm1 -> 1

Total Circuit
R8 -> 1
OF -> 1
ZF -> 1
PF -> 1
R13 -> 1
YMM3 -> 1
 -> 1
CF -> 1
YMM2 -> 1
R12 -> 1
AF -> 1
YMM1 -> 1
R9 -> 1
SF -> 1

Target
 -> 1
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove vpxor_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpxor_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpxor_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpxor_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpxor_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpxor_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _625), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI625, 192, 256) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _625), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI625, 128, 192) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(256, _625), 128, 192), extractMInt(mi(256, _624), 128, 192)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(MI625, 128, 192), extractMInt(MI624, 128, 192)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _624) )
echo Debug:  Result: "YMM2" |-> (MI624 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(extractMInt(mi(256, _625), 128, 192), extractMInt(mi(256, _624), 128, 192)), xorMInt(extractMInt(mi(256, _625), 192, 256), extractMInt(mi(256, _624), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(extractMInt(MI625, 128, 192), extractMInt(MI624, 128, 192)), xorMInt(extractMInt(MI625, 192, 256), extractMInt(MI624, 192, 256)))) )
echo Debug:  PreResult: "R12" |-> (xorMInt(extractMInt(mi(256, _625), 192, 256), extractMInt(mi(256, _624), 192, 256)) )
echo Debug:  Result: "R12" |-> (xorMInt(extractMInt(MI625, 192, 256), extractMInt(MI624, 192, 256)) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(256, _625), 128, 129), extractMInt(mi(256, _624), 128, 129)) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(MI625, 128, 129), extractMInt(MI624, 128, 129)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _625) )
echo Debug:  Result: "YMM3" |-> (MI625 )
echo Debug:  PreResult: "R13" |-> (xorMInt(extractMInt(mi(256, _625), 128, 192), extractMInt(mi(256, _624), 128, 192)) )
echo Debug:  Result: "R13" |-> (xorMInt(extractMInt(MI625, 128, 192), extractMInt(MI624, 128, 192)) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(256, _625), 184, 192), extractMInt(mi(256, _624), 184, 192)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI625, 184, 192), extractMInt(MI624, 184, 192)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
[4m[1m[34mwriteKDefn vpxor_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpxor_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vsqrtpd_xmm_xmm[0m
[4m[1m[34mcreatespec vsqrtpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsqrtpd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvsqrtpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_064_xmm2_r8_r9
%r8 -> 1
%xmm2 -> 1
%r9 -> 1

Circuit: callq .move_064_128_r8_r9_xmm3
%r8 -> 1
%xmm3 -> 1
%r9 -> 1

Circuit: vmovdqu %xmm3, %xmm2
%xmm2 -> 1
avx -> 1
%ymm2 -> 1
%xmm3 -> 1

Circuit: vsqrtpd %ymm2, %ymm1
avx -> 1
%ymm1 -> 1
%ymm2 -> 1

Total Circuit
R8 -> 1
YMM1 -> 1
R9 -> 1
YMM3 -> 1
 -> 1
YMM2 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vsqrtpd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsqrtpd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsqrtpd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vsqrtpd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vsqrtpd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvsqrtpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 256)) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 256)) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11), 2), 64), Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11), 2), 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(rootFloat(MInt2Float(extractMInt(MI615, 128, 192), 53, 11), 2), 64), Float2MInt(rootFloat(MInt2Float(extractMInt(MI615, 192, 256), 53, 11), 2), 64))) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 256)) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 256)) )
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _615), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI615, 192, 256) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _615), 128, 192)   )
echo Debug:  Result: "R9" |-> (extractMInt(MI615, 128, 192)   )
[4m[1m[34mwriteKDefn vsqrtpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vsqrtpd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vsubpd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vsubpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsubpd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvsubpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovupd %xmm2, %xmm1
%xmm2 -> 1
%xmm1 -> 1
avx -> 1
%ymm1 -> 1

Circuit: vmovaps %xmm3, %xmm7
%ymm7 -> 1
%xmm3 -> 1
%xmm7 -> 1
avx -> 1

Circuit: vsubpd %ymm7, %ymm1, %ymm1
%ymm1 -> 1
%ymm7 -> 1
avx -> 1

Total Circuit
YMM1 -> 1
YMM7 -> 1
 -> 1
YMM3 -> 1
YMM2 -> 1

Target
YMM1 -> 1
 -> 1
YMM3 -> 1
YMM2 -> 1

[4m[1m[34mkprove vsubpd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsubpd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsubpd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vsubpd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vsubpd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvsubpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 128, 192), 53, 11)  -Float  MInt2Float(extractMInt(MI616, 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(MI616, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _616) )
echo Debug:  Result: "YMM3" |-> (MI616 )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _616), 128, 256))   )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(128, 0), extractMInt(MI616, 128, 256))   )
[4m[1m[34mwriteKDefn vsubpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vsubpd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: xaddb_r8_r8[0m
[4m[1m[34mcreatespec xaddb_r8_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xaddb_r8_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxaddb_r8_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .clear_cf
%cf -> 1

Circuit: movsbl %cl, %r13d
%cl -> 1
%r13d -> 1
%r13 -> 1

Circuit: movsbl %bl, %r15d
%r15d -> 1
%r15 -> 1
%bl -> 1

Circuit: movsbq %r15b, %rcx
%rcx -> 1
%r15b -> 1

Circuit: adcb %cl, %r13b
%zf -> 1
%sf -> 1
%cf -> 1
%of -> 1
%r13b -> 1
%pf -> 1
%af -> 1
%cl -> 1

Circuit: movslq %r13d, %rbx
%r13d -> 1
%rbx -> 1

Total Circuit
R13 -> 1
RCX -> 1
PF -> 1
RBX -> 1
ZF -> 1
OF -> 1
SF -> 1
AF -> 1
CF -> 1
R15 -> 1

Target
AF -> 1
SF -> 1
CF -> 1
PF -> 1
RCX -> 1
RBX -> 1
OF -> 1
ZF -> 1

[4m[1m[34mkprove xaddb_r8_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xaddb_r8_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xaddb_r8_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput xaddb_r8_r8[0m
[4m[1m[34msanitizeSpecOutput xaddb_r8_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxaddb_r8_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35mxaddb_r8_r8: More that one writes. May Need to schedule.[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _631), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _632), 56, 64))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI631, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI632, 56, 64))), 0, 1) )
echo Debug:  PreResult: "SPAD2" |-> (concatenateMInt(mi(192, 0), mi(64, _631)) )
echo Debug:  Result: "SPAD2" |-> (concatenateMInt(mi(192, 0), MI631) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _631), 56, 64), extractMInt(mi(64, _632), 56, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _631), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _632), 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI631, 56, 64), extractMInt(MI632, 56, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI631, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI632, 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(extractMInt(mi(64, _632), 0, 56), extractMInt(mi(64, _631), 56, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(extractMInt(MI632, 0, 56), extractMInt(MI631, 56, 64)) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _632)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI632) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _631), 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _631), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _632), 56, 64))), 1, 9)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI631, 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI631, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI632, 56, 64))), 1, 9)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _631), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _632), 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI631, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI632, 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _631), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _632), 56, 64))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI631, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI632, 56, 64))), 1, 2) )
echo Debug:  PreResult: "R13" |-> (concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _632), 56, 64))), 32, 56)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _631), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _632), 56, 64))), 1, 9)) )
echo Debug:  Result: "R13" |-> (concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI632, 56, 64))), 32, 56)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI631, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI632, 56, 64))), 1, 9)) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _631), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _632), 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI631, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI632, 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _631), 56, 57), extractMInt(mi(64, _632), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _631), 56, 57), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _631), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _632), 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI631, 56, 57), extractMInt(MI632, 56, 57))  andBool   notBool  ( eqMInt(extractMInt(MI631, 56, 57), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI631, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI632, 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R15" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _631), 56, 64))), 32, 64)) )
echo Debug:  Result: "R15" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI631, 56, 64))), 32, 64)) )
[4m[1m[34mwriteKDefn xaddb_r8_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-xaddb_r8_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: xaddl_r32_r32[0m
[4m[1m[34mcreatespec xaddl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xaddl_r32_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxaddl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: xchgl %ebx, %ecx
%rbx -> 1
%rcx -> 1
%ebx -> 1
%ecx -> 1

Circuit: callq .clear_cf
%cf -> 1

Circuit: adcl %ecx, %ebx
%ebx -> 1
%of -> 1
%zf -> 1
%sf -> 1
%ecx -> 1
%cf -> 1
%rbx -> 1
%pf -> 1
%af -> 1

Total Circuit
RBX -> 1
RCX -> 1
PF -> 1
OF -> 1
ZF -> 1
AF -> 1
SF -> 1
CF -> 1

Target
CF -> 1
AF -> 1
SF -> 1
OF -> 1
ZF -> 1
RCX -> 1
PF -> 1
RBX -> 1

[4m[1m[34mkprove xaddl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xaddl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xaddl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput xaddl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput xaddl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxaddl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35mxaddl_r32_r32: More that one writes. May Need to schedule.[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 32, 64))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 32, 64))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 32, 64))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 32, 64))), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _627), 32, 64), extractMInt(mi(64, _628), 32, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 32, 64))), 1, 33)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI627, 32, 64), extractMInt(MI628, 32, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 32, 64))), 1, 33)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 32, 64))), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 32, 64))), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _627), 32, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI627, 32, 64)) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _627), 32, 33), extractMInt(mi(64, _628), 32, 33))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _627), 32, 33), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 32, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI627, 32, 33), extractMInt(MI628, 32, 33))  andBool   notBool  ( eqMInt(extractMInt(MI627, 32, 33), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 32, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 32, 64))), 1, 33)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 32, 64))), 1, 33)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 32, 64))), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 32, 64))), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn xaddl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-xaddl_r32_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: xaddq_r64_r64[0m
[4m[1m[34mcreatespec xaddq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xaddq_r64_r64_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxaddq_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq %rbx, %rsi
%rsi -> 1
%rbx -> 1

Circuit: addq %rsi, %rcx
%af -> 1
%rcx -> 1
%pf -> 1
%rsi -> 1
%cf -> 1
%zf -> 1
%sf -> 1
%of -> 1

Circuit: xchgq %rcx, %rbx
%rcx -> 1
%rbx -> 1

Total Circuit
CF -> 1
RSI -> 1
AF -> 1
SF -> 1
ZF -> 1
OF -> 1
RCX -> 1
PF -> 1
RBX -> 1

Target
RBX -> 1
RCX -> 1
PF -> 1
ZF -> 1
OF -> 1
AF -> 1
SF -> 1
CF -> 1

[4m[1m[34mkprove xaddq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xaddq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xaddq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput xaddq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput xaddq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxaddq_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35mxaddq_r64_r64: More that one writes. May Need to schedule.[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _628)), concatenateMInt(mi(1, 0), mi(64, _629))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), MI628), concatenateMInt(mi(1, 0), MI629)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _628)), concatenateMInt(mi(1, 0), mi(64, _629))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), MI628), concatenateMInt(mi(1, 0), MI629)), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(64, _628), mi(64, _629)), extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _628)), concatenateMInt(mi(1, 0), mi(64, _629))), 1, 65)), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MI628, MI629), extractMInt(addMInt(concatenateMInt(mi(1, 0), MI628), concatenateMInt(mi(1, 0), MI629)), 1, 65)), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _628)), concatenateMInt(mi(1, 0), mi(64, _629))), 57, 65), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), MI628), concatenateMInt(mi(1, 0), MI629)), 57, 65), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _628) )
echo Debug:  Result: "RCX" |-> (MI628 )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _628), 0, 1), extractMInt(mi(64, _629), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _628), 0, 1), extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _628)), concatenateMInt(mi(1, 0), mi(64, _629))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI628, 0, 1), extractMInt(MI629, 0, 1))  andBool   notBool  ( eqMInt(extractMInt(MI628, 0, 1), extractMInt(addMInt(concatenateMInt(mi(1, 0), MI628), concatenateMInt(mi(1, 0), MI629)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RSI" |-> (mi(64, _628) )
echo Debug:  Result: "RSI" |-> (MI628 )
echo Debug:  PreResult: "RBX" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _628)), concatenateMInt(mi(1, 0), mi(64, _629))), 1, 65) )
echo Debug:  Result: "RBX" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), MI628), concatenateMInt(mi(1, 0), MI629)), 1, 65) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), mi(64, _628)), concatenateMInt(mi(1, 0), mi(64, _629))), 1, 65), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), MI628), concatenateMInt(mi(1, 0), MI629)), 1, 65), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn xaddq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-xaddq_r64_r64.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: xchgl_eax_r32[0m
Warn: [4m[1m[35mxchgl_eax_r32: Redundant Instructions[0m
[4m[1m[34mCheck if supported: xchgl_r32_eax[0m
Warn: [4m[1m[35mxchgl_r32_eax: Redundant Instructions[0m
[4m[1m[34mCheck if supported: xchgq_r64_rax[0m
Warn: [4m[1m[35mxchgq_r64_rax: Redundant Instructions[0m
[4m[1m[34mCheck if supported: xchgq_rax_r64[0m
Warn: [4m[1m[35mxchgq_rax_r64: Redundant Instructions[0m
[4m[1m[34mCheck if supported: xchgw_r16_ax[0m
Warn: [4m[1m[35mxchgw_r16_ax: Redundant Instructions[0m
[4m[1m[34mCheck if supported: xorb_r8_rh[0m
[4m[1m[34mcreatespec xorb_r8_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorb_r8_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxorb_r8_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: xorb_r8_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: movzbl %ah, %ebp
%ah -> 1
%ebp -> 1
%rbp -> 1

Circuit: xorq %rax, %rax
%pf -> 1
%af -> 1
%rax -> 1
%sf -> 1
%zf -> 1
%cf -> 1
%of -> 1

Circuit: setc %bh
%cf -> 1
%bh -> 1

Circuit: movswq %bx, %rdx
%bx -> 1
%rdx -> 1

Circuit: xorq %rbp, %rdx
%rdx -> 1
%cf -> 1
%sf -> 1
%zf -> 1
%of -> 1
%af -> 1
%pf -> 1
%rbp -> 1

Circuit: movslq %edx, %rbx
%rbx -> 1
%edx -> 1

Circuit: callq .set_szp_for_bl
%pf -> 1
%zf -> 1
%sf -> 1
%bl -> 1

Total Circuit
CF -> 1
RDX -> 1
SF -> 1
AF -> 1
RBP -> 1
OF -> 1
ZF -> 1
RAX -> 1
PF -> 1
RBX -> 1

Target
AF -> 1
SF -> 1
CF -> 1
PF -> 1
RBX -> 1
RAX -> 1
OF -> 1
ZF -> 1

[4m[1m[34mkprove xorb_r8_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorb_r8_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorb_r8_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput xorb_r8_rh[0m
[4m[1m[34msanitizeSpecOutput xorb_r8_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxorb_r8_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBP" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _630), 48, 56)) )
echo Debug:  Result: "RBP" |-> (concatenateMInt(mi(56, 0), extractMInt(MI630, 48, 56)) )
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(64, _630), 48, 49), extractMInt(mi(64, _631), 56, 57)) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(MI630, 48, 49), extractMInt(MI631, 56, 57)) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, _630), 48, 56), extractMInt(mi(64, _631), 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI630, 48, 56), extractMInt(MI631, 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RDX" |-> (xorMInt(concatenateMInt(mi(56, 0), extractMInt(mi(64, _630), 48, 56)), concatenateMInt(mi(56, 0), extractMInt(mi(64, _631), 56, 64))) )
echo Debug:  Result: "RDX" |-> (xorMInt(concatenateMInt(mi(56, 0), extractMInt(MI630, 48, 56)), concatenateMInt(mi(56, 0), extractMInt(MI631, 56, 64))) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _631)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI631) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (mi(64, 0) )
echo Debug:  Result: "RAX" |-> (mi(64, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _631), 0, 56), xorMInt(extractMInt(mi(64, _630), 48, 56), extractMInt(mi(64, _631), 56, 64))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI631, 0, 56), xorMInt(extractMInt(MI630, 48, 56), extractMInt(MI631, 56, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, _630), 48, 56), extractMInt(mi(64, _631), 56, 64)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(MI630, 48, 56), extractMInt(MI631, 56, 64)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn xorb_r8_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-xorb_r8_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: xorl_r32_r32[0m
[4m[1m[34mcreatespec xorl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorl_r32_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxorl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: xorl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: xchgl %ebx, %ecx
%rbx -> 1
%rcx -> 1
%ebx -> 1
%ecx -> 1

Circuit: xorq %rcx, %rbx
%sf -> 1
%zf -> 1
%cf -> 1
%of -> 1
%pf -> 1
%rcx -> 1
%af -> 1
%rbx -> 1

Circuit: callq .set_szp_for_ebx
%ebx -> 1
%sf -> 1
%zf -> 1
%pf -> 1

Total Circuit
AF -> 1
SF -> 1
CF -> 1
RBX -> 1
RCX -> 1
PF -> 1
ZF -> 1
OF -> 1

Target
CF -> 1
AF -> 1
SF -> 1
OF -> 1
ZF -> 1
RBX -> 1
RCX -> 1
PF -> 1

[4m[1m[34mkprove xorl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput xorl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput xorl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxorl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(64, _627), 32, 33), extractMInt(mi(64, _628), 32, 33)) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(MI627, 32, 33), extractMInt(MI628, 32, 33)) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, _627), 56, 64), extractMInt(mi(64, _628), 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI627, 56, 64), extractMInt(MI628, 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _627), 32, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI627, 32, 64)) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (xorMInt(concatenateMInt(mi(32, 0), extractMInt(mi(64, _627), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _628), 32, 64))) )
echo Debug:  Result: "RBX" |-> (xorMInt(concatenateMInt(mi(32, 0), extractMInt(MI627, 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI628, 32, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, _627), 32, 64), extractMInt(mi(64, _628), 32, 64)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(MI627, 32, 64), extractMInt(MI628, 32, 64)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn xorl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-xorl_r32_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: xorps_xmm_xmm[0m
[4m[1m[34mcreatespec xorps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorps_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxorps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vxorps %xmm2, %xmm1, %xmm6
avx -> 1
%xmm1 -> 1
%xmm2 -> 1
%xmm6 -> 1
%ymm6 -> 1

Circuit: movdqa %xmm6, %xmm1
%xmm6 -> 1
%xmm1 -> 1
sse2 -> 1

Total Circuit
YMM6 -> 1
 -> 1
YMM2 -> 1
YMM1 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove xorps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput xorps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput xorps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxorps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _613), 0, 128), concatenateMInt(xorMInt(extractMInt(mi(256, _614), 128, 192), extractMInt(mi(256, _613), 128, 192)), xorMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _613), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI613, 0, 128), concatenateMInt(xorMInt(extractMInt(MI614, 128, 192), extractMInt(MI613, 128, 192)), xorMInt(extractMInt(MI614, 192, 256), extractMInt(MI613, 192, 256)))) )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(extractMInt(mi(256, _614), 128, 192), extractMInt(mi(256, _613), 128, 192)), xorMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _613), 192, 256)))) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(extractMInt(MI614, 128, 192), extractMInt(MI613, 128, 192)), xorMInt(extractMInt(MI614, 192, 256), extractMInt(MI613, 192, 256)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _613)   )
echo Debug:  Result: "SPAD1" |-> (MI613   )
[4m[1m[34mwriteKDefn xorps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-xorps_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

