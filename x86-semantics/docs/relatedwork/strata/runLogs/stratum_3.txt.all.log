[4m[1m[34mCheck if supported: addb_r8_rh[0m
[4m[1m[34mcreatespec addb_r8_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addb_r8_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddb_r8_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movzbl %ah, %eax
%ah -> 1
%rax -> 1
%eax -> 1

Circuit: addb %al, %bl
%sf -> 1
%zf -> 1
%al -> 1
%bl -> 1
%of -> 1
%af -> 1
%pf -> 1
%cf -> 1

Total Circuit
AF -> 1
CF -> 1
RAX -> 1
ZF -> 1
PF -> 1
RBX -> 1
OF -> 1
SF -> 1

Target
SF -> 1
OF -> 1
RBX -> 1
PF -> 1
ZF -> 1
AF -> 1
CF -> 1
RAX -> 1

[4m[1m[34mkprove addb_r8_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addb_r8_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addb_r8_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput addb_r8_rh[0m
[4m[1m[34msanitizeSpecOutput addb_r8_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddb_r8_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56))), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _629), 56, 64), extractMInt(mi(64, _628), 48, 56)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI629, 56, 64), extractMInt(MI628, 48, 56)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _629)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI629) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _629), 56, 57), extractMInt(mi(64, _628), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _629), 56, 57), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI629, 56, 57), extractMInt(MI628, 48, 49))  andBool   notBool  ( eqMInt(extractMInt(MI629, 56, 57), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _628), 48, 56)) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(mi(56, 0), extractMInt(MI628, 48, 56)) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _629), 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56))), 1, 9)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI629, 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56))), 1, 9)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn addb_r8_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-addb_r8_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: addb_rh_r8[0m
[4m[1m[34mcreatespec addb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addb_rh_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddb_rh_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: xaddb %ah, %bl
%zf -> 1
%sf -> 1
%bl -> 1
%af -> 1
%of -> 1
%pf -> 1
%cf -> 1
%ah -> 1

Circuit: callq .set_szp_for_bl
%pf -> 1
%bl -> 1
%sf -> 1
%zf -> 1

Circuit: movb %bl, %ah
%ah -> 1
%bl -> 1

Total Circuit
ZF -> 1
AF -> 1
CF -> 1
RAX -> 1
RBX -> 1
PF -> 1
OF -> 1
SF -> 1

Target
OF -> 1
SF -> 1
ZF -> 1
AF -> 1
RAX -> 1
CF -> 1
RBX -> 1
PF -> 1

[4m[1m[34mkprove addb_rh_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addb_rh_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addb_rh_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput addb_rh_r8[0m
[4m[1m[34msanitizeSpecOutput addb_rh_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddb_rh_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 56, 64))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI629, 56, 64))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 56, 64))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI629, 56, 64))), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _628), 48, 56), extractMInt(mi(64, _629), 56, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI628, 48, 56), extractMInt(MI629, 56, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI629, 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI629, 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _628)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI628) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _628), 48, 49), extractMInt(mi(64, _629), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _628), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI628, 48, 49), extractMInt(MI629, 56, 57))  andBool   notBool  ( eqMInt(extractMInt(MI628, 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI629, 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _628), 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 56, 64))), 1, 9), extractMInt(mi(64, _628), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI628, 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI629, 56, 64))), 1, 9), extractMInt(MI628, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _629), 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 56, 64))), 1, 9)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI629, 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI629, 56, 64))), 1, 9)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _628), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI628, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI629, 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn addb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-addb_rh_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: bswap_r32[0m
[4m[1m[34mcreatespec bswap_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_bswap_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mbswap_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_032_016_ebx_r8w_r9w
%ebx -> 1
%r9w -> 1
%r8w -> 1

Circuit: callq .move_016_032_r8w_r9w_ecx
%ecx -> 1
%r9w -> 1
%r8w -> 1

Circuit: callq .move_byte_3_of_rbx_to_r8b
%rbx -> 1
%r8b -> 1

Circuit: notl %ebx
%ebx -> 1
%rbx -> 1

Circuit: callq .move_008_016_r8b_r9b_bx
%r9b -> 1
%r8b -> 1
%bx -> 1

Circuit: callq .move_016_008_cx_r8b_r9b
%cx -> 1
%r8b -> 1
%r9b -> 1

Circuit: callq .move_r8b_to_byte_3_of_rbx
%r8b -> 1
%rbx -> 1

Circuit: callq .move_r9b_to_byte_2_of_rbx
%rbx -> 1
%r9b -> 1

Total Circuit
R8 -> 1
RCX -> 1
R9 -> 1
RBX -> 1

Target
RBX -> 1

[4m[1m[34mkprove bswap_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_bswap_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_bswap_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput bswap_r32[0m
[4m[1m[34msanitizeSpecOutput bswap_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mbswap_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(64, _612), 56, 64)), concatenateMInt(extractMInt(mi(64, _612), 48, 56), concatenateMInt(extractMInt(mi(64, _612), 40, 48), extractMInt(mi(64, _612), 32, 40)))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(MI612, 56, 64)), concatenateMInt(extractMInt(MI612, 48, 56), concatenateMInt(extractMInt(MI612, 40, 48), extractMInt(MI612, 32, 40)))) )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(concatenateMInt(mi(48, 0), extractMInt(mi(64, _612), 48, 56)), extractMInt(mi(64, _612), 56, 64)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(concatenateMInt(mi(48, 0), extractMInt(MI612, 48, 56)), extractMInt(MI612, 56, 64)) )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _612), 32, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI612, 32, 64)) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(concatenateMInt(mi(48, 0), extractMInt(mi(64, _612), 32, 40)), extractMInt(mi(64, _612), 48, 56))   )
echo Debug:  Result: "R9" |-> (concatenateMInt(concatenateMInt(mi(48, 0), extractMInt(MI612, 32, 40)), extractMInt(MI612, 48, 56))   )
[4m[1m[34mwriteKDefn bswap_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-bswap_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovbeq_r64_r64[0m
[4m[1m[34mcreatespec cmovbeq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovbeq_r64_r64_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovbeq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovbeq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: setnbe %al
%zf -> 1
%al -> 1
%cf -> 1

Circuit: xaddb %al, %al
%zf -> 1
%sf -> 1
%al -> 1
%af -> 1
%of -> 1
%cf -> 1
%pf -> 1

Circuit: cmoveq %rcx, %rbx
%zf -> 1
%rcx -> 1
%rbx -> 1
cmov -> 1

Total Circuit
SF -> 1
 -> 1
OF -> 1
RBX -> 1
PF -> 1
RCX -> 1
ZF -> 1
RAX -> 1
CF -> 1
AF -> 1

Target
RBX -> 1
ZF -> 1
RCX -> 1
CF -> 1
 -> 1

[4m[1m[34mkprove cmovbeq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovbeq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovbeq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovbeq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput cmovbeq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovbeq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovbeq_r64_r64[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(8, 0), (#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _620)), concatenateMInt(mi(7, 0), mi(1, _623)))), mi(32, 0)) ) #then ( mi(8, 2) ) #else ( mi(8, 0) ) #fi) ), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(8, 0), (#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI620), concatenateMInt(mi(7, 0), MI623))), mi(32, 0)) ) #then ( mi(8, 2) ) #else ( mi(8, 0) ) #fi) ), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes((#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _620)), concatenateMInt(mi(7, 0), mi(1, _623)))), mi(32, 0)) ) #then ( mi(8, 2) ) #else ( mi(8, 0) ) #fi) , 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes((#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI620), concatenateMInt(mi(7, 0), MI623))), mi(32, 0)) ) #then ( mi(8, 2) ) #else ( mi(8, 0) ) #fi) , 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _622) )
echo Debug:  Result: "RCX" |-> (MI622 )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _620)), concatenateMInt(mi(7, 0), mi(1, _623)))), mi(32, 0)) ) #then ( mi(64, 2) ) #else ( mi(64, 0) ) #fi)  )
echo Debug:  Result: "RAX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI620), concatenateMInt(mi(7, 0), MI623))), mi(32, 0)) ) #then ( mi(64, 2) ) #else ( mi(64, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _620)), concatenateMInt(mi(7, 0), mi(1, _623)))), mi(32, 0)) ) #then ( mi(64, _621) ) #else ( mi(64, _622) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI620), concatenateMInt(mi(7, 0), MI623))), mi(32, 0)) ) #then ( MI621 ) #else ( MI622 ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _620)), concatenateMInt(mi(7, 0), mi(1, _623)))), mi(32, 0)) ) #then ( mi(1, 0) ) #else ( mi(1, 1) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI620), concatenateMInt(mi(7, 0), MI623))), mi(32, 0)) ) #then ( mi(1, 0) ) #else ( mi(1, 1) ) #fi)    )
[4m[1m[34mwriteKDefn cmovbeq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovbeq_r64_r64.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnzl_r32_r32[0m
[4m[1m[34mcreatespec cmovnzl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnzl_r32_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnzl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovnzl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: cmoveq %rbx, %rcx
%zf -> 1
%rcx -> 1
%rbx -> 1
cmov -> 1

Circuit: movl %ecx, %ebx
%ecx -> 1
%ebx -> 1
%rbx -> 1

Total Circuit
 -> 1
RBX -> 1
RCX -> 1
ZF -> 1

Target
 -> 1
ZF -> 1
RCX -> 1
RBX -> 1

[4m[1m[34mkprove cmovnzl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnzl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnzl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnzl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovnzl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnzl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnzl_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _615), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _614), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _613), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI615, mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI614, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI613, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> (mi(1, _615) )
echo Debug:  Result: "ZF" |-> (MI615 )
echo Debug:  PreResult: "RCX" |-> ((#ifMInt (eqMInt(mi(1, _615), mi(1, 0)) ) #then ( mi(64, _614) ) #else ( mi(64, _613) ) #fi)    )
echo Debug:  Result: "RCX" |-> ((#ifMInt (eqMInt(MI615, mi(1, 0)) ) #then ( MI614 ) #else ( MI613 ) #fi)    )
[4m[1m[34mwriteKDefn cmovnzl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnzl_r32_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cvtpd2dq_xmm_xmm[0m
cvtpd2dq_xmm_xmm 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvtpd2dqx_xmm_xmm.k
Warn: [4m[1m[35mcvtpd2dq_xmm_xmm: UnSupported[0m
[4m[1m[34mCheck if supported: cvttsd2sil_r32_xmm[0m
cvttsd2sil_r32_xmm 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvttpd2dq_xmm_ymm.k
Warn: [4m[1m[35mcvttsd2sil_r32_xmm: UnSupported[0m
[4m[1m[34mCheck if supported: cwtd[0m
[4m[1m[34mcreatespec cwtd: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cwtd_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcwtd: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movswq %ax, %rbx
%ax -> 1
%rbx -> 1

Circuit: callq .move_064_032_rbx_r10d_r11d
%r11d -> 1
%rbx -> 1
%r10d -> 1

Circuit: movq $0xffffffffffffffff, %rdx
\$0xffffffffffffffff -> 1
%rdx -> 1

Circuit: xaddw %dx, %r11w
%zf -> 1
%sf -> 1
%r11w -> 1
%af -> 1
%of -> 1
%cf -> 1
%dx -> 1
%pf -> 1

Total Circuit
OF -> 1
RDX -> 1
SF -> 1
R11 -> 1
 -> 1
ZF -> 1
CF -> 1
RAX -> 1
AF -> 1
RBX -> 1
PF -> 1
R10 -> 1

Target
RDX -> 1
RAX -> 1

[4m[1m[34mkprove cwtd[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cwtd_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cwtd_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cwtd[0m
[4m[1m[34msanitizeSpecOutput cwtd[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcwtd: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 48, 64))), 16, 32)), mi(17, 65535)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI621, 48, 64))), 16, 32)), mi(17, 65535)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 48, 64))), 16, 32), mi(16, 65535)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 48, 64))), 16, 32)), mi(17, 65535)), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI621, 48, 64))), 16, 32), mi(16, 65535)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI621, 48, 64))), 16, 32)), mi(17, 65535)), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(extractMInt(mi(64, _622), 0, 48), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 48, 64))), 16, 32)) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(extractMInt(MI622, 0, 48), extractMInt(mi(64, svalueMInt(extractMInt(MI621, 48, 64))), 16, 32)) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _622)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI622) )
echo Debug:  PreResult: "RAX" |-> (mi(64, _621) )
echo Debug:  Result: "RAX" |-> (MI621 )
echo Debug:  PreResult: "RBX" |-> (mi(64, svalueMInt(extractMInt(mi(64, _621), 48, 64))) )
echo Debug:  Result: "RBX" |-> (mi(64, svalueMInt(extractMInt(MI621, 48, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 48, 64))), 16, 32)), mi(17, 65535)), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI621, 48, 64))), 16, 32)), mi(17, 65535)), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R10" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 48, 64))), 32, 64)) )
echo Debug:  Result: "R10" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI621, 48, 64))), 32, 64)) )
echo Debug:  PreResult: "R11" |-> (concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 48, 64))), 0, 16)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 48, 64))), 16, 32)), mi(17, 65535)), 1, 17)) )
echo Debug:  Result: "R11" |-> (concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI621, 48, 64))), 0, 16)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI621, 48, 64))), 16, 32)), mi(17, 65535)), 1, 17)) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 48, 64))), 16, 32)), mi(17, 65535)), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI621, 48, 64))), 16, 32)), mi(17, 65535)), 1, 2) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 48, 64))), 16, 32)), mi(17, 65535)), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI621, 48, 64))), 16, 32)), mi(17, 65535)), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 48, 64))), 16, 17), mi(1, 1))  andBool   notBool  ( eqMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 48, 64))), 16, 17), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _621), 48, 64))), 16, 32)), mi(17, 65535)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI621, 48, 64))), 16, 17), mi(1, 1))  andBool   notBool  ( eqMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI621, 48, 64))), 16, 17), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI621, 48, 64))), 16, 32)), mi(17, 65535)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
[4m[1m[34mwriteKDefn cwtd: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cwtd.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: divss_xmm_xmm[0m
[4m[1m[34mcreatespec divss_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_divss_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mdivss_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vdivps %xmm2, %xmm1, %xmm5
avx -> 1
%ymm5 -> 1
%xmm1 -> 1
%xmm2 -> 1
%xmm5 -> 1

Circuit: movss %xmm5, %xmm1
sse -> 1
%xmm1 -> 1
%xmm5 -> 1

Total Circuit
YMM1 -> 1
YMM5 -> 1
YMM2 -> 1
 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove divss_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_divss_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_divss_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput divss_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput divss_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mdivss_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _613), 0, 224), Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _613), 224, 256), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI613, 0, 224), Float2MInt( ( MInt2Float(extractMInt(MI614, 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(MI613, 224, 256), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 128, 160), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _613), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 160, 192), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _613), 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 192, 224), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _613), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _613), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI614, 128, 160), 24, 8)  /Float  MInt2Float(extractMInt(MI613, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI614, 160, 192), 24, 8)  /Float  MInt2Float(extractMInt(MI613, 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI614, 192, 224), 24, 8)  /Float  MInt2Float(extractMInt(MI613, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI614, 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(MI613, 224, 256), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _613)   )
echo Debug:  Result: "SPAD1" |-> (MI613   )
[4m[1m[34mwriteKDefn divss_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-divss_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: haddpd_xmm_xmm[0m
[4m[1m[34mcreatespec haddpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_haddpd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mhaddpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vhaddpd %xmm2, %xmm1, %xmm7
%xmm1 -> 1
avx -> 1
%xmm2 -> 1
%xmm7 -> 1
%ymm7 -> 1

Circuit: movapd %xmm7, %xmm1
%xmm7 -> 1
%xmm1 -> 1
sse2 -> 1

Total Circuit
YMM2 -> 1
 -> 1
YMM1 -> 1
YMM7 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove haddpd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_haddpd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_haddpd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput haddpd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput haddpd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mhaddpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _613), 0, 128), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _613), 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _613), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI613, 0, 128), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI614, 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(MI614, 192, 256), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI613, 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(MI613, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _613) )
echo Debug:  Result: "SPAD1" |-> (MI613 )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _614), 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _613), 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _613), 192, 256), 53, 11) ) , 64)))   )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI614, 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(MI614, 192, 256), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI613, 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(MI613, 192, 256), 53, 11) ) , 64)))   )
[4m[1m[34mwriteKDefn haddpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-haddpd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: incb_rh[0m
[4m[1m[34mcreatespec incb_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_incb_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mincb_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: xorb %al, %al
%sf -> 1
%zf -> 1
%al -> 1
%of -> 1
%af -> 1
%cf -> 1
%pf -> 1

Circuit: callq .set_cf
%cf -> 1

Circuit: adcb %al, %ah
%of -> 1
%af -> 1
%ah -> 1
%cf -> 1
%pf -> 1
%sf -> 1
%zf -> 1
%ax -> 1
%al -> 1

Total Circuit
SF -> 1
OF -> 1
PF -> 1
AF -> 1
CF -> 1
RAX -> 1
ZF -> 1

Target
SF -> 1
OF -> 1
PF -> 1
ZF -> 1
RAX -> 1
AF -> 1

[4m[1m[34mkprove incb_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_incb_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_incb_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput incb_rh[0m
[4m[1m[34msanitizeSpecOutput incb_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mincb_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _624), 48, 56)), mi(9, 1)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI624, 48, 56)), mi(9, 1)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _624), 48, 56)), mi(9, 1)), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI624, 48, 56)), mi(9, 1)), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _624), 48, 56), mi(8, 0)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _624), 48, 56)), mi(9, 1)), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI624, 48, 56), mi(8, 0)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI624, 48, 56)), mi(9, 1)), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _624), 48, 56)), mi(9, 1)), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI624, 48, 56)), mi(9, 1)), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _624)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI624) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _624), 48, 49), mi(1, 0))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _624), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _624), 48, 56)), mi(9, 1)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI624, 48, 49), mi(1, 0))  andBool   notBool  ( eqMInt(extractMInt(MI624, 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI624, 48, 56)), mi(9, 1)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _624), 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _624), 48, 56)), mi(9, 1)), 1, 9), extractMInt(mi(64, _624), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI624, 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI624, 48, 56)), mi(9, 1)), 1, 9), extractMInt(MI624, 56, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _624), 48, 56)), mi(9, 1)), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI624, 48, 56)), mi(9, 1)), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn incb_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-incb_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: incq_r64[0m
[4m[1m[34mcreatespec incq_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_incq_r64_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mincq_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vxorps %xmm2, %xmm2, %xmm7
avx -> 1
%xmm7 -> 1
%xmm2 -> 1
%ymm7 -> 1

Circuit: vsubpd %ymm7, %ymm7, %ymm1
avx -> 1
%ymm1 -> 1
%ymm7 -> 1

Circuit: callq .move_128_064_xmm1_r8_r9
%xmm1 -> 1
%r9 -> 1
%r8 -> 1

Circuit: negw %r8w
%of -> 1
%af -> 1
%cf -> 1
%pf -> 1
%sf -> 1
%zf -> 1
%r8w -> 1

Circuit: setge %r9b
%r9b -> 1
%of -> 1
%sf -> 1

Circuit: addq %r9, %rbx
%rbx -> 1
%zf -> 1
%sf -> 1
%cf -> 1
%r9 -> 1
%pf -> 1
%af -> 1
%of -> 1

Total Circuit
AF -> 1
CF -> 1
YMM1 -> 1
ZF -> 1
R9 -> 1
YMM7 -> 1
PF -> 1
RBX -> 1
R8 -> 1
OF -> 1
YMM2 -> 1
 -> 1
SF -> 1

Target
OF -> 1
SF -> 1
AF -> 1
ZF -> 1
PF -> 1
RBX -> 1

[4m[1m[34mkprove incq_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_incq_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_incq_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput incq_r64[0m
[4m[1m[34msanitizeSpecOutput incq_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mincq_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(mi(65, 1), concatenateMInt(mi(1, 0), mi(64, _628))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(mi(65, 1), concatenateMInt(mi(1, 0), MI628)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(64, 1), mi(64, _628)), extractMInt(addMInt(mi(65, 1), concatenateMInt(mi(1, 0), mi(64, _628))), 1, 65)), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(64, 1), MI628), extractMInt(addMInt(mi(65, 1), concatenateMInt(mi(1, 0), MI628)), 1, 65)), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R8" |-> (mi(64, 0) )
echo Debug:  Result: "R8" |-> (mi(64, 0) )
echo Debug:  PreResult: "R9" |-> (mi(64, 1) )
echo Debug:  Result: "R9" |-> (mi(64, 1) )
echo Debug:  PreResult: "RBX" |-> (extractMInt(addMInt(mi(65, 1), concatenateMInt(mi(1, 0), mi(64, _628))), 1, 65) )
echo Debug:  Result: "RBX" |-> (extractMInt(addMInt(mi(65, 1), concatenateMInt(mi(1, 0), MI628)), 1, 65) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(65, 1), concatenateMInt(mi(1, 0), mi(64, _628))), 1, 65), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(65, 1), concatenateMInt(mi(1, 0), MI628)), 1, 65), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (mi(256, 0) )
echo Debug:  Result: "YMM1" |-> (mi(256, 0) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(mi(65, 1), concatenateMInt(mi(1, 0), mi(64, _628))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(mi(65, 1), concatenateMInt(mi(1, 0), MI628)), 1, 2) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(mi(65, 1), concatenateMInt(mi(1, 0), mi(64, _628))), 57, 65), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(mi(65, 1), concatenateMInt(mi(1, 0), MI628)), 57, 65), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 0), extractMInt(mi(64, _628), 0, 1))  andBool   notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt(mi(65, 1), concatenateMInt(mi(1, 0), mi(64, _628))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 0), extractMInt(MI628, 0, 1))  andBool   notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt(mi(65, 1), concatenateMInt(mi(1, 0), MI628)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
[4m[1m[34mwriteKDefn incq_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-incq_r64.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: maxpd_xmm_xmm[0m
[4m[1m[34mcreatespec maxpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_maxpd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmaxpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmaxpd %xmm2, %xmm1, %xmm3
%xmm2 -> 1
%xmm3 -> 1
%xmm1 -> 1
avx -> 1
%ymm3 -> 1

Circuit: callq .move_128_032_xmm3_xmm4_xmm5_xmm6_xmm7
%xmm7 -> 1
%xmm3 -> 1
%xmm5 -> 1
%xmm4 -> 1
%xmm6 -> 1

Circuit: callq .move_032_128_xmm4_xmm5_xmm6_xmm7_xmm1
%xmm6 -> 1
%xmm1 -> 1
%xmm7 -> 1
%xmm5 -> 1
%xmm4 -> 1

Total Circuit
YMM5 -> 1
YMM6 -> 1
YMM7 -> 1
YMM1 -> 1
YMM3 -> 1
YMM2 -> 1
 -> 1
YMM4 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove maxpd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_maxpd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_maxpd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput maxpd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput maxpd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmaxpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _618) )
echo Debug:  Result: "YMM2" |-> (MI618 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _617), 0, 128), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _618), 128, 192), 53, 11), MInt2Float(extractMInt(mi(256, _617), 128, 192), 53, 11)), 64), Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _618), 192, 256), 53, 11), MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11)), 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI617, 0, 128), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(MI618, 128, 192), 53, 11), MInt2Float(extractMInt(MI617, 128, 192), 53, 11)), 64), Float2MInt(maxFloat(MInt2Float(extractMInt(MI618, 192, 256), 53, 11), MInt2Float(extractMInt(MI617, 192, 256), 53, 11)), 64))) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(224, 0), extractMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _618), 192, 256), 53, 11), MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11)), 64), 32, 64)) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(224, 0), extractMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(MI618, 192, 256), 53, 11), MInt2Float(extractMInt(MI617, 192, 256), 53, 11)), 64), 32, 64)) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _618), 128, 192), 53, 11), MInt2Float(extractMInt(mi(256, _617), 128, 192), 53, 11)), 64), Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _618), 192, 256), 53, 11), MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11)), 64))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(MI618, 128, 192), 53, 11), MInt2Float(extractMInt(MI617, 128, 192), 53, 11)), 64), Float2MInt(maxFloat(MInt2Float(extractMInt(MI618, 192, 256), 53, 11), MInt2Float(extractMInt(MI617, 192, 256), 53, 11)), 64))) )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(224, 0), extractMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _618), 128, 192), 53, 11), MInt2Float(extractMInt(mi(256, _617), 128, 192), 53, 11)), 64), 32, 64)) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(224, 0), extractMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(MI618, 128, 192), 53, 11), MInt2Float(extractMInt(MI617, 128, 192), 53, 11)), 64), 32, 64)) )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(mi(224, 0), extractMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _618), 192, 256), 53, 11), MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11)), 64), 0, 32)) )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(mi(224, 0), extractMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(MI618, 192, 256), 53, 11), MInt2Float(extractMInt(MI617, 192, 256), 53, 11)), 64), 0, 32)) )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(224, 0), extractMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _618), 128, 192), 53, 11), MInt2Float(extractMInt(mi(256, _617), 128, 192), 53, 11)), 64), 0, 32)) )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(224, 0), extractMInt(Float2MInt(maxFloat(MInt2Float(extractMInt(MI618, 128, 192), 53, 11), MInt2Float(extractMInt(MI617, 128, 192), 53, 11)), 64), 0, 32)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _617) )
echo Debug:  Result: "SPAD1" |-> (MI617 )
[4m[1m[34mwriteKDefn maxpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-maxpd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: maxsd_xmm_xmm[0m
[4m[1m[34mcreatespec maxsd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_maxsd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmaxsd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmaxsd %xmm2, %xmm1, %xmm6
avx -> 1
%xmm6 -> 1
%ymm6 -> 1
%xmm1 -> 1
%xmm2 -> 1

Circuit: movupd %xmm6, %xmm1
%xmm6 -> 1
sse2 -> 1
%xmm1 -> 1

Total Circuit
 -> 1
YMM2 -> 1
YMM1 -> 1
YMM6 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove maxsd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_maxsd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_maxsd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput maxsd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput maxsd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmaxsd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _613), 0, 192), Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11), MInt2Float(extractMInt(mi(256, _613), 192, 256), 53, 11)), 64)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI613, 0, 192), Float2MInt(maxFloat(MInt2Float(extractMInt(MI614, 192, 256), 53, 11), MInt2Float(extractMInt(MI613, 192, 256), 53, 11)), 64)) )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _613), 128, 192), Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11), MInt2Float(extractMInt(mi(256, _613), 192, 256), 53, 11)), 64))) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI613, 128, 192), Float2MInt(maxFloat(MInt2Float(extractMInt(MI614, 192, 256), 53, 11), MInt2Float(extractMInt(MI613, 192, 256), 53, 11)), 64))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _613)   )
echo Debug:  Result: "SPAD1" |-> (MI613   )
[4m[1m[34mwriteKDefn maxsd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-maxsd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: maxss_xmm_xmm[0m
[4m[1m[34mcreatespec maxss_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_maxss_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmaxss_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmaxss %xmm2, %xmm1, %xmm10
%xmm10 -> 1
%xmm2 -> 1
%ymm10 -> 1
%xmm1 -> 1
avx -> 1

Circuit: movdqa %xmm10, %xmm1
%xmm1 -> 1
sse2 -> 1
%xmm10 -> 1

Total Circuit
YMM10 -> 1
YMM1 -> 1
 -> 1
YMM2 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove maxss_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_maxss_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_maxss_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput maxss_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput maxss_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmaxss_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _613), 0, 224), Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8), MInt2Float(extractMInt(mi(256, _613), 224, 256), 24, 8)), 32)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI613, 0, 224), Float2MInt(maxFloat(MInt2Float(extractMInt(MI614, 224, 256), 24, 8), MInt2Float(extractMInt(MI613, 224, 256), 24, 8)), 32)) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(mi(256, _613), 128, 224)), Float2MInt(maxFloat(MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8), MInt2Float(extractMInt(mi(256, _613), 224, 256), 24, 8)), 32)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(MI613, 128, 224)), Float2MInt(maxFloat(MInt2Float(extractMInt(MI614, 224, 256), 24, 8), MInt2Float(extractMInt(MI613, 224, 256), 24, 8)), 32)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _613)   )
echo Debug:  Result: "SPAD1" |-> (MI613   )
[4m[1m[34mwriteKDefn maxss_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-maxss_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: minpd_xmm_xmm[0m
[4m[1m[34mcreatespec minpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_minpd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mminpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vminpd %xmm2, %xmm1, %xmm3
%xmm2 -> 1
%xmm3 -> 1
%xmm1 -> 1
avx -> 1
%ymm3 -> 1

Circuit: callq .move_128_64_xmm3_xmm8_xmm9
%xmm3 -> 1
%xmm9 -> 1
%xmm8 -> 1

Circuit: callq .move_64_128_xmm8_xmm9_xmm1
%xmm9 -> 1
%xmm1 -> 1
%xmm8 -> 1

Total Circuit
YMM3 -> 1
YMM2 -> 1
YMM8 -> 1
 -> 1
YMM1 -> 1
YMM9 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove minpd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_minpd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_minpd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput minpd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput minpd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mminpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _615), 0, 128), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11), MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)), 64), Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11), MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)), 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI615, 0, 128), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(MI616, 128, 192), 53, 11), MInt2Float(extractMInt(MI615, 128, 192), 53, 11)), 64), Float2MInt(minFloat(MInt2Float(extractMInt(MI616, 192, 256), 53, 11), MInt2Float(extractMInt(MI615, 192, 256), 53, 11)), 64))) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11), MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)), 64), Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11), MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)), 64))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(MI616, 128, 192), 53, 11), MInt2Float(extractMInt(MI615, 128, 192), 53, 11)), 64), Float2MInt(minFloat(MInt2Float(extractMInt(MI616, 192, 256), 53, 11), MInt2Float(extractMInt(MI615, 192, 256), 53, 11)), 64))) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(192, 0), Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11), MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)), 64)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(192, 0), Float2MInt(minFloat(MInt2Float(extractMInt(MI616, 192, 256), 53, 11), MInt2Float(extractMInt(MI615, 192, 256), 53, 11)), 64)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _615) )
echo Debug:  Result: "SPAD1" |-> (MI615 )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(192, 0), Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11), MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)), 64))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(192, 0), Float2MInt(minFloat(MInt2Float(extractMInt(MI616, 128, 192), 53, 11), MInt2Float(extractMInt(MI615, 128, 192), 53, 11)), 64))   )
[4m[1m[34mwriteKDefn minpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-minpd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: minss_xmm_xmm[0m
[4m[1m[34mcreatespec minss_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_minss_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mminss_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11
%xmm10 -> 1
%xmm1 -> 1
%xmm11 -> 1
%xmm8 -> 1
%xmm9 -> 1

Circuit: callq .move_128_032_xmm2_xmm4_xmm5_xmm6_xmm7
%xmm7 -> 1
%xmm2 -> 1
%xmm4 -> 1
%xmm5 -> 1
%xmm6 -> 1

Circuit: minps %xmm4, %xmm8
sse -> 1
%xmm8 -> 1
%xmm4 -> 1

Circuit: callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
%xmm1 -> 1
%xmm11 -> 1
%xmm8 -> 1
%xmm9 -> 1
%xmm10 -> 1

Total Circuit
YMM4 -> 1
YMM8 -> 1
YMM2 -> 1
 -> 1
YMM1 -> 1
YMM7 -> 1
YMM10 -> 1
YMM9 -> 1
YMM11 -> 1
YMM5 -> 1
YMM6 -> 1

Target
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove minss_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_minss_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_minss_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput minss_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput minss_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mminss_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _621) )
echo Debug:  Result: "YMM2" |-> (MI621 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _620), 0, 224), Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _621), 224, 256), 24, 8), MInt2Float(extractMInt(mi(256, _620), 224, 256), 24, 8)), 32)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI620, 0, 224), Float2MInt(minFloat(MInt2Float(extractMInt(MI621, 224, 256), 24, 8), MInt2Float(extractMInt(MI620, 224, 256), 24, 8)), 32)) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _621), 224, 256)) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(224, 0), extractMInt(MI621, 224, 256)) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _620), 160, 192)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(MI620, 160, 192)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _620), 128, 160)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(MI620, 128, 160)) )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _621), 160, 192)) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(224, 0), extractMInt(MI621, 160, 192)) )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _621), 192, 224)) )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(mi(224, 0), extractMInt(MI621, 192, 224)) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(224, 0), Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _621), 224, 256), 24, 8), MInt2Float(extractMInt(mi(256, _620), 224, 256), 24, 8)), 32)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(224, 0), Float2MInt(minFloat(MInt2Float(extractMInt(MI621, 224, 256), 24, 8), MInt2Float(extractMInt(MI620, 224, 256), 24, 8)), 32)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _620) )
echo Debug:  Result: "SPAD1" |-> (MI620 )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _621), 128, 160)) )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(224, 0), extractMInt(MI621, 128, 160)) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _620), 192, 224))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(MI620, 192, 224))   )
[4m[1m[34mwriteKDefn minss_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-minss_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movq_xmm_r64[0m
[4m[1m[34mcreatespec movq_xmm_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movq_xmm_r64_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovq_xmm_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovq %rbx, %xmm6
%ymm6 -> 1
avx -> 1
%xmm6 -> 1
%rbx -> 1

Circuit: vpor %xmm6, %xmm6, %xmm0
%xmm0 -> 1
avx -> 1
%xmm6 -> 1
%ymm0 -> 1

Circuit: movupd %xmm0, %xmm1
sse2 -> 1
%xmm1 -> 1
%xmm0 -> 1

Total Circuit
YMM1 -> 1
YMM6 -> 1
RBX -> 1
YMM0 -> 1
 -> 1

Target
 -> 1
YMM1 -> 1
RBX -> 1

[4m[1m[34mkprove movq_xmm_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movq_xmm_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movq_xmm_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movq_xmm_r64[0m
[4m[1m[34msanitizeSpecOutput movq_xmm_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovq_xmm_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _615), 0, 128), concatenateMInt(mi(64, 0), xorMInt(mi(64, _614), mi(64, 0)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI615, 0, 128), concatenateMInt(mi(64, 0), xorMInt(MI614, mi(64, 0)))) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _614) )
echo Debug:  Result: "RBX" |-> (MI614 )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(192, 0), xorMInt(mi(64, _614), mi(64, 0))) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(192, 0), xorMInt(MI614, mi(64, 0))) )
echo Debug:  PreResult: "YMM0" |-> (concatenateMInt(mi(192, 0), xorMInt(mi(64, _614), mi(64, 0))) )
echo Debug:  Result: "YMM0" |-> (concatenateMInt(mi(192, 0), xorMInt(MI614, mi(64, 0))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _615)   )
echo Debug:  Result: "SPAD1" |-> (MI615   )
[4m[1m[34mwriteKDefn movq_xmm_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movq_xmm_r64.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movsldup_xmm_xmm[0m
[4m[1m[34mcreatespec movsldup_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movsldup_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovsldup_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovsldup %xmm2, %xmm12
%xmm2 -> 1
%xmm12 -> 1
avx -> 1
%ymm12 -> 1

Circuit: movdqa %xmm12, %xmm1
%xmm12 -> 1
%xmm1 -> 1
sse2 -> 1

Total Circuit
 -> 1
YMM2 -> 1
YMM1 -> 1
YMM12 -> 1

Target
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove movsldup_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movsldup_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movsldup_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movsldup_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput movsldup_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovsldup_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _614), 160, 192), extractMInt(mi(256, _614), 160, 192)), concatenateMInt(extractMInt(mi(256, _614), 224, 256), extractMInt(mi(256, _614), 224, 256)))) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI614, 160, 192), extractMInt(MI614, 160, 192)), concatenateMInt(extractMInt(MI614, 224, 256), extractMInt(MI614, 224, 256)))) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _613), 0, 128), concatenateMInt(concatenateMInt(extractMInt(mi(256, _614), 160, 192), extractMInt(mi(256, _614), 160, 192)), concatenateMInt(extractMInt(mi(256, _614), 224, 256), extractMInt(mi(256, _614), 224, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI613, 0, 128), concatenateMInt(concatenateMInt(extractMInt(MI614, 160, 192), extractMInt(MI614, 160, 192)), concatenateMInt(extractMInt(MI614, 224, 256), extractMInt(MI614, 224, 256)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _613)   )
echo Debug:  Result: "SPAD1" |-> (MI613   )
[4m[1m[34mwriteKDefn movsldup_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movsldup_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movzwq_r64_r16[0m
[4m[1m[34mcreatespec movzwq_r64_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movzwq_r64_r16_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovzwq_r64_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq $0x0, %rbx
\$0x0 -> 1
%rbx -> 1

Circuit: decw %bx
%pf -> 1
%of -> 1
%af -> 1
%sf -> 1
%zf -> 1
%bx -> 1

Circuit: xaddw %bx, %cx
%cf -> 1
%pf -> 1
%of -> 1
%af -> 1
%sf -> 1
%zf -> 1
%cx -> 1
%bx -> 1

Total Circuit
OF -> 1
SF -> 1
 -> 1
ZF -> 1
RCX -> 1
AF -> 1
CF -> 1
RBX -> 1
PF -> 1

Target
RCX -> 1
RBX -> 1

[4m[1m[34mkprove movzwq_r64_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movzwq_r64_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movzwq_r64_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movzwq_r64_r16[0m
[4m[1m[34msanitizeSpecOutput movzwq_r64_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovzwq_r64_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 48, 64)), mi(17, 65535)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI618, 48, 64)), mi(17, 65535)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 48, 64)), mi(17, 65535)), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI618, 48, 64)), mi(17, 65535)), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _618), 48, 64), mi(16, 65535)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 48, 64)), mi(17, 65535)), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI618, 48, 64), mi(16, 65535)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI618, 48, 64)), mi(17, 65535)), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 48, 64)), mi(17, 65535)), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI618, 48, 64)), mi(17, 65535)), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(extractMInt(mi(64, _618), 0, 48), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 48, 64)), mi(17, 65535)), 1, 17)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(extractMInt(MI618, 0, 48), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI618, 48, 64)), mi(17, 65535)), 1, 17)) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _618), 48, 49), mi(1, 1))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _618), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 48, 64)), mi(17, 65535)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI618, 48, 49), mi(1, 1))  andBool   notBool  ( eqMInt(extractMInt(MI618, 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI618, 48, 64)), mi(17, 65535)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _618), 48, 64)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(48, 0), extractMInt(MI618, 48, 64)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 48, 64)), mi(17, 65535)), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI618, 48, 64)), mi(17, 65535)), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn movzwq_r64_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movzwq_r64_r16.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: negb_r8[0m
[4m[1m[34mcreatespec negb_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_negb_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mnegb_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movzbl %bl, %r14d
%r14d -> 1
%r14 -> 1
%bl -> 1

Circuit: negw %r14w
%af -> 1
%of -> 1
%r14w -> 1
%pf -> 1
%cf -> 1
%zf -> 1
%sf -> 1

Circuit: xaddb %bl, %r14b
%zf -> 1
%sf -> 1
%bl -> 1
%r14b -> 1
%af -> 1
%of -> 1
%pf -> 1
%cf -> 1

Circuit: callq .set_szp_for_bl
%pf -> 1
%bl -> 1
%zf -> 1
%sf -> 1

Total Circuit
CF -> 1
AF -> 1
ZF -> 1
PF -> 1
R14 -> 1
RBX -> 1
OF -> 1
SF -> 1

Target
SF -> 1
OF -> 1
RBX -> 1
PF -> 1
ZF -> 1
AF -> 1
CF -> 1

[4m[1m[34mkprove negb_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_negb_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_negb_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput negb_r8[0m
[4m[1m[34msanitizeSpecOutput negb_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mnegb_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(mi(64, _627), 56, 64)))), mi(17, 1)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(MI627, 56, 64)))), mi(17, 1)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(mi(64, _627), 56, 64)))), mi(17, 1)), 9, 10) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(MI627, 56, 64)))), mi(17, 1)), 9, 10) )
echo Debug:  PreResult: "R14" |-> (concatenateMInt(concatenateMInt(mi(48, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(mi(64, _627), 56, 64)))), mi(17, 1)), 1, 9)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(mi(64, _627), 56, 64)))), mi(17, 1)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64))), 1, 9)) )
echo Debug:  Result: "R14" |-> (concatenateMInt(concatenateMInt(mi(48, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(MI627, 56, 64)))), mi(17, 1)), 1, 9)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(MI627, 56, 64)))), mi(17, 1)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64))), 1, 9)) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(mi(64, _627), 56, 64)))), mi(17, 1)), 9, 17), extractMInt(mi(64, _627), 56, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(mi(64, _627), 56, 64)))), mi(17, 1)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(MI627, 56, 64)))), mi(17, 1)), 9, 17), extractMInt(MI627, 56, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(MI627, 56, 64)))), mi(17, 1)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(mi(64, _627), 56, 64)))), mi(17, 1)), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(MI627, 56, 64)))), mi(17, 1)), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _627)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI627) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(mi(64, _627), 56, 64)))), mi(17, 1)), 9, 10), extractMInt(mi(64, _627), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(mi(64, _627), 56, 64)))), mi(17, 1)), 9, 10), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(mi(64, _627), 56, 64)))), mi(17, 1)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(MI627, 56, 64)))), mi(17, 1)), 9, 10), extractMInt(MI627, 56, 57))  andBool   notBool  ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(MI627, 56, 64)))), mi(17, 1)), 9, 10), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(MI627, 56, 64)))), mi(17, 1)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(MI627, 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _627), 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(mi(64, _627), 56, 64)))), mi(17, 1)), 9, 17)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI627, 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(MI627, 56, 64)))), mi(17, 1)), 9, 17)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(mi(64, _627), 56, 64)))), mi(17, 1)), 9, 17), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(MI627, 56, 64)))), mi(17, 1)), 9, 17), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn negb_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-negb_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: notb_r8[0m
[4m[1m[34mcreatespec notb_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_notb_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mnotb_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: xorq %rdx, %rdx
%sf -> 1
%zf -> 1
%cf -> 1
%pf -> 1
%of -> 1
%af -> 1
%rdx -> 1

Circuit: adcb %bl, %dl
%sf -> 1
%zf -> 1
%dl -> 1
%bl -> 1
%of -> 1
%af -> 1
%pf -> 1
%cf -> 1

Circuit: notl %edx
%rdx -> 1
%edx -> 1

Circuit: movswl %dx, %ebx
%ebx -> 1
%rbx -> 1
%dx -> 1

Total Circuit
CF -> 1
AF -> 1
ZF -> 1
PF -> 1
RBX -> 1
RDX -> 1
OF -> 1
SF -> 1

Target
RBX -> 1

[4m[1m[34mkprove notb_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_notb_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_notb_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput notb_r8[0m
[4m[1m[34msanitizeSpecOutput notb_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mnotb_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (extractMInt(mi(64, _617), 56, 57) )
echo Debug:  Result: "SF" |-> (extractMInt(MI617, 56, 57) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), extractMInt(mi(64, _617), 56, 64)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI617, 56, 64), mi(8, 0)), extractMInt(MI617, 56, 64)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(mi(64, _617), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(MI617, 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RDX" |-> (xorMInt(mi(64, 4294967295), concatenateMInt(mi(56, 0), extractMInt(mi(64, _617), 56, 64))) )
echo Debug:  Result: "RDX" |-> (xorMInt(mi(64, 4294967295), concatenateMInt(mi(56, 0), extractMInt(MI617, 56, 64))) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _617)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI617) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _617), 56, 57), mi(1, 0))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _617), 56, 57), extractMInt(mi(64, _617), 56, 57)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI617, 56, 57), mi(1, 0))  andBool   notBool  ( eqMInt(extractMInt(MI617, 56, 57), extractMInt(MI617, 56, 57)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _617), 0, 56), xorMInt(mi(8, 255), extractMInt(mi(64, _617), 56, 64))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI617, 0, 56), xorMInt(mi(8, 255), extractMInt(MI617, 56, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(MI617, 56, 64), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn notb_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-notb_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: orb_rh_r8[0m
[4m[1m[34mcreatespec orb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orb_rh_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34morb_rh_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: orb_rh_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: xorb %al, %al
%af -> 1
%of -> 1
%pf -> 1
%cf -> 1
%zf -> 1
%sf -> 1
%al -> 1

Circuit: xchgb %ah, %bl
%ah -> 1
%bl -> 1

Circuit: adcb %ah, %al
%af -> 1
%of -> 1
%pf -> 1
%cf -> 1
%ah -> 1
%ax -> 1
%zf -> 1
%sf -> 1
%al -> 1

Circuit: movb %bl, %bh
%bl -> 1
%bh -> 1

Circuit: orw %bx, %ax
%zf -> 1
%sf -> 1
%bx -> 1
%ax -> 1
%cf -> 1
%pf -> 1
%af -> 1
%of -> 1

Total Circuit
RBX -> 1
PF -> 1
ZF -> 1
AF -> 1
RAX -> 1
CF -> 1
SF -> 1
OF -> 1

Target
PF -> 1
RBX -> 1
RAX -> 1
CF -> 1
AF -> 1
ZF -> 1
SF -> 1
OF -> 1

[4m[1m[34mkprove orb_rh_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orb_rh_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orb_rh_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput orb_rh_r8[0m
[4m[1m[34msanitizeSpecOutput orb_rh_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34morb_rh_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (orMInt(extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _629), 56, 64), extractMInt(mi(64, _629), 56, 64)))), 0, 1), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _628), 48, 56), extractMInt(mi(64, _628), 48, 56)))), 0, 1)) )
echo Debug:  Result: "SF" |-> (orMInt(extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI629, 56, 64), extractMInt(MI629, 56, 64)))), 0, 1), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI628, 48, 56), extractMInt(MI628, 48, 56)))), 0, 1)) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(orMInt(extractMInt(mi(64, _629), 56, 64), extractMInt(mi(64, _628), 48, 56)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(orMInt(extractMInt(MI629, 56, 64), extractMInt(MI628, 48, 56)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _628)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI628) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _628), 0, 48), concatenateMInt(orMInt(extractMInt(mi(64, _629), 56, 64), extractMInt(mi(64, _628), 48, 56)), extractMInt(mi(64, _628), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI628, 0, 48), concatenateMInt(orMInt(extractMInt(MI629, 56, 64), extractMInt(MI628, 48, 56)), extractMInt(MI628, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _629), 0, 48), concatenateMInt(extractMInt(mi(64, _628), 48, 56), extractMInt(mi(64, _628), 48, 56))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI629, 0, 48), concatenateMInt(extractMInt(MI628, 48, 56), extractMInt(MI628, 48, 56))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(orMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _629), 56, 64), extractMInt(mi(64, _629), 56, 64)))), mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _628), 48, 56), extractMInt(mi(64, _628), 48, 56))))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(orMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI629, 56, 64), extractMInt(MI629, 56, 64)))), mi(64, svalueMInt(concatenateMInt(extractMInt(MI628, 48, 56), extractMInt(MI628, 48, 56))))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn orb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-orb_rh_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: orl_r32_r32[0m
[4m[1m[34mcreatespec orl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orl_r32_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34morl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: orl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: movl %ebx, %r8d
%ebx -> 1
%r8d -> 1
%r8 -> 1

Circuit: movswq %cx, %r11
%r11 -> 1
%cx -> 1

Circuit: xaddl %r11d, %ecx
%rcx -> 1
%sf -> 1
%zf -> 1
%r11 -> 1
%r11d -> 1
%ecx -> 1
%of -> 1
%af -> 1
%pf -> 1
%cf -> 1

Circuit: orq %r11, %r8
%sf -> 1
%zf -> 1
%r11 -> 1
%of -> 1
%af -> 1
%pf -> 1
%r8 -> 1
%cf -> 1

Circuit: xchgl %ebx, %r8d
%r8d -> 1
%r8 -> 1
%ebx -> 1
%rbx -> 1

Circuit: callq .set_szp_for_ebx
%pf -> 1
%zf -> 1
%sf -> 1
%ebx -> 1

Total Circuit
OF -> 1
R8 -> 1
SF -> 1
R11 -> 1
ZF -> 1
RCX -> 1
CF -> 1
AF -> 1
RBX -> 1
PF -> 1

Target
OF -> 1
SF -> 1
RCX -> 1
ZF -> 1
AF -> 1
CF -> 1
RBX -> 1
PF -> 1

[4m[1m[34mkprove orl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput orl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput orl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34morl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R11" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _630), 32, 64)) )
echo Debug:  Result: "R11" |-> (concatenateMInt(mi(32, 0), extractMInt(MI630, 32, 64)) )
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (orMInt(extractMInt(mi(64, _630), 32, 33), extractMInt(mi(64, _629), 32, 33)) )
echo Debug:  Result: "SF" |-> (orMInt(extractMInt(MI630, 32, 33), extractMInt(MI629, 32, 33)) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _629), 32, 64)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(MI629, 32, 64)) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(orMInt(extractMInt(mi(64, _630), 56, 64), extractMInt(mi(64, _629), 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(orMInt(extractMInt(MI630, 56, 64), extractMInt(MI629, 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _630), 48, 64))), 32, 64))), 1, 33)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI630, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI630, 48, 64))), 32, 64))), 1, 33)) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), orMInt(extractMInt(mi(64, _630), 32, 64), extractMInt(mi(64, _629), 32, 64))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), orMInt(extractMInt(MI630, 32, 64), extractMInt(MI629, 32, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(orMInt(extractMInt(mi(64, _630), 32, 64), extractMInt(mi(64, _629), 32, 64)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(orMInt(extractMInt(MI630, 32, 64), extractMInt(MI629, 32, 64)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn orl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-orl_r32_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: pandn_xmm_xmm[0m
[4m[1m[34mcreatespec pandn_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_pandn_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpandn_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: por %xmm1, %xmm2
%xmm1 -> 1
sse2 -> 1
%xmm2 -> 1

Circuit: pxor %xmm2, %xmm1
%xmm1 -> 1
sse2 -> 1
%xmm2 -> 1

Total Circuit
 -> 1
YMM2 -> 1
YMM1 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove pandn_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_pandn_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_pandn_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput pandn_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput pandn_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpandn_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(extractMInt(mi(256, _613), 0, 128), concatenateMInt(orMInt(extractMInt(mi(256, _612), 128, 192), extractMInt(mi(256, _613), 128, 192)), orMInt(extractMInt(mi(256, _612), 192, 256), extractMInt(mi(256, _613), 192, 256)))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(extractMInt(MI613, 0, 128), concatenateMInt(orMInt(extractMInt(MI612, 128, 192), extractMInt(MI613, 128, 192)), orMInt(extractMInt(MI612, 192, 256), extractMInt(MI613, 192, 256)))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _612), 0, 128), concatenateMInt(xorMInt(orMInt(extractMInt(mi(256, _612), 128, 192), extractMInt(mi(256, _613), 128, 192)), extractMInt(mi(256, _612), 128, 192)), xorMInt(orMInt(extractMInt(mi(256, _612), 192, 256), extractMInt(mi(256, _613), 192, 256)), extractMInt(mi(256, _612), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI612, 0, 128), concatenateMInt(xorMInt(orMInt(extractMInt(MI612, 128, 192), extractMInt(MI613, 128, 192)), extractMInt(MI612, 128, 192)), xorMInt(orMInt(extractMInt(MI612, 192, 256), extractMInt(MI613, 192, 256)), extractMInt(MI612, 192, 256)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _612)   )
echo Debug:  Result: "SPAD1" |-> (MI612   )
[4m[1m[34mwriteKDefn pandn_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-pandn_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: popcntl_r32_r32[0m
[4m[1m[34mcreatespec popcntl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_popcntl_r32_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpopcntl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movl %ecx, %r8d
%r8 -> 1
%ecx -> 1
%r8d -> 1

Circuit: popcntq %r8, %rbx
%rbx -> 1
%zf -> 1
%sf -> 1
%cf -> 1
%r8 -> 1
popcnt -> 1
%pf -> 1
%af -> 1
%of -> 1

Total Circuit
R8 -> 1
OF -> 1
 -> 1
SF -> 1
CF -> 1
AF -> 1
RCX -> 1
ZF -> 1
PF -> 1
RBX -> 1

Target
OF -> 1
SF -> 1
 -> 1
RCX -> 1
ZF -> 1
AF -> 1
CF -> 1
RBX -> 1
PF -> 1

[4m[1m[34mkprove popcntl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_popcntl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_popcntl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput popcntl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput popcntl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpopcntl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (mi(1, 0) )
echo Debug:  Result: "AF" |-> (mi(1, 0) )
echo Debug:  PreResult: "PF" |-> (mi(1, 0) )
echo Debug:  Result: "PF" |-> (mi(1, 0) )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _629), 32, 64)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(MI629, 32, 64)) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _629) )
echo Debug:  Result: "RCX" |-> (MI629 )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (mi(64, countOnes(extractMInt(mi(64, _629), 32, 64), 0)) )
echo Debug:  Result: "RBX" |-> (mi(64, countOnes(extractMInt(MI629, 32, 64), 0)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(32, 0), extractMInt(mi(64, _629), 32, 64)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(32, 0), extractMInt(MI629, 32, 64)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn popcntl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-popcntl_r32_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: punpckhqdq_xmm_xmm[0m
[4m[1m[34mcreatespec punpckhqdq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_punpckhqdq_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpunpckhqdq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: unpckhpd %xmm2, %xmm1
%xmm1 -> 1
sse2 -> 1
%xmm2 -> 1

Total Circuit
YMM1 -> 1
YMM2 -> 1
 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove punpckhqdq_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_punpckhqdq_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_punpckhqdq_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput punpckhqdq_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput punpckhqdq_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpunpckhqdq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _613) )
echo Debug:  Result: "YMM2" |-> (MI613 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _612), 0, 128), concatenateMInt(extractMInt(mi(256, _613), 128, 192), extractMInt(mi(256, _612), 128, 192))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI612, 0, 128), concatenateMInt(extractMInt(MI613, 128, 192), extractMInt(MI612, 128, 192))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _612)   )
echo Debug:  Result: "SPAD1" |-> (MI612   )
[4m[1m[34mwriteKDefn punpckhqdq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-punpckhqdq_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: rclb_r8_one[0m
[4m[1m[34mcreatespec rclb_r8_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rclb_r8_one_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrclb_r8_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movzbl %bl, %eax
%bl -> 1
%rax -> 1
%eax -> 1

Circuit: movq %rax, %rbx
%rax -> 1
%rbx -> 1

Circuit: adcb %bl, %bl
%zf -> 1
%sf -> 1
%bl -> 1
%af -> 1
%of -> 1
%cf -> 1
%pf -> 1

Total Circuit
AF -> 1
RAX -> 1
CF -> 1
ZF -> 1
PF -> 1
RBX -> 1
OF -> 1
SF -> 1

Target
RBX -> 1
CF -> 1
 -> 1
OF -> 1

[4m[1m[34mkprove rclb_r8_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rclb_r8_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rclb_r8_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput rclb_r8_one[0m
[4m[1m[34msanitizeSpecOutput rclb_r8_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrclb_r8_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64))), concatenateMInt(mi(8, 0), mi(1, _619))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64))), concatenateMInt(mi(8, 0), MI619)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64))), concatenateMInt(mi(8, 0), mi(1, _619))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64))), concatenateMInt(mi(8, 0), MI619)), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64))), concatenateMInt(mi(8, 0), mi(1, _619))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64))), concatenateMInt(mi(8, 0), MI619)), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64))), concatenateMInt(mi(8, 0), mi(1, _619))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64))), concatenateMInt(mi(8, 0), MI619)), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _621)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI621) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _621), 56, 57), extractMInt(mi(64, _621), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _621), 56, 57), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64))), concatenateMInt(mi(8, 0), mi(1, _619))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI621, 56, 57), extractMInt(MI621, 56, 57))  andBool   notBool  ( eqMInt(extractMInt(MI621, 56, 57), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64))), concatenateMInt(mi(8, 0), MI619)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _621), 56, 64)) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(mi(56, 0), extractMInt(MI621, 56, 64)) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _621), 0, 56), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64))), concatenateMInt(mi(8, 0), mi(1, _619))), 1, 9)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI621, 0, 56), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64))), concatenateMInt(mi(8, 0), MI619)), 1, 9)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 56, 64))), concatenateMInt(mi(8, 0), mi(1, _619))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 56, 64))), concatenateMInt(mi(8, 0), MI619)), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn rclb_r8_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-rclb_r8_one.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: rolb_rh_one[0m
[4m[1m[34mcreatespec rolb_rh_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rolb_rh_one_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrolb_rh_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .set_sf
%sf -> 1

Circuit: setns %al
%al -> 1
%sf -> 1

Circuit: xaddb %ah, %al
%af -> 1
%of -> 1
%cf -> 1
%ah -> 1
%pf -> 1
%zf -> 1
%sf -> 1
%ax -> 1
%al -> 1

Circuit: xaddb %ah, %al
%ah -> 1
%cf -> 1
%pf -> 1
%of -> 1
%af -> 1
%al -> 1
%sf -> 1
%zf -> 1
%ax -> 1

Circuit: addw %ax, %ax
%af -> 1
%of -> 1
%pf -> 1
%cf -> 1
%ax -> 1
%zf -> 1
%sf -> 1

Total Circuit
OF -> 1
SF -> 1
ZF -> 1
RAX -> 1
CF -> 1
AF -> 1
PF -> 1

Target
RAX -> 1
CF -> 1
OF -> 1
 -> 1

[4m[1m[34mkprove rolb_rh_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rolb_rh_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rolb_rh_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput rolb_rh_one[0m
[4m[1m[34msanitizeSpecOutput rolb_rh_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrolb_rh_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(mi(64, _620), 48, 56), extractMInt(mi(64, _620), 48, 56))), concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(mi(64, _620), 48, 56), extractMInt(mi(64, _620), 48, 56)))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(MI620, 48, 56), extractMInt(MI620, 48, 56))), concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(MI620, 48, 56), extractMInt(MI620, 48, 56)))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(mi(64, _620), 48, 56), extractMInt(mi(64, _620), 48, 56))), concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(mi(64, _620), 48, 56), extractMInt(mi(64, _620), 48, 56)))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(MI620, 48, 56), extractMInt(MI620, 48, 56))), concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(MI620, 48, 56), extractMInt(MI620, 48, 56)))), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(mi(64, _620), 48, 56), extractMInt(mi(64, _620), 48, 56))), concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(mi(64, _620), 48, 56), extractMInt(mi(64, _620), 48, 56)))), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(MI620, 48, 56), extractMInt(MI620, 48, 56))), concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(MI620, 48, 56), extractMInt(MI620, 48, 56)))), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(mi(64, _620), 48, 56), extractMInt(mi(64, _620), 48, 56))), concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(mi(64, _620), 48, 56), extractMInt(mi(64, _620), 48, 56)))), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(MI620, 48, 56), extractMInt(MI620, 48, 56))), concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(MI620, 48, 56), extractMInt(MI620, 48, 56)))), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _620)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI620) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _620), 48, 49), extractMInt(mi(64, _620), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _620), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(mi(64, _620), 48, 56), extractMInt(mi(64, _620), 48, 56))), concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(mi(64, _620), 48, 56), extractMInt(mi(64, _620), 48, 56)))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI620, 48, 49), extractMInt(MI620, 48, 49))  andBool   notBool  ( eqMInt(extractMInt(MI620, 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(MI620, 48, 56), extractMInt(MI620, 48, 56))), concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(MI620, 48, 56), extractMInt(MI620, 48, 56)))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _620), 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(mi(64, _620), 48, 56), extractMInt(mi(64, _620), 48, 56))), concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(mi(64, _620), 48, 56), extractMInt(mi(64, _620), 48, 56)))), 1, 9), extractMInt(mi(64, _620), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI620, 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(MI620, 48, 56), extractMInt(MI620, 48, 56))), concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(MI620, 48, 56), extractMInt(MI620, 48, 56)))), 1, 9), extractMInt(MI620, 56, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(mi(64, _620), 48, 56), extractMInt(mi(64, _620), 48, 56))), concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(mi(64, _620), 48, 56), extractMInt(mi(64, _620), 48, 56)))), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(MI620, 48, 56), extractMInt(MI620, 48, 56))), concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(MI620, 48, 56), extractMInt(MI620, 48, 56)))), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn rolb_rh_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-rolb_rh_one.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: roll_r32_one[0m
[4m[1m[34mcreatespec roll_r32_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_roll_r32_one_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mroll_r32_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: xorl %eax, %eax
%of -> 1
%af -> 1
%eax -> 1
%rax -> 1
%cf -> 1
%pf -> 1
%sf -> 1
%zf -> 1

Circuit: movl %ebx, %esp
%esp -> 1
%ebx -> 1
%rsp -> 1

Circuit: rcll $0x1, %esp
%cf -> 1
%esp -> 1
%of -> 1
\$0x1 -> 1
%rsp -> 1

Circuit: rcll $0x1, %ebx
%cf -> 1
%of -> 1
%rbx -> 1
%ebx -> 1
\$0x1 -> 1

Total Circuit
AF -> 1
RAX -> 1
CF -> 1
ZF -> 1
PF -> 1
RBX -> 1
RSP -> 1
OF -> 1
 -> 1
SF -> 1

Target
 -> 1
OF -> 1
RBX -> 1
CF -> 1

[4m[1m[34mkprove roll_r32_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_roll_r32_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_roll_r32_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput roll_r32_one[0m
[4m[1m[34msanitizeSpecOutput roll_r32_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mroll_r32_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 32, 64))), concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 32, 64))), 0, 1))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 32, 64))), concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 32, 64))), 0, 1))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> (mi(1, 1) )
echo Debug:  Result: "PF" |-> (mi(1, 1) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _621), 32, 33), extractMInt(mi(64, _621), 32, 33))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _621), 32, 33), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 32, 64))), concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 32, 64))), 0, 1))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI621, 32, 33), extractMInt(MI621, 32, 33))  andBool   notBool  ( eqMInt(extractMInt(MI621, 32, 33), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 32, 64))), concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 32, 64))), 0, 1))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (mi(64, 0) )
echo Debug:  Result: "RAX" |-> (mi(64, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 32, 64))), concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 32, 64))), 0, 1))), 1, 33)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 32, 64))), concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 32, 64))), 0, 1))), 1, 33)) )
echo Debug:  PreResult: "ZF" |-> (mi(1, 1) )
echo Debug:  Result: "ZF" |-> (mi(1, 1) )
echo Debug:  PreResult: "RSP" |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 32, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _621), 32, 64))), 1, 33))   )
echo Debug:  Result: "RSP" |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI621, 32, 64)), concatenateMInt(mi(1, 0), extractMInt(MI621, 32, 64))), 1, 33))   )
[4m[1m[34mwriteKDefn roll_r32_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-roll_r32_one.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: rsqrtss_xmm_xmm[0m
[4m[1m[34mcreatespec rsqrtss_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rsqrtss_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrsqrtss_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vdivps %xmm2, %xmm1, %xmm8
%ymm8 -> 1
%xmm2 -> 1
%xmm1 -> 1
%xmm8 -> 1
avx -> 1

Circuit: callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
%xmm10 -> 1
%xmm2 -> 1
%xmm8 -> 1
%xmm11 -> 1
%xmm9 -> 1

Circuit: vrsqrtps %ymm8, %ymm2
%ymm8 -> 1
avx -> 1
%ymm2 -> 1

Circuit: movss %xmm2, %xmm1
%xmm2 -> 1
%xmm1 -> 1
sse -> 1

Total Circuit
YMM10 -> 1
YMM1 -> 1
YMM11 -> 1
YMM9 -> 1
 -> 1
YMM8 -> 1
YMM2 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove rsqrtss_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rsqrtss_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rsqrtss_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput rsqrtss_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput rsqrtss_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrsqrtss_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat( ( MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8) ) , 2) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat( ( MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8) ) , 2) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat( ( MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 2) ) , 32), Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8), 2) ) , 32)))))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  0e+00f ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat( ( MInt2Float(extractMInt(MI617, 128, 160), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 128, 160), 24, 8) ) , 2) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat( ( MInt2Float(extractMInt(MI617, 160, 192), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 160, 192), 24, 8) ) , 2) ) , 32), concatenateMInt(Float2MInt( ( 1e+00  /Float  rootFloat( ( MInt2Float(extractMInt(MI617, 192, 224), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 2) ) , 32), Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(MI617, 224, 256), 24, 8), 2) ) , 32)))))))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _616), 0, 224), Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8), 2) ) , 32)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI616, 0, 224), Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(MI617, 224, 256), 24, 8), 2) ) , 32)) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _617), 160, 192)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(MI617, 160, 192)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _617), 128, 160)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(MI617, 128, 160)) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8) ) , 32)), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 32))), extractMInt(mi(256, _617), 224, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 128, 160), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI617, 160, 192), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 160, 192), 24, 8) ) , 32)), Float2MInt( ( MInt2Float(extractMInt(MI617, 192, 224), 24, 8)  /Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 32))), extractMInt(MI617, 224, 256)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _616) )
echo Debug:  Result: "SPAD1" |-> (MI616 )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _617), 192, 224))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(MI617, 192, 224))   )
[4m[1m[34mwriteKDefn rsqrtss_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-rsqrtss_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: salb_rh_one[0m
[4m[1m[34mcreatespec salb_rh_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_salb_rh_one_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msalb_rh_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: salb_rh_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: shlb $0x1, %ah
%sf -> 1
\$0x1 -> 1
%zf -> 1
%of -> 1
%af -> 1
%ah -> 1
%cf -> 1
%pf -> 1

Total Circuit
OF -> 1
 -> 1
SF -> 1
CF -> 1
RAX -> 1
AF -> 1
ZF -> 1
PF -> 1

Target
RAX -> 1
CF -> 1
AF -> 1
ZF -> 1
PF -> 1
OF -> 1
 -> 1
SF -> 1

[4m[1m[34mkprove salb_rh_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_salb_rh_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_salb_rh_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput salb_rh_one[0m
[4m[1m[34msanitizeSpecOutput salb_rh_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msalb_rh_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 56))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 56))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 56))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 56))), 1, 2) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 56))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 56))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _626)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI626) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _626), 48, 49), extractMInt(mi(64, _626), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _626), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 56))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI626, 48, 49), extractMInt(MI626, 48, 49))  andBool   notBool  ( eqMInt(extractMInt(MI626, 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 56))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _626), 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 56))), 1, 9), extractMInt(mi(64, _626), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI626, 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 56))), 1, 9), extractMInt(MI626, 56, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 56))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 56))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn salb_rh_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-salb_rh_one.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: seta_rh[0m
[4m[1m[34mcreatespec seta_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_seta_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mseta_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .read_zf_into_rbx
%rbx -> 1
%zf -> 1

Circuit: setnc %ah
%cf -> 1
%ah -> 1

Circuit: decb %bl
%pf -> 1
%of -> 1
%af -> 1
%bl -> 1
%sf -> 1
%zf -> 1

Circuit: cmovzq %rbx, %rax
%zf -> 1
%rbx -> 1
%rax -> 1
cmov -> 1

Total Circuit
ZF -> 1
RAX -> 1
CF -> 1
AF -> 1
RBX -> 1
PF -> 1
OF -> 1
SF -> 1
 -> 1

Target
RAX -> 1
CF -> 1
ZF -> 1

[4m[1m[34mkprove seta_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_seta_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_seta_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput seta_rh[0m
[4m[1m[34msanitizeSpecOutput seta_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mseta_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, _619) )
echo Debug:  Result: "CF" |-> (MI619 )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _621))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI621)), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 255), concatenateMInt(mi(7, 0), mi(1, _621))), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _621))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 255), concatenateMInt(mi(7, 0), MI621)), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI621)), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _621))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI621)), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _620)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI620) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _621))), 1, 9), mi(8, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _620), 0, 48), concatenateMInt(mi(8, 0), extractMInt(mi(64, _620), 56, 64))) ) #else ( concatenateMInt(extractMInt(mi(64, _620), 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _619))), 1, 9)), mi(17, 4)), 1, 9), extractMInt(mi(64, _620), 56, 64))) ) #fi)  )
echo Debug:  Result: "RAX" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI621)), 1, 9), mi(8, 0)) ) #then ( concatenateMInt(extractMInt(MI620, 0, 48), concatenateMInt(mi(8, 0), extractMInt(MI620, 56, 64))) ) #else ( concatenateMInt(extractMInt(MI620, 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI619)), 1, 9)), mi(17, 4)), 1, 9), extractMInt(MI620, 56, 64))) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(56, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _621))), 1, 9)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(56, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI621)), 1, 9)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _621))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI621)), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn seta_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-seta_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setae_rh[0m
[4m[1m[34mcreatespec setae_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setae_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetae_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: setnc %ah
%cf -> 1
%ah -> 1

Total Circuit
CF -> 1
RAX -> 1

Target
CF -> 1
RAX -> 1

[4m[1m[34mkprove setae_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setae_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setae_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setae_rh[0m
[4m[1m[34msanitizeSpecOutput setae_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetae_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _613), 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _612))), 1, 9)), mi(17, 4)), 1, 9), extractMInt(mi(64, _613), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI613, 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI612)), 1, 9)), mi(17, 4)), 1, 9), extractMInt(MI613, 56, 64))) )
echo Debug:  PreResult: "CF" |-> (mi(1, _612) )
echo Debug:  Result: "CF" |-> (MI612 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _613))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI613)   )
[4m[1m[34mwriteKDefn setae_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setae_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setbe_rh[0m
[4m[1m[34mcreatespec setbe_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setbe_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetbe_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: setbe %dl
%cf -> 1
%zf -> 1
%dl -> 1

Circuit: xorw %ax, %ax
%ax -> 1
%sf -> 1
%zf -> 1
%pf -> 1
%cf -> 1
%of -> 1
%af -> 1

Circuit: xaddb %ah, %dl
%of -> 1
%af -> 1
%pf -> 1
%ah -> 1
%cf -> 1
%sf -> 1
%zf -> 1
%dl -> 1

Total Circuit
OF -> 1
RDX -> 1
SF -> 1
ZF -> 1
CF -> 1
RAX -> 1
AF -> 1
PF -> 1

Target
ZF -> 1
CF -> 1
RAX -> 1

[4m[1m[34mkprove setbe_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setbe_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setbe_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setbe_rh[0m
[4m[1m[34msanitizeSpecOutput setbe_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetbe_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), (#ifMInt (eqMInt(mi(1, _621), mi(1, 0)) ) #then ( concatenateMInt(mi(7, 0), mi(1, _619)) ) #else ( concatenateMInt(mi(7, 0), mi(1, _621)) ) #fi) ), (#ifMInt (eqMInt(mi(1, _621), mi(1, 0)) ) #then ( concatenateMInt(mi(7, 0), mi(1, _619)) ) #else ( concatenateMInt(mi(7, 0), mi(1, _621)) ) #fi) ), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), (#ifMInt (eqMInt(MI621, mi(1, 0)) ) #then ( concatenateMInt(mi(7, 0), MI619) ) #else ( concatenateMInt(mi(7, 0), MI621) ) #fi) ), (#ifMInt (eqMInt(MI621, mi(1, 0)) ) #then ( concatenateMInt(mi(7, 0), MI619) ) #else ( concatenateMInt(mi(7, 0), MI621) ) #fi) ), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes((#ifMInt (eqMInt(mi(1, _621), mi(1, 0)) ) #then ( concatenateMInt(mi(7, 0), mi(1, _619)) ) #else ( concatenateMInt(mi(7, 0), mi(1, _621)) ) #fi) , 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes((#ifMInt (eqMInt(MI621, mi(1, 0)) ) #then ( concatenateMInt(mi(7, 0), MI619) ) #else ( concatenateMInt(mi(7, 0), MI621) ) #fi) , 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _620)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI620) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RDX" |-> ((#ifMInt (eqMInt(mi(1, _621), mi(1, 0)) ) #then ( concatenateMInt(mi(63, 0), mi(1, _619)) ) #else ( concatenateMInt(mi(63, 0), mi(1, _621)) ) #fi)  )
echo Debug:  Result: "RDX" |-> ((#ifMInt (eqMInt(MI621, mi(1, 0)) ) #then ( concatenateMInt(mi(63, 0), MI619) ) #else ( concatenateMInt(mi(63, 0), MI621) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> ((#ifMInt (eqMInt(mi(1, _621), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _620), 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _619)), extractMInt(mi(64, _620), 56, 64))) ) #else ( concatenateMInt(extractMInt(mi(64, _620), 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _621)), extractMInt(mi(64, _620), 56, 64))) ) #fi)  )
echo Debug:  Result: "RAX" |-> ((#ifMInt (eqMInt(MI621, mi(1, 0)) ) #then ( concatenateMInt(extractMInt(MI620, 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), MI619), extractMInt(MI620, 56, 64))) ) #else ( concatenateMInt(extractMInt(MI620, 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), MI621), extractMInt(MI620, 56, 64))) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt ((#ifBool (eqMInt(mi(1, _621), mi(1, 0)) ) #then ( eqMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 0)) ) #else ( eqMInt(concatenateMInt(mi(7, 0), mi(1, _621)), mi(8, 0)) ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt ((#ifBool (eqMInt(MI621, mi(1, 0)) ) #then ( eqMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 0)) ) #else ( eqMInt(concatenateMInt(mi(7, 0), MI621), mi(8, 0)) ) #fi) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn setbe_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setbe_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: sete_rh[0m
[4m[1m[34mcreatespec sete_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sete_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msete_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .read_zf_into_rbx
%zf -> 1
%rbx -> 1

Circuit: xorw %ax, %ax
%of -> 1
%af -> 1
%cf -> 1
%pf -> 1
%sf -> 1
%zf -> 1
%ax -> 1

Circuit: xaddb %bl, %ah
%pf -> 1
%cf -> 1
%ah -> 1
%af -> 1
%of -> 1
%bl -> 1
%zf -> 1
%sf -> 1

Total Circuit
RBX -> 1
PF -> 1
ZF -> 1
AF -> 1
RAX -> 1
CF -> 1
SF -> 1
OF -> 1

Target
ZF -> 1
RAX -> 1

[4m[1m[34mkprove sete_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sete_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sete_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput sete_rh[0m
[4m[1m[34msanitizeSpecOutput sete_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msete_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), concatenateMInt(mi(7, 0), mi(1, _619))), concatenateMInt(mi(7, 0), mi(1, _619))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), concatenateMInt(mi(7, 0), MI619)), concatenateMInt(mi(7, 0), MI619)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(mi(1, _619))  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(MI619)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _618)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI618) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _618), 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _619)), extractMInt(mi(64, _618), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI618, 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), MI619), extractMInt(MI618, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (mi(64, 0) )
echo Debug:  Result: "RBX" |-> (mi(64, 0) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn sete_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-sete_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setge_rh[0m
[4m[1m[34mcreatespec setge_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setge_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetge_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq $0x1, %rax
\$0x1 -> 1
%rax -> 1

Circuit: setge %al
%of -> 1
%sf -> 1
%al -> 1

Circuit: movb %al, %ah
%ah -> 1
%al -> 1

Circuit: movq %rax, %rax
%rax -> 1

Total Circuit
OF -> 1
SF -> 1
 -> 1
RAX -> 1

Target
RAX -> 1
SF -> 1
OF -> 1

[4m[1m[34mkprove setge_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setge_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setge_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setge_rh[0m
[4m[1m[34msanitizeSpecOutput setge_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetge_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _615), 0, 48), concatenateMInt(xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _616)), concatenateMInt(mi(7, 0), mi(1, _614))), mi(8, 1)), extractMInt(mi(64, _615), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI615, 0, 48), concatenateMInt(xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI616), concatenateMInt(mi(7, 0), MI614)), mi(8, 1)), extractMInt(MI615, 56, 64))) )
echo Debug:  PreResult: "SF" |-> (mi(1, _616) )
echo Debug:  Result: "SF" |-> (MI616 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _615)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI615) )
echo Debug:  PreResult: "OF" |-> (mi(1, _614)   )
echo Debug:  Result: "OF" |-> (MI614   )
[4m[1m[34mwriteKDefn setge_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setge_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setl_r8[0m
[4m[1m[34mcreatespec setl_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setl_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetl_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: setl %bh
%of -> 1
%bh -> 1
%sf -> 1

Circuit: movb %bh, %bl
%bl -> 1
%bh -> 1

Total Circuit
RBX -> 1
OF -> 1
SF -> 1

Target
RBX -> 1
OF -> 1
SF -> 1

[4m[1m[34mkprove setl_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setl_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setl_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setl_r8[0m
[4m[1m[34msanitizeSpecOutput setl_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetl_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _615), 0, 56), xorMInt(concatenateMInt(mi(7, 0), mi(1, _616)), concatenateMInt(mi(7, 0), mi(1, _614)))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI615, 0, 56), xorMInt(concatenateMInt(mi(7, 0), MI616), concatenateMInt(mi(7, 0), MI614))) )
echo Debug:  PreResult: "SF" |-> (mi(1, _616) )
echo Debug:  Result: "SF" |-> (MI616 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _615)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI615) )
echo Debug:  PreResult: "OF" |-> (mi(1, _614)   )
echo Debug:  Result: "OF" |-> (MI614   )
[4m[1m[34mwriteKDefn setl_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setl_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setle_rh[0m
[4m[1m[34mcreatespec setle_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setle_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetle_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .read_zf_into_rbx
%rbx -> 1
%zf -> 1

Circuit: setnge %bh
%of -> 1
%sf -> 1
%bh -> 1

Circuit: callq .set_szp_for_bx
%zf -> 1
%sf -> 1
%bx -> 1
%pf -> 1

Circuit: setne %ah
%ah -> 1
%zf -> 1

Total Circuit
ZF -> 1
RAX -> 1
RBX -> 1
PF -> 1
OF -> 1
SF -> 1

Target
OF -> 1
SF -> 1
RAX -> 1
ZF -> 1

[4m[1m[34mkprove setle_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setle_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setle_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setle_rh[0m
[4m[1m[34msanitizeSpecOutput setle_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetle_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(mi(1, _621))  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(MI621)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _619)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI619) )
echo Debug:  PreResult: "OF" |-> (mi(1, _618) )
echo Debug:  Result: "OF" |-> (MI618 )
echo Debug:  PreResult: "RAX" |-> ((#ifMInt (eqMInt(concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _620)), concatenateMInt(mi(7, 0), mi(1, _618))), concatenateMInt(mi(7, 0), mi(1, _621))), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _619), 0, 48), concatenateMInt(mi(8, 0), extractMInt(mi(64, _619), 56, 64))) ) #else ( concatenateMInt(extractMInt(mi(64, _619), 0, 48), concatenateMInt(mi(8, 1), extractMInt(mi(64, _619), 56, 64))) ) #fi)  )
echo Debug:  Result: "RAX" |-> ((#ifMInt (eqMInt(concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), MI620), concatenateMInt(mi(7, 0), MI618)), concatenateMInt(mi(7, 0), MI621)), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(MI619, 0, 48), concatenateMInt(mi(8, 0), extractMInt(MI619, 56, 64))) ) #else ( concatenateMInt(extractMInt(MI619, 0, 48), concatenateMInt(mi(8, 1), extractMInt(MI619, 56, 64))) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _620)), concatenateMInt(mi(7, 0), mi(1, _618))), concatenateMInt(mi(7, 0), mi(1, _621)))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), MI620), concatenateMInt(mi(7, 0), MI618)), concatenateMInt(mi(7, 0), MI621))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _620)), concatenateMInt(mi(7, 0), mi(1, _618))), concatenateMInt(mi(7, 0), mi(1, _621))), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), MI620), concatenateMInt(mi(7, 0), MI618)), concatenateMInt(mi(7, 0), MI621)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn setle_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setle_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setne_r8[0m
[4m[1m[34mcreatespec setne_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setne_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetne_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq $0x0, %rbx
\$0x0 -> 1
%rbx -> 1

Circuit: setne %bh
%zf -> 1
%bh -> 1

Circuit: callq .move_016_008_bx_r8b_r9b
%r8b -> 1
%r9b -> 1
%bx -> 1

Circuit: callq .move_r9b_to_byte_6_of_rbx
%r9b -> 1
%rbx -> 1

Circuit: xaddb %bh, %bl
%bh -> 1
%bl -> 1
%zf -> 1
%sf -> 1
%bx -> 1
%cf -> 1
%pf -> 1
%af -> 1
%of -> 1

Circuit: callq .move_r8b_to_byte_5_of_rbx
%rbx -> 1
%r8b -> 1

Total Circuit
CF -> 1
AF -> 1
R9 -> 1
ZF -> 1
PF -> 1
RBX -> 1
R8 -> 1
OF -> 1
 -> 1
SF -> 1

Target
RBX -> 1
ZF -> 1

[4m[1m[34mkprove setne_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setne_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setne_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setne_r8[0m
[4m[1m[34msanitizeSpecOutput setne_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetne_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt((#ifMInt (eqMInt(mi(1, _620), mi(1, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) , mi(8, 0)), (#ifMInt (eqMInt(mi(1, _620), mi(1, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) ), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt((#ifMInt (eqMInt(MI620, mi(1, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) , mi(8, 0)), (#ifMInt (eqMInt(MI620, mi(1, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) ), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R8" |-> (mi(64, 0) )
echo Debug:  Result: "R8" |-> (mi(64, 0) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes((#ifMInt (eqMInt(mi(1, _620), mi(1, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) , 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes((#ifMInt (eqMInt(MI620, mi(1, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) , 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R9" |-> ((#ifMInt (eqMInt(mi(1, _620), mi(1, 0)) ) #then ( mi(64, 1) ) #else ( mi(64, 0) ) #fi)  )
echo Debug:  Result: "R9" |-> ((#ifMInt (eqMInt(MI620, mi(1, 0)) ) #then ( mi(64, 1) ) #else ( mi(64, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _619)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI619) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _620), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _619), 0, 56), mi(8, 1)) ) #else ( concatenateMInt(extractMInt(mi(64, _619), 0, 56), mi(8, 0)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI620, mi(1, 0)) ) #then ( concatenateMInt(extractMInt(MI619, 0, 56), mi(8, 1)) ) #else ( concatenateMInt(extractMInt(MI619, 0, 56), mi(8, 0)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(mi(1, _620), mi(1, 0)) ) #then ( mi(1, 0) ) #else ( mi(1, 1) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(MI620, mi(1, 0)) ) #then ( mi(1, 0) ) #else ( mi(1, 1) ) #fi)    )
[4m[1m[34mwriteKDefn setne_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setne_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setnge_r8[0m
[4m[1m[34mcreatespec setnge_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnge_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnge_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .read_of_into_rbx
%of -> 1
%rbx -> 1

Circuit: callq .move_032_016_ebx_r12w_r13w
%r13w -> 1
%r12w -> 1
%ebx -> 1

Circuit: callq .move_032_016_ebx_r8w_r9w
%r9w -> 1
%ebx -> 1
%r8w -> 1

Circuit: callq .read_sf_into_rcx
%sf -> 1
%rcx -> 1

Circuit: rolb $0x1, %r13b
%cf -> 1
%of -> 1
\$0x1 -> 1
%r13b -> 1

Circuit: xorl %ecx, %ebx
%ecx -> 1
%af -> 1
%of -> 1
%pf -> 1
%cf -> 1
%ebx -> 1
%zf -> 1
%sf -> 1
%rbx -> 1

Circuit: xaddw %r9w, %r13w
%r9w -> 1
%sf -> 1
%zf -> 1
%of -> 1
%af -> 1
%pf -> 1
%r13w -> 1
%cf -> 1

Circuit: callq .move_r9b_to_byte_5_of_rbx
%r9b -> 1
%rbx -> 1

Total Circuit
OF -> 1
R8 -> 1
R13 -> 1
SF -> 1
 -> 1
RCX -> 1
R9 -> 1
ZF -> 1
R12 -> 1
AF -> 1
CF -> 1
RBX -> 1
PF -> 1

Target
RBX -> 1
SF -> 1
OF -> 1

[4m[1m[34mkprove setnge_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnge_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnge_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setnge_r8[0m
[4m[1m[34msanitizeSpecOutput setnge_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnge_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (mi(1, 0) )
echo Debug:  Result: "AF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(63, 0), mi(1, _625)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(63, 0), MI625) )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(63, 0), mi(1, _623)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(63, 0), MI623) )
echo Debug:  PreResult: "R9" |-> (mi(64, 0) )
echo Debug:  Result: "R9" |-> (mi(64, 0) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _624)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI624) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _624), 0, 56), xorMInt(concatenateMInt(mi(7, 0), mi(1, _623)), concatenateMInt(mi(7, 0), mi(1, _625)))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI624, 0, 56), xorMInt(concatenateMInt(mi(7, 0), MI623), concatenateMInt(mi(7, 0), MI625))) )
echo Debug:  PreResult: "ZF" |-> (mi(1, 1) )
echo Debug:  Result: "ZF" |-> (mi(1, 1) )
echo Debug:  PreResult: "R12" |-> (concatenateMInt(mi(63, 0), mi(1, _623)) )
echo Debug:  Result: "R12" |-> (concatenateMInt(mi(63, 0), MI623) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "R13" |-> (mi(64, 0) )
echo Debug:  Result: "R13" |-> (mi(64, 0) )
echo Debug:  PreResult: "PF" |-> (mi(1, 1) )
echo Debug:  Result: "PF" |-> (mi(1, 1) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
[4m[1m[34mwriteKDefn setnge_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setnge_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setnl_r8[0m
[4m[1m[34mcreatespec setnl_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnl_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnl_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: setge %bl
%of -> 1
%sf -> 1
%bl -> 1

Total Circuit
SF -> 1
OF -> 1
RBX -> 1

Target
RBX -> 1
SF -> 1
OF -> 1

[4m[1m[34mkprove setnl_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnl_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnl_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setnl_r8[0m
[4m[1m[34msanitizeSpecOutput setnl_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnl_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _615), 0, 56), xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _616)), concatenateMInt(mi(7, 0), mi(1, _614))), mi(8, 1))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI615, 0, 56), xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI616), concatenateMInt(mi(7, 0), MI614)), mi(8, 1))) )
echo Debug:  PreResult: "SF" |-> (mi(1, _616) )
echo Debug:  Result: "SF" |-> (MI616 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _615)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI615) )
echo Debug:  PreResult: "OF" |-> (mi(1, _614)   )
echo Debug:  Result: "OF" |-> (MI614   )
[4m[1m[34mwriteKDefn setnl_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setnl_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setnz_r8[0m
[4m[1m[34mcreatespec setnz_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnz_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnz_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq $0x10, %rbx
%rbx -> 1
\$0x10 -> 1

Circuit: setne %bh
%bh -> 1
%zf -> 1

Circuit: xaddb %bl, %bh
%cf -> 1
%pf -> 1
%af -> 1
%of -> 1
%bh -> 1
%bl -> 1
%zf -> 1
%sf -> 1
%bx -> 1

Total Circuit
 -> 1
SF -> 1
OF -> 1
PF -> 1
RBX -> 1
CF -> 1
AF -> 1
ZF -> 1

Target
ZF -> 1
RBX -> 1

[4m[1m[34mkprove setnz_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnz_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnz_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setnz_r8[0m
[4m[1m[34msanitizeSpecOutput setnz_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnz_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt((#ifMInt (eqMInt(mi(1, _618), mi(1, 0)) ) #then ( mi(9, 1) ) #else ( mi(9, 0) ) #fi) , mi(9, 16)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt((#ifMInt (eqMInt(MI618, mi(1, 0)) ) #then ( mi(9, 1) ) #else ( mi(9, 0) ) #fi) , mi(9, 16)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt((#ifMInt (eqMInt(mi(1, _618), mi(1, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) , mi(8, 16)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt((#ifMInt (eqMInt(MI618, mi(1, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) , mi(8, 16)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt((#ifMInt (eqMInt(mi(1, _618), mi(1, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) , mi(8, 16)), addMInt((#ifMInt (eqMInt(mi(1, _618), mi(1, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) , mi(8, 16))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt((#ifMInt (eqMInt(MI618, mi(1, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) , mi(8, 16)), addMInt((#ifMInt (eqMInt(MI618, mi(1, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) , mi(8, 16))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt((#ifMInt (eqMInt(mi(1, _618), mi(1, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) , mi(8, 16)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt((#ifMInt (eqMInt(MI618, mi(1, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) , mi(8, 16)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _617)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI617) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt((#ifMInt (eqMInt(mi(1, _618), mi(1, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) , mi(8, 16)), 0, 1)) )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt((#ifMInt (eqMInt(MI618, mi(1, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) , mi(8, 16)), 0, 1)) )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _618), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _617), 0, 56), mi(8, 1)) ) #else ( concatenateMInt(extractMInt(mi(64, _617), 0, 56), mi(8, 0)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI618, mi(1, 0)) ) #then ( concatenateMInt(extractMInt(MI617, 0, 56), mi(8, 1)) ) #else ( concatenateMInt(extractMInt(MI617, 0, 56), mi(8, 0)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt((#ifMInt (eqMInt(mi(1, _618), mi(1, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) , mi(8, 16)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt((#ifMInt (eqMInt(MI618, mi(1, 0)) ) #then ( mi(8, 1) ) #else ( mi(8, 0) ) #fi) , mi(8, 16)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn setnz_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setnz_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: seto_rh[0m
[4m[1m[34mcreatespec seto_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_seto_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mseto_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .read_of_into_rcx
%rcx -> 1
%of -> 1

Circuit: xorl %eax, %eax
%sf -> 1
%zf -> 1
%cf -> 1
%pf -> 1
%of -> 1
%af -> 1
%eax -> 1
%rax -> 1

Circuit: xaddb %ah, %cl
%ah -> 1
%cf -> 1
%pf -> 1
%of -> 1
%af -> 1
%sf -> 1
%zf -> 1
%cl -> 1

Total Circuit
ZF -> 1
RCX -> 1
AF -> 1
CF -> 1
RAX -> 1
PF -> 1
OF -> 1
SF -> 1

Target
OF -> 1
RAX -> 1

[4m[1m[34mkprove seto_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_seto_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_seto_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput seto_rh[0m
[4m[1m[34msanitizeSpecOutput seto_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mseto_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), concatenateMInt(mi(7, 0), mi(1, _618))), concatenateMInt(mi(7, 0), mi(1, _618))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), concatenateMInt(mi(7, 0), MI618)), concatenateMInt(mi(7, 0), MI618)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(63, 0), mi(1, _618)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(63, 0), MI618) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(mi(1, _618))  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(MI618)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _619)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI619) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _619), 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _618)), extractMInt(mi(64, _619), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI619, 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), MI618), extractMInt(MI619, 56, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(7, 0), mi(1, _618)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(7, 0), MI618), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn seto_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-seto_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setpo_rh[0m
[4m[1m[34mcreatespec setpo_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setpo_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetpo_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: setpo %r14b
%r14b -> 1
%pf -> 1

Circuit: movzbl %r14b, %ecx
%ecx -> 1
%r14b -> 1
%rcx -> 1

Circuit: movq $0xfffffffffffffff0, %rax
\$0xfffffffffffffff0 -> 1
%rax -> 1

Circuit: xaddb %ah, %cl
%zf -> 1
%sf -> 1
%cl -> 1
%af -> 1
%of -> 1
%cf -> 1
%ah -> 1
%pf -> 1

Total Circuit
RCX -> 1
ZF -> 1
CF -> 1
RAX -> 1
AF -> 1
R14 -> 1
PF -> 1
OF -> 1
SF -> 1
 -> 1

Target
RAX -> 1
PF -> 1

[4m[1m[34mkprove setpo_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setpo_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setpo_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setpo_rh[0m
[4m[1m[34msanitizeSpecOutput setpo_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetpo_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1)))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1)))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1)))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1)))), 1, 2) )
echo Debug:  PreResult: "R14" |-> (concatenateMInt(mi(56, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1))) )
echo Debug:  Result: "R14" |-> (concatenateMInt(mi(56, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1))) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 255), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1))), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1)))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 255), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1))), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1)))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1)))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1)))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(56, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1)))), 1, 9)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(56, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1)))), 1, 9)) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _620)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI620) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _620), 0, 48), concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1)), extractMInt(mi(64, _620), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI620, 0, 48), concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1)), extractMInt(MI620, 56, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 1)))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(1, 0), xorMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 1)))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn setpo_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setpo_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setz_rh[0m
[4m[1m[34mcreatespec setz_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setz_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetz_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .read_zf_into_rbx
%zf -> 1
%rbx -> 1

Circuit: xorq %rax, %rax
%of -> 1
%af -> 1
%rax -> 1
%cf -> 1
%pf -> 1
%sf -> 1
%zf -> 1

Circuit: xaddb %ah, %bl
%ah -> 1
%cf -> 1
%pf -> 1
%of -> 1
%af -> 1
%bl -> 1
%sf -> 1
%zf -> 1

Total Circuit
PF -> 1
RBX -> 1
CF -> 1
RAX -> 1
AF -> 1
ZF -> 1
SF -> 1
OF -> 1

Target
ZF -> 1
RAX -> 1

[4m[1m[34mkprove setz_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setz_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setz_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setz_rh[0m
[4m[1m[34msanitizeSpecOutput setz_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetz_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), concatenateMInt(mi(7, 0), mi(1, _619))), concatenateMInt(mi(7, 0), mi(1, _619))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), concatenateMInt(mi(7, 0), MI619)), concatenateMInt(mi(7, 0), MI619)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(mi(1, _619))  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(MI619)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _618)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI618) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _618), 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _619)), extractMInt(mi(64, _618), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI618, 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), MI619), extractMInt(MI618, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(63, 0), mi(1, _619)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(63, 0), MI619) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn setz_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setz_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: shlw_r16_one[0m
[4m[1m[34mcreatespec shlw_r16_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shlw_r16_one_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mshlw_r16_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: shlw_r16_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: xorq %rax, %rax
%cf -> 1
%pf -> 1
%af -> 1
%of -> 1
%rax -> 1
%zf -> 1
%sf -> 1

Circuit: sall $0x1, %eax
%zf -> 1
\$0x1 -> 1
%sf -> 1
%rax -> 1
%eax -> 1
%af -> 1
%of -> 1
%pf -> 1
%cf -> 1

Circuit: cltq
%eax -> 1
%rax -> 1

Circuit: cltq
%rax -> 1
%eax -> 1

Circuit: adcw %ax, %bx
%of -> 1
%af -> 1
%cf -> 1
%pf -> 1
%sf -> 1
%zf -> 1
%ax -> 1
%bx -> 1

Circuit: addw %bx, %bx
%sf -> 1
%zf -> 1
%bx -> 1
%cf -> 1
%pf -> 1
%of -> 1
%af -> 1

Total Circuit
OF -> 1
SF -> 1
 -> 1
ZF -> 1
CF -> 1
RAX -> 1
AF -> 1
RBX -> 1
PF -> 1

Target
OF -> 1
SF -> 1
 -> 1
ZF -> 1
AF -> 1
CF -> 1
RBX -> 1
PF -> 1

[4m[1m[34mkprove shlw_r16_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shlw_r16_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_shlw_r16_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput shlw_r16_one[0m
[4m[1m[34msanitizeSpecOutput shlw_r16_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mshlw_r16_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 48, 64))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI627, 48, 64))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 48, 64))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI627, 48, 64))), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 48, 64))), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI627, 48, 64))), 1, 17)), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 48, 64))), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI627, 48, 64))), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _627)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI627) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _627), 48, 49), extractMInt(mi(64, _627), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _627), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 48, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI627, 48, 49), extractMInt(MI627, 48, 49))  andBool   notBool  ( eqMInt(extractMInt(MI627, 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI627, 48, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (mi(64, 0) )
echo Debug:  Result: "RAX" |-> (mi(64, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _627), 0, 48), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 48, 64))), 1, 17)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI627, 0, 48), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI627, 48, 64))), 1, 17)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _627), 48, 64))), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI627, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI627, 48, 64))), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn shlw_r16_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-shlw_r16_one.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: subpd_xmm_xmm[0m
[4m[1m[34mcreatespec subpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subpd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msubpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmaxps %xmm2, %xmm2, %xmm6
%xmm2 -> 1
%ymm6 -> 1
avx -> 1
%xmm6 -> 1

Circuit: vmaxss %xmm1, %xmm1, %xmm10
%xmm1 -> 1
avx -> 1
%ymm10 -> 1
%xmm10 -> 1

Circuit: vsubpd %ymm6, %ymm10, %ymm7
%ymm10 -> 1
%ymm7 -> 1
%ymm6 -> 1
avx -> 1

Circuit: movapd %xmm7, %xmm1
%xmm7 -> 1
%xmm1 -> 1
sse2 -> 1

Total Circuit
 -> 1
YMM2 -> 1
YMM6 -> 1
YMM10 -> 1
YMM7 -> 1
YMM1 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove subpd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subpd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subpd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput subpd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput subpd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msubpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _615), 0, 128), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI615, 0, 128), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 128, 192), 53, 11)  -Float  MInt2Float(extractMInt(MI616, 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(MI616, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 224)), extractMInt(mi(256, _615), 224, 256)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 224)), extractMInt(MI615, 224, 256)) )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _616), 128, 256)) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(128, 0), extractMInt(MI616, 128, 256)) )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 128, 192), 53, 11)  -Float  MInt2Float(extractMInt(MI616, 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(MI616, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _615) )
echo Debug:  Result: "SPAD1" |-> (MI615 )
[4m[1m[34mwriteKDefn subpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-subpd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: subss_xmm_xmm[0m
[4m[1m[34mcreatespec subss_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subss_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msubss_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovdqu %xmm1, %xmm14
%ymm14 -> 1
%xmm1 -> 1
avx -> 1
%xmm14 -> 1

Circuit: vunpcklpd %xmm14, %xmm2, %xmm8
%xmm2 -> 1
%xmm14 -> 1
%ymm8 -> 1
avx -> 1
%xmm8 -> 1

Circuit: vsubps %ymm8, %ymm14, %ymm11
%ymm11 -> 1
%ymm8 -> 1
avx -> 1
%ymm14 -> 1

Circuit: movss %xmm11, %xmm1
%xmm1 -> 1
%xmm11 -> 1
sse -> 1

Total Circuit
YMM11 -> 1
YMM14 -> 1
YMM1 -> 1
YMM8 -> 1
YMM2 -> 1
 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove subss_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subss_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subss_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput subss_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput subss_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msubss_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _615), 0, 224), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI615, 0, 224), Float2MInt( ( MInt2Float(extractMInt(MI615, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 128, 160), 24, 8)  -Float  MInt2Float(extractMInt(MI615, 192, 224), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI615, 224, 256), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 224), 24, 8)  -Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI615, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM14" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 256)) )
echo Debug:  Result: "YMM14" |-> (concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 256)) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _615), 192, 256), extractMInt(mi(256, _616), 192, 256))) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI615, 192, 256), extractMInt(MI616, 192, 256))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _615) )
echo Debug:  Result: "SPAD1" |-> (MI615 )
[4m[1m[34mwriteKDefn subss_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-subss_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vaddsd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vaddsd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vaddsd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvaddsd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: addsd %xmm3, %xmm2
sse2 -> 1
%xmm2 -> 1
%xmm3 -> 1

Circuit: callq .move_128_064_xmm2_r8_r9
%r8 -> 1
%r9 -> 1
%xmm2 -> 1

Circuit: vzeroall
%ymm7 -> 1
%ymm15 -> 1
%ymm9 -> 1
%ymm5 -> 1
%ymm1 -> 1
%ymm13 -> 1
%ymm6 -> 1
%ymm2 -> 1
%ymm4 -> 1
%ymm10 -> 1
%ymm11 -> 1
%ymm8 -> 1
avx -> 1
%ymm3 -> 1
%ymm12 -> 1
%ymm14 -> 1
%ymm0 -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%xmm1 -> 1
%r9 -> 1
%r8 -> 1

Total Circuit
YMM8 -> 1
YMM2 -> 1
YMM3 -> 1
 -> 1
YMM15 -> 1
R8 -> 1
YMM5 -> 1
YMM11 -> 1
YMM0 -> 1
YMM14 -> 1
YMM13 -> 1
YMM10 -> 1
YMM7 -> 1
YMM4 -> 1
YMM6 -> 1
YMM9 -> 1
YMM12 -> 1
YMM1 -> 1
R9 -> 1

Target
YMM3 -> 1
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove vaddsd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vaddsd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vaddsd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vaddsd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vaddsd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvaddsd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (Float2MInt( ( MInt2Float(extractMInt(mi(256, _630), 192, 256), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _629), 192, 256), 53, 11) ) , 64) )
echo Debug:  Result: "R8" |-> (Float2MInt( ( MInt2Float(extractMInt(MI630, 192, 256), 53, 11)  +Float  MInt2Float(extractMInt(MI629, 192, 256), 53, 11) ) , 64) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _629), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI629, 128, 192) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _629), 128, 192), Float2MInt( ( MInt2Float(extractMInt(mi(256, _630), 192, 256), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _629), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI629, 128, 192), Float2MInt( ( MInt2Float(extractMInt(MI630, 192, 256), 53, 11)  +Float  MInt2Float(extractMInt(MI629, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vaddsd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vaddsd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vandnpd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vandnpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandnpd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvandnpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vorpd %xmm2, %xmm3, %xmm12
%xmm12 -> 1
%xmm3 -> 1
%xmm2 -> 1
%ymm12 -> 1
avx -> 1

Circuit: vmovupd %ymm12, %ymm1
%ymm1 -> 1
avx -> 1
%ymm12 -> 1

Circuit: pxor %xmm1, %xmm2
%xmm2 -> 1
sse2 -> 1
%xmm1 -> 1

Circuit: vmovdqa %xmm2, %xmm1
%xmm2 -> 1
%xmm1 -> 1
%ymm1 -> 1
avx -> 1

Total Circuit
YMM3 -> 1
YMM2 -> 1
 -> 1
YMM12 -> 1
YMM1 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1
YMM3 -> 1

[4m[1m[34mkprove vandnpd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandnpd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandnpd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vandnpd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vandnpd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvandnpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(orMInt(extractMInt(mi(256, _616), 128, 192), extractMInt(mi(256, _615), 128, 192)), orMInt(extractMInt(mi(256, _616), 192, 256), extractMInt(mi(256, _615), 192, 256)))) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(orMInt(extractMInt(MI616, 128, 192), extractMInt(MI615, 128, 192)), orMInt(extractMInt(MI616, 192, 256), extractMInt(MI615, 192, 256)))) )
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(extractMInt(mi(256, _615), 0, 128), concatenateMInt(xorMInt(orMInt(extractMInt(mi(256, _616), 128, 192), extractMInt(mi(256, _615), 128, 192)), extractMInt(mi(256, _615), 128, 192)), xorMInt(orMInt(extractMInt(mi(256, _616), 192, 256), extractMInt(mi(256, _615), 192, 256)), extractMInt(mi(256, _615), 192, 256)))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(extractMInt(MI615, 0, 128), concatenateMInt(xorMInt(orMInt(extractMInt(MI616, 128, 192), extractMInt(MI615, 128, 192)), extractMInt(MI615, 128, 192)), xorMInt(orMInt(extractMInt(MI616, 192, 256), extractMInt(MI615, 192, 256)), extractMInt(MI615, 192, 256)))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(extractMInt(mi(256, _616), 128, 192), extractMInt(mi(256, _615), 128, 192)), extractMInt(mi(256, _615), 128, 192)), xorMInt(orMInt(extractMInt(mi(256, _616), 192, 256), extractMInt(mi(256, _615), 192, 256)), extractMInt(mi(256, _615), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(extractMInt(MI616, 128, 192), extractMInt(MI615, 128, 192)), extractMInt(MI615, 128, 192)), xorMInt(orMInt(extractMInt(MI616, 192, 256), extractMInt(MI615, 192, 256)), extractMInt(MI615, 192, 256)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _616)   )
echo Debug:  Result: "YMM3" |-> (MI616   )
[4m[1m[34mwriteKDefn vandnpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vandnpd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vcvtdq2pd_xmm_xmm[0m
[4m[1m[34mcreatespec vcvtdq2pd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vcvtdq2pd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvcvtdq2pd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_064_xmm2_r8_r9
%xmm2 -> 1
%r9 -> 1
%r8 -> 1

Circuit: vzeroall
%ymm4 -> 1
%ymm10 -> 1
%ymm11 -> 1
%ymm8 -> 1
avx -> 1
%ymm3 -> 1
%ymm12 -> 1
%ymm14 -> 1
%ymm0 -> 1
%ymm7 -> 1
%ymm15 -> 1
%ymm9 -> 1
%ymm5 -> 1
%ymm13 -> 1
%ymm1 -> 1
%ymm6 -> 1
%ymm2 -> 1

Circuit: callq .move_064_128_r8_r9_xmm3
%xmm3 -> 1
%r9 -> 1
%r8 -> 1

Circuit: cvtdq2pd %xmm3, %xmm1
%xmm1 -> 1
sse2 -> 1
%xmm3 -> 1

Total Circuit
R8 -> 1
YMM15 -> 1
YMM3 -> 1
 -> 1
YMM2 -> 1
YMM8 -> 1
YMM7 -> 1
YMM10 -> 1
YMM13 -> 1
YMM14 -> 1
YMM11 -> 1
YMM0 -> 1
YMM5 -> 1
YMM4 -> 1
R9 -> 1
YMM1 -> 1
YMM12 -> 1
YMM9 -> 1
YMM6 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove vcvtdq2pd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vcvtdq2pd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vcvtdq2pd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vcvtdq2pd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vcvtdq2pd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvcvtdq2pd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _628), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI628, 192, 256) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _628), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI628, 128, 192) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _628), 192, 224)), 53, 11), 64), Float2MInt(Int2Float(svalueMInt(extractMInt(mi(256, _628), 224, 256)), 53, 11), 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(MI628, 192, 224)), 53, 11), 64), Float2MInt(Int2Float(svalueMInt(extractMInt(MI628, 224, 256)), 53, 11), 64))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _628), 128, 256)) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(MI628, 128, 256)) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vcvtdq2pd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvtdq2pd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vcvtsd2ss_xmm_xmm_xmm[0m
vcvtsd2ss_xmm_xmm_xmm 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cvtsd2ss_xmm_xmm.k
Warn: [4m[1m[35mvcvtsd2ss_xmm_xmm_xmm: UnSupported[0m
[4m[1m[34mCheck if supported: vcvttss2sil_r32_xmm[0m
vcvttss2sil_r32_xmm 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cvttss2sil_r32_xmm.k
Warn: [4m[1m[35mvcvttss2sil_r32_xmm: UnSupported[0m
[4m[1m[34mCheck if supported: vdivsd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vdivsd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vdivsd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvdivsd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: divsd %xmm3, %xmm2
%xmm3 -> 1
%xmm2 -> 1
sse2 -> 1

Circuit: callq .move_128_064_xmm2_r8_r9
%r9 -> 1
%r8 -> 1
%xmm2 -> 1

Circuit: vzeroall
%ymm3 -> 1
avx -> 1
%ymm0 -> 1
%ymm14 -> 1
%ymm12 -> 1
%ymm8 -> 1
%ymm11 -> 1
%ymm10 -> 1
%ymm4 -> 1
%ymm5 -> 1
%ymm2 -> 1
%ymm6 -> 1
%ymm13 -> 1
%ymm1 -> 1
%ymm7 -> 1
%ymm9 -> 1
%ymm15 -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%xmm1 -> 1
%r9 -> 1
%r8 -> 1

Total Circuit
YMM6 -> 1
YMM9 -> 1
YMM12 -> 1
R9 -> 1
YMM1 -> 1
YMM4 -> 1
YMM5 -> 1
YMM0 -> 1
YMM11 -> 1
YMM14 -> 1
YMM13 -> 1
YMM10 -> 1
YMM7 -> 1
YMM3 -> 1
 -> 1
YMM2 -> 1
YMM8 -> 1
YMM15 -> 1
R8 -> 1

Target
 -> 1
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vdivsd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vdivsd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vdivsd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vdivsd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vdivsd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvdivsd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (Float2MInt( ( MInt2Float(extractMInt(mi(256, _630), 192, 256), 53, 11)  /Float  MInt2Float(extractMInt(mi(256, _629), 192, 256), 53, 11) ) , 64) )
echo Debug:  Result: "R8" |-> (Float2MInt( ( MInt2Float(extractMInt(MI630, 192, 256), 53, 11)  /Float  MInt2Float(extractMInt(MI629, 192, 256), 53, 11) ) , 64) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _629), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI629, 128, 192) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _629), 128, 192), Float2MInt( ( MInt2Float(extractMInt(mi(256, _630), 192, 256), 53, 11)  /Float  MInt2Float(extractMInt(mi(256, _629), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI629, 128, 192), Float2MInt( ( MInt2Float(extractMInt(MI630, 192, 256), 53, 11)  /Float  MInt2Float(extractMInt(MI629, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vdivsd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vdivsd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmadd231ss_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfmadd231ss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd231ss_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd231ss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vfmadd213ss %xmm1, %xmm2, %xmm3
%xmm2 -> 1
fma -> 1
%xmm3 -> 1
%xmm1 -> 1
%ymm3 -> 1

Circuit: movss %xmm3, %xmm1
%xmm3 -> 1
sse -> 1
%xmm1 -> 1

Circuit: callq .move_128_064_xmm1_r8_r9
%xmm1 -> 1
%r9 -> 1
%r8 -> 1

Circuit: vzeroall
%ymm8 -> 1
%ymm11 -> 1
%ymm4 -> 1
%ymm10 -> 1
%ymm0 -> 1
%ymm14 -> 1
%ymm12 -> 1
%ymm3 -> 1
avx -> 1
%ymm9 -> 1
%ymm15 -> 1
%ymm7 -> 1
%ymm2 -> 1
%ymm6 -> 1
%ymm13 -> 1
%ymm1 -> 1
%ymm5 -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%xmm1 -> 1
%r9 -> 1
%r8 -> 1

Total Circuit
YMM12 -> 1
YMM1 -> 1
R9 -> 1
YMM6 -> 1
YMM9 -> 1
YMM4 -> 1
YMM13 -> 1
YMM7 -> 1
YMM10 -> 1
YMM5 -> 1
YMM11 -> 1
YMM14 -> 1
YMM0 -> 1
R8 -> 1
YMM15 -> 1
 -> 1
YMM3 -> 1
YMM8 -> 1
YMM2 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1
YMM3 -> 1

[4m[1m[34mkprove vfmadd231ss_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd231ss_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd231ss_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmadd231ss_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmadd231ss_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd231ss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (concatenateMInt(extractMInt(mi(256, _628), 192, 224), Float2MInt( ( MInt2Float(extractMInt(mi(256, _628), 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _629), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _630), 224, 256), 24, 8) )  ) , 32)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(extractMInt(MI628, 192, 224), Float2MInt( ( MInt2Float(extractMInt(MI628, 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(MI629, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI630, 224, 256), 24, 8) )  ) , 32)) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _628), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI628, 128, 192) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _628), 128, 224), Float2MInt( ( MInt2Float(extractMInt(mi(256, _628), 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _629), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _630), 224, 256), 24, 8) )  ) , 32))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI628, 128, 224), Float2MInt( ( MInt2Float(extractMInt(MI628, 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(MI629, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI630, 224, 256), 24, 8) )  ) , 32))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vfmadd231ss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmadd231ss_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmsub132pd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfmsub132pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub132pd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub132pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovsd %xmm3, %xmm3, %xmm0
%xmm3 -> 1
%xmm0 -> 1
%ymm0 -> 1
avx -> 1

Circuit: vmovapd %xmm2, %xmm7
%ymm7 -> 1
%xmm2 -> 1
avx -> 1
%xmm7 -> 1

Circuit: vmaxss %xmm7, %xmm2, %xmm13
%xmm2 -> 1
%ymm13 -> 1
%xmm13 -> 1
%xmm7 -> 1
avx -> 1

Circuit: vmovups %xmm1, %xmm15
avx -> 1
%ymm15 -> 1
%xmm1 -> 1
%xmm15 -> 1

Circuit: vfmsub231pd %ymm0, %ymm15, %ymm13
%ymm15 -> 1
fma -> 1
%ymm13 -> 1
%ymm0 -> 1

Circuit: vmovupd %xmm13, %xmm1
%xmm1 -> 1
%ymm1 -> 1
%xmm13 -> 1
avx -> 1

Total Circuit
YMM15 -> 1
 -> 1
YMM3 -> 1
YMM2 -> 1
YMM13 -> 1
YMM7 -> 1
YMM0 -> 1
YMM1 -> 1

Target
 -> 1
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vfmsub132pd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub132pd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub132pd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmsub132pd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmsub132pd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub132pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _618) )
echo Debug:  Result: "YMM2" |-> (MI618 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _617), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _619), 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _618), 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _619), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _618), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI617, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI619, 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(MI618, 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI617, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI619, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI618, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _617), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _619), 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _618), 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _619), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _618), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI617, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI619, 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(MI618, 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI617, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI619, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI618, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _619) )
echo Debug:  Result: "YMM3" |-> (MI619 )
echo Debug:  PreResult: "YMM15" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _617), 128, 256)) )
echo Debug:  Result: "YMM15" |-> (concatenateMInt(mi(128, 0), extractMInt(MI617, 128, 256)) )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _618), 128, 256)) )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(128, 0), extractMInt(MI618, 128, 256)) )
echo Debug:  PreResult: "YMM0" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _619), 128, 256))   )
echo Debug:  Result: "YMM0" |-> (concatenateMInt(mi(128, 0), extractMInt(MI619, 128, 256))   )
[4m[1m[34mwriteKDefn vfmsub132pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmsub132pd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmsub132ss_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfmsub132ss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub132ss_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub132ss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vfmsub231ps %xmm3, %xmm1, %xmm2
%xmm1 -> 1
%ymm2 -> 1
%xmm2 -> 1
%xmm3 -> 1
fma -> 1

Circuit: vmovss %xmm2, %xmm1, %xmm1
%xmm2 -> 1
%xmm1 -> 1
%ymm1 -> 1
avx -> 1

Total Circuit
 -> 1
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1
YMM3 -> 1

[4m[1m[34mkprove vfmsub132ss_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub132ss_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub132ss_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmsub132ss_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmsub132ss_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub132ss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _613), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _614), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _613), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _614), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _613), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _614), 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _613), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI613, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI615, 128, 160), 24, 8) )  -Float  MInt2Float(extractMInt(MI614, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI613, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI615, 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(MI614, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI613, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI615, 192, 224), 24, 8) )  -Float  MInt2Float(extractMInt(MI614, 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI613, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI615, 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(MI614, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _613), 128, 224), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _613), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8) ) , 32))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI613, 128, 224), Float2MInt( (  ( MInt2Float(extractMInt(MI613, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI615, 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(MI614, 224, 256), 24, 8) ) , 32))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _615)   )
echo Debug:  Result: "YMM3" |-> (MI615   )
[4m[1m[34mwriteKDefn vfmsub132ss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmsub132ss_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmsub213ps_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfmsub213ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub213ps_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub213ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vfmsub231ps %xmm1, %xmm2, %xmm3
%ymm3 -> 1
%xmm2 -> 1
fma -> 1
%xmm3 -> 1
%xmm1 -> 1

Circuit: callq .move_128_064_xmm3_r8_r9
%r9 -> 1
%r8 -> 1
%xmm3 -> 1

Circuit: vzeroall
%ymm13 -> 1
%ymm1 -> 1
%ymm6 -> 1
%ymm2 -> 1
%ymm5 -> 1
%ymm15 -> 1
%ymm9 -> 1
%ymm7 -> 1
%ymm12 -> 1
%ymm14 -> 1
%ymm0 -> 1
avx -> 1
%ymm3 -> 1
%ymm4 -> 1
%ymm10 -> 1
%ymm11 -> 1
%ymm8 -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%xmm1 -> 1
%r9 -> 1
%r8 -> 1

Total Circuit
YMM13 -> 1
YMM7 -> 1
YMM10 -> 1
YMM5 -> 1
YMM0 -> 1
YMM11 -> 1
YMM14 -> 1
R8 -> 1
YMM3 -> 1
YMM2 -> 1
YMM8 -> 1
 -> 1
YMM15 -> 1
YMM12 -> 1
R9 -> 1
YMM1 -> 1
YMM6 -> 1
YMM9 -> 1
YMM4 -> 1

Target
YMM1 -> 1
YMM3 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove vfmsub213ps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub213ps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub213ps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmsub213ps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmsub213ps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub213ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _629), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _628), 192, 224), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _630), 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _629), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _628), 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _630), 224, 256), 24, 8) ) , 32)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI629, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI628, 192, 224), 24, 8) )  -Float  MInt2Float(extractMInt(MI630, 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI629, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI628, 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(MI630, 224, 256), 24, 8) ) , 32)) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _629), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _628), 128, 160), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _630), 128, 160), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _629), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _628), 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _630), 160, 192), 24, 8) ) , 32)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI629, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI628, 128, 160), 24, 8) )  -Float  MInt2Float(extractMInt(MI630, 128, 160), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI629, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI628, 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(MI630, 160, 192), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _629), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _628), 128, 160), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _630), 128, 160), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _629), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _628), 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _630), 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _629), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _628), 192, 224), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _630), 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _629), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _628), 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _630), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI629, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI628, 128, 160), 24, 8) )  -Float  MInt2Float(extractMInt(MI630, 128, 160), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI629, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI628, 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(MI630, 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI629, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI628, 192, 224), 24, 8) )  -Float  MInt2Float(extractMInt(MI630, 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI629, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI628, 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(MI630, 224, 256), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vfmsub213ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmsub213ps_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmadd132ps_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfnmadd132ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd132ps_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd132ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vfnmadd213ps %xmm2, %xmm1, %xmm3
%xmm2 -> 1
%xmm3 -> 1
fma -> 1
%xmm1 -> 1
%ymm3 -> 1

Circuit: callq .move_128_064_xmm3_r8_r9
%xmm3 -> 1
%r9 -> 1
%r8 -> 1

Circuit: vzeroall
%ymm5 -> 1
%ymm2 -> 1
%ymm6 -> 1
%ymm13 -> 1
%ymm1 -> 1
%ymm7 -> 1
%ymm9 -> 1
%ymm15 -> 1
%ymm3 -> 1
avx -> 1
%ymm0 -> 1
%ymm14 -> 1
%ymm12 -> 1
%ymm8 -> 1
%ymm11 -> 1
%ymm4 -> 1
%ymm10 -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%xmm1 -> 1
%r9 -> 1
%r8 -> 1

Total Circuit
YMM9 -> 1
YMM6 -> 1
R9 -> 1
YMM1 -> 1
YMM12 -> 1
YMM4 -> 1
YMM0 -> 1
YMM11 -> 1
YMM14 -> 1
YMM5 -> 1
YMM10 -> 1
YMM7 -> 1
YMM13 -> 1
YMM15 -> 1
YMM3 -> 1
 -> 1
YMM8 -> 1
YMM2 -> 1
R8 -> 1

Target
 -> 1
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vfnmadd132ps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd132ps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd132ps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmadd132ps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmadd132ps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd132ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _629), 192, 224), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _628), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _630), 192, 224), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _629), 224, 256), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _628), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _630), 224, 256), 24, 8) ) ) ) , 32)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI629, 192, 224), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI628, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI630, 192, 224), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI629, 224, 256), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI628, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI630, 224, 256), 24, 8) ) ) ) , 32)) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _629), 128, 160), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _628), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _630), 128, 160), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _629), 160, 192), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _628), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _630), 160, 192), 24, 8) ) ) ) , 32)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI629, 128, 160), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI628, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI630, 128, 160), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI629, 160, 192), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI628, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI630, 160, 192), 24, 8) ) ) ) , 32)) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _629), 128, 160), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _628), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _630), 128, 160), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _629), 160, 192), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _628), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _630), 160, 192), 24, 8) ) ) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _629), 192, 224), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _628), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _630), 192, 224), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _629), 224, 256), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _628), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _630), 224, 256), 24, 8) ) ) ) , 32)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI629, 128, 160), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI628, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI630, 128, 160), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI629, 160, 192), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI628, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI630, 160, 192), 24, 8) ) ) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI629, 192, 224), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI628, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI630, 192, 224), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI629, 224, 256), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI628, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI630, 224, 256), 24, 8) ) ) ) , 32)))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vfnmadd132ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmadd132ps_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmadd231pd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfnmadd231pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd231pd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd231pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovapd %xmm1, %xmm1
%ymm1 -> 1
%xmm1 -> 1
avx -> 1

Circuit: vmovapd %xmm2, %xmm8
%xmm2 -> 1
%ymm8 -> 1
avx -> 1
%xmm8 -> 1

Circuit: vmaxpd %xmm3, %xmm3, %xmm5
avx -> 1
%ymm5 -> 1
%xmm5 -> 1
%xmm3 -> 1

Circuit: vfnmadd231pd %ymm5, %ymm8, %ymm1
%ymm8 -> 1
%ymm1 -> 1
%ymm5 -> 1
fma -> 1

Total Circuit
 -> 1
YMM2 -> 1
YMM8 -> 1
YMM3 -> 1
YMM5 -> 1
YMM1 -> 1

Target
YMM2 -> 1
YMM3 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove vfnmadd231pd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd231pd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd231pd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmadd231pd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmadd231pd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd231pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _617), 128, 192), 53, 11) ) ) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11) ) ) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 128, 192), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI616, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI617, 128, 192), 53, 11) ) ) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI616, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI617, 192, 256), 53, 11) ) ) ) , 64))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _617) )
echo Debug:  Result: "YMM3" |-> (MI617 )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _617), 128, 256)) )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(mi(128, 0), extractMInt(MI617, 128, 256)) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _616), 128, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), extractMInt(MI616, 128, 256)) )
[4m[1m[34mwriteKDefn vfnmadd231pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmadd231pd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmsub213ss_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfnmsub213ss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub213ss_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub213ss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_032_xmm2_xmm4_xmm5_xmm6_xmm7
%xmm7 -> 1
%xmm4 -> 1
%xmm6 -> 1
%xmm2 -> 1
%xmm5 -> 1

Circuit: vfnmsub132ps %xmm1, %xmm3, %xmm4
%xmm4 -> 1
%ymm4 -> 1
fma -> 1
%xmm3 -> 1
%xmm1 -> 1

Circuit: vmovss %xmm4, %xmm1, %xmm1
%xmm4 -> 1
avx -> 1
%xmm1 -> 1
%ymm1 -> 1

Total Circuit
YMM7 -> 1
YMM5 -> 1
 -> 1
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1
YMM6 -> 1
YMM4 -> 1

Target
YMM1 -> 1
 -> 1
YMM3 -> 1
YMM2 -> 1

[4m[1m[34mkprove vfnmsub213ss_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub213ss_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub213ss_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmsub213ss_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmsub213ss_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub213ss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _618) )
echo Debug:  Result: "YMM2" |-> (MI618 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _617), 128, 224), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _618), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _619), 224, 256), 24, 8) ) , 32))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI617, 128, 224), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI618, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI619, 224, 256), 24, 8) ) , 32))) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(mi(256, _619), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(mi(256, _619), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(mi(256, _619), 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _618), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _619), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(MI619, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(MI619, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(MI619, 192, 224), 24, 8) ) , 32), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI618, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI619, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _619) )
echo Debug:  Result: "YMM3" |-> (MI619 )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _618), 160, 192)) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(224, 0), extractMInt(MI618, 160, 192)) )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _618), 192, 224)) )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(mi(224, 0), extractMInt(MI618, 192, 224)) )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _618), 128, 160)) )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(224, 0), extractMInt(MI618, 128, 160)) )
[4m[1m[34mwriteKDefn vfnmsub213ss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmsub213ss_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vminsd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vminsd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vminsd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvminsd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vminpd %xmm3, %xmm2, %xmm4
%xmm2 -> 1
%xmm3 -> 1
%ymm4 -> 1
%xmm4 -> 1
avx -> 1

Circuit: vmovdqa %ymm4, %ymm14
%ymm14 -> 1
avx -> 1
%ymm4 -> 1

Circuit: vmovsd %xmm14, %xmm2, %xmm1
avx -> 1
%xmm14 -> 1
%ymm1 -> 1
%xmm1 -> 1
%xmm2 -> 1

Total Circuit
YMM4 -> 1
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1
 -> 1
YMM14 -> 1

Target
YMM3 -> 1
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove vminsd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vminsd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vminsd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vminsd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vminsd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvminsd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _616), 128, 192), Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11), MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11)), 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI616, 128, 192), Float2MInt(minFloat(MInt2Float(extractMInt(MI617, 192, 256), 53, 11), MInt2Float(extractMInt(MI616, 192, 256), 53, 11)), 64))) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _617), 128, 192), 53, 11), MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11)), 64), Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11), MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11)), 64))) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(MI617, 128, 192), 53, 11), MInt2Float(extractMInt(MI616, 128, 192), 53, 11)), 64), Float2MInt(minFloat(MInt2Float(extractMInt(MI617, 192, 256), 53, 11), MInt2Float(extractMInt(MI616, 192, 256), 53, 11)), 64))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _617) )
echo Debug:  Result: "YMM3" |-> (MI617 )
echo Debug:  PreResult: "YMM14" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _617), 128, 192), 53, 11), MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11)), 64), Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11), MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11)), 64))) )
echo Debug:  Result: "YMM14" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt(minFloat(MInt2Float(extractMInt(MI617, 128, 192), 53, 11), MInt2Float(extractMInt(MI616, 128, 192), 53, 11)), 64), Float2MInt(minFloat(MInt2Float(extractMInt(MI617, 192, 256), 53, 11), MInt2Float(extractMInt(MI616, 192, 256), 53, 11)), 64))) )
[4m[1m[34mwriteKDefn vminsd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vminsd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovshdup_xmm_xmm[0m
[4m[1m[34mcreatespec vmovshdup_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovshdup_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovshdup_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
%xmm8 -> 1
%xmm9 -> 1
%xmm11 -> 1
%xmm2 -> 1
%xmm10 -> 1

Circuit: vmovsldup %xmm11, %xmm11
%xmm11 -> 1
avx -> 1
%ymm11 -> 1

Circuit: vmovdqa %xmm11, %xmm3
%xmm3 -> 1
%xmm11 -> 1
avx -> 1
%ymm3 -> 1

Circuit: vmovsldup %xmm9, %xmm1
%xmm9 -> 1
%ymm1 -> 1
%xmm1 -> 1
avx -> 1

Circuit: unpcklpd %xmm3, %xmm1
sse2 -> 1
%xmm1 -> 1
%xmm3 -> 1

Total Circuit
YMM11 -> 1
YMM10 -> 1
YMM2 -> 1
 -> 1
YMM3 -> 1
YMM8 -> 1
YMM9 -> 1
YMM1 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vmovshdup_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovshdup_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovshdup_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovshdup_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vmovshdup_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovshdup_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _617) )
echo Debug:  Result: "YMM2" |-> (MI617 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _617), 128, 160), extractMInt(mi(256, _617), 128, 160)), concatenateMInt(extractMInt(mi(256, _617), 192, 224), extractMInt(mi(256, _617), 192, 224)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI617, 128, 160), extractMInt(MI617, 128, 160)), concatenateMInt(extractMInt(MI617, 192, 224), extractMInt(MI617, 192, 224)))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _617), 160, 192)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(MI617, 160, 192)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(192, 0), concatenateMInt(extractMInt(mi(256, _617), 128, 160), extractMInt(mi(256, _617), 128, 160))) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(192, 0), concatenateMInt(extractMInt(MI617, 128, 160), extractMInt(MI617, 128, 160))) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(192, 0), concatenateMInt(extractMInt(mi(256, _617), 128, 160), extractMInt(mi(256, _617), 128, 160))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(192, 0), concatenateMInt(extractMInt(MI617, 128, 160), extractMInt(MI617, 128, 160))) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _617), 224, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(MI617, 224, 256)) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _617), 192, 224))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(MI617, 192, 224))   )
[4m[1m[34mwriteKDefn vmovshdup_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovshdup_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovsldup_ymm_ymm[0m
[4m[1m[34mcreatespec vmovsldup_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovsldup_ymm_ymm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovsldup_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_256_128_ymm2_xmm12_xmm13
%ymm2 -> 1
%xmm13 -> 1
%xmm12 -> 1

Circuit: vmovsldup %xmm13, %xmm6
%ymm6 -> 1
%xmm13 -> 1
%xmm6 -> 1
avx -> 1

Circuit: vmovsldup %xmm2, %xmm8
%xmm2 -> 1
%ymm8 -> 1
avx -> 1
%xmm8 -> 1

Circuit: vmovapd %xmm6, %xmm9
%ymm9 -> 1
%xmm9 -> 1
%xmm6 -> 1
avx -> 1

Circuit: callq .move_128_256_xmm8_xmm9_ymm1
%xmm8 -> 1
%ymm1 -> 1
%xmm9 -> 1

Total Circuit
 -> 1
YMM8 -> 1
YMM2 -> 1
YMM13 -> 1
YMM12 -> 1
YMM1 -> 1
YMM6 -> 1
YMM9 -> 1

Target
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove vmovsldup_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovsldup_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovsldup_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovsldup_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vmovsldup_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovsldup_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _617), 128, 256)) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(128, 0), extractMInt(MI617, 128, 256)) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _617) )
echo Debug:  Result: "YMM2" |-> (MI617 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _617), 32, 64), extractMInt(mi(256, _617), 32, 64)), concatenateMInt(extractMInt(mi(256, _617), 96, 128), extractMInt(mi(256, _617), 96, 128))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _617), 160, 192), extractMInt(mi(256, _617), 160, 192)), concatenateMInt(extractMInt(mi(256, _617), 224, 256), extractMInt(mi(256, _617), 224, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI617, 32, 64), extractMInt(MI617, 32, 64)), concatenateMInt(extractMInt(MI617, 96, 128), extractMInt(MI617, 96, 128))), concatenateMInt(concatenateMInt(extractMInt(MI617, 160, 192), extractMInt(MI617, 160, 192)), concatenateMInt(extractMInt(MI617, 224, 256), extractMInt(MI617, 224, 256)))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _617), 0, 128)) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(128, 0), extractMInt(MI617, 0, 128)) )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _617), 32, 64), extractMInt(mi(256, _617), 32, 64)), concatenateMInt(extractMInt(mi(256, _617), 96, 128), extractMInt(mi(256, _617), 96, 128)))) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI617, 32, 64), extractMInt(MI617, 32, 64)), concatenateMInt(extractMInt(MI617, 96, 128), extractMInt(MI617, 96, 128)))) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _617), 160, 192), extractMInt(mi(256, _617), 160, 192)), concatenateMInt(extractMInt(mi(256, _617), 224, 256), extractMInt(mi(256, _617), 224, 256)))) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI617, 160, 192), extractMInt(MI617, 160, 192)), concatenateMInt(extractMInt(MI617, 224, 256), extractMInt(MI617, 224, 256)))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _617), 32, 64), extractMInt(mi(256, _617), 32, 64)), concatenateMInt(extractMInt(mi(256, _617), 96, 128), extractMInt(mi(256, _617), 96, 128))))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI617, 32, 64), extractMInt(MI617, 32, 64)), concatenateMInt(extractMInt(MI617, 96, 128), extractMInt(MI617, 96, 128))))   )
[4m[1m[34mwriteKDefn vmovsldup_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovsldup_ymm_ymm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vorpd_ymm_ymm_ymm[0m
[4m[1m[34mcreatespec vorpd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vorpd_ymm_ymm_ymm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvorpd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_256_128_ymm3_xmm8_xmm9
%ymm3 -> 1
%xmm8 -> 1
%xmm9 -> 1

Circuit: por %xmm2, %xmm8
%xmm2 -> 1
sse2 -> 1
%xmm8 -> 1

Circuit: callq .move_256_128_ymm2_xmm10_xmm11
%xmm10 -> 1
%ymm2 -> 1
%xmm11 -> 1

Circuit: orpd %xmm11, %xmm9
sse2 -> 1
%xmm11 -> 1
%xmm9 -> 1

Circuit: callq .move_128_256_xmm8_xmm9_ymm1
%xmm9 -> 1
%ymm1 -> 1
%xmm8 -> 1

Total Circuit
YMM11 -> 1
YMM10 -> 1
YMM3 -> 1
YMM2 -> 1
 -> 1
YMM8 -> 1
YMM9 -> 1
YMM1 -> 1

Target
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1
 -> 1

[4m[1m[34mkprove vorpd_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vorpd_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vorpd_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vorpd_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vorpd_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvorpd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _618) )
echo Debug:  Result: "YMM2" |-> (MI618 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(orMInt(extractMInt(mi(256, _618), 0, 64), extractMInt(mi(256, _619), 0, 64)), orMInt(extractMInt(mi(256, _618), 64, 128), extractMInt(mi(256, _619), 64, 128))), concatenateMInt(orMInt(extractMInt(mi(256, _618), 128, 192), extractMInt(mi(256, _619), 128, 192)), orMInt(extractMInt(mi(256, _618), 192, 256), extractMInt(mi(256, _619), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(orMInt(extractMInt(MI618, 0, 64), extractMInt(MI619, 0, 64)), orMInt(extractMInt(MI618, 64, 128), extractMInt(MI619, 64, 128))), concatenateMInt(orMInt(extractMInt(MI618, 128, 192), extractMInt(MI619, 128, 192)), orMInt(extractMInt(MI618, 192, 256), extractMInt(MI619, 192, 256)))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _618), 128, 256)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), extractMInt(MI618, 128, 256)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _618), 0, 128)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(MI618, 0, 128)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _619) )
echo Debug:  Result: "YMM3" |-> (MI619 )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(orMInt(extractMInt(mi(256, _618), 128, 192), extractMInt(mi(256, _619), 128, 192)), orMInt(extractMInt(mi(256, _618), 192, 256), extractMInt(mi(256, _619), 192, 256)))) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(orMInt(extractMInt(MI618, 128, 192), extractMInt(MI619, 128, 192)), orMInt(extractMInt(MI618, 192, 256), extractMInt(MI619, 192, 256)))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(orMInt(extractMInt(mi(256, _618), 0, 64), extractMInt(mi(256, _619), 0, 64)), orMInt(extractMInt(mi(256, _618), 64, 128), extractMInt(mi(256, _619), 64, 128))))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(orMInt(extractMInt(MI618, 0, 64), extractMInt(MI619, 0, 64)), orMInt(extractMInt(MI618, 64, 128), extractMInt(MI619, 64, 128))))   )
[4m[1m[34mwriteKDefn vorpd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vorpd_ymm_ymm_ymm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpandn_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vpandn_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpandn_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpandn_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmaxss %xmm3, %xmm3, %xmm1
avx -> 1
%xmm3 -> 1
%ymm1 -> 1
%xmm1 -> 1

Circuit: movdqu %xmm2, %xmm14
sse2 -> 1
%xmm2 -> 1
%xmm14 -> 1

Circuit: vandnps %xmm1, %xmm14, %xmm1
%ymm1 -> 1
%xmm1 -> 1
%xmm14 -> 1
avx -> 1

Total Circuit
YMM1 -> 1
YMM14 -> 1
YMM3 -> 1
YMM2 -> 1
 -> 1

Target
 -> 1
YMM2 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vpandn_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpandn_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpandn_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpandn_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpandn_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpandn_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(extractMInt(mi(256, _616), 128, 192), extractMInt(mi(256, _615), 128, 192)), extractMInt(mi(256, _615), 128, 192)), xorMInt(orMInt(extractMInt(mi(256, _616), 192, 256), extractMInt(mi(256, _615), 192, 256)), extractMInt(mi(256, _615), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(extractMInt(MI616, 128, 192), extractMInt(MI615, 128, 192)), extractMInt(MI615, 128, 192)), xorMInt(orMInt(extractMInt(MI616, 192, 256), extractMInt(MI615, 192, 256)), extractMInt(MI615, 192, 256)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _616) )
echo Debug:  Result: "YMM3" |-> (MI616 )
echo Debug:  PreResult: "YMM14" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 256))   )
echo Debug:  Result: "YMM14" |-> (concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 256))   )
[4m[1m[34mwriteKDefn vpandn_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpandn_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpbroadcastw_ymm_xmm[0m
[4m[1m[34mcreatespec vpbroadcastw_ymm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastw_ymm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpbroadcastw_ymm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vbroadcastss %xmm2, %ymm1
avx2 -> 1
%ymm1 -> 1
%xmm2 -> 1

Circuit: callq .move_byte_1_of_ymm1_to_r8b
%ymm1 -> 1
%r8b -> 1

Circuit: callq .move_byte_0_of_ymm1_to_r9b
%ymm1 -> 1
%r9b -> 1

Circuit: callq .move_r8b_to_byte_3_of_ymm1
%r8b -> 1
%ymm1 -> 1

Circuit: callq .move_r9b_to_byte_2_of_ymm1
%r9b -> 1
%ymm1 -> 1

Circuit: vbroadcastss %xmm1, %ymm1
avx2 -> 1
%xmm1 -> 1
%ymm1 -> 1

Total Circuit
YMM2 -> 1
 -> 1
R8 -> 1
YMM1 -> 1
R9 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove vpbroadcastw_ymm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastw_ymm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpbroadcastw_ymm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpbroadcastw_ymm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpbroadcastw_ymm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpbroadcastw_ymm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _614), 240, 256), extractMInt(mi(256, _614), 240, 256)), concatenateMInt(extractMInt(mi(256, _614), 240, 256), extractMInt(mi(256, _614), 240, 256))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _614), 240, 256), extractMInt(mi(256, _614), 240, 256)), concatenateMInt(extractMInt(mi(256, _614), 240, 256), extractMInt(mi(256, _614), 240, 256)))), concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _614), 240, 256), extractMInt(mi(256, _614), 240, 256)), concatenateMInt(extractMInt(mi(256, _614), 240, 256), extractMInt(mi(256, _614), 240, 256))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _614), 240, 256), extractMInt(mi(256, _614), 240, 256)), concatenateMInt(extractMInt(mi(256, _614), 240, 256), extractMInt(mi(256, _614), 240, 256))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI614, 240, 256), extractMInt(MI614, 240, 256)), concatenateMInt(extractMInt(MI614, 240, 256), extractMInt(MI614, 240, 256))), concatenateMInt(concatenateMInt(extractMInt(MI614, 240, 256), extractMInt(MI614, 240, 256)), concatenateMInt(extractMInt(MI614, 240, 256), extractMInt(MI614, 240, 256)))), concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI614, 240, 256), extractMInt(MI614, 240, 256)), concatenateMInt(extractMInt(MI614, 240, 256), extractMInt(MI614, 240, 256))), concatenateMInt(concatenateMInt(extractMInt(MI614, 240, 256), extractMInt(MI614, 240, 256)), concatenateMInt(extractMInt(MI614, 240, 256), extractMInt(MI614, 240, 256))))) )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(256, _614), 240, 248)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(56, 0), extractMInt(MI614, 240, 248)) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(256, _614), 248, 256))   )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(56, 0), extractMInt(MI614, 248, 256))   )
[4m[1m[34mwriteKDefn vpbroadcastw_ymm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpbroadcastw_ymm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vsqrtsd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vsqrtsd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsqrtsd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvsqrtsd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: sqrtsd %xmm3, %xmm2
sse2 -> 1
%xmm3 -> 1
%xmm2 -> 1

Circuit: callq .move_128_064_xmm2_r8_r9
%xmm2 -> 1
%r9 -> 1
%r8 -> 1

Circuit: vzeroall
avx -> 1
%ymm3 -> 1
%ymm12 -> 1
%ymm14 -> 1
%ymm0 -> 1
%ymm4 -> 1
%ymm10 -> 1
%ymm11 -> 1
%ymm8 -> 1
%ymm5 -> 1
%ymm13 -> 1
%ymm1 -> 1
%ymm6 -> 1
%ymm2 -> 1
%ymm7 -> 1
%ymm15 -> 1
%ymm9 -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%xmm1 -> 1
%r8 -> 1
%r9 -> 1

Total Circuit
YMM11 -> 1
YMM0 -> 1
YMM14 -> 1
YMM5 -> 1
YMM10 -> 1
YMM7 -> 1
YMM13 -> 1
YMM8 -> 1
 -> 1
YMM2 -> 1
YMM3 -> 1
YMM15 -> 1
R8 -> 1
YMM9 -> 1
YMM6 -> 1
R9 -> 1
YMM1 -> 1
YMM12 -> 1
YMM4 -> 1

Target
YMM1 -> 1
 -> 1
YMM3 -> 1
YMM2 -> 1

[4m[1m[34mkprove vsqrtsd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsqrtsd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsqrtsd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vsqrtsd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vsqrtsd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvsqrtsd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _630), 192, 256), 53, 11), 2), 64) )
echo Debug:  Result: "R8" |-> (Float2MInt(rootFloat(MInt2Float(extractMInt(MI630, 192, 256), 53, 11), 2), 64) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _629), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI629, 128, 192) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _629), 128, 192), Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _630), 192, 256), 53, 11), 2), 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI629, 128, 192), Float2MInt(rootFloat(MInt2Float(extractMInt(MI630, 192, 256), 53, 11), 2), 64))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vsqrtsd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vsqrtsd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vsqrtss_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vsqrtss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsqrtss_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvsqrtss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_64_xmm3_xmm12_xmm13
%xmm13 -> 1
%xmm12 -> 1
%xmm3 -> 1

Circuit: vmulss %xmm2, %xmm2, %xmm1
%ymm1 -> 1
%xmm1 -> 1
%xmm2 -> 1
avx -> 1

Circuit: sqrtss %xmm12, %xmm1
%xmm1 -> 1
sse -> 1
%xmm12 -> 1

Total Circuit
YMM1 -> 1
YMM12 -> 1
YMM3 -> 1
 -> 1
YMM2 -> 1
YMM13 -> 1

Target
YMM3 -> 1
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove vsqrtss_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsqrtss_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsqrtss_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vsqrtss_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vsqrtss_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvsqrtss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _617), 192, 256)) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(192, 0), extractMInt(MI617, 192, 256)) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _617), 128, 192)) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(192, 0), extractMInt(MI617, 128, 192)) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(mi(256, _616), 128, 224)), Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8), 2), 32)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(MI616, 128, 224)), Float2MInt(rootFloat(MInt2Float(extractMInt(MI617, 224, 256), 24, 8), 2), 32)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _617) )
echo Debug:  Result: "YMM3" |-> (MI617 )
[4m[1m[34mwriteKDefn vsqrtss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vsqrtss_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vsubps_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vsubps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsubps_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvsubps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vminps %xmm2, %xmm2, %xmm5
%ymm5 -> 1
%xmm2 -> 1
%xmm5 -> 1
avx -> 1

Circuit: subps %xmm3, %xmm5
%xmm5 -> 1
%xmm3 -> 1
sse -> 1

Circuit: vmovdqu %xmm5, %xmm1
avx -> 1
%xmm5 -> 1
%ymm1 -> 1
%xmm1 -> 1

Total Circuit
YMM1 -> 1
YMM5 -> 1
YMM2 -> 1
 -> 1
YMM3 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1
YMM3 -> 1

[4m[1m[34mkprove vsubps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsubps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsubps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vsubps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vsubps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvsubps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 128, 160), 24, 8)  -Float  MInt2Float(extractMInt(MI616, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI616, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 224), 24, 8)  -Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI615, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _616) )
echo Debug:  Result: "YMM3" |-> (MI616 )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32)))))   )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 128, 160), 24, 8)  -Float  MInt2Float(extractMInt(MI616, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI616, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 224), 24, 8)  -Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI615, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32)))))   )
[4m[1m[34mwriteKDefn vsubps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vsubps_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vsubsd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vsubsd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsubsd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvsubsd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_64_xmm2_xmm8_xmm9
%xmm2 -> 1
%xmm9 -> 1
%xmm8 -> 1

Circuit: vsubpd %xmm3, %xmm8, %xmm0
%ymm0 -> 1
%xmm8 -> 1
avx -> 1
%xmm3 -> 1
%xmm0 -> 1

Circuit: vunpcklpd %xmm9, %xmm0, %xmm1
avx -> 1
%ymm1 -> 1
%xmm1 -> 1
%xmm9 -> 1
%xmm0 -> 1

Total Circuit
YMM8 -> 1
 -> 1
YMM2 -> 1
YMM3 -> 1
YMM0 -> 1
YMM1 -> 1
YMM9 -> 1

Target
YMM3 -> 1
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove vsubsd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsubsd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vsubsd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vsubsd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vsubsd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvsubsd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _617) )
echo Debug:  Result: "YMM2" |-> (MI617 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _617), 128, 192), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _618), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI617, 128, 192), Float2MInt( ( MInt2Float(extractMInt(MI617, 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(MI618, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _618) )
echo Debug:  Result: "YMM3" |-> (MI618 )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _617), 192, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(192, 0), extractMInt(MI617, 192, 256)) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _617), 128, 192)) )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(192, 0), extractMInt(MI617, 128, 192)) )
echo Debug:  PreResult: "YMM0" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( 0e+00  -Float  MInt2Float(extractMInt(mi(256, _618), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _618), 192, 256), 53, 11) ) , 64)))   )
echo Debug:  Result: "YMM0" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( 0e+00  -Float  MInt2Float(extractMInt(MI618, 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI617, 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(MI618, 192, 256), 53, 11) ) , 64)))   )
[4m[1m[34mwriteKDefn vsubsd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vsubsd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vunpckhpd_ymm_ymm_ymm[0m
[4m[1m[34mcreatespec vunpckhpd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpckhpd_ymm_ymm_ymm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvunpckhpd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_256_128_ymm2_xmm8_xmm9
%xmm9 -> 1
%ymm2 -> 1
%xmm8 -> 1

Circuit: callq .move_256_128_ymm3_xmm10_xmm11
%xmm11 -> 1
%xmm10 -> 1
%ymm3 -> 1

Circuit: unpckhpd %xmm3, %xmm8
%xmm8 -> 1
sse2 -> 1
%xmm3 -> 1

Circuit: unpckhpd %xmm11, %xmm9
%xmm9 -> 1
%xmm11 -> 1
sse2 -> 1

Circuit: callq .move_128_256_xmm8_xmm9_ymm1
%xmm9 -> 1
%ymm1 -> 1
%xmm8 -> 1

Total Circuit
YMM9 -> 1
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1
 -> 1
YMM8 -> 1
YMM11 -> 1
YMM10 -> 1

Target
YMM3 -> 1
YMM2 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove vunpckhpd_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpckhpd_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpckhpd_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vunpckhpd_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vunpckhpd_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvunpckhpd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _618) )
echo Debug:  Result: "YMM2" |-> (MI618 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(extractMInt(mi(256, _619), 0, 64), extractMInt(mi(256, _618), 0, 64)), concatenateMInt(extractMInt(mi(256, _619), 128, 192), extractMInt(mi(256, _618), 128, 192))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(extractMInt(MI619, 0, 64), extractMInt(MI618, 0, 64)), concatenateMInt(extractMInt(MI619, 128, 192), extractMInt(MI618, 128, 192))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _619), 128, 256)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), extractMInt(MI619, 128, 256)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _619), 0, 128)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(MI619, 0, 128)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _619) )
echo Debug:  Result: "YMM3" |-> (MI619 )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _619), 128, 192), extractMInt(mi(256, _618), 128, 192))) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI619, 128, 192), extractMInt(MI618, 128, 192))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _619), 0, 64), extractMInt(mi(256, _618), 0, 64)))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI619, 0, 64), extractMInt(MI618, 0, 64)))   )
[4m[1m[34mwriteKDefn vunpckhpd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vunpckhpd_ymm_ymm_ymm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vunpckhps_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vunpckhps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpckhps_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvunpckhps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: unpckhpd %xmm3, %xmm2
sse2 -> 1
%xmm3 -> 1
%xmm2 -> 1

Circuit: callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
%xmm8 -> 1
%xmm2 -> 1
%xmm10 -> 1
%xmm9 -> 1
%xmm11 -> 1

Circuit: vmovddup %xmm9, %xmm1
avx -> 1
%xmm9 -> 1
%ymm1 -> 1
%xmm1 -> 1

Circuit: vmovq %xmm1, %xmm10
avx -> 1
%ymm10 -> 1
%xmm1 -> 1
%xmm10 -> 1

Circuit: callq .move_128_64_xmm2_xmm8_xmm9
%xmm8 -> 1
%xmm2 -> 1
%xmm9 -> 1

Circuit: callq .move_032_128_xmm8_xmm9_xmm10_xmm11_xmm1
%xmm8 -> 1
%xmm10 -> 1
%xmm9 -> 1
%xmm11 -> 1
%xmm1 -> 1

Total Circuit
YMM1 -> 1
YMM9 -> 1
YMM8 -> 1
YMM3 -> 1
 -> 1
YMM2 -> 1
YMM10 -> 1
YMM11 -> 1

Target
YMM2 -> 1
 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vunpckhps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpckhps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpckhps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vunpckhps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vunpckhps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvunpckhps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(extractMInt(mi(256, _618), 0, 128), concatenateMInt(extractMInt(mi(256, _619), 128, 192), extractMInt(mi(256, _618), 128, 192))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(extractMInt(MI618, 0, 128), concatenateMInt(extractMInt(MI619, 128, 192), extractMInt(MI618, 128, 192))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _619), 128, 160), extractMInt(mi(256, _618), 128, 160)), concatenateMInt(extractMInt(mi(256, _619), 160, 192), extractMInt(mi(256, _618), 160, 192)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI619, 128, 160), extractMInt(MI618, 128, 160)), concatenateMInt(extractMInt(MI619, 160, 192), extractMInt(MI618, 160, 192)))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _618), 128, 160)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(MI618, 128, 160)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 128, 160)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 128, 160)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _619) )
echo Debug:  Result: "YMM3" |-> (MI619 )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _618), 128, 192)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(192, 0), extractMInt(MI618, 128, 192)) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _619), 128, 192))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(192, 0), extractMInt(MI619, 128, 192))   )
[4m[1m[34mwriteKDefn vunpckhps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vunpckhps_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: xchgb_r8_r8[0m
[4m[1m[34mcreatespec xchgb_r8_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xchgb_r8_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxchgb_r8_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movzbq %bl, %r8
%r8 -> 1
%bl -> 1

Circuit: movzbw %cl, %cx
%cl -> 1
%cx -> 1

Circuit: movb %ch, %bh
%bh -> 1
%ch -> 1

Circuit: xaddb %bl, %ch
%pf -> 1
%cf -> 1
%af -> 1
%ch -> 1
%zf -> 1
%of -> 1
%bl -> 1
%sf -> 1

Circuit: xaddw %bx, %cx
%zf -> 1
%af -> 1
%pf -> 1
%cf -> 1
%bx -> 1
%cx -> 1
%sf -> 1
%of -> 1

Circuit: xchgw %cx, %r8w
%cx -> 1
%r8w -> 1

Total Circuit
SF -> 1
ZF -> 1
AF -> 1
PF -> 1
OF -> 1
R8 -> 1
RCX -> 1
CF -> 1
RBX -> 1

Target
RBX -> 1
RCX -> 1

[4m[1m[34mkprove xchgb_r8_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xchgb_r8_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xchgb_r8_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput xchgb_r8_r8[0m
[4m[1m[34msanitizeSpecOutput xchgb_r8_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxchgb_r8_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35mxchgb_r8_r8: More that one writes. May Need to schedule.[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (extractMInt(mi(64, _620), 56, 57) )
echo Debug:  Result: "SF" |-> (extractMInt(MI620, 56, 57) )
echo Debug:  PreResult: "SPAD2" |-> (concatenateMInt(mi(192, 0), mi(64, _621)) )
echo Debug:  Result: "SPAD2" |-> (concatenateMInt(mi(192, 0), MI621) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(extractMInt(mi(64, _620), 56, 64), extractMInt(mi(64, _621), 56, 64)), mi(16, 0)), concatenateMInt(extractMInt(mi(64, _620), 56, 64), extractMInt(mi(64, _621), 56, 64))), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(extractMInt(MI620, 56, 64), extractMInt(MI621, 56, 64)), mi(16, 0)), concatenateMInt(extractMInt(MI620, 56, 64), extractMInt(MI621, 56, 64))), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(extractMInt(mi(64, _621), 0, 56), extractMInt(mi(64, _620), 56, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(extractMInt(MI621, 0, 56), extractMInt(MI620, 56, 64)) )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(48, 0), concatenateMInt(extractMInt(mi(64, _620), 56, 64), extractMInt(mi(64, _621), 56, 64))) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(48, 0), concatenateMInt(extractMInt(MI620, 56, 64), extractMInt(MI621, 56, 64))) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(mi(64, _621), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(MI621, 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _620)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI620) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _620), 56, 57), mi(1, 0))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _620), 56, 57), extractMInt(mi(64, _620), 56, 57)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI620, 56, 57), mi(1, 0))  andBool   notBool  ( eqMInt(extractMInt(MI620, 56, 57), extractMInt(MI620, 56, 57)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _620), 0, 56), extractMInt(mi(64, _621), 56, 64)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI620, 0, 56), extractMInt(MI621, 56, 64)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(extractMInt(mi(64, _620), 56, 64), extractMInt(mi(64, _621), 56, 64)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(extractMInt(MI620, 56, 64), extractMInt(MI621, 56, 64)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn xchgb_r8_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-xchgb_r8_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: xchgb_rh_r8[0m
[4m[1m[34mcreatespec xchgb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xchgb_rh_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxchgb_rh_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: xchgb %ah, %bl
%ah -> 1
%bl -> 1

Total Circuit
RAX -> 1
RBX -> 1

Target
RBX -> 1
RAX -> 1

[4m[1m[34mkprove xchgb_rh_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xchgb_rh_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xchgb_rh_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput xchgb_rh_r8[0m
[4m[1m[34msanitizeSpecOutput xchgb_rh_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxchgb_rh_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35mxchgb_rh_r8: More that one writes. May Need to schedule.[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _613), 0, 48), concatenateMInt(extractMInt(mi(64, _614), 56, 64), extractMInt(mi(64, _613), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI613, 0, 48), concatenateMInt(extractMInt(MI614, 56, 64), extractMInt(MI613, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _614), 0, 56), extractMInt(mi(64, _613), 48, 56)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI614, 0, 56), extractMInt(MI613, 48, 56)) )
echo Debug:  PreResult: "SPAD2" |-> (concatenateMInt(mi(192, 0), mi(64, _613)) )
echo Debug:  Result: "SPAD2" |-> (concatenateMInt(mi(192, 0), MI613) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _614))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI614)   )
[4m[1m[34mwriteKDefn xchgb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-xchgb_rh_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: xorb_rh_r8[0m
[4m[1m[34mcreatespec xorb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorb_rh_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxorb_rh_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: xorb_rh_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: movq $0x4, %rdi
\$0x4 -> 1
%rdi -> 1

Circuit: shlb $0x1, %dil
%zf -> 1
\$0x1 -> 1
%pf -> 1
%cf -> 1
%af -> 1
%sf -> 1
%dil -> 1
%of -> 1

Circuit: xorq %r8, %r8
%sf -> 1
%of -> 1
%zf -> 1
%af -> 1
%pf -> 1
%r8 -> 1
%cf -> 1

Circuit: xorb %ah, %bl
%zf -> 1
%pf -> 1
%cf -> 1
%af -> 1
%bl -> 1
%sf -> 1
%ah -> 1
%of -> 1

Circuit: popcntw %r8w, %ax
%of -> 1
popcnt -> 1
%ax -> 1
%sf -> 1
%af -> 1
%pf -> 1
%cf -> 1
%zf -> 1
%r8w -> 1

Circuit: xaddb %ah, %bl
%of -> 1
%ah -> 1
%sf -> 1
%bl -> 1
%af -> 1
%cf -> 1
%pf -> 1
%zf -> 1

Circuit: rcll $0x1, %edi
%of -> 1
%rdi -> 1
%edi -> 1
%cf -> 1
\$0x1 -> 1

Total Circuit
RBX -> 1
CF -> 1
 -> 1
OF -> 1
R8 -> 1
PF -> 1
ZF -> 1
RAX -> 1
AF -> 1
SF -> 1
RDI -> 1

Target
SF -> 1
PF -> 1
RAX -> 1
AF -> 1
ZF -> 1
OF -> 1
RBX -> 1
CF -> 1

[4m[1m[34mkprove xorb_rh_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorb_rh_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorb_rh_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput xorb_rh_r8[0m
[4m[1m[34msanitizeSpecOutput xorb_rh_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxorb_rh_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(64, _630), 48, 49), extractMInt(mi(64, _631), 56, 57)) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(MI630, 48, 49), extractMInt(MI631, 56, 57)) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), xorMInt(extractMInt(mi(64, _630), 48, 56), extractMInt(mi(64, _631), 56, 64))), xorMInt(extractMInt(mi(64, _630), 48, 56), extractMInt(mi(64, _631), 56, 64))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), xorMInt(extractMInt(MI630, 48, 56), extractMInt(MI631, 56, 64))), xorMInt(extractMInt(MI630, 48, 56), extractMInt(MI631, 56, 64))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R8" |-> (mi(64, 0) )
echo Debug:  Result: "R8" |-> (mi(64, 0) )
echo Debug:  PreResult: "RDI" |-> (mi(64, 16) )
echo Debug:  Result: "RDI" |-> (mi(64, 16) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, _630), 48, 56), extractMInt(mi(64, _631), 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI630, 48, 56), extractMInt(MI631, 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _630)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI630) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _630), 0, 48), concatenateMInt(xorMInt(extractMInt(mi(64, _630), 48, 56), extractMInt(mi(64, _631), 56, 64)), extractMInt(mi(64, _630), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI630, 0, 48), concatenateMInt(xorMInt(extractMInt(MI630, 48, 56), extractMInt(MI631, 56, 64)), extractMInt(MI630, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _631), 0, 56), xorMInt(extractMInt(mi(64, _630), 48, 56), extractMInt(mi(64, _631), 56, 64))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI631, 0, 56), xorMInt(extractMInt(MI630, 48, 56), extractMInt(MI631, 56, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, _630), 48, 56), extractMInt(mi(64, _631), 56, 64)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(MI630, 48, 56), extractMInt(MI631, 56, 64)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn xorb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-xorb_rh_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: xorpd_xmm_xmm[0m
[4m[1m[34mcreatespec xorpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorpd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxorpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: pxor %xmm2, %xmm1
sse2 -> 1
%xmm1 -> 1
%xmm2 -> 1

Total Circuit
YMM1 -> 1
YMM2 -> 1
 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove xorpd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorpd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorpd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput xorpd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput xorpd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxorpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _613) )
echo Debug:  Result: "YMM2" |-> (MI613 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _612), 0, 128), concatenateMInt(xorMInt(extractMInt(mi(256, _613), 128, 192), extractMInt(mi(256, _612), 128, 192)), xorMInt(extractMInt(mi(256, _613), 192, 256), extractMInt(mi(256, _612), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI612, 0, 128), concatenateMInt(xorMInt(extractMInt(MI613, 128, 192), extractMInt(MI612, 128, 192)), xorMInt(extractMInt(MI613, 192, 256), extractMInt(MI612, 192, 256)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _612)   )
echo Debug:  Result: "SPAD1" |-> (MI612   )
[4m[1m[34mwriteKDefn xorpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-xorpd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

