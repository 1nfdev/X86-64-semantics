[4m[1m[34mCheck if supported: addb_rh_rh[0m
[4m[1m[34mcreatespec addb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addb_rh_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movzbl %bh, %edx
%edx -> 1
%bh -> 1
%rdx -> 1

Circuit: addb %dl, %ah
%pf -> 1
%af -> 1
%sf -> 1
%dl -> 1
%zf -> 1
%ah -> 1
%cf -> 1
%of -> 1

Total Circuit
OF -> 1
RBX -> 1
AF -> 1
SF -> 1
RAX -> 1
RDX -> 1
PF -> 1
CF -> 1
ZF -> 1

Target
OF -> 1
RBX -> 1
ZF -> 1
CF -> 1
PF -> 1
RAX -> 1
SF -> 1
AF -> 1

[4m[1m[34mkprove addb_rh_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addb_rh_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addb_rh_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput addb_rh_rh[0m
[4m[1m[34msanitizeSpecOutput addb_rh_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56))), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _629), 48, 56), extractMInt(mi(64, _630), 48, 56)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI629, 48, 56), extractMInt(MI630, 48, 56)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _629)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI629) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _629), 48, 49), extractMInt(mi(64, _630), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _629), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI629, 48, 49), extractMInt(MI630, 48, 49))  andBool   notBool  ( eqMInt(extractMInt(MI629, 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _630), 48, 56)) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(56, 0), extractMInt(MI630, 48, 56)) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _629), 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56))), 1, 9), extractMInt(mi(64, _629), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI629, 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56))), 1, 9), extractMInt(MI629, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _630) )
echo Debug:  Result: "RBX" |-> (MI630 )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _629), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _630), 48, 56))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI629, 48, 56)), concatenateMInt(mi(1, 0), extractMInt(MI630, 48, 56))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn addb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-addb_rh_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: addsubpd_xmm_xmm[0m
[4m[1m[34mcreatespec addsubpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addsubpd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddsubpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_byte_6_of_ymm1_to_r8b
%r8b -> 1
%ymm1 -> 1

Circuit: vsubsd %xmm2, %xmm1, %xmm3
avx -> 1
%xmm2 -> 1
%xmm3 -> 1
%xmm1 -> 1
%ymm3 -> 1

Circuit: callq .move_r8b_to_byte_4_of_ymm1
%ymm1 -> 1
%r8b -> 1

Circuit: vsqrtss %xmm1, %xmm2, %xmm13
%ymm13 -> 1
avx -> 1
%xmm1 -> 1
%xmm13 -> 1
%xmm2 -> 1

Circuit: addpd %xmm13, %xmm1
sse2 -> 1
%xmm13 -> 1
%xmm1 -> 1

Circuit: movsd %xmm3, %xmm1
sse2 -> 1
%xmm3 -> 1
%xmm1 -> 1

Total Circuit
R8 -> 1
YMM13 -> 1
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1
 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove addsubpd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addsubpd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addsubpd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput addsubpd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput addsubpd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddsubpd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _615), 0, 128), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI615, 0, 128), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI616, 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(MI615, 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(MI616, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(mi(256, _616), 128, 224)), Float2MInt(rootFloat(MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8), 2), 32)) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(MI616, 128, 224)), Float2MInt(rootFloat(MInt2Float(extractMInt(MI615, 224, 256), 24, 8), 2), 32)) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _615), 128, 192), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI615, 128, 192), Float2MInt( ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(MI616, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(256, _615), 200, 208)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(56, 0), extractMInt(MI615, 200, 208)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _615) )
echo Debug:  Result: "SPAD1" |-> (MI615 )
[4m[1m[34mwriteKDefn addsubpd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-addsubpd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: addsubps_xmm_xmm[0m
[4m[1m[34mcreatespec addsubps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addsubps_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddsubps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vaddps %xmm2, %xmm1, %xmm3
%ymm3 -> 1
avx -> 1
%xmm1 -> 1
%xmm2 -> 1
%xmm3 -> 1

Circuit: callq .move_128_032_xmm3_xmm4_xmm5_xmm6_xmm7
%xmm4 -> 1
%xmm3 -> 1
%xmm6 -> 1
%xmm5 -> 1
%xmm7 -> 1

Circuit: vsubps %xmm2, %xmm1, %xmm4
%ymm4 -> 1
avx -> 1
%xmm4 -> 1
%xmm2 -> 1
%xmm1 -> 1

Circuit: vunpckhpd %ymm4, %ymm4, %ymm6
%ymm4 -> 1
avx -> 1
%ymm6 -> 1

Circuit: callq .move_128_032_xmm3_xmm8_xmm9_xmm10_xmm11
%xmm3 -> 1
%xmm9 -> 1
%xmm10 -> 1
%xmm8 -> 1
%xmm11 -> 1

Circuit: vmovss %xmm11, %xmm10, %xmm7
%xmm7 -> 1
avx -> 1
%xmm10 -> 1
%xmm11 -> 1
%ymm7 -> 1

Circuit: callq .move_032_128_xmm4_xmm5_xmm6_xmm7_xmm1
%xmm4 -> 1
%xmm1 -> 1
%xmm5 -> 1
%xmm6 -> 1
%xmm7 -> 1

Total Circuit
YMM9 -> 1
YMM8 -> 1
YMM11 -> 1
YMM2 -> 1
YMM1 -> 1
YMM6 -> 1
YMM5 -> 1
 -> 1
YMM3 -> 1
YMM4 -> 1
YMM7 -> 1
YMM10 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove addsubps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addsubps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_addsubps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput addsubps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput addsubps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34maddsubps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _621) )
echo Debug:  Result: "SPAD1" |-> (MI621 )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(mi(256, _622), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _621), 192, 224), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(MI622, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI621, 192, 224), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _622) )
echo Debug:  Result: "YMM2" |-> (MI622 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _621), 0, 128), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _622), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _621), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _621), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _622), 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _622), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _621), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _621), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _622), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI621, 0, 128), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI622, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI621, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI621, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI622, 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI622, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI621, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI621, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI622, 224, 256), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(mi(256, _622), 160, 192), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _621), 160, 192), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(MI622, 160, 192), 24, 8)  +Float  MInt2Float(extractMInt(MI621, 160, 192), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _621), 128, 160), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _622), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _621), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _622), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _621), 192, 224), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _622), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _621), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _622), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI621, 128, 160), 24, 8)  -Float  MInt2Float(extractMInt(MI622, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI621, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI622, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI621, 192, 224), 24, 8)  -Float  MInt2Float(extractMInt(MI622, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI621, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI622, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(mi(256, _622), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _621), 128, 160), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(MI622, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI621, 128, 160), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _622), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _621), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _622), 160, 192), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _621), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _622), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _621), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _622), 224, 256), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _621), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI622, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI621, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI622, 160, 192), 24, 8)  +Float  MInt2Float(extractMInt(MI621, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI622, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI621, 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI622, 224, 256), 24, 8)  +Float  MInt2Float(extractMInt(MI621, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _621), 128, 160), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _622), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _621), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _622), 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _621), 128, 160), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _622), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _621), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _622), 160, 192), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI621, 128, 160), 24, 8)  -Float  MInt2Float(extractMInt(MI622, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI621, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI622, 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI621, 128, 160), 24, 8)  -Float  MInt2Float(extractMInt(MI622, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI621, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI622, 160, 192), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(mi(256, _622), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _621), 192, 224), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(MI622, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI621, 192, 224), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(mi(256, _622), 224, 256), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _621), 224, 256), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(MI622, 224, 256), 24, 8)  +Float  MInt2Float(extractMInt(MI621, 224, 256), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(mi(256, _622), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _621), 128, 160), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(224, 0), Float2MInt( ( MInt2Float(extractMInt(MI622, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI621, 128, 160), 24, 8) ) , 32)) )
[4m[1m[34mwriteKDefn addsubps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-addsubps_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: andb_r8_rh[0m
[4m[1m[34mcreatespec andb_r8_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andb_r8_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandb_r8_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: andb_r8_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: notb %bl
%bl -> 1

Circuit: orb %bl, %ah
%ah -> 1
%bl -> 1
%cf -> 1
%of -> 1
%pf -> 1
%af -> 1
%sf -> 1
%zf -> 1

Circuit: xorb %ah, %bl
%cf -> 1
%of -> 1
%bl -> 1
%ah -> 1
%zf -> 1
%pf -> 1
%af -> 1
%sf -> 1

Total Circuit
OF -> 1
RBX -> 1
RAX -> 1
SF -> 1
AF -> 1
ZF -> 1
CF -> 1
PF -> 1

Target
AF -> 1
SF -> 1
RAX -> 1
PF -> 1
CF -> 1
ZF -> 1
RBX -> 1
OF -> 1

[4m[1m[34mkprove andb_r8_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andb_r8_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andb_r8_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput andb_r8_rh[0m
[4m[1m[34msanitizeSpecOutput andb_r8_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandb_r8_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (xorMInt(orMInt(xorMInt(mi(1, 1), extractMInt(mi(64, _629), 56, 57)), extractMInt(mi(64, _628), 48, 49)), xorMInt(mi(1, 1), extractMInt(mi(64, _629), 56, 57))) )
echo Debug:  Result: "SF" |-> (xorMInt(orMInt(xorMInt(mi(1, 1), extractMInt(MI629, 56, 57)), extractMInt(MI628, 48, 49)), xorMInt(mi(1, 1), extractMInt(MI629, 56, 57))) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(orMInt(xorMInt(mi(8, 255), extractMInt(mi(64, _629), 56, 64)), extractMInt(mi(64, _628), 48, 56)), xorMInt(mi(8, 255), extractMInt(mi(64, _629), 56, 64))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(orMInt(xorMInt(mi(8, 255), extractMInt(MI629, 56, 64)), extractMInt(MI628, 48, 56)), xorMInt(mi(8, 255), extractMInt(MI629, 56, 64))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _629)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI629) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _628), 0, 48), concatenateMInt(orMInt(xorMInt(mi(8, 255), extractMInt(mi(64, _629), 56, 64)), extractMInt(mi(64, _628), 48, 56)), extractMInt(mi(64, _628), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI628, 0, 48), concatenateMInt(orMInt(xorMInt(mi(8, 255), extractMInt(MI629, 56, 64)), extractMInt(MI628, 48, 56)), extractMInt(MI628, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _629), 0, 56), xorMInt(orMInt(xorMInt(mi(8, 255), extractMInt(mi(64, _629), 56, 64)), extractMInt(mi(64, _628), 48, 56)), xorMInt(mi(8, 255), extractMInt(mi(64, _629), 56, 64)))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI629, 0, 56), xorMInt(orMInt(xorMInt(mi(8, 255), extractMInt(MI629, 56, 64)), extractMInt(MI628, 48, 56)), xorMInt(mi(8, 255), extractMInt(MI629, 56, 64)))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(orMInt(xorMInt(mi(8, 255), extractMInt(mi(64, _629), 56, 64)), extractMInt(mi(64, _628), 48, 56)), xorMInt(mi(8, 255), extractMInt(mi(64, _629), 56, 64))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(orMInt(xorMInt(mi(8, 255), extractMInt(MI629, 56, 64)), extractMInt(MI628, 48, 56)), xorMInt(mi(8, 255), extractMInt(MI629, 56, 64))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn andb_r8_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-andb_r8_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: andnl_r32_r32_r32[0m
[4m[1m[34mcreatespec andnl_r32_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andnl_r32_r32_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandnl_r32_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: andnl_r32_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
pf -> 1
af -> 1

Circuit: movslq %edx, %rbx
%rbx -> 1
%edx -> 1

Circuit: orl %ecx, %edx
%rdx -> 1
%zf -> 1
%af -> 1
%sf -> 1
%pf -> 1
%ecx -> 1
%of -> 1
%cf -> 1
%edx -> 1

Circuit: callq .move_032_016_ecx_r12w_r13w
%r13w -> 1
%r12w -> 1
%ecx -> 1

Circuit: callq .move_016_032_r12w_r13w_ecx
%ecx -> 1
%r13w -> 1
%r12w -> 1

Circuit: xorl %edx, %ecx
%af -> 1
%sf -> 1
%pf -> 1
%ecx -> 1
%zf -> 1
%rcx -> 1
%of -> 1
%cf -> 1
%edx -> 1

Circuit: xchgl %ebx, %ecx
%ebx -> 1
%rcx -> 1
%ecx -> 1
%rbx -> 1

Total Circuit
AF -> 1
RDX -> 1
SF -> 1
PF -> 1
CF -> 1
RCX -> 1
ZF -> 1
R13 -> 1
R12 -> 1
RBX -> 1
OF -> 1

Target
ZF -> 1
RCX -> 1
CF -> 1
PF -> 1
SF -> 1
RDX -> 1
AF -> 1
RBX -> 1
OF -> 1
 -> 1

[4m[1m[34mkprove andnl_r32_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andnl_r32_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andnl_r32_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput andnl_r32_r32_r32[0m
[4m[1m[34msanitizeSpecOutput andnl_r32_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandnl_r32_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _633), 32, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI633, 32, 64)) )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(32, 0), orMInt(extractMInt(mi(64, _632), 32, 64), extractMInt(mi(64, _633), 32, 64))) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(32, 0), orMInt(extractMInt(MI632, 32, 64), extractMInt(MI633, 32, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), xorMInt(extractMInt(mi(64, _632), 32, 64), orMInt(extractMInt(mi(64, _632), 32, 64), extractMInt(mi(64, _633), 32, 64)))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), xorMInt(extractMInt(MI632, 32, 64), orMInt(extractMInt(MI632, 32, 64), extractMInt(MI633, 32, 64)))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, _632), 32, 64), orMInt(extractMInt(mi(64, _632), 32, 64), extractMInt(mi(64, _633), 32, 64))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(MI632, 32, 64), orMInt(extractMInt(MI632, 32, 64), extractMInt(MI633, 32, 64))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R12" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _632), 48, 64)) )
echo Debug:  Result: "R12" |-> (concatenateMInt(mi(48, 0), extractMInt(MI632, 48, 64)) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(64, _632), 32, 33), orMInt(extractMInt(mi(64, _632), 32, 33), extractMInt(mi(64, _633), 32, 33))) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(MI632, 32, 33), orMInt(extractMInt(MI632, 32, 33), extractMInt(MI633, 32, 33))) )
echo Debug:  PreResult: "R13" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _632), 32, 48)) )
echo Debug:  Result: "R13" |-> (concatenateMInt(mi(48, 0), extractMInt(MI632, 32, 48)) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, _632), 56, 64), orMInt(extractMInt(mi(64, _632), 56, 64), extractMInt(mi(64, _633), 56, 64))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI632, 56, 64), orMInt(extractMInt(MI632, 56, 64), extractMInt(MI633, 56, 64))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
[4m[1m[34mwriteKDefn andnl_r32_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-andnl_r32_r32_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: andnps_xmm_xmm[0m
[4m[1m[34mcreatespec andnps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andnps_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandnps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movdqa %xmm2, %xmm8
%xmm8 -> 1
sse2 -> 1
%xmm2 -> 1

Circuit: pandn %xmm8, %xmm1
%xmm1 -> 1
%xmm8 -> 1
sse2 -> 1

Total Circuit
 -> 1
YMM8 -> 1
YMM1 -> 1
YMM2 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove andnps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andnps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andnps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput andnps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput andnps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandnps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _613), 0, 128), concatenateMInt(xorMInt(orMInt(extractMInt(mi(256, _613), 128, 192), extractMInt(mi(256, _614), 128, 192)), extractMInt(mi(256, _613), 128, 192)), xorMInt(orMInt(extractMInt(mi(256, _613), 192, 256), extractMInt(mi(256, _614), 192, 256)), extractMInt(mi(256, _613), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI613, 0, 128), concatenateMInt(xorMInt(orMInt(extractMInt(MI613, 128, 192), extractMInt(MI614, 128, 192)), extractMInt(MI613, 128, 192)), xorMInt(orMInt(extractMInt(MI613, 192, 256), extractMInt(MI614, 192, 256)), extractMInt(MI613, 192, 256)))) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _614), 128, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), extractMInt(MI614, 128, 256)) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _613)   )
echo Debug:  Result: "SPAD1" |-> (MI613   )
[4m[1m[34mwriteKDefn andnps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-andnps_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: blsmskl_r32_r32[0m
[4m[1m[34mcreatespec blsmskl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_blsmskl_r32_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mblsmskl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: blsmskl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1
pf -> 1

Circuit: movl %ecx, %ebx
%ebx -> 1
%ecx -> 1
%rbx -> 1

Circuit: decq %rbx
%of -> 1
%rbx -> 1
%sf -> 1
%af -> 1
%pf -> 1
%zf -> 1

Circuit: callq .move_byte_5_of_rbx_to_r9b
%rbx -> 1
%r9b -> 1

Circuit: xorl %ecx, %ebx
%ebx -> 1
%zf -> 1
%ecx -> 1
%af -> 1
%sf -> 1
%pf -> 1
%rbx -> 1
%of -> 1
%cf -> 1

Circuit: rclb $0x1, %r9b
\$0x1 -> 1
%of -> 1
%cf -> 1
%r9b -> 1

Total Circuit
CF -> 1
PF -> 1
ZF -> 1
RCX -> 1
AF -> 1
SF -> 1
RBX -> 1
OF -> 1
R9 -> 1
 -> 1

Target
ZF -> 1
RCX -> 1
CF -> 1
PF -> 1
SF -> 1
AF -> 1
RBX -> 1
OF -> 1
 -> 1

[4m[1m[34mkprove blsmskl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_blsmskl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_blsmskl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput blsmskl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput blsmskl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mblsmskl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(mi(64, _629), 32, 64))), 17, 25)), concatenateMInt(mi(1, 0), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(mi(64, _629), 32, 64))), 17, 25))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(MI629, 32, 64))), 17, 25)), concatenateMInt(mi(1, 0), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(MI629, 32, 64))), 17, 25))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(mi(64, _629), 32, 64))), 33, 34), extractMInt(mi(64, _629), 32, 33)) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(MI629, 32, 64))), 33, 34), extractMInt(MI629, 32, 33)) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(mi(64, _629), 32, 64))), 57, 65), extractMInt(mi(64, _629), 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(MI629, 32, 64))), 57, 65), extractMInt(MI629, 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _629) )
echo Debug:  Result: "RCX" |-> (MI629 )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(56, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(mi(64, _629), 32, 64))), 17, 25)), concatenateMInt(mi(1, 0), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(mi(64, _629), 32, 64))), 17, 25))), 1, 9)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(56, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(MI629, 32, 64))), 17, 25)), concatenateMInt(mi(1, 0), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(MI629, 32, 64))), 17, 25))), 1, 9)) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(mi(64, _629), 32, 64))), 17, 18), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(mi(64, _629), 32, 64))), 17, 18))  andBool   notBool  ( eqMInt(extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(mi(64, _629), 32, 64))), 17, 18), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(mi(64, _629), 32, 64))), 17, 25)), concatenateMInt(mi(1, 0), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(mi(64, _629), 32, 64))), 17, 25))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(MI629, 32, 64))), 17, 18), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(MI629, 32, 64))), 17, 18))  andBool   notBool  ( eqMInt(extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(MI629, 32, 64))), 17, 18), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(MI629, 32, 64))), 17, 25)), concatenateMInt(mi(1, 0), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(MI629, 32, 64))), 17, 25))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(mi(64, _629), 32, 64))), 33, 65)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _629), 32, 64))) )
echo Debug:  Result: "RBX" |-> (xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(MI629, 32, 64))), 33, 65)), concatenateMInt(mi(32, 0), extractMInt(MI629, 32, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(mi(64, _629), 32, 64))), 33, 65), extractMInt(mi(64, _629), 32, 64)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(MI629, 32, 64))), 33, 65), extractMInt(MI629, 32, 64)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn blsmskl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-blsmskl_r32_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovew_r16_r16[0m
[4m[1m[34mcreatespec cmovew_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovew_r16_r16_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovew_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovew_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: xchgb %bl, %bl
%bl -> 1

Circuit: cmovzw %cx, %bx
%bx -> 1
%zf -> 1
cmov -> 1
%cx -> 1

Total Circuit
 -> 1
RBX -> 1
ZF -> 1
RCX -> 1

Target
 -> 1
RBX -> 1
ZF -> 1
RCX -> 1

[4m[1m[34mkprove cmovew_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovew_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovew_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovew_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovew_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovew_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovew_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _616), mi(1, 0)) ) #then ( mi(64, _614) ) #else ( concatenateMInt(extractMInt(mi(64, _614), 0, 48), extractMInt(mi(64, _615), 48, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI616, mi(1, 0)) ) #then ( MI614 ) #else ( concatenateMInt(extractMInt(MI614, 0, 48), extractMInt(MI615, 48, 64)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> (mi(1, _616) )
echo Debug:  Result: "ZF" |-> (MI616 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _615) )
echo Debug:  Result: "RCX" |-> (MI615 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _614))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI614)   )
[4m[1m[34mwriteKDefn cmovew_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovew_r16_r16.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnael_r32_r32[0m
[4m[1m[34mcreatespec cmovnael_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnael_r32_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnael_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovnael_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vxorps %xmm2, %xmm2, %xmm1
avx -> 1
%xmm1 -> 1
%xmm2 -> 1
%ymm1 -> 1

Circuit: callq .move_128_032_xmm1_eax_edx_r8d_r9d
%edx -> 1
%r8d -> 1
%eax -> 1
%xmm1 -> 1
%r9d -> 1

Circuit: setnae %ah
%ah -> 1
%cf -> 1

Circuit: xaddw %ax, %r8w
%of -> 1
%cf -> 1
%r8w -> 1
%af -> 1
%sf -> 1
%pf -> 1
%ax -> 1
%zf -> 1

Circuit: cmovnzl %ecx, %ebx
%ebx -> 1
%zf -> 1
cmov -> 1
%ecx -> 1
%rbx -> 1

Total Circuit
 -> 1
RBX -> 1
OF -> 1
R9 -> 1
AF -> 1
R8 -> 1
RAX -> 1
SF -> 1
RDX -> 1
CF -> 1
PF -> 1
RCX -> 1
ZF -> 1
YMM1 -> 1
YMM2 -> 1

Target
 -> 1
RBX -> 1
CF -> 1
RCX -> 1

[4m[1m[34mkprove cmovnael_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnael_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnael_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnael_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovnael_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnael_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnael_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _624)), mi(8, 0))), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _624)), mi(8, 0))), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI624), mi(8, 0))), concatenateMInt(concatenateMInt(mi(7, 0), MI624), mi(8, 0))), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(48, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _624)), mi(8, 0))) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(48, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI624), mi(8, 0))) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _626) )
echo Debug:  Result: "RCX" |-> (MI626 )
echo Debug:  PreResult: "R9" |-> (mi(64, 0) )
echo Debug:  Result: "R9" |-> (mi(64, 0) )
echo Debug:  PreResult: "RDX" |-> (mi(64, 0) )
echo Debug:  Result: "RDX" |-> (mi(64, 0) )
echo Debug:  PreResult: "RAX" |-> (mi(64, 0) )
echo Debug:  Result: "RAX" |-> (mi(64, 0) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _624)), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _625), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _626), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), MI624), mi(8, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI625, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI626, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _624)), mi(8, 0)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(concatenateMInt(mi(7, 0), MI624), mi(8, 0)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (mi(256, 0) )
echo Debug:  Result: "YMM1" |-> (mi(256, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "PF" |-> (mi(1, 1) )
echo Debug:  Result: "PF" |-> (mi(1, 1) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
[4m[1m[34mwriteKDefn cmovnael_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnael_r32_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnaq_r64_r64[0m
[4m[1m[34mcreatespec cmovnaq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnaq_r64_r64_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnaq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovnaq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: cmovbeq %rcx, %rbx
%rcx -> 1
cmov -> 1
%zf -> 1
%cf -> 1
%rbx -> 1

Total Circuit
RCX -> 1
ZF -> 1
CF -> 1
 -> 1
RBX -> 1

Target
RBX -> 1
 -> 1
CF -> 1
RCX -> 1
ZF -> 1

[4m[1m[34mkprove cmovnaq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnaq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnaq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnaq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput cmovnaq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnaq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnaq_r64_r64[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _615)), concatenateMInt(mi(7, 0), mi(1, _618)))), mi(32, 0)) ) #then ( mi(64, _616) ) #else ( mi(64, _617) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI615), concatenateMInt(mi(7, 0), MI618))), mi(32, 0)) ) #then ( MI616 ) #else ( MI617 ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _615) )
echo Debug:  Result: "CF" |-> (MI615 )
echo Debug:  PreResult: "ZF" |-> (mi(1, _618) )
echo Debug:  Result: "ZF" |-> (MI618 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _617)   )
echo Debug:  Result: "RCX" |-> (MI617   )
[4m[1m[34mwriteKDefn cmovnaq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnaq_r64_r64.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnel_r32_r32[0m
[4m[1m[34mcreatespec cmovnel_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnel_r32_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnel_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovnel_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: cmovnzl %ecx, %ebx
cmov -> 1
%ebx -> 1
%zf -> 1
%ecx -> 1
%rbx -> 1

Total Circuit
RBX -> 1
 -> 1
RCX -> 1
ZF -> 1

Target
RCX -> 1
ZF -> 1
 -> 1
RBX -> 1

[4m[1m[34mkprove cmovnel_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnel_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnel_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnel_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovnel_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnel_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnel_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _615), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _614), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _613), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI615, mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI614, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI613, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> (mi(1, _615) )
echo Debug:  Result: "ZF" |-> (MI615 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _614)   )
echo Debug:  Result: "RCX" |-> (MI614   )
[4m[1m[34mwriteKDefn cmovnel_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnel_r32_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovneq_r64_r64[0m
[4m[1m[34mcreatespec cmovneq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovneq_r64_r64_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovneq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovneq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: setz %dh
%zf -> 1
%dh -> 1

Circuit: salb $0x1, %dh
%zf -> 1
%pf -> 1
%af -> 1
%sf -> 1
\$0x1 -> 1
%cf -> 1
%of -> 1
%dh -> 1

Circuit: cmoveq %rcx, %rbx
%rbx -> 1
%rcx -> 1
cmov -> 1
%zf -> 1

Total Circuit
AF -> 1
SF -> 1
RDX -> 1
CF -> 1
PF -> 1
RCX -> 1
ZF -> 1
 -> 1
OF -> 1
RBX -> 1

Target
RBX -> 1
 -> 1
RCX -> 1
ZF -> 1

[4m[1m[34mkprove cmovneq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovneq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovneq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovneq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput cmovneq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovneq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovneq_r64_r64[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(8, 0), mi(1, _621)), concatenateMInt(mi(8, 0), mi(1, _621))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(8, 0), MI621), concatenateMInt(mi(8, 0), MI621)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(8, 0), mi(1, _621)), concatenateMInt(mi(8, 0), mi(1, _621))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(8, 0), MI621), concatenateMInt(mi(8, 0), MI621)), 1, 2) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(8, 0), mi(1, _621)), concatenateMInt(mi(8, 0), mi(1, _621))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(8, 0), MI621), concatenateMInt(mi(8, 0), MI621)), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _620) )
echo Debug:  Result: "RCX" |-> (MI620 )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(8, 0), mi(1, _621)), concatenateMInt(mi(8, 0), mi(1, _621))), 1, 2)) )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(8, 0), MI621), concatenateMInt(mi(8, 0), MI621)), 1, 2)) )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(8, 0), mi(1, _621)), concatenateMInt(mi(8, 0), mi(1, _621))), 1, 9), mi(8, 0))) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(8, 0), MI621), concatenateMInt(mi(8, 0), MI621)), 1, 9), mi(8, 0))) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(8, 0), mi(1, _621)), concatenateMInt(mi(8, 0), mi(1, _621))), 1, 9), mi(8, 0)) ) #then ( mi(64, _620) ) #else ( mi(64, _619) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(8, 0), MI621), concatenateMInt(mi(8, 0), MI621)), 1, 9), mi(8, 0)) ) #then ( MI620 ) #else ( MI619 ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(8, 0), mi(1, _621)), concatenateMInt(mi(8, 0), mi(1, _621))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(8, 0), MI621), concatenateMInt(mi(8, 0), MI621)), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn cmovneq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovneq_r64_r64.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnew_r16_r16[0m
[4m[1m[34mcreatespec cmovnew_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnew_r16_r16_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnew_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovnew_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movzwq %cx, %rsi
%cx -> 1
%rsi -> 1

Circuit: cmovnzl %esi, %ebx
%esi -> 1
%rbx -> 1
%ebx -> 1
%zf -> 1
cmov -> 1

Total Circuit
RSI -> 1
ZF -> 1
RCX -> 1
RBX -> 1
 -> 1

Target
 -> 1
RBX -> 1
RCX -> 1
ZF -> 1

[4m[1m[34mkprove cmovnew_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnew_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnew_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnew_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovnew_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnew_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnew_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _617), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _615), 0, 48), extractMInt(mi(64, _616), 48, 64)) ) #else ( mi(64, _615) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI617, mi(1, 0)) ) #then ( concatenateMInt(extractMInt(MI615, 0, 48), extractMInt(MI616, 48, 64)) ) #else ( MI615 ) #fi)  )
echo Debug:  PreResult: "RSI" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _616), 48, 64)) )
echo Debug:  Result: "RSI" |-> (concatenateMInt(mi(48, 0), extractMInt(MI616, 48, 64)) )
echo Debug:  PreResult: "ZF" |-> (mi(1, _617) )
echo Debug:  Result: "ZF" |-> (MI617 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _616) )
echo Debug:  Result: "RCX" |-> (MI616 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _615))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI615)   )
[4m[1m[34mwriteKDefn cmovnew_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnew_r16_r16.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnsl_r32_r32[0m
[4m[1m[34mcreatespec cmovnsl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnsl_r32_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnsl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovnsl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movl %ecx, %esi
%esi -> 1
%rsi -> 1
%ecx -> 1

Circuit: callq .read_sf_into_rcx
%sf -> 1
%rcx -> 1

Circuit: decl %ecx
%of -> 1
%rcx -> 1
%zf -> 1
%pf -> 1
%af -> 1
%sf -> 1
%ecx -> 1

Circuit: cmovnzl %esi, %ebx
%esi -> 1
%rbx -> 1
cmov -> 1
%zf -> 1
%ebx -> 1

Total Circuit
 -> 1
OF -> 1
RBX -> 1
AF -> 1
SF -> 1
PF -> 1
RSI -> 1
RCX -> 1
ZF -> 1

Target
 -> 1
RBX -> 1
SF -> 1
RCX -> 1

[4m[1m[34mkprove cmovnsl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnsl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnsl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnsl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovnsl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnsl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnsl_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(32, 0), mi(1, _620)), mi(33, 4294967295)), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(32, 0), MI620), mi(33, 4294967295)), 1, 2) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(mi(31, 0), mi(1, _620)), mi(32, -1)), extractMInt(addMInt(concatenateMInt(mi(32, 0), mi(1, _620)), mi(33, 4294967295)), 1, 33)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(mi(31, 0), MI620), mi(32, -1)), extractMInt(addMInt(concatenateMInt(mi(32, 0), MI620), mi(33, 4294967295)), 1, 33)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(32, 0), mi(1, _620)), mi(33, 4294967295)), 1, 33)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(32, 0), MI620), mi(33, 4294967295)), 1, 33)) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(32, 0), mi(1, _620)), mi(33, 4294967295)), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(32, 0), MI620), mi(33, 4294967295)), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(32, 0), mi(1, _620)), mi(33, 4294967295)), 1, 33), mi(32, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _618), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _619), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(32, 0), MI620), mi(33, 4294967295)), 1, 33), mi(32, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI618, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI619, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "RSI" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _619), 32, 64)) )
echo Debug:  Result: "RSI" |-> (concatenateMInt(mi(32, 0), extractMInt(MI619, 32, 64)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(32, 0), mi(1, _620)), mi(33, 4294967295)), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(32, 0), MI620), mi(33, 4294967295)), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn cmovnsl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnsl_r32_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovpol_r32_r32[0m
[4m[1m[34mcreatespec cmovpol_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpol_r32_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovpol_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovpol_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_032_016_ecx_r10w_r11w
%ecx -> 1
%r10w -> 1
%r11w -> 1

Circuit: movl %ebx, %esi
%esi -> 1
%rsi -> 1
%ebx -> 1

Circuit: callq .read_pf_into_rbx
%pf -> 1
%rbx -> 1

Circuit: popcntw %bx, %bx
popcnt -> 1
%cf -> 1
%of -> 1
%pf -> 1
%af -> 1
%sf -> 1
%zf -> 1
%bx -> 1

Circuit: callq .move_016_032_r10w_r11w_ebx
%r11w -> 1
%r10w -> 1
%ebx -> 1

Circuit: cmovnzl %esi, %ebx
%ebx -> 1
%zf -> 1
cmov -> 1
%rbx -> 1
%esi -> 1

Total Circuit
 -> 1
R11 -> 1
OF -> 1
R10 -> 1
RBX -> 1
SF -> 1
AF -> 1
RSI -> 1
RCX -> 1
ZF -> 1
PF -> 1
CF -> 1

Target
RBX -> 1
 -> 1
RCX -> 1
PF -> 1

[4m[1m[34mkprove cmovpol_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpol_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpol_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovpol_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovpol_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovpol_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovpol_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (mi(1, 0) )
echo Debug:  Result: "AF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _623) )
echo Debug:  Result: "RCX" |-> (MI623 )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(63, 0), mi(1, _621)), mi(64, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _623), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _622), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(63, 0), MI621), mi(64, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI623, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI622, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "RSI" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _622), 32, 64)) )
echo Debug:  Result: "RSI" |-> (concatenateMInt(mi(32, 0), extractMInt(MI622, 32, 64)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(63, 0), mi(1, _621)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(63, 0), MI621), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R10" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _623), 48, 64)) )
echo Debug:  Result: "R10" |-> (concatenateMInt(mi(48, 0), extractMInt(MI623, 48, 64)) )
echo Debug:  PreResult: "R11" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _623), 32, 48)) )
echo Debug:  Result: "R11" |-> (concatenateMInt(mi(48, 0), extractMInt(MI623, 32, 48)) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "PF" |-> (mi(1, 0) )
echo Debug:  Result: "PF" |-> (mi(1, 0) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
[4m[1m[34mwriteKDefn cmovpol_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovpol_r32_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: minsd_xmm_xmm[0m
[4m[1m[34mcreatespec minsd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_minsd_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mminsd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovsd %xmm2, %xmm1, %xmm0
%xmm0 -> 1
avx -> 1
%xmm1 -> 1
%xmm2 -> 1
%ymm0 -> 1

Circuit: minpd %xmm0, %xmm1
%xmm1 -> 1
%xmm0 -> 1
sse2 -> 1

Total Circuit
 -> 1
YMM0 -> 1
YMM2 -> 1
YMM1 -> 1

Target
YMM2 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove minsd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_minsd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_minsd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput minsd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput minsd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mminsd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _613), 0, 192), Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11), MInt2Float(extractMInt(mi(256, _613), 192, 256), 53, 11)), 64)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI613, 0, 192), Float2MInt(minFloat(MInt2Float(extractMInt(MI614, 192, 256), 53, 11), MInt2Float(extractMInt(MI613, 192, 256), 53, 11)), 64)) )
echo Debug:  PreResult: "YMM0" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _613), 128, 192), extractMInt(mi(256, _614), 192, 256))) )
echo Debug:  Result: "YMM0" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI613, 128, 192), extractMInt(MI614, 192, 256))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _613)   )
echo Debug:  Result: "SPAD1" |-> (MI613   )
[4m[1m[34mwriteKDefn minsd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-minsd_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movhlps_xmm_xmm[0m
[4m[1m[34mcreatespec movhlps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movhlps_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovhlps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: punpckhqdq %xmm1, %xmm2
%xmm1 -> 1
%xmm2 -> 1
sse2 -> 1

Circuit: callq .move_128_064_xmm2_r12_r13
%r12 -> 1
%xmm2 -> 1
%r13 -> 1

Circuit: callq .move_064_128_r12_r13_xmm1
%xmm1 -> 1
%r13 -> 1
%r12 -> 1

Total Circuit
 -> 1
R12 -> 1
R13 -> 1
YMM2 -> 1
YMM1 -> 1

Target
YMM2 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove movhlps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movhlps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movhlps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movhlps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput movhlps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovhlps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(extractMInt(mi(256, _615), 0, 128), concatenateMInt(extractMInt(mi(256, _614), 128, 192), extractMInt(mi(256, _615), 128, 192))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(extractMInt(MI615, 0, 128), concatenateMInt(extractMInt(MI614, 128, 192), extractMInt(MI615, 128, 192))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _614), 0, 192), extractMInt(mi(256, _615), 128, 192)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI614, 0, 192), extractMInt(MI615, 128, 192)) )
echo Debug:  PreResult: "R12" |-> (extractMInt(mi(256, _615), 128, 192) )
echo Debug:  Result: "R12" |-> (extractMInt(MI615, 128, 192) )
echo Debug:  PreResult: "R13" |-> (extractMInt(mi(256, _614), 128, 192) )
echo Debug:  Result: "R13" |-> (extractMInt(MI614, 128, 192) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _614)   )
echo Debug:  Result: "SPAD1" |-> (MI614   )
[4m[1m[34mwriteKDefn movhlps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movhlps_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movsbw_r16_r8[0m
[4m[1m[34mcreatespec movsbw_r16_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movsbw_r16_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovsbw_r16_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq $0xfffffffffffffff8, %rbx
\$0xfffffffffffffff8 -> 1
%rbx -> 1

Circuit: xchgb %cl, %bh
%cl -> 1
%bh -> 1

Circuit: movsbl %bh, %eax
%eax -> 1
%rax -> 1
%bh -> 1

Circuit: movw %ax, %bx
%ax -> 1
%bx -> 1

Total Circuit
RAX -> 1
RCX -> 1
 -> 1
RBX -> 1

Target
RCX -> 1
RBX -> 1

[4m[1m[34mkprove movsbw_r16_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movsbw_r16_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movsbw_r16_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movsbw_r16_r8[0m
[4m[1m[34msanitizeSpecOutput movsbw_r16_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovsbw_r16_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 56, 64))), 32, 64)) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI614, 56, 64))), 32, 64)) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _613), 0, 48), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 56, 64))), 48, 64)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI613, 0, 48), extractMInt(mi(64, svalueMInt(extractMInt(MI614, 56, 64))), 48, 64)) )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(extractMInt(mi(64, _614), 0, 56), mi(8, 255)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(extractMInt(MI614, 0, 56), mi(8, 255)) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _613))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI613)   )
[4m[1m[34mwriteKDefn movsbw_r16_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movsbw_r16_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: movshdup_xmm_xmm[0m
[4m[1m[34mcreatespec movshdup_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movshdup_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovshdup_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_064_xmm2_r10_r11
%xmm2 -> 1
%r11 -> 1
%r10 -> 1

Circuit: callq .move_064_128_r10_r11_xmm1
%r11 -> 1
%xmm1 -> 1
%r10 -> 1

Circuit: vmovshdup %xmm1, %xmm8
%xmm8 -> 1
%ymm8 -> 1
%xmm1 -> 1
avx -> 1

Circuit: movaps %xmm8, %xmm1
%xmm8 -> 1
sse -> 1
%xmm1 -> 1

Total Circuit
YMM8 -> 1
YMM2 -> 1
YMM1 -> 1
R11 -> 1
 -> 1
R10 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove movshdup_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movshdup_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_movshdup_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput movshdup_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput movshdup_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mmovshdup_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R10" |-> (extractMInt(mi(256, _616), 192, 256) )
echo Debug:  Result: "R10" |-> (extractMInt(MI616, 192, 256) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _615), 0, 128), concatenateMInt(concatenateMInt(extractMInt(mi(256, _616), 128, 160), extractMInt(mi(256, _616), 128, 160)), concatenateMInt(extractMInt(mi(256, _616), 192, 224), extractMInt(mi(256, _616), 192, 224)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI615, 0, 128), concatenateMInt(concatenateMInt(extractMInt(MI616, 128, 160), extractMInt(MI616, 128, 160)), concatenateMInt(extractMInt(MI616, 192, 224), extractMInt(MI616, 192, 224)))) )
echo Debug:  PreResult: "R11" |-> (extractMInt(mi(256, _616), 128, 192) )
echo Debug:  Result: "R11" |-> (extractMInt(MI616, 128, 192) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _616), 128, 160), extractMInt(mi(256, _616), 128, 160)), concatenateMInt(extractMInt(mi(256, _616), 192, 224), extractMInt(mi(256, _616), 192, 224)))) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI616, 128, 160), extractMInt(MI616, 128, 160)), concatenateMInt(extractMInt(MI616, 192, 224), extractMInt(MI616, 192, 224)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _615) )
echo Debug:  Result: "SPAD1" |-> (MI615 )
[4m[1m[34mwriteKDefn movshdup_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-movshdup_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: negb_rh[0m
[4m[1m[34mcreatespec negb_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_negb_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mnegb_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movzbl %ah, %eax
%rax -> 1
%ah -> 1
%eax -> 1

Circuit: negb %al
%zf -> 1
%al -> 1
%sf -> 1
%af -> 1
%pf -> 1
%of -> 1
%cf -> 1

Circuit: xchgb %ah, %al
%al -> 1
%ax -> 1
%ah -> 1

Total Circuit
OF -> 1
ZF -> 1
PF -> 1
CF -> 1
SF -> 1
RAX -> 1
AF -> 1

Target
OF -> 1
CF -> 1
PF -> 1
ZF -> 1
AF -> 1
RAX -> 1
SF -> 1

[4m[1m[34mkprove negb_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_negb_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_negb_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput negb_rh[0m
[4m[1m[34msanitizeSpecOutput negb_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mnegb_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(mi(64, _626), 48, 56)))), mi(17, 1)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 56))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(MI626, 48, 56)))), mi(17, 1)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 56))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(mi(64, _626), 48, 56)))), mi(17, 1)), 9, 10) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(MI626, 48, 56)))), mi(17, 1)), 9, 10) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(mi(64, _626), 48, 56)))), mi(17, 1)), 9, 17), extractMInt(mi(64, _626), 48, 56)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(mi(64, _626), 48, 56)))), mi(17, 1)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 56))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(MI626, 48, 56)))), mi(17, 1)), 9, 17), extractMInt(MI626, 48, 56)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(MI626, 48, 56)))), mi(17, 1)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 56))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(mi(64, _626), 48, 56)))), mi(17, 1)), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(MI626, 48, 56)))), mi(17, 1)), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _626)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI626) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(mi(64, _626), 48, 56)))), mi(17, 1)), 9, 10), extractMInt(mi(64, _626), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(mi(64, _626), 48, 56)))), mi(17, 1)), 9, 10), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(mi(64, _626), 48, 56)))), mi(17, 1)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 56))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(MI626, 48, 56)))), mi(17, 1)), 9, 10), extractMInt(MI626, 48, 49))  andBool   notBool  ( eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(MI626, 48, 56)))), mi(17, 1)), 9, 10), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(MI626, 48, 56)))), mi(17, 1)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 56))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _626), 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(mi(64, _626), 48, 56)))), mi(17, 1)), 9, 17), extractMInt(mi(64, _626), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI626, 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(MI626, 48, 56)))), mi(17, 1)), 9, 17), extractMInt(MI626, 56, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(mi(64, _626), 48, 56)))), mi(17, 1)), 9, 17), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), concatenateMInt(mi(8, 0), extractMInt(MI626, 48, 56)))), mi(17, 1)), 9, 17), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn negb_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-negb_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: notb_rh[0m
[4m[1m[34mcreatespec notb_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_notb_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mnotb_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movq $0xfffffffffffffffd, %rdx
\$0xfffffffffffffffd -> 1
%rdx -> 1

Circuit: callq .write_dl_to_zf
%dl -> 1
%zf -> 1

Circuit: callq .read_zf_into_rbx
%rbx -> 1
%zf -> 1

Circuit: stc
%cf -> 1

Circuit: adcw %dx, %bx
%dx -> 1
%cf -> 1
%of -> 1
%zf -> 1
%bx -> 1
%pf -> 1
%sf -> 1
%af -> 1

Circuit: xorb %bl, %ah
%of -> 1
%cf -> 1
%bl -> 1
%ah -> 1
%zf -> 1
%af -> 1
%sf -> 1
%pf -> 1

Total Circuit
RAX -> 1
SF -> 1
RDX -> 1
AF -> 1
ZF -> 1
CF -> 1
PF -> 1
 -> 1
RBX -> 1
OF -> 1

Target
RAX -> 1

[4m[1m[34mkprove notb_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_notb_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_notb_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput notb_rh[0m
[4m[1m[34msanitizeSpecOutput notb_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mnotb_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(64, _618), 48, 49), mi(1, 1)) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(MI618, 48, 49), mi(1, 1)) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 255)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI618, 48, 56), mi(8, 255)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RDX" |-> (mi(64, -3) )
echo Debug:  Result: "RDX" |-> (mi(64, -3) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _618)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI618) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _618), 0, 48), concatenateMInt(xorMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 255)), extractMInt(mi(64, _618), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI618, 0, 48), concatenateMInt(xorMInt(extractMInt(MI618, 48, 56), mi(8, 255)), extractMInt(MI618, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (mi(64, 65535) )
echo Debug:  Result: "RBX" |-> (mi(64, 65535) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 255)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(MI618, 48, 56), mi(8, 255)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn notb_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-notb_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: orb_r8_rh[0m
[4m[1m[34mcreatespec orb_r8_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orb_r8_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34morb_r8_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: orb_r8_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: orb %bl, %ah
%zf -> 1
%pf -> 1
%af -> 1
%sf -> 1
%cf -> 1
%of -> 1
%bl -> 1
%ah -> 1

Circuit: xchgb %bl, %ah
%ah -> 1
%bl -> 1

Total Circuit
ZF -> 1
CF -> 1
PF -> 1
SF -> 1
RAX -> 1
AF -> 1
RBX -> 1
OF -> 1

Target
AF -> 1
SF -> 1
RAX -> 1
CF -> 1
PF -> 1
ZF -> 1
OF -> 1
RBX -> 1

[4m[1m[34mkprove orb_r8_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orb_r8_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orb_r8_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput orb_r8_rh[0m
[4m[1m[34msanitizeSpecOutput orb_r8_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34morb_r8_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (orMInt(extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _629), 56, 64), extractMInt(mi(64, _629), 56, 64)))), 0, 1), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _628), 48, 56), extractMInt(mi(64, _628), 48, 56)))), 0, 1)) )
echo Debug:  Result: "SF" |-> (orMInt(extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI629, 56, 64), extractMInt(MI629, 56, 64)))), 0, 1), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI628, 48, 56), extractMInt(MI628, 48, 56)))), 0, 1)) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(orMInt(extractMInt(mi(64, _629), 56, 64), extractMInt(mi(64, _628), 48, 56)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(orMInt(extractMInt(MI629, 56, 64), extractMInt(MI628, 48, 56)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _629)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI629) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _628), 0, 48), concatenateMInt(extractMInt(mi(64, _629), 56, 64), extractMInt(mi(64, _628), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI628, 0, 48), concatenateMInt(extractMInt(MI629, 56, 64), extractMInt(MI628, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _629), 0, 56), orMInt(extractMInt(mi(64, _629), 56, 64), extractMInt(mi(64, _628), 48, 56))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI629, 0, 56), orMInt(extractMInt(MI629, 56, 64), extractMInt(MI628, 48, 56))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(orMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _629), 56, 64), extractMInt(mi(64, _629), 56, 64)))), mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _628), 48, 56), extractMInt(mi(64, _628), 48, 56))))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(orMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI629, 56, 64), extractMInt(MI629, 56, 64)))), mi(64, svalueMInt(concatenateMInt(extractMInt(MI628, 48, 56), extractMInt(MI628, 48, 56))))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn orb_r8_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-orb_r8_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: orb_rh_rh[0m
[4m[1m[34mcreatespec orb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orb_rh_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34morb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: orb_rh_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: movzbw %bh, %bx
%bx -> 1
%bh -> 1

Circuit: orb %bl, %ah
%pf -> 1
%af -> 1
%sf -> 1
%zf -> 1
%ah -> 1
%bl -> 1
%cf -> 1
%of -> 1

Total Circuit
PF -> 1
CF -> 1
ZF -> 1
AF -> 1
RAX -> 1
SF -> 1
OF -> 1
RBX -> 1

Target
AF -> 1
RAX -> 1
SF -> 1
PF -> 1
CF -> 1
ZF -> 1
RBX -> 1
OF -> 1

[4m[1m[34mkprove orb_rh_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orb_rh_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_orb_rh_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput orb_rh_rh[0m
[4m[1m[34msanitizeSpecOutput orb_rh_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34morb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (orMInt(extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _629), 48, 56), extractMInt(mi(64, _629), 48, 56)))), 0, 1), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _628), 48, 56), extractMInt(mi(64, _628), 48, 56)))), 0, 1)) )
echo Debug:  Result: "SF" |-> (orMInt(extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI629, 48, 56), extractMInt(MI629, 48, 56)))), 0, 1), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI628, 48, 56), extractMInt(MI628, 48, 56)))), 0, 1)) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(orMInt(extractMInt(mi(64, _629), 48, 56), extractMInt(mi(64, _628), 48, 56)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(orMInt(extractMInt(MI629, 48, 56), extractMInt(MI628, 48, 56)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _628)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI628) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _628), 0, 48), concatenateMInt(orMInt(extractMInt(mi(64, _629), 48, 56), extractMInt(mi(64, _628), 48, 56)), extractMInt(mi(64, _628), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI628, 0, 48), concatenateMInt(orMInt(extractMInt(MI629, 48, 56), extractMInt(MI628, 48, 56)), extractMInt(MI628, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _629), 0, 48), concatenateMInt(mi(8, 0), extractMInt(mi(64, _629), 48, 56))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI629, 0, 48), concatenateMInt(mi(8, 0), extractMInt(MI629, 48, 56))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(orMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _629), 48, 56), extractMInt(mi(64, _629), 48, 56)))), mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _628), 48, 56), extractMInt(mi(64, _628), 48, 56))))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(orMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI629, 48, 56), extractMInt(MI629, 48, 56)))), mi(64, svalueMInt(concatenateMInt(extractMInt(MI628, 48, 56), extractMInt(MI628, 48, 56))))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn orb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-orb_rh_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: pand_xmm_xmm[0m
[4m[1m[34mcreatespec pand_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_pand_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpand_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vpxor %xmm1, %xmm2, %xmm0
%ymm0 -> 1
%xmm0 -> 1
avx -> 1
%xmm1 -> 1
%xmm2 -> 1

Circuit: pandn %xmm2, %xmm0
%xmm2 -> 1
%xmm0 -> 1
sse2 -> 1

Circuit: vmovapd %xmm0, %xmm2
%ymm2 -> 1
%xmm0 -> 1
avx -> 1
%xmm2 -> 1

Circuit: movdqa %xmm2, %xmm1
%xmm1 -> 1
%xmm2 -> 1
sse2 -> 1

Total Circuit
YMM0 -> 1
YMM2 -> 1
YMM1 -> 1
 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove pand_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_pand_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_pand_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput pand_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput pand_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpand_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _613), 128, 192), extractMInt(mi(256, _614), 128, 192)), extractMInt(mi(256, _614), 128, 192)), xorMInt(extractMInt(mi(256, _613), 128, 192), extractMInt(mi(256, _614), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _613), 192, 256), extractMInt(mi(256, _614), 192, 256)), extractMInt(mi(256, _614), 192, 256)), xorMInt(extractMInt(mi(256, _613), 192, 256), extractMInt(mi(256, _614), 192, 256))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI613, 128, 192), extractMInt(MI614, 128, 192)), extractMInt(MI614, 128, 192)), xorMInt(extractMInt(MI613, 128, 192), extractMInt(MI614, 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(MI613, 192, 256), extractMInt(MI614, 192, 256)), extractMInt(MI614, 192, 256)), xorMInt(extractMInt(MI613, 192, 256), extractMInt(MI614, 192, 256))))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _613), 0, 128), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _613), 128, 192), extractMInt(mi(256, _614), 128, 192)), extractMInt(mi(256, _614), 128, 192)), xorMInt(extractMInt(mi(256, _613), 128, 192), extractMInt(mi(256, _614), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _613), 192, 256), extractMInt(mi(256, _614), 192, 256)), extractMInt(mi(256, _614), 192, 256)), xorMInt(extractMInt(mi(256, _613), 192, 256), extractMInt(mi(256, _614), 192, 256))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI613, 0, 128), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI613, 128, 192), extractMInt(MI614, 128, 192)), extractMInt(MI614, 128, 192)), xorMInt(extractMInt(MI613, 128, 192), extractMInt(MI614, 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(MI613, 192, 256), extractMInt(MI614, 192, 256)), extractMInt(MI614, 192, 256)), xorMInt(extractMInt(MI613, 192, 256), extractMInt(MI614, 192, 256))))) )
echo Debug:  PreResult: "YMM0" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _613), 128, 192), extractMInt(mi(256, _614), 128, 192)), extractMInt(mi(256, _614), 128, 192)), xorMInt(extractMInt(mi(256, _613), 128, 192), extractMInt(mi(256, _614), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _613), 192, 256), extractMInt(mi(256, _614), 192, 256)), extractMInt(mi(256, _614), 192, 256)), xorMInt(extractMInt(mi(256, _613), 192, 256), extractMInt(mi(256, _614), 192, 256))))) )
echo Debug:  Result: "YMM0" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI613, 128, 192), extractMInt(MI614, 128, 192)), extractMInt(MI614, 128, 192)), xorMInt(extractMInt(MI613, 128, 192), extractMInt(MI614, 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(MI613, 192, 256), extractMInt(MI614, 192, 256)), extractMInt(MI614, 192, 256)), xorMInt(extractMInt(MI613, 192, 256), extractMInt(MI614, 192, 256))))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _613)   )
echo Debug:  Result: "SPAD1" |-> (MI613   )
[4m[1m[34mwriteKDefn pand_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-pand_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: punpckhdq_xmm_xmm[0m
[4m[1m[34mcreatespec punpckhdq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_punpckhdq_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpunpckhdq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vunpckhps %xmm2, %xmm1, %xmm8
%xmm2 -> 1
%xmm1 -> 1
avx -> 1
%ymm8 -> 1
%xmm8 -> 1

Circuit: movdqu %xmm8, %xmm1
sse2 -> 1
%xmm8 -> 1
%xmm1 -> 1

Total Circuit
YMM8 -> 1
YMM1 -> 1
YMM2 -> 1
 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove punpckhdq_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_punpckhdq_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_punpckhdq_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput punpckhdq_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput punpckhdq_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpunpckhdq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _613), 0, 128), concatenateMInt(concatenateMInt(extractMInt(mi(256, _614), 128, 160), extractMInt(mi(256, _613), 128, 160)), concatenateMInt(extractMInt(mi(256, _614), 160, 192), extractMInt(mi(256, _613), 160, 192)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI613, 0, 128), concatenateMInt(concatenateMInt(extractMInt(MI614, 128, 160), extractMInt(MI613, 128, 160)), concatenateMInt(extractMInt(MI614, 160, 192), extractMInt(MI613, 160, 192)))) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _614), 128, 160), extractMInt(mi(256, _613), 128, 160)), concatenateMInt(extractMInt(mi(256, _614), 160, 192), extractMInt(mi(256, _613), 160, 192)))) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI614, 128, 160), extractMInt(MI613, 128, 160)), concatenateMInt(extractMInt(MI614, 160, 192), extractMInt(MI613, 160, 192)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _613)   )
echo Debug:  Result: "SPAD1" |-> (MI613   )
[4m[1m[34mwriteKDefn punpckhdq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-punpckhdq_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: salw_r16_one[0m
[4m[1m[34mcreatespec salw_r16_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_salw_r16_one_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msalw_r16_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: salw_r16_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: shlw $0x1, %bx
\$0x1 -> 1
%pf -> 1
%sf -> 1
%af -> 1
%zf -> 1
%bx -> 1
%cf -> 1
%of -> 1

Total Circuit
CF -> 1
PF -> 1
ZF -> 1
AF -> 1
SF -> 1
RBX -> 1
OF -> 1
 -> 1

Target
ZF -> 1
CF -> 1
PF -> 1
SF -> 1
AF -> 1
RBX -> 1
OF -> 1
 -> 1

[4m[1m[34mkprove salw_r16_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_salw_r16_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_salw_r16_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput salw_r16_one[0m
[4m[1m[34msanitizeSpecOutput salw_r16_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msalw_r16_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 64))), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 64))), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 64))), 1, 2) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 64))), 1, 2) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 64))), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 64))), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _626)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI626) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _626), 48, 49), extractMInt(mi(64, _626), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _626), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI626, 48, 49), extractMInt(MI626, 48, 49))  andBool   notBool  ( eqMInt(extractMInt(MI626, 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _626), 0, 48), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 64))), 1, 17)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI626, 0, 48), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 64))), 1, 17)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(mi(64, _626), 48, 64))), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 64)), concatenateMInt(mi(1, 0), extractMInt(MI626, 48, 64))), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn salw_r16_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-salw_r16_one.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: seta_r8[0m
[4m[1m[34mcreatespec seta_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_seta_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mseta_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: seta %bh
%zf -> 1
%cf -> 1
%bh -> 1

Circuit: movsbl %bh, %ebx
%rbx -> 1
%bh -> 1
%ebx -> 1

Total Circuit
RBX -> 1
CF -> 1
ZF -> 1

Target
CF -> 1
ZF -> 1
RBX -> 1

[4m[1m[34mkprove seta_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_seta_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_seta_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput seta_r8[0m
[4m[1m[34msanitizeSpecOutput seta_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mseta_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _616))), 1, 9), mi(8, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _615), 0, 56), mi(8, 0)) ) #else ( concatenateMInt(extractMInt(mi(64, _615), 0, 56), extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), mi(1, _614))), 1, 9)), mi(17, 4)), 1, 9)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI616)), 1, 9), mi(8, 0)) ) #then ( concatenateMInt(extractMInt(MI615, 0, 56), mi(8, 0)) ) #else ( concatenateMInt(extractMInt(MI615, 0, 56), extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), MI614)), 1, 9)), mi(17, 4)), 1, 9)) ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _614) )
echo Debug:  Result: "CF" |-> (MI614 )
echo Debug:  PreResult: "ZF" |-> (mi(1, _616) )
echo Debug:  Result: "ZF" |-> (MI616 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _615))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI615)   )
[4m[1m[34mwriteKDefn seta_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-seta_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setna_rh[0m
[4m[1m[34mcreatespec setna_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setna_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetna_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: setbe %ah
%zf -> 1
%ah -> 1
%cf -> 1

Total Circuit
CF -> 1
ZF -> 1
RAX -> 1

Target
ZF -> 1
CF -> 1
RAX -> 1

[4m[1m[34mkprove setna_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setna_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setna_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setna_rh[0m
[4m[1m[34msanitizeSpecOutput setna_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetna_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RAX" |-> ((#ifMInt (eqMInt(mi(1, _616), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _615), 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _614)), extractMInt(mi(64, _615), 56, 64))) ) #else ( concatenateMInt(extractMInt(mi(64, _615), 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _616)), extractMInt(mi(64, _615), 56, 64))) ) #fi)  )
echo Debug:  Result: "RAX" |-> ((#ifMInt (eqMInt(MI616, mi(1, 0)) ) #then ( concatenateMInt(extractMInt(MI615, 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), MI614), extractMInt(MI615, 56, 64))) ) #else ( concatenateMInt(extractMInt(MI615, 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), MI616), extractMInt(MI615, 56, 64))) ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _614) )
echo Debug:  Result: "CF" |-> (MI614 )
echo Debug:  PreResult: "ZF" |-> (mi(1, _616) )
echo Debug:  Result: "ZF" |-> (MI616 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _615))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI615)   )
[4m[1m[34mwriteKDefn setna_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setna_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setnc_r8[0m
[4m[1m[34mcreatespec setnc_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnc_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnc_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .read_cf_into_rbx
%rbx -> 1
%cf -> 1

Circuit: orl %ebx, %ebx
%of -> 1
%cf -> 1
%rbx -> 1
%ebx -> 1
%zf -> 1
%sf -> 1
%af -> 1
%pf -> 1

Circuit: setge %r10b
%sf -> 1
%of -> 1
%r10b -> 1

Circuit: xorb %r10b, %bl
%bl -> 1
%cf -> 1
%of -> 1
%r10b -> 1
%pf -> 1
%af -> 1
%sf -> 1
%zf -> 1

Total Circuit
R10 -> 1
RBX -> 1
OF -> 1
PF -> 1
CF -> 1
ZF -> 1
AF -> 1
SF -> 1

Target
CF -> 1
RBX -> 1

[4m[1m[34mkprove setnc_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnc_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnc_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setnc_r8[0m
[4m[1m[34msanitizeSpecOutput setnc_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnc_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R10" |-> (mi(64, 1) )
echo Debug:  Result: "R10" |-> (mi(64, 1) )
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), mi(1, _618))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), MI618)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _619)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI619) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _619), 0, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), mi(1, _618)))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI619, 0, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), MI618))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), mi(1, _618))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), MI618)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn setnc_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setnc_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setng_r8[0m
[4m[1m[34mcreatespec setng_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setng_r8_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetng_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .read_sf_into_rbx
%rbx -> 1
%sf -> 1

Circuit: setle %bh
%sf -> 1
%zf -> 1
%bh -> 1
%of -> 1

Circuit: xchgb %bl, %bh
%bx -> 1
%bh -> 1
%bl -> 1

Total Circuit
RBX -> 1
OF -> 1
SF -> 1
ZF -> 1

Target
RBX -> 1
OF -> 1
ZF -> 1
SF -> 1

[4m[1m[34mkprove setng_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setng_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setng_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setng_r8[0m
[4m[1m[34msanitizeSpecOutput setng_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetng_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _618)), concatenateMInt(mi(7, 0), mi(1, _616))), concatenateMInt(mi(7, 0), mi(1, _619))), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _617), 0, 56), mi(8, 0)) ) #else ( concatenateMInt(extractMInt(mi(64, _617), 0, 56), mi(8, 1)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), MI618), concatenateMInt(mi(7, 0), MI616)), concatenateMInt(mi(7, 0), MI619)), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(MI617, 0, 56), mi(8, 0)) ) #else ( concatenateMInt(extractMInt(MI617, 0, 56), mi(8, 1)) ) #fi)  )
echo Debug:  PreResult: "SF" |-> (mi(1, _618) )
echo Debug:  Result: "SF" |-> (MI618 )
echo Debug:  PreResult: "ZF" |-> (mi(1, _619) )
echo Debug:  Result: "ZF" |-> (MI619 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _617)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI617) )
echo Debug:  PreResult: "OF" |-> (mi(1, _616)   )
echo Debug:  Result: "OF" |-> (MI616   )
[4m[1m[34mwriteKDefn setng_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setng_r8.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setng_rh[0m
[4m[1m[34mcreatespec setng_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setng_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetng_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: setle %ah
%ah -> 1
%of -> 1
%sf -> 1
%zf -> 1

Total Circuit
OF -> 1
SF -> 1
RAX -> 1
ZF -> 1

Target
RAX -> 1
SF -> 1
ZF -> 1
OF -> 1

[4m[1m[34mkprove setng_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setng_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setng_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setng_rh[0m
[4m[1m[34msanitizeSpecOutput setng_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetng_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RAX" |-> ((#ifMInt (eqMInt(concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _618)), concatenateMInt(mi(7, 0), mi(1, _616))), concatenateMInt(mi(7, 0), mi(1, _619))), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _617), 0, 48), concatenateMInt(mi(8, 0), extractMInt(mi(64, _617), 56, 64))) ) #else ( concatenateMInt(extractMInt(mi(64, _617), 0, 48), concatenateMInt(mi(8, 1), extractMInt(mi(64, _617), 56, 64))) ) #fi)  )
echo Debug:  Result: "RAX" |-> ((#ifMInt (eqMInt(concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), MI618), concatenateMInt(mi(7, 0), MI616)), concatenateMInt(mi(7, 0), MI619)), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(MI617, 0, 48), concatenateMInt(mi(8, 0), extractMInt(MI617, 56, 64))) ) #else ( concatenateMInt(extractMInt(MI617, 0, 48), concatenateMInt(mi(8, 1), extractMInt(MI617, 56, 64))) ) #fi)  )
echo Debug:  PreResult: "SF" |-> (mi(1, _618) )
echo Debug:  Result: "SF" |-> (MI618 )
echo Debug:  PreResult: "ZF" |-> (mi(1, _619) )
echo Debug:  Result: "ZF" |-> (MI619 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _617)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI617) )
echo Debug:  PreResult: "OF" |-> (mi(1, _616)   )
echo Debug:  Result: "OF" |-> (MI616   )
[4m[1m[34mwriteKDefn setng_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setng_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setnl_rh[0m
[4m[1m[34mcreatespec setnl_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnl_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnl_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .read_of_into_rbx
%rbx -> 1
%of -> 1

Circuit: setge %bh
%bh -> 1
%of -> 1
%sf -> 1

Circuit: movswq %bx, %rax
%bx -> 1
%rax -> 1

Total Circuit
SF -> 1
RAX -> 1
OF -> 1
RBX -> 1

Target
OF -> 1
SF -> 1
RAX -> 1

[4m[1m[34mkprove setnl_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnl_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setnl_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setnl_rh[0m
[4m[1m[34msanitizeSpecOutput setnl_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetnl_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _616), 0, 48), concatenateMInt(xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _617)), concatenateMInt(mi(7, 0), mi(1, _615))), mi(8, 1)), extractMInt(mi(64, _616), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI616, 0, 48), concatenateMInt(xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI617), concatenateMInt(mi(7, 0), MI615)), mi(8, 1)), extractMInt(MI616, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(xorMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _617)), concatenateMInt(mi(7, 0), mi(1, _615))), mi(8, 1)), concatenateMInt(mi(7, 0), mi(1, _615)))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(xorMInt(xorMInt(concatenateMInt(mi(7, 0), MI617), concatenateMInt(mi(7, 0), MI615)), mi(8, 1)), concatenateMInt(mi(7, 0), MI615))) )
echo Debug:  PreResult: "SF" |-> (mi(1, _617) )
echo Debug:  Result: "SF" |-> (MI617 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _616)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI616) )
echo Debug:  PreResult: "OF" |-> (mi(1, _615)   )
echo Debug:  Result: "OF" |-> (MI615   )
[4m[1m[34mwriteKDefn setnl_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setnl_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setp_rh[0m
[4m[1m[34mcreatespec setp_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setp_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetp_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .read_pf_into_rbx
%rbx -> 1
%pf -> 1

Circuit: xorl %eax, %eax
%rax -> 1
%of -> 1
%cf -> 1
%sf -> 1
%eax -> 1
%af -> 1
%pf -> 1
%zf -> 1

Circuit: addb %bl, %ah
%zf -> 1
%pf -> 1
%sf -> 1
%af -> 1
%cf -> 1
%of -> 1
%ah -> 1
%bl -> 1

Total Circuit
PF -> 1
CF -> 1
ZF -> 1
AF -> 1
SF -> 1
RAX -> 1
RBX -> 1
OF -> 1

Target
RAX -> 1
PF -> 1

[4m[1m[34mkprove setp_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setp_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setp_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setp_rh[0m
[4m[1m[34msanitizeSpecOutput setp_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetp_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), concatenateMInt(mi(7, 0), mi(1, _618))), concatenateMInt(mi(7, 0), mi(1, _618))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), concatenateMInt(mi(7, 0), MI618)), concatenateMInt(mi(7, 0), MI618)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(mi(1, _618))  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(MI618)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _619)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI619) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _619), 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _618)), extractMInt(mi(64, _619), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI619, 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), MI618), extractMInt(MI619, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(63, 0), mi(1, _618)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(63, 0), MI618) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(7, 0), mi(1, _618)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(7, 0), MI618), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn setp_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setp_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setpe_rh[0m
[4m[1m[34mcreatespec setpe_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setpe_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetpe_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .read_pf_into_rbx
%pf -> 1
%rbx -> 1

Circuit: movw %bx, %ax
%ax -> 1
%bx -> 1

Circuit: xchgb %al, %bh
%bh -> 1
%al -> 1

Circuit: xorw %bx, %ax
%pf -> 1
%sf -> 1
%af -> 1
%ax -> 1
%bx -> 1
%zf -> 1
%cf -> 1
%of -> 1

Total Circuit
RBX -> 1
OF -> 1
RAX -> 1
SF -> 1
AF -> 1
ZF -> 1
PF -> 1
CF -> 1

Target
PF -> 1
RAX -> 1

[4m[1m[34mkprove setpe_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setpe_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setpe_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setpe_rh[0m
[4m[1m[34msanitizeSpecOutput setpe_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetpe_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(concatenateMInt(mi(7, 0), mi(1, _618)), mi(8, 0)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(concatenateMInt(mi(7, 0), MI618), mi(8, 0)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _619)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI619) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _619), 0, 48), concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), mi(1, _618)), mi(8, 0)), extractMInt(mi(64, _619), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI619, 0, 48), concatenateMInt(xorMInt(concatenateMInt(mi(7, 0), MI618), mi(8, 0)), extractMInt(MI619, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _618)), concatenateMInt(mi(7, 0), mi(1, _618)))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI618), concatenateMInt(mi(7, 0), MI618))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _618)), concatenateMInt(mi(7, 0), mi(1, _618))), mi(16, 0)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(concatenateMInt(concatenateMInt(mi(7, 0), MI618), concatenateMInt(mi(7, 0), MI618)), mi(16, 0)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn setpe_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setpe_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: sets_rh[0m
[4m[1m[34mcreatespec sets_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sets_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msets_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .read_sf_into_rcx
%sf -> 1
%rcx -> 1

Circuit: xorl %eax, %eax
%rax -> 1
%cf -> 1
%of -> 1
%pf -> 1
%eax -> 1
%af -> 1
%sf -> 1
%zf -> 1

Circuit: addb %cl, %ah
%ah -> 1
%of -> 1
%cf -> 1
%af -> 1
%sf -> 1
%pf -> 1
%cl -> 1
%zf -> 1

Circuit: cltq
%eax -> 1
%rax -> 1

Total Circuit
CF -> 1
PF -> 1
RCX -> 1
ZF -> 1
AF -> 1
SF -> 1
RAX -> 1
OF -> 1

Target
RAX -> 1
SF -> 1

[4m[1m[34mkprove sets_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sets_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sets_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput sets_rh[0m
[4m[1m[34msanitizeSpecOutput sets_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msets_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), concatenateMInt(mi(7, 0), mi(1, _619))), concatenateMInt(mi(7, 0), mi(1, _619))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 0), concatenateMInt(mi(7, 0), MI619)), concatenateMInt(mi(7, 0), MI619)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(63, 0), mi(1, _619)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(63, 0), MI619) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(mi(1, _619))  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( uvalueMInt(MI619)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _618)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI618) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _618), 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _619)), extractMInt(mi(64, _618), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI618, 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), MI619), extractMInt(MI618, 56, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(7, 0), mi(1, _619)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(7, 0), MI619), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn sets_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-sets_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: unpckhps_xmm_xmm[0m
[4m[1m[34mcreatespec unpckhps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_unpckhps_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34munpckhps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_64_xmm2_xmm12_xmm13
%xmm12 -> 1
%xmm2 -> 1
%xmm13 -> 1

Circuit: callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11
%xmm1 -> 1
%xmm9 -> 1
%xmm10 -> 1
%xmm8 -> 1
%xmm11 -> 1

Circuit: vmaxss %xmm13, %xmm13, %xmm0
%xmm13 -> 1
avx -> 1
%xmm0 -> 1
%ymm0 -> 1

Circuit: vmovss %xmm11, %xmm13, %xmm9
%xmm11 -> 1
%ymm9 -> 1
%xmm9 -> 1
avx -> 1
%xmm13 -> 1

Circuit: movsldup %xmm0, %xmm13
%xmm13 -> 1
%xmm0 -> 1
pni -> 1

Circuit: vmovss %xmm10, %xmm13, %xmm8
%ymm8 -> 1
%xmm8 -> 1
%xmm13 -> 1
avx -> 1
%xmm10 -> 1

Circuit: callq .move_64_128_xmm8_xmm9_xmm1
%xmm8 -> 1
%xmm9 -> 1
%xmm1 -> 1

Total Circuit
YMM9 -> 1
YMM0 -> 1
YMM11 -> 1
YMM8 -> 1
YMM1 -> 1
YMM2 -> 1
YMM13 -> 1
 -> 1
YMM12 -> 1
YMM10 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove unpckhps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_unpckhps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_unpckhps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput unpckhps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput unpckhps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34munpckhps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _620), 192, 256)) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(192, 0), extractMInt(MI620, 192, 256)) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _620) )
echo Debug:  Result: "YMM2" |-> (MI620 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _619), 0, 128), concatenateMInt(concatenateMInt(extractMInt(mi(256, _620), 128, 160), extractMInt(mi(256, _619), 128, 160)), concatenateMInt(extractMInt(mi(256, _620), 160, 192), extractMInt(mi(256, _619), 160, 192)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI619, 0, 128), concatenateMInt(concatenateMInt(extractMInt(MI620, 128, 160), extractMInt(MI619, 128, 160)), concatenateMInt(extractMInt(MI620, 160, 192), extractMInt(MI619, 160, 192)))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(192, 0), concatenateMInt(extractMInt(mi(256, _620), 160, 192), extractMInt(mi(256, _620), 160, 192))) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(192, 0), concatenateMInt(extractMInt(MI620, 160, 192), extractMInt(MI620, 160, 192))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 160, 192)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 160, 192)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _619), 128, 160)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(MI619, 128, 160)) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(64, 0), extractMInt(mi(256, _620), 160, 192)), extractMInt(mi(256, _619), 160, 192))) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(64, 0), extractMInt(MI620, 160, 192)), extractMInt(MI619, 160, 192))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _619) )
echo Debug:  Result: "SPAD1" |-> (MI619 )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(64, 0), extractMInt(mi(256, _620), 128, 160)), extractMInt(mi(256, _619), 128, 160))) )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(64, 0), extractMInt(MI620, 128, 160)), extractMInt(MI619, 128, 160))) )
echo Debug:  PreResult: "YMM0" |-> (concatenateMInt(concatenateMInt(mi(192, 0), extractMInt(mi(256, _620), 128, 160)), extractMInt(mi(256, _620), 160, 192))   )
echo Debug:  Result: "YMM0" |-> (concatenateMInt(concatenateMInt(mi(192, 0), extractMInt(MI620, 128, 160)), extractMInt(MI620, 160, 192))   )
[4m[1m[34mwriteKDefn unpckhps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-unpckhps_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vandnpd_ymm_ymm_ymm[0m
[4m[1m[34mcreatespec vandnpd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandnpd_ymm_ymm_ymm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvandnpd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_256_128_ymm3_xmm12_xmm13
%xmm12 -> 1
%ymm3 -> 1
%xmm13 -> 1

Circuit: pandn %xmm3, %xmm2
%xmm2 -> 1
%xmm3 -> 1
sse2 -> 1

Circuit: callq .move_256_128_ymm2_xmm10_xmm11
%xmm10 -> 1
%xmm11 -> 1
%ymm2 -> 1

Circuit: vmovdqa %xmm10, %xmm14
avx -> 1
%xmm10 -> 1
%ymm14 -> 1
%xmm14 -> 1

Circuit: vandnpd %xmm13, %xmm11, %xmm11
%xmm13 -> 1
avx -> 1
%ymm11 -> 1
%xmm11 -> 1

Circuit: callq .move_128_256_xmm10_xmm11_ymm3
%ymm3 -> 1
%xmm11 -> 1
%xmm10 -> 1

Circuit: vorpd %ymm3, %ymm14, %ymm1
avx -> 1
%ymm3 -> 1
%ymm14 -> 1
%ymm1 -> 1

Total Circuit
YMM2 -> 1
YMM1 -> 1
YMM11 -> 1
YMM13 -> 1
YMM3 -> 1
YMM14 -> 1
 -> 1
YMM12 -> 1
YMM10 -> 1

Target
YMM2 -> 1
YMM1 -> 1
YMM3 -> 1
 -> 1

[4m[1m[34mkprove vandnpd_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandnpd_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandnpd_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vandnpd_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vandnpd_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvandnpd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _620), 128, 256)) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(128, 0), extractMInt(MI620, 128, 256)) )
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(extractMInt(mi(256, _619), 0, 128), concatenateMInt(xorMInt(orMInt(extractMInt(mi(256, _619), 128, 192), extractMInt(mi(256, _620), 128, 192)), extractMInt(mi(256, _619), 128, 192)), xorMInt(orMInt(extractMInt(mi(256, _619), 192, 256), extractMInt(mi(256, _620), 192, 256)), extractMInt(mi(256, _619), 192, 256)))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(extractMInt(MI619, 0, 128), concatenateMInt(xorMInt(orMInt(extractMInt(MI619, 128, 192), extractMInt(MI620, 128, 192)), extractMInt(MI619, 128, 192)), xorMInt(orMInt(extractMInt(MI619, 192, 256), extractMInt(MI620, 192, 256)), extractMInt(MI619, 192, 256)))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _620), 0, 128)) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(128, 0), extractMInt(MI620, 0, 128)) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(extractMInt(mi(256, _620), 0, 64), extractMInt(mi(256, _619), 0, 64)), extractMInt(mi(256, _619), 0, 64)), xorMInt(orMInt(extractMInt(mi(256, _620), 64, 128), extractMInt(mi(256, _619), 64, 128)), extractMInt(mi(256, _619), 64, 128))), concatenateMInt(xorMInt(orMInt(extractMInt(mi(256, _619), 128, 192), extractMInt(mi(256, _620), 128, 192)), extractMInt(mi(256, _619), 128, 192)), xorMInt(orMInt(extractMInt(mi(256, _619), 192, 256), extractMInt(mi(256, _620), 192, 256)), extractMInt(mi(256, _619), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(extractMInt(MI620, 0, 64), extractMInt(MI619, 0, 64)), extractMInt(MI619, 0, 64)), xorMInt(orMInt(extractMInt(MI620, 64, 128), extractMInt(MI619, 64, 128)), extractMInt(MI619, 64, 128))), concatenateMInt(xorMInt(orMInt(extractMInt(MI619, 128, 192), extractMInt(MI620, 128, 192)), extractMInt(MI619, 128, 192)), xorMInt(orMInt(extractMInt(MI619, 192, 256), extractMInt(MI620, 192, 256)), extractMInt(MI619, 192, 256)))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(extractMInt(mi(256, _619), 128, 192), extractMInt(mi(256, _620), 128, 192)), extractMInt(mi(256, _619), 128, 192)), xorMInt(orMInt(extractMInt(mi(256, _619), 192, 256), extractMInt(mi(256, _620), 192, 256)), extractMInt(mi(256, _619), 192, 256)))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(extractMInt(MI619, 128, 192), extractMInt(MI620, 128, 192)), extractMInt(MI619, 128, 192)), xorMInt(orMInt(extractMInt(MI619, 192, 256), extractMInt(MI620, 192, 256)), extractMInt(MI619, 192, 256)))) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(extractMInt(mi(256, _620), 0, 64), extractMInt(mi(256, _619), 0, 64)), extractMInt(mi(256, _619), 0, 64)), xorMInt(orMInt(extractMInt(mi(256, _620), 64, 128), extractMInt(mi(256, _619), 64, 128)), extractMInt(mi(256, _619), 64, 128))), concatenateMInt(xorMInt(orMInt(extractMInt(mi(256, _619), 128, 192), extractMInt(mi(256, _620), 128, 192)), extractMInt(mi(256, _619), 128, 192)), xorMInt(orMInt(extractMInt(mi(256, _619), 192, 256), extractMInt(mi(256, _620), 192, 256)), extractMInt(mi(256, _619), 192, 256)))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(extractMInt(MI620, 0, 64), extractMInt(MI619, 0, 64)), extractMInt(MI619, 0, 64)), xorMInt(orMInt(extractMInt(MI620, 64, 128), extractMInt(MI619, 64, 128)), extractMInt(MI619, 64, 128))), concatenateMInt(xorMInt(orMInt(extractMInt(MI619, 128, 192), extractMInt(MI620, 128, 192)), extractMInt(MI619, 128, 192)), xorMInt(orMInt(extractMInt(MI619, 192, 256), extractMInt(MI620, 192, 256)), extractMInt(MI619, 192, 256)))) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(extractMInt(mi(256, _620), 0, 64), extractMInt(mi(256, _619), 0, 64)), extractMInt(mi(256, _619), 0, 64)), xorMInt(orMInt(extractMInt(mi(256, _620), 64, 128), extractMInt(mi(256, _619), 64, 128)), extractMInt(mi(256, _619), 64, 128)))) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(extractMInt(MI620, 0, 64), extractMInt(MI619, 0, 64)), extractMInt(MI619, 0, 64)), xorMInt(orMInt(extractMInt(MI620, 64, 128), extractMInt(MI619, 64, 128)), extractMInt(MI619, 64, 128)))) )
echo Debug:  PreResult: "YMM14" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(extractMInt(mi(256, _619), 128, 192), extractMInt(mi(256, _620), 128, 192)), extractMInt(mi(256, _619), 128, 192)), xorMInt(orMInt(extractMInt(mi(256, _619), 192, 256), extractMInt(mi(256, _620), 192, 256)), extractMInt(mi(256, _619), 192, 256)))) )
echo Debug:  Result: "YMM14" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(extractMInt(MI619, 128, 192), extractMInt(MI620, 128, 192)), extractMInt(MI619, 128, 192)), xorMInt(orMInt(extractMInt(MI619, 192, 256), extractMInt(MI620, 192, 256)), extractMInt(MI619, 192, 256)))) )
[4m[1m[34mwriteKDefn vandnpd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vandnpd_ymm_ymm_ymm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vdivss_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vdivss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vdivss_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvdivss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movdqu %xmm3, %xmm3
%xmm3 -> 1
sse2 -> 1

Circuit: divss %xmm3, %xmm2
%xmm2 -> 1
%xmm3 -> 1
sse -> 1

Circuit: vmovaps %xmm2, %xmm1
%ymm1 -> 1
avx -> 1
%xmm1 -> 1
%xmm2 -> 1

Total Circuit
 -> 1
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1

Target
 -> 1
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove vdivss_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vdivss_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vdivss_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vdivss_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vdivss_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvdivss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(extractMInt(mi(256, _614), 0, 224), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8) ) , 32)) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(extractMInt(MI614, 0, 224), Float2MInt( ( MInt2Float(extractMInt(MI615, 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(MI614, 224, 256), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _614), 128, 224), Float2MInt( ( MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8) ) , 32))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI614, 128, 224), Float2MInt( ( MInt2Float(extractMInt(MI615, 224, 256), 24, 8)  /Float  MInt2Float(extractMInt(MI614, 224, 256), 24, 8) ) , 32))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _615)   )
echo Debug:  Result: "YMM3" |-> (MI615   )
[4m[1m[34mwriteKDefn vdivss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vdivss_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmadd132ss_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfmadd132ss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd132ss_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd132ss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vfmadd231ss %xmm3, %xmm1, %xmm2
%xmm3 -> 1
%xmm2 -> 1
%xmm1 -> 1
%ymm2 -> 1
fma -> 1

Circuit: callq .move_128_064_xmm1_r12_r13
%xmm1 -> 1
%r13 -> 1
%r12 -> 1

Circuit: vmovss %xmm2, %xmm2, %xmm1
%xmm1 -> 1
%xmm2 -> 1
avx -> 1
%ymm1 -> 1

Circuit: callq .move_064_128_r12_r13_xmm1
%r12 -> 1
%r13 -> 1
%xmm1 -> 1

Circuit: movss %xmm2, %xmm1
%xmm2 -> 1
%xmm1 -> 1
sse -> 1

Total Circuit
R12 -> 1
 -> 1
YMM3 -> 1
R13 -> 1
YMM1 -> 1
YMM2 -> 1

Target
YMM3 -> 1
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove vfmadd132ss_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd132ss_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd132ss_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmadd132ss_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmadd132ss_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd132ss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _616), 128, 224), Float2MInt( ( MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8) )  ) , 32))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI616, 128, 224), Float2MInt( ( MInt2Float(extractMInt(MI616, 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(MI615, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 224, 256), 24, 8) )  ) , 32))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 224)), Float2MInt( ( MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8) )  ) , 32)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 224)), Float2MInt( ( MInt2Float(extractMInt(MI616, 224, 256), 24, 8)  +Float  ( MInt2Float(extractMInt(MI615, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 224, 256), 24, 8) )  ) , 32)) )
echo Debug:  PreResult: "R12" |-> (extractMInt(mi(256, _615), 192, 256) )
echo Debug:  Result: "R12" |-> (extractMInt(MI615, 192, 256) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _617) )
echo Debug:  Result: "YMM3" |-> (MI617 )
echo Debug:  PreResult: "R13" |-> (extractMInt(mi(256, _615), 128, 192) )
echo Debug:  Result: "R13" |-> (extractMInt(MI615, 128, 192) )
[4m[1m[34mwriteKDefn vfmadd132ss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmadd132ss_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmsub213pd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfmsub213pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub213pd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub213pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vfmsub132pd %xmm1, %xmm3, %xmm2
fma -> 1
%ymm2 -> 1
%xmm1 -> 1
%xmm2 -> 1
%xmm3 -> 1

Circuit: vmovdqa %xmm2, %xmm12
%xmm2 -> 1
avx -> 1
%xmm12 -> 1
%ymm12 -> 1

Circuit: vmovups %ymm12, %ymm1
%ymm12 -> 1
%ymm1 -> 1
avx -> 1

Total Circuit
YMM12 -> 1
 -> 1
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1

Target
YMM2 -> 1
YMM1 -> 1
YMM3 -> 1
 -> 1

[4m[1m[34mkprove vfmsub213pd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub213pd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub213pd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmsub213pd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmsub213pd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub213pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _614), 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI615, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI614, 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(MI616, 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI614, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI616, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _614), 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI615, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI614, 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(MI616, 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI614, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI616, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _614), 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI615, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI614, 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(MI616, 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI614, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI616, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _616)   )
echo Debug:  Result: "YMM3" |-> (MI616   )
[4m[1m[34mwriteKDefn vfmsub213pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmsub213pd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmsub231pd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfmsub231pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub231pd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub231pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vfmsub132pd %xmm3, %xmm1, %xmm2
%xmm2 -> 1
%xmm3 -> 1
%xmm1 -> 1
%ymm2 -> 1
fma -> 1

Circuit: movaps %xmm2, %xmm1
%xmm2 -> 1
%xmm1 -> 1
sse -> 1

Circuit: vmovsd %xmm2, %xmm1, %xmm1
%ymm1 -> 1
avx -> 1
%xmm1 -> 1
%xmm2 -> 1

Total Circuit
YMM2 -> 1
YMM1 -> 1
YMM3 -> 1
 -> 1

Target
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1
 -> 1

[4m[1m[34mkprove vfmsub231pd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub231pd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub231pd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmsub231pd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmsub231pd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub231pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _614), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _613), 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _613), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI614, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(MI613, 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI614, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI613, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _614), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _613), 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _613), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI614, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(MI613, 128, 192), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI614, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI613, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _615)   )
echo Debug:  Result: "YMM3" |-> (MI615   )
[4m[1m[34mwriteKDefn vfmsub231pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmsub231pd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmsub231sd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfmsub231sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub231sd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub231sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vpbroadcastq %xmm1, %ymm0
%ymm0 -> 1
avx2 -> 1
%xmm1 -> 1

Circuit: vfmsub132pd %xmm3, %xmm0, %xmm2
fma -> 1
%ymm2 -> 1
%xmm3 -> 1
%xmm2 -> 1
%xmm0 -> 1

Circuit: vmovsd %xmm2, %xmm1, %xmm1
%ymm1 -> 1
avx -> 1
%xmm1 -> 1
%xmm2 -> 1

Total Circuit
 -> 1
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1
YMM0 -> 1

Target
YMM3 -> 1
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove vfmsub231sd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub231sd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsub231sd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmsub231sd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmsub231sd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsub231sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI615, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI616, 128, 192), 53, 11) )  -Float  MInt2Float(extractMInt(MI614, 192, 256), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI616, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI614, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _614), 128, 192), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _614), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI614, 128, 192), Float2MInt( (  ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI616, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI614, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _616) )
echo Debug:  Result: "YMM3" |-> (MI616 )
echo Debug:  PreResult: "YMM0" |-> (concatenateMInt(concatenateMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _614), 192, 256)), concatenateMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _614), 192, 256)))   )
echo Debug:  Result: "YMM0" |-> (concatenateMInt(concatenateMInt(extractMInt(MI614, 192, 256), extractMInt(MI614, 192, 256)), concatenateMInt(extractMInt(MI614, 192, 256), extractMInt(MI614, 192, 256)))   )
[4m[1m[34mwriteKDefn vfmsub231sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmsub231sd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmadd132ss_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfnmadd132ss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd132ss_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd132ss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vpandn %xmm2, %xmm2, %xmm11
%xmm11 -> 1
%ymm11 -> 1
avx -> 1
%xmm2 -> 1

Circuit: vfnmsub213ps %xmm2, %xmm11, %xmm2
%xmm2 -> 1
fma -> 1
%xmm11 -> 1
%ymm2 -> 1

Circuit: vfnmsub132ss %xmm3, %xmm2, %xmm1
%xmm1 -> 1
%xmm3 -> 1
%xmm2 -> 1
fma -> 1
%ymm1 -> 1

Total Circuit
YMM3 -> 1
 -> 1
YMM1 -> 1
YMM2 -> 1
YMM11 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1
YMM3 -> 1

[4m[1m[34mkprove vfnmadd132ss_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd132ss_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd132ss_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmadd132ss_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmadd132ss_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd132ss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8) ) , 32), Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(MI615, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(MI615, 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(MI615, 192, 224), 24, 8) ) , 32), Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(MI615, 224, 256), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _614), 128, 224), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) )  +Float  MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8) ) , 32))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI614, 128, 224), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI614, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) )  +Float  MInt2Float(extractMInt(MI615, 224, 256), 24, 8) ) , 32))) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _616)   )
echo Debug:  Result: "YMM3" |-> (MI616   )
[4m[1m[34mwriteKDefn vfnmadd132ss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmadd132ss_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmadd213pd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfnmadd213pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd213pd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd213pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vfnmadd231pd %xmm1, %xmm2, %xmm3
%xmm1 -> 1
%xmm3 -> 1
%xmm2 -> 1
%ymm3 -> 1
fma -> 1

Circuit: callq .move_128_064_xmm3_r10_r11
%r11 -> 1
%xmm3 -> 1
%r10 -> 1

Circuit: vzeroall
avx -> 1
%ymm8 -> 1
%ymm11 -> 1
%ymm7 -> 1
%ymm10 -> 1
%ymm5 -> 1
%ymm6 -> 1
%ymm15 -> 1
%ymm1 -> 1
%ymm2 -> 1
%ymm13 -> 1
%ymm0 -> 1
%ymm9 -> 1
%ymm12 -> 1
%ymm14 -> 1
%ymm4 -> 1
%ymm3 -> 1

Circuit: callq .move_064_128_r10_r11_xmm1
%xmm1 -> 1
%r10 -> 1
%r11 -> 1

Total Circuit
YMM12 -> 1
YMM3 -> 1
YMM5 -> 1
YMM14 -> 1
YMM7 -> 1
YMM0 -> 1
YMM9 -> 1
YMM13 -> 1
YMM1 -> 1
YMM2 -> 1
YMM11 -> 1
R11 -> 1
 -> 1
YMM10 -> 1
YMM4 -> 1
R10 -> 1
YMM15 -> 1
YMM6 -> 1
YMM8 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1
YMM3 -> 1

[4m[1m[34mkprove vfnmadd213pd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd213pd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd213pd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmadd213pd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmadd213pd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd213pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "R10" |-> (Float2MInt( ( MInt2Float(extractMInt(mi(256, _630), 192, 256), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _629), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _628), 192, 256), 53, 11) ) ) ) , 64) )
echo Debug:  Result: "R10" |-> (Float2MInt( ( MInt2Float(extractMInt(MI630, 192, 256), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI629, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI628, 192, 256), 53, 11) ) ) ) , 64) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _630), 128, 192), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _629), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _628), 128, 192), 53, 11) ) ) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _630), 192, 256), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _629), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _628), 192, 256), 53, 11) ) ) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI630, 128, 192), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI629, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI628, 128, 192), 53, 11) ) ) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI630, 192, 256), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI629, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI628, 192, 256), 53, 11) ) ) ) , 64))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "R11" |-> (Float2MInt( ( MInt2Float(extractMInt(mi(256, _630), 128, 192), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _629), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _628), 128, 192), 53, 11) ) ) ) , 64) )
echo Debug:  Result: "R11" |-> (Float2MInt( ( MInt2Float(extractMInt(MI630, 128, 192), 53, 11)  +Float  negateFloat( ( MInt2Float(extractMInt(MI629, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI628, 128, 192), 53, 11) ) ) ) , 64) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vfnmadd213pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmadd213pd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmadd231ps_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vfnmadd231ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd231ps_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd231ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vfnmadd132ps %xmm3, %xmm1, %xmm2
fma -> 1
%xmm1 -> 1
%ymm2 -> 1
%xmm2 -> 1
%xmm3 -> 1

Circuit: callq .move_128_064_xmm2_r12_r13
%r12 -> 1
%xmm2 -> 1
%r13 -> 1

Circuit: vzeroall
%ymm1 -> 1
%ymm3 -> 1
%ymm14 -> 1
%ymm12 -> 1
%ymm4 -> 1
%ymm13 -> 1
%ymm9 -> 1
%ymm0 -> 1
%ymm2 -> 1
%ymm6 -> 1
%ymm5 -> 1
%ymm15 -> 1
%ymm11 -> 1
%ymm8 -> 1
%ymm10 -> 1
%ymm7 -> 1
avx -> 1

Circuit: callq .move_064_128_r12_r13_xmm1
%xmm1 -> 1
%r13 -> 1
%r12 -> 1

Total Circuit
YMM6 -> 1
YMM8 -> 1
YMM15 -> 1
YMM10 -> 1
YMM4 -> 1
 -> 1
YMM13 -> 1
YMM2 -> 1
YMM1 -> 1
YMM11 -> 1
YMM0 -> 1
YMM9 -> 1
YMM7 -> 1
YMM12 -> 1
R13 -> 1
YMM3 -> 1
YMM14 -> 1
R12 -> 1
YMM5 -> 1

Target
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vfnmadd231ps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd231ps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd231ps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmadd231ps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmadd231ps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd231ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _628), 128, 160), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _629), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _630), 128, 160), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _628), 160, 192), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _629), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _630), 160, 192), 24, 8) ) ) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _628), 192, 224), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _629), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _630), 192, 224), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _628), 224, 256), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _629), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _630), 224, 256), 24, 8) ) ) ) , 32)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI628, 128, 160), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI629, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI630, 128, 160), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI628, 160, 192), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI629, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI630, 160, 192), 24, 8) ) ) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI628, 192, 224), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI629, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI630, 192, 224), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI628, 224, 256), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI629, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI630, 224, 256), 24, 8) ) ) ) , 32)))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "R12" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _628), 192, 224), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _629), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _630), 192, 224), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _628), 224, 256), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _629), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _630), 224, 256), 24, 8) ) ) ) , 32)) )
echo Debug:  Result: "R12" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI628, 192, 224), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI629, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI630, 192, 224), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI628, 224, 256), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI629, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI630, 224, 256), 24, 8) ) ) ) , 32)) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "R13" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _628), 128, 160), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _629), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _630), 128, 160), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _628), 160, 192), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(mi(256, _629), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _630), 160, 192), 24, 8) ) ) ) , 32)) )
echo Debug:  Result: "R13" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI628, 128, 160), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI629, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI630, 128, 160), 24, 8) ) ) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI628, 160, 192), 24, 8)  +Float  negateFloat( ( MInt2Float(extractMInt(MI629, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI630, 160, 192), 24, 8) ) ) ) , 32)) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vfnmadd231ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmadd231ps_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vhaddpd_ymm_ymm_ymm[0m
[4m[1m[34mcreatespec vhaddpd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhaddpd_ymm_ymm_ymm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvhaddpd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_256_128_ymm3_xmm12_xmm13
%xmm13 -> 1
%ymm3 -> 1
%xmm12 -> 1

Circuit: vmovdqa %xmm13, %xmm0
%ymm0 -> 1
%xmm13 -> 1
%xmm0 -> 1
avx -> 1

Circuit: callq .move_256_128_ymm2_xmm8_xmm9
%xmm9 -> 1
%ymm2 -> 1
%xmm8 -> 1

Circuit: haddpd %xmm0, %xmm9
%xmm0 -> 1
pni -> 1
%xmm9 -> 1

Circuit: vhaddpd %xmm3, %xmm2, %xmm8
%xmm3 -> 1
%xmm2 -> 1
%xmm8 -> 1
avx -> 1
%ymm8 -> 1

Circuit: callq .move_128_256_xmm8_xmm9_ymm1
%xmm8 -> 1
%ymm1 -> 1
%xmm9 -> 1

Total Circuit
YMM8 -> 1
 -> 1
YMM13 -> 1
YMM1 -> 1
YMM2 -> 1
YMM0 -> 1
YMM9 -> 1
YMM12 -> 1
YMM3 -> 1

Target
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove vhaddpd_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhaddpd_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhaddpd_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vhaddpd_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vhaddpd_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvhaddpd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _620), 128, 256)) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(128, 0), extractMInt(MI620, 128, 256)) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _619) )
echo Debug:  Result: "YMM2" |-> (MI619 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _620), 0, 64), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _620), 64, 128), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _619), 0, 64), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _619), 64, 128), 53, 11) ) , 64)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _620), 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _620), 192, 256), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _619), 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _619), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI620, 0, 64), 53, 11)  +Float  MInt2Float(extractMInt(MI620, 64, 128), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI619, 0, 64), 53, 11)  +Float  MInt2Float(extractMInt(MI619, 64, 128), 53, 11) ) , 64)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI620, 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(MI620, 192, 256), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI619, 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(MI619, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _620), 0, 128)) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(128, 0), extractMInt(MI620, 0, 128)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _620) )
echo Debug:  Result: "YMM3" |-> (MI620 )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _620), 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _620), 192, 256), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _619), 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _619), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI620, 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(MI620, 192, 256), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI619, 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(MI619, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _620), 0, 64), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _620), 64, 128), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _619), 0, 64), 53, 11)  +Float  MInt2Float(extractMInt(mi(256, _619), 64, 128), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI620, 0, 64), 53, 11)  +Float  MInt2Float(extractMInt(MI620, 64, 128), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI619, 0, 64), 53, 11)  +Float  MInt2Float(extractMInt(MI619, 64, 128), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM0" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _620), 0, 128))   )
echo Debug:  Result: "YMM0" |-> (concatenateMInt(mi(128, 0), extractMInt(MI620, 0, 128))   )
[4m[1m[34mwriteKDefn vhaddpd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vhaddpd_ymm_ymm_ymm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vhsubpd_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vhsubpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhsubpd_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvhsubpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: movddup %xmm2, %xmm9
%xmm2 -> 1
%xmm9 -> 1
pni -> 1

Circuit: vunpcklpd %xmm3, %xmm9, %xmm1
avx -> 1
%xmm1 -> 1
%xmm9 -> 1
%xmm3 -> 1
%ymm1 -> 1

Circuit: vmovhlps %xmm2, %xmm3, %xmm8
%xmm2 -> 1
%xmm3 -> 1
%xmm8 -> 1
avx -> 1
%ymm8 -> 1

Circuit: subpd %xmm8, %xmm1
%xmm1 -> 1
sse2 -> 1
%xmm8 -> 1

Total Circuit
YMM9 -> 1
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1
YMM8 -> 1
 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1
YMM3 -> 1

[4m[1m[34mkprove vhsubpd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhsubpd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhsubpd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vhsubpd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vhsubpd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvhsubpd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _616) )
echo Debug:  Result: "YMM2" |-> (MI616 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _617), 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI617, 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(MI617, 128, 192), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(MI616, 192, 256), 53, 11)  -Float  MInt2Float(extractMInt(MI616, 128, 192), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _617) )
echo Debug:  Result: "YMM3" |-> (MI617 )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _617), 128, 192), extractMInt(mi(256, _616), 128, 192))) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI617, 128, 192), extractMInt(MI616, 128, 192))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _616), 192, 256), extractMInt(mi(256, _616), 192, 256)))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI616, 192, 256), extractMInt(MI616, 192, 256)))   )
[4m[1m[34mwriteKDefn vhsubpd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vhsubpd_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vminss_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vminss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vminss_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvminss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovdqu %xmm2, %xmm1
%ymm1 -> 1
%xmm2 -> 1
avx -> 1
%xmm1 -> 1

Circuit: minss %xmm3, %xmm1
%xmm3 -> 1
sse -> 1
%xmm1 -> 1

Total Circuit
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1
 -> 1

Target
 -> 1
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove vminss_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vminss_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vminss_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vminss_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vminss_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvminss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(mi(256, _614), 128, 224)), Float2MInt(minFloat(MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8), MInt2Float(extractMInt(mi(256, _614), 224, 256), 24, 8)), 32)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(mi(128, 0), extractMInt(MI614, 128, 224)), Float2MInt(minFloat(MInt2Float(extractMInt(MI615, 224, 256), 24, 8), MInt2Float(extractMInt(MI614, 224, 256), 24, 8)), 32)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _615)   )
echo Debug:  Result: "YMM3" |-> (MI615   )
[4m[1m[34mwriteKDefn vminss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vminss_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovd_xmm_r32[0m
[4m[1m[34mcreatespec vmovd_xmm_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovd_xmm_r32_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovd_xmm_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vzeroall
avx -> 1
%ymm8 -> 1
%ymm11 -> 1
%ymm7 -> 1
%ymm10 -> 1
%ymm6 -> 1
%ymm5 -> 1
%ymm15 -> 1
%ymm1 -> 1
%ymm14 -> 1
%ymm12 -> 1
%ymm4 -> 1
%ymm3 -> 1
%ymm2 -> 1
%ymm13 -> 1
%ymm9 -> 1
%ymm0 -> 1

Circuit: callq .move_016_008_bx_r8b_r9b
%r9b -> 1
%r8b -> 1
%bx -> 1

Circuit: callq .move_r8b_to_byte_0_of_ymm1
%ymm1 -> 1
%r8b -> 1

Circuit: callq .move_r9b_to_byte_1_of_ymm1
%r9b -> 1
%ymm1 -> 1

Circuit: xchgb %r8b, %bl
%bl -> 1
%r8b -> 1

Circuit: callq .move_r9b_to_byte_3_of_ymm1
%r9b -> 1
%ymm1 -> 1

Circuit: callq .move_032_016_ebx_r8w_r9w
%ebx -> 1
%r8w -> 1
%r9w -> 1

Circuit: callq .move_byte_3_of_rbx_to_r8b
%r8b -> 1
%rbx -> 1

Circuit: callq .move_r9b_to_byte_2_of_ymm1
%r9b -> 1
%ymm1 -> 1

Circuit: callq .move_r8b_to_byte_3_of_ymm1
%ymm1 -> 1
%r8b -> 1

Total Circuit
YMM7 -> 1
RBX -> 1
YMM3 -> 1
YMM14 -> 1
YMM5 -> 1
YMM12 -> 1
YMM1 -> 1
YMM2 -> 1
YMM11 -> 1
YMM13 -> 1
YMM9 -> 1
YMM0 -> 1
R9 -> 1
YMM10 -> 1
YMM4 -> 1
 -> 1
YMM8 -> 1
YMM6 -> 1
R8 -> 1
YMM15 -> 1

Target
YMM1 -> 1
RBX -> 1
 -> 1

[4m[1m[34mkprove vmovd_xmm_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovd_xmm_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovd_xmm_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovd_xmm_r32[0m
[4m[1m[34msanitizeSpecOutput vmovd_xmm_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovd_xmm_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (concatenateMInt(concatenateMInt(mi(48, 0), extractMInt(mi(64, _628), 48, 56)), extractMInt(mi(64, _628), 32, 40)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(concatenateMInt(mi(48, 0), extractMInt(MI628, 48, 56)), extractMInt(MI628, 32, 40)) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _628), 32, 48)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(48, 0), extractMInt(MI628, 32, 48)) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _628) )
echo Debug:  Result: "RBX" |-> (MI628 )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(64, _628), 32, 64)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(224, 0), extractMInt(MI628, 32, 64)) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vmovd_xmm_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovd_xmm_r32.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovmskpd_r32_xmm[0m
Warn: [4m[1m[35mvmovmskpd_r32_xmm: Manually Generated[0m
[4m[1m[34mCheck if supported: vmovshdup_ymm_ymm[0m
[4m[1m[34mcreatespec vmovshdup_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovshdup_ymm_ymm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovshdup_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_256_128_ymm2_xmm8_xmm9
%xmm8 -> 1
%ymm2 -> 1
%xmm9 -> 1

Circuit: vmovshdup %xmm8, %xmm3
%ymm3 -> 1
%xmm8 -> 1
%xmm3 -> 1
avx -> 1

Circuit: vmovshdup %xmm9, %xmm9
avx -> 1
%xmm9 -> 1
%ymm9 -> 1

Circuit: callq .move_128_256_xmm8_xmm9_ymm1
%xmm9 -> 1
%ymm1 -> 1
%xmm8 -> 1

Circuit: movsldup %xmm3, %xmm1
%xmm3 -> 1
pni -> 1
%xmm1 -> 1

Total Circuit
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1
YMM9 -> 1
 -> 1
YMM8 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove vmovshdup_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovshdup_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovshdup_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovshdup_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vmovshdup_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovshdup_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _615), 0, 32), extractMInt(mi(256, _615), 0, 32)), concatenateMInt(extractMInt(mi(256, _615), 64, 96), extractMInt(mi(256, _615), 64, 96))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _615), 128, 160), extractMInt(mi(256, _615), 128, 160)), concatenateMInt(extractMInt(mi(256, _615), 192, 224), extractMInt(mi(256, _615), 192, 224)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI615, 0, 32), extractMInt(MI615, 0, 32)), concatenateMInt(extractMInt(MI615, 64, 96), extractMInt(MI615, 64, 96))), concatenateMInt(concatenateMInt(extractMInt(MI615, 128, 160), extractMInt(MI615, 128, 160)), concatenateMInt(extractMInt(MI615, 192, 224), extractMInt(MI615, 192, 224)))) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _615), 128, 160), extractMInt(mi(256, _615), 128, 160)), concatenateMInt(extractMInt(mi(256, _615), 192, 224), extractMInt(mi(256, _615), 192, 224)))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI615, 128, 160), extractMInt(MI615, 128, 160)), concatenateMInt(extractMInt(MI615, 192, 224), extractMInt(MI615, 192, 224)))) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _615), 128, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), extractMInt(MI615, 128, 256)) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _615), 0, 32), extractMInt(mi(256, _615), 0, 32)), concatenateMInt(extractMInt(mi(256, _615), 64, 96), extractMInt(mi(256, _615), 64, 96))))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI615, 0, 32), extractMInt(MI615, 0, 32)), concatenateMInt(extractMInt(MI615, 64, 96), extractMInt(MI615, 64, 96))))   )
[4m[1m[34mwriteKDefn vmovshdup_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovshdup_ymm_ymm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vorps_ymm_ymm_ymm[0m
[4m[1m[34mcreatespec vorps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vorps_ymm_ymm_ymm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvorps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vorpd %ymm3, %ymm2, %ymm1
%ymm1 -> 1
%ymm3 -> 1
%ymm2 -> 1
avx -> 1

Total Circuit
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1
 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1
YMM3 -> 1

[4m[1m[34mkprove vorps_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vorps_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vorps_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vorps_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vorps_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvorps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(orMInt(extractMInt(mi(256, _614), 0, 64), extractMInt(mi(256, _615), 0, 64)), orMInt(extractMInt(mi(256, _614), 64, 128), extractMInt(mi(256, _615), 64, 128))), concatenateMInt(orMInt(extractMInt(mi(256, _614), 128, 192), extractMInt(mi(256, _615), 128, 192)), orMInt(extractMInt(mi(256, _614), 192, 256), extractMInt(mi(256, _615), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(orMInt(extractMInt(MI614, 0, 64), extractMInt(MI615, 0, 64)), orMInt(extractMInt(MI614, 64, 128), extractMInt(MI615, 64, 128))), concatenateMInt(orMInt(extractMInt(MI614, 128, 192), extractMInt(MI615, 128, 192)), orMInt(extractMInt(MI614, 192, 256), extractMInt(MI615, 192, 256)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _615)   )
echo Debug:  Result: "YMM3" |-> (MI615   )
[4m[1m[34mwriteKDefn vorps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vorps_ymm_ymm_ymm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpmovzxbq_xmm_xmm[0m
[4m[1m[34mcreatespec vpmovzxbq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovzxbq_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpmovzxbq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: callq .move_128_064_xmm2_r8_r9
%r9 -> 1
%r8 -> 1
%xmm2 -> 1

Circuit: vzeroall
%ymm1 -> 1
%ymm3 -> 1
%ymm4 -> 1
%ymm14 -> 1
%ymm12 -> 1
%ymm0 -> 1
%ymm13 -> 1
%ymm9 -> 1
%ymm2 -> 1
%ymm6 -> 1
%ymm5 -> 1
%ymm15 -> 1
%ymm11 -> 1
%ymm8 -> 1
%ymm10 -> 1
%ymm7 -> 1
avx -> 1

Circuit: callq .move_r8b_to_byte_0_of_ymm1
%r8b -> 1
%ymm1 -> 1

Circuit: notb %r8b
%r8b -> 1

Circuit: callq .move_016_032_r8w_r9w_edx
%r8w -> 1
%r9w -> 1
%edx -> 1

Circuit: callq .move_016_008_dx_r8b_r9b
%r8b -> 1
%dx -> 1
%r9b -> 1

Circuit: callq .move_r9b_to_byte_8_of_ymm1
%r9b -> 1
%ymm1 -> 1

Total Circuit
YMM7 -> 1
YMM12 -> 1
YMM14 -> 1
YMM5 -> 1
YMM3 -> 1
YMM13 -> 1
YMM11 -> 1
YMM2 -> 1
YMM1 -> 1
YMM0 -> 1
YMM9 -> 1
YMM4 -> 1
YMM10 -> 1
R9 -> 1
 -> 1
YMM6 -> 1
YMM8 -> 1
YMM15 -> 1
R8 -> 1
RDX -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove vpmovzxbq_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovzxbq_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovzxbq_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpmovzxbq_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpmovzxbq_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpmovzxbq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (concatenateMInt(extractMInt(mi(256, _629), 192, 248), xorMInt(mi(8, 255), extractMInt(mi(256, _629), 248, 256))) )
echo Debug:  Result: "R8" |-> (concatenateMInt(extractMInt(MI629, 192, 248), xorMInt(mi(8, 255), extractMInt(MI629, 248, 256))) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(extractMInt(mi(256, _629), 128, 184), extractMInt(mi(256, _629), 240, 248)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(extractMInt(MI629, 128, 184), extractMInt(MI629, 240, 248)) )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(32, 0), concatenateMInt(extractMInt(mi(256, _629), 176, 192), concatenateMInt(extractMInt(mi(256, _629), 240, 248), xorMInt(mi(8, 255), extractMInt(mi(256, _629), 248, 256))))) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(32, 0), concatenateMInt(extractMInt(MI629, 176, 192), concatenateMInt(extractMInt(MI629, 240, 248), xorMInt(mi(8, 255), extractMInt(MI629, 248, 256))))) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(184, 0), concatenateMInt(extractMInt(mi(256, _629), 240, 248), concatenateMInt(mi(56, 0), extractMInt(mi(256, _629), 248, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(184, 0), concatenateMInt(extractMInt(MI629, 240, 248), concatenateMInt(mi(56, 0), extractMInt(MI629, 248, 256)))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vpmovzxbq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpmovzxbq_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpmovzxdq_ymm_xmm[0m
[4m[1m[34mcreatespec vpmovzxdq_ymm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovzxdq_ymm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpmovzxdq_ymm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vpmovzxdq %xmm2, %xmm10
%xmm10 -> 1
%xmm2 -> 1
%ymm10 -> 1
avx -> 1

Circuit: vunpckhps %xmm10, %xmm2, %xmm12
%ymm12 -> 1
%xmm2 -> 1
%xmm10 -> 1
%xmm12 -> 1
avx -> 1

Circuit: vpunpckhqdq %xmm12, %xmm12, %xmm0
avx -> 1
%xmm0 -> 1
%xmm12 -> 1
%ymm0 -> 1

Circuit: vorps %xmm12, %xmm12, %xmm11
%xmm11 -> 1
%ymm11 -> 1
%xmm12 -> 1
avx -> 1

Circuit: vmovupd %ymm10, %ymm12
%ymm10 -> 1
avx -> 1
%ymm12 -> 1

Circuit: vmovss %xmm11, %xmm0, %xmm13
%ymm13 -> 1
%xmm13 -> 1
%xmm11 -> 1
avx -> 1
%xmm0 -> 1

Circuit: callq .move_128_256_xmm12_xmm13_ymm1
%ymm1 -> 1
%xmm13 -> 1
%xmm12 -> 1

Total Circuit
 -> 1
YMM10 -> 1
YMM0 -> 1
YMM11 -> 1
YMM1 -> 1
YMM2 -> 1
YMM13 -> 1
YMM12 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove vpmovzxdq_ymm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovzxdq_ymm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovzxdq_ymm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpmovzxdq_ymm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpmovzxdq_ymm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpmovzxdq_ymm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _617), 192, 224)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _617), 224, 256)))) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(MI617, 192, 224)), concatenateMInt(mi(32, 0), extractMInt(MI617, 224, 256)))) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _617) )
echo Debug:  Result: "YMM2" |-> (MI617 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _617), 128, 160)), mi(32, 0)), extractMInt(mi(256, _617), 160, 192)), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _617), 192, 224)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _617), 224, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(MI617, 128, 160)), mi(32, 0)), extractMInt(MI617, 160, 192)), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(MI617, 192, 224)), concatenateMInt(mi(32, 0), extractMInt(MI617, 224, 256)))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _617), 128, 160)), mi(32, 0)), extractMInt(mi(256, _617), 160, 192))) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(MI617, 128, 160)), mi(32, 0)), extractMInt(MI617, 160, 192))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _617), 192, 224)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _617), 224, 256)))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(MI617, 192, 224)), concatenateMInt(mi(32, 0), extractMInt(MI617, 224, 256)))) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _617), 128, 160)), concatenateMInt(extractMInt(mi(256, _617), 192, 224), extractMInt(mi(256, _617), 160, 192)))) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(MI617, 128, 160)), concatenateMInt(extractMInt(MI617, 192, 224), extractMInt(MI617, 160, 192)))) )
echo Debug:  PreResult: "YMM0" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _617), 128, 160)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _617), 128, 160))))   )
echo Debug:  Result: "YMM0" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(MI617, 128, 160)), concatenateMInt(mi(32, 0), extractMInt(MI617, 128, 160))))   )
[4m[1m[34mwriteKDefn vpmovzxdq_ymm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpmovzxdq_ymm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpor_ymm_ymm_ymm[0m
[4m[1m[34mcreatespec vpor_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpor_ymm_ymm_ymm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpor_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vorpd %ymm2, %ymm3, %ymm5
%ymm5 -> 1
%ymm3 -> 1
%ymm2 -> 1
avx -> 1

Circuit: vminpd %ymm5, %ymm5, %ymm1
%ymm5 -> 1
%ymm1 -> 1
avx -> 1

Total Circuit
 -> 1
YMM3 -> 1
YMM5 -> 1
YMM2 -> 1
YMM1 -> 1

Target
 -> 1
YMM2 -> 1
YMM1 -> 1
YMM3 -> 1

[4m[1m[34mkprove vpor_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpor_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpor_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpor_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vpor_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpor_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _615) )
echo Debug:  Result: "YMM2" |-> (MI615 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(orMInt(extractMInt(mi(256, _616), 0, 64), extractMInt(mi(256, _615), 0, 64)), orMInt(extractMInt(mi(256, _616), 64, 128), extractMInt(mi(256, _615), 64, 128))), concatenateMInt(orMInt(extractMInt(mi(256, _616), 128, 192), extractMInt(mi(256, _615), 128, 192)), orMInt(extractMInt(mi(256, _616), 192, 256), extractMInt(mi(256, _615), 192, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(orMInt(extractMInt(MI616, 0, 64), extractMInt(MI615, 0, 64)), orMInt(extractMInt(MI616, 64, 128), extractMInt(MI615, 64, 128))), concatenateMInt(orMInt(extractMInt(MI616, 128, 192), extractMInt(MI615, 128, 192)), orMInt(extractMInt(MI616, 192, 256), extractMInt(MI615, 192, 256)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _616) )
echo Debug:  Result: "YMM3" |-> (MI616 )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(concatenateMInt(orMInt(extractMInt(mi(256, _616), 0, 64), extractMInt(mi(256, _615), 0, 64)), orMInt(extractMInt(mi(256, _616), 64, 128), extractMInt(mi(256, _615), 64, 128))), concatenateMInt(orMInt(extractMInt(mi(256, _616), 128, 192), extractMInt(mi(256, _615), 128, 192)), orMInt(extractMInt(mi(256, _616), 192, 256), extractMInt(mi(256, _615), 192, 256))))   )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(concatenateMInt(orMInt(extractMInt(MI616, 0, 64), extractMInt(MI615, 0, 64)), orMInt(extractMInt(MI616, 64, 128), extractMInt(MI615, 64, 128))), concatenateMInt(orMInt(extractMInt(MI616, 128, 192), extractMInt(MI615, 128, 192)), orMInt(extractMInt(MI616, 192, 256), extractMInt(MI615, 192, 256))))   )
[4m[1m[34mwriteKDefn vpor_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpor_ymm_ymm_ymm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpunpckhqdq_ymm_ymm_ymm[0m
[4m[1m[34mcreatespec vpunpckhqdq_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpckhqdq_ymm_ymm_ymm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpunpckhqdq_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vunpckhpd %ymm3, %ymm2, %ymm1
%ymm3 -> 1
%ymm2 -> 1
%ymm1 -> 1
avx -> 1

Total Circuit
 -> 1
YMM2 -> 1
YMM1 -> 1
YMM3 -> 1

Target
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1
 -> 1

[4m[1m[34mkprove vpunpckhqdq_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpckhqdq_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpckhqdq_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpunpckhqdq_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vpunpckhqdq_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpunpckhqdq_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _614) )
echo Debug:  Result: "YMM2" |-> (MI614 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(extractMInt(mi(256, _615), 0, 64), extractMInt(mi(256, _614), 0, 64)), concatenateMInt(extractMInt(mi(256, _615), 128, 192), extractMInt(mi(256, _614), 128, 192))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(extractMInt(MI615, 0, 64), extractMInt(MI614, 0, 64)), concatenateMInt(extractMInt(MI615, 128, 192), extractMInt(MI614, 128, 192))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _615)   )
echo Debug:  Result: "YMM3" |-> (MI615   )
[4m[1m[34mwriteKDefn vpunpckhqdq_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpunpckhqdq_ymm_ymm_ymm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpunpcklqdq_ymm_ymm_ymm[0m
[4m[1m[34mcreatespec vpunpcklqdq_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpcklqdq_ymm_ymm_ymm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpunpcklqdq_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: vmovddup %ymm2, %ymm2
avx -> 1
%ymm2 -> 1

Circuit: vmovddup %ymm3, %ymm11
avx -> 1
%ymm11 -> 1
%ymm3 -> 1

Circuit: vunpckhpd %ymm11, %ymm2, %ymm1
%ymm11 -> 1
avx -> 1
%ymm2 -> 1
%ymm1 -> 1

Total Circuit
 -> 1
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1
YMM11 -> 1

Target
 -> 1
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove vpunpcklqdq_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpcklqdq_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpcklqdq_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpunpcklqdq_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vpunpcklqdq_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpunpcklqdq_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(concatenateMInt(extractMInt(mi(256, _615), 64, 128), extractMInt(mi(256, _615), 64, 128)), concatenateMInt(extractMInt(mi(256, _615), 192, 256), extractMInt(mi(256, _615), 192, 256))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(concatenateMInt(extractMInt(MI615, 64, 128), extractMInt(MI615, 64, 128)), concatenateMInt(extractMInt(MI615, 192, 256), extractMInt(MI615, 192, 256))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(extractMInt(mi(256, _616), 64, 128), extractMInt(mi(256, _615), 64, 128)), concatenateMInt(extractMInt(mi(256, _616), 192, 256), extractMInt(mi(256, _615), 192, 256))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(extractMInt(MI616, 64, 128), extractMInt(MI615, 64, 128)), concatenateMInt(extractMInt(MI616, 192, 256), extractMInt(MI615, 192, 256))) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(concatenateMInt(extractMInt(mi(256, _616), 64, 128), extractMInt(mi(256, _616), 64, 128)), concatenateMInt(extractMInt(mi(256, _616), 192, 256), extractMInt(mi(256, _616), 192, 256))) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(concatenateMInt(extractMInt(MI616, 64, 128), extractMInt(MI616, 64, 128)), concatenateMInt(extractMInt(MI616, 192, 256), extractMInt(MI616, 192, 256))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _616)   )
echo Debug:  Result: "YMM3" |-> (MI616   )
[4m[1m[34mwriteKDefn vpunpcklqdq_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpunpcklqdq_ymm_ymm_ymm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vrsqrtss_xmm_xmm_xmm[0m
[4m[1m[34mcreatespec vrsqrtss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vrsqrtss_xmm_xmm_xmm_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvrsqrtss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Circuit: rsqrtss %xmm3, %xmm2
sse -> 1
%xmm3 -> 1
%xmm2 -> 1

Circuit: callq .move_128_064_xmm2_r8_r9
%r9 -> 1
%xmm2 -> 1
%r8 -> 1

Circuit: vzeroall
avx -> 1
%ymm10 -> 1
%ymm7 -> 1
%ymm11 -> 1
%ymm8 -> 1
%ymm15 -> 1
%ymm5 -> 1
%ymm6 -> 1
%ymm0 -> 1
%ymm9 -> 1
%ymm13 -> 1
%ymm2 -> 1
%ymm3 -> 1
%ymm14 -> 1
%ymm12 -> 1
%ymm4 -> 1
%ymm1 -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%xmm1 -> 1
%r8 -> 1
%r9 -> 1

Total Circuit
YMM6 -> 1
YMM8 -> 1
R8 -> 1
YMM15 -> 1
YMM4 -> 1
YMM10 -> 1
R9 -> 1
 -> 1
YMM13 -> 1
YMM11 -> 1
YMM2 -> 1
YMM1 -> 1
YMM0 -> 1
YMM9 -> 1
YMM7 -> 1
YMM12 -> 1
YMM14 -> 1
YMM5 -> 1
YMM3 -> 1

Target
 -> 1
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove vrsqrtss_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vrsqrtss_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vrsqrtss_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vrsqrtss_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vrsqrtss_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvrsqrtss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (concatenateMInt(extractMInt(mi(256, _629), 192, 224), Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(mi(256, _630), 224, 256), 24, 8), 2) ) , 32)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(extractMInt(MI629, 192, 224), Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(MI630, 224, 256), 24, 8), 2) ) , 32)) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _629), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI629, 128, 192) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _629), 128, 224), Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(mi(256, _630), 224, 256), 24, 8), 2) ) , 32))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI629, 128, 224), Float2MInt( ( 1e+00  /Float  rootFloat(MInt2Float(extractMInt(MI630, 224, 256), 24, 8), 2) ) , 32))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vrsqrtss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vrsqrtss_xmm_xmm_xmm.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: xorb_rh_rh[0m
[4m[1m[34mcreatespec xorb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorb_rh_rh_spec.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxorb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: xorb_rh_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Undef Set
af -> 1

Circuit: xorb %al, %al
%pf -> 1
%al -> 1
%of -> 1
%sf -> 1
%af -> 1
%zf -> 1
%cf -> 1

Circuit: xaddb %al, %bh
%sf -> 1
%af -> 1
%zf -> 1
%bh -> 1
%cf -> 1
%pf -> 1
%al -> 1
%of -> 1

Circuit: xorb %al, %ah
%ah -> 1
%cf -> 1
%ax -> 1
%sf -> 1
%af -> 1
%zf -> 1
%of -> 1
%pf -> 1
%al -> 1

Total Circuit
AF -> 1
PF -> 1
CF -> 1
ZF -> 1
RBX -> 1
OF -> 1
SF -> 1
RAX -> 1

Target
AF -> 1
ZF -> 1
PF -> 1
CF -> 1
RAX -> 1
SF -> 1
OF -> 1
RBX -> 1

[4m[1m[34mkprove xorb_rh_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorb_rh_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_xorb_rh_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput xorb_rh_rh[0m
[4m[1m[34msanitizeSpecOutput xorb_rh_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mxorb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(64, _628), 48, 49), extractMInt(mi(64, _629), 48, 49)) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(MI628, 48, 49), extractMInt(MI629, 48, 49)) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, _628), 48, 56), extractMInt(mi(64, _629), 48, 56)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI628, 48, 56), extractMInt(MI629, 48, 56)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _628)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI628) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _628), 0, 48), concatenateMInt(xorMInt(extractMInt(mi(64, _628), 48, 56), extractMInt(mi(64, _629), 48, 56)), extractMInt(mi(64, _628), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI628, 0, 48), concatenateMInt(xorMInt(extractMInt(MI628, 48, 56), extractMInt(MI629, 48, 56)), extractMInt(MI628, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _629) )
echo Debug:  Result: "RBX" |-> (MI629 )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, _628), 48, 56), extractMInt(mi(64, _629), 48, 56)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(MI628, 48, 56), extractMInt(MI629, 48, 56)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn xorb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-xorb_rh_rh.k[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

