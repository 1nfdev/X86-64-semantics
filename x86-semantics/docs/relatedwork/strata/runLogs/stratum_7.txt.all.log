[4m[1m[34mCheck if supported: cmovaeq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovaeq_r64_r64.s[0m
[4m[1m[34mcreatespec cmovaeq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovaeq_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovaeq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovaeq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovaeq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovaeq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovaeq_r64_r64.s[0m
Circuit: vmovd %ecx, %xmm1
%xmm1 -> 1
avx -> 1
%ymm1 -> 1
%ecx -> 1

Circuit: callq .move_128_032_xmm1_eax_edx_r8d_r9d
%edx -> 1
%r8d -> 1
%r9d -> 1
%xmm1 -> 1
%eax -> 1

Circuit: sbbw %cx, %ax
%af -> 1
%sf -> 1
%of -> 1
%pf -> 1
%zf -> 1
%ax -> 1
%cf -> 1
%cx -> 1

Circuit: cmoveq %rcx, %rbx
%rbx -> 1
cmov -> 1
%rcx -> 1
%zf -> 1

Total Circuit
R9 -> 1
PF -> 1
AF -> 1
RCX -> 1
CF -> 1
 -> 1
YMM1 -> 1
RBX -> 1
OF -> 1
ZF -> 1
SF -> 1
RAX -> 1
R8 -> 1
RDX -> 1

Target
RCX -> 1
 -> 1
CF -> 1
RBX -> 1

[4m[1m[34mkprove cmovaeq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovaeq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovaeq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovaeq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput cmovaeq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovaeq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovaeq_r64_r64[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _612), 48, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(mi(64, _612), 48, 64)))), concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _610))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _610))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _612), 48, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(mi(64, _612), 48, 64)))), concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _610))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _610))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI612, 48, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(MI612, 48, 64)))), concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI610)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI610)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI612, 48, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(MI612, 48, 64)))), concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI610)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI610)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _612), 48, 64), xorMInt(mi(16, 65535), extractMInt(mi(64, _612), 48, 64))), addMInt(mi(16, 65535), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _610))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _610))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI612, 48, 64), xorMInt(mi(16, 65535), extractMInt(MI612, 48, 64))), addMInt(mi(16, 65535), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI610)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI610)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R8" |-> (mi(64, 0) )
echo Debug:  Result: "R8" |-> (mi(64, 0) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _612) )
echo Debug:  Result: "RCX" |-> (MI612 )
echo Debug:  PreResult: "R9" |-> (mi(64, 0) )
echo Debug:  Result: "R9" |-> (mi(64, 0) )
echo Debug:  PreResult: "RDX" |-> (mi(64, 0) )
echo Debug:  Result: "RDX" |-> (mi(64, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(64, _612), 32, 48)), addMInt(mi(16, 65535), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _610))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _610))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(MI612, 32, 48)), addMInt(mi(16, 65535), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI610)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI610)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(mi(16, 65535), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _610))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _610))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(16, 0)) ) #then ( mi(64, _612) ) #else ( mi(64, _611) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(mi(16, 65535), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI610)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI610)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(16, 0)) ) #then ( MI612 ) #else ( MI611 ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(mi(16, 65535), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _610))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _610))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(mi(16, 65535), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI610)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI610)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(64, _612), 32, 64)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(224, 0), extractMInt(MI612, 32, 64)) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(mi(16, 65535), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _610))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _610))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(mi(16, 65535), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI610)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI610)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(mi(16, 65535), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _610))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _610))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 8, 16), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(mi(16, 65535), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI610)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI610)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 8, 16), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _612), 48, 49), xorMInt(mi(1, 1), extractMInt(mi(64, _612), 48, 49)))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _612), 48, 49), extractMInt(addMInt(mi(16, 65535), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _610))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _610))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI612, 48, 49), xorMInt(mi(1, 1), extractMInt(MI612, 48, 49)))  andBool   notBool  ( eqMInt(extractMInt(MI612, 48, 49), extractMInt(addMInt(mi(16, 65535), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI610)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI610)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
[4m[1m[34mwriteKDefn cmovaeq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovaeq_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovaeq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovbel_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovbel_r32_r32.s[0m
[4m[1m[34mcreatespec cmovbel_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovbel_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovbel_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovbel_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovbel_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovbel_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovbel_r32_r32.s[0m
Circuit: cmovnal %ecx, %ebx
cmov -> 1
%rbx -> 1
%ecx -> 1
%ebx -> 1
%cf -> 1
%zf -> 1

Total Circuit
ZF -> 1
CF -> 1
RCX -> 1
 -> 1
RBX -> 1

Target
RBX -> 1
 -> 1
CF -> 1
RCX -> 1
ZF -> 1

[4m[1m[34mkprove cmovbel_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovbel_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovbel_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovbel_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovbel_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovbel_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovbel_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(mi(8, 0), concatenateMInt(mi(7, 0), mi(1, _602))), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(mi(1, _605), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _603), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _604), 32, 64)) ) #fi) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _604), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(mi(8, 0), concatenateMInt(mi(7, 0), MI602)), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(MI605, mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI603, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI604, 32, 64)) ) #fi) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI604, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _602) )
echo Debug:  Result: "CF" |-> (MI602 )
echo Debug:  PreResult: "ZF" |-> (mi(1, _605) )
echo Debug:  Result: "ZF" |-> (MI605 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _604)   )
echo Debug:  Result: "RCX" |-> (MI604   )
[4m[1m[34mwriteKDefn cmovbel_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovbel_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovbel_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovcq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovcq_r64_r64.s[0m
[4m[1m[34mcreatespec cmovcq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovcq_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovcq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovcq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovcq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovcq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovcq_r64_r64.s[0m
Circuit: cmovnaeq %rcx, %rbx
%rbx -> 1
cmov -> 1
%cf -> 1
%rcx -> 1

Total Circuit
RBX -> 1
CF -> 1
 -> 1
RCX -> 1

Target
RBX -> 1
 -> 1
RCX -> 1
CF -> 1

[4m[1m[34mkprove cmovcq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovcq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovcq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovcq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput cmovcq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovcq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovcq_r64_r64[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> (mi(64, _601) )
echo Debug:  Result: "RBX" |-> (MI601 )
echo Debug:  PreResult: "CF" |-> (mi(1, _600) )
echo Debug:  Result: "CF" |-> (MI600 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _602)   )
echo Debug:  Result: "RCX" |-> (MI602   )
[4m[1m[34mwriteKDefn cmovcq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovcq_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovcq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovleq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovleq_r64_r64.s[0m
[4m[1m[34mcreatespec cmovleq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovleq_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovleq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovleq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovleq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovleq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovleq_r64_r64.s[0m
Circuit: vxorpd %xmm4, %xmm4, %xmm1
avx -> 1
%xmm4 -> 1
%ymm1 -> 1
%xmm1 -> 1

Circuit: callq .move_128_032_xmm1_xmm4_xmm5_xmm6_xmm7
%xmm6 -> 1
%xmm5 -> 1
%xmm4 -> 1
%xmm1 -> 1
%xmm7 -> 1

Circuit: movd %xmm4, %r12d
%xmm4 -> 1
sse2 -> 1
%r12 -> 1
%r12d -> 1

Circuit: setg %spl
%sf -> 1
%of -> 1
%spl -> 1
%zf -> 1

Circuit: xorb %spl, %r12b
%zf -> 1
%cf -> 1
%spl -> 1
%r12b -> 1
%af -> 1
%pf -> 1
%of -> 1
%sf -> 1

Circuit: cmovbeq %rcx, %rbx
%rcx -> 1
%zf -> 1
%cf -> 1
%rbx -> 1
cmov -> 1

Total Circuit
AF -> 1
RCX -> 1
 -> 1
YMM1 -> 1
RBX -> 1
YMM4 -> 1
ZF -> 1
RSP -> 1
OF -> 1
R12 -> 1
PF -> 1
CF -> 1
YMM5 -> 1
SF -> 1
YMM7 -> 1
YMM6 -> 1

Target
SF -> 1
ZF -> 1
OF -> 1
RBX -> 1
RCX -> 1
 -> 1

[4m[1m[34mkprove cmovleq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovleq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovleq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovleq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput cmovleq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovleq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovleq_r64_r64[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "RCX" |-> (mi(64, _616) )
echo Debug:  Result: "RCX" |-> (MI616 )
echo Debug:  PreResult: "RBX" |-> (mi(64, _615) )
echo Debug:  Result: "RBX" |-> (MI615 )
echo Debug:  PreResult: "ZF" |-> (mi(1, 1) )
echo Debug:  Result: "ZF" |-> (mi(1, 1) )
echo Debug:  PreResult: "RSP" |-> (mi(64, 0) )
echo Debug:  Result: "RSP" |-> (mi(64, 0) )
echo Debug:  PreResult: "YMM1" |-> (mi(256, 0) )
echo Debug:  Result: "YMM1" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "R12" |-> (mi(64, 0) )
echo Debug:  Result: "R12" |-> (mi(64, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "PF" |-> (mi(1, 1) )
echo Debug:  Result: "PF" |-> (mi(1, 1) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
[4m[1m[34mwriteKDefn cmovleq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovleq_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovleq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnbl_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnbl_r32_r32.s[0m
[4m[1m[34mcreatespec cmovnbl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnbl_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnbl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnbl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovnbl_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnbl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnbl_r32_r32.s[0m
Circuit: cmovael %ecx, %ebx
%cf -> 1
cmov -> 1
%ecx -> 1
%ebx -> 1
%rbx -> 1

Total Circuit
 -> 1
RCX -> 1
RBX -> 1
CF -> 1

Target
RBX -> 1
RCX -> 1
 -> 1
CF -> 1

[4m[1m[34mkprove cmovnbl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnbl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnbl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnbl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovnbl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnbl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnbl_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _600)), mi(8, 0))), mi(16, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _602), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _601), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI600), mi(8, 0))), mi(16, 0)), mi(16, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI602, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI601, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _600) )
echo Debug:  Result: "CF" |-> (MI600 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _602)   )
echo Debug:  Result: "RCX" |-> (MI602   )
[4m[1m[34mwriteKDefn cmovnbl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnbl_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnbl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovngew_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngew_r16_r16.s[0m
[4m[1m[34mcreatespec cmovngew_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovngew_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngew_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovngew_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovngew_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngew_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngew_r16_r16.s[0m
Circuit: movswl %cx, %r10d
%r10 -> 1
%cx -> 1
%r10d -> 1

Circuit: cmovngel %r10d, %ebx
%ebx -> 1
%sf -> 1
%rbx -> 1
%r10d -> 1
%of -> 1
cmov -> 1

Total Circuit
SF -> 1
R10 -> 1
OF -> 1
 -> 1
RCX -> 1
RBX -> 1

Target
OF -> 1
 -> 1
RCX -> 1
RBX -> 1
SF -> 1

[4m[1m[34mkprove cmovngew_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovngew_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovngew_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovngew_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovngew_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovngew_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovngew_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R10" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _606), 48, 64))), 32, 64)) )
echo Debug:  Result: "R10" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI606, 48, 64))), 32, 64)) )
echo Debug:  PreResult: "SF" |-> (mi(1, _607) )
echo Debug:  Result: "SF" |-> (MI607 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _606) )
echo Debug:  Result: "RCX" |-> (MI606 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _605)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI605) )
echo Debug:  PreResult: "OF" |-> (mi(1, _604) )
echo Debug:  Result: "OF" |-> (MI604 )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(xorMInt(mi(1, _607), mi(1, _604)), mi(1, 0)) ) #then ( mi(64, _605) ) #else ( concatenateMInt(extractMInt(mi(64, _605), 0, 48), extractMInt(mi(64, _606), 48, 64)) ) #fi)    )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(xorMInt(MI607, MI604), mi(1, 0)) ) #then ( MI605 ) #else ( concatenateMInt(extractMInt(MI605, 0, 48), extractMInt(MI606, 48, 64)) ) #fi)    )
[4m[1m[34mwriteKDefn cmovngew_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovngew_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngew_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnlel_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnlel_r32_r32.s[0m
[4m[1m[34mcreatespec cmovnlel_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnlel_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnlel_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnlel_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovnlel_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnlel_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnlel_r32_r32.s[0m
Circuit: cmovngel %ebx, %ecx
cmov -> 1
%of -> 1
%sf -> 1
%ecx -> 1
%ebx -> 1
%rcx -> 1

Circuit: cmovnel %ecx, %ebx
cmov -> 1
%zf -> 1
%rbx -> 1
%ebx -> 1
%ecx -> 1

Total Circuit
OF -> 1
ZF -> 1
RCX -> 1
 -> 1
RBX -> 1
SF -> 1

Target
 -> 1
RCX -> 1
RBX -> 1
ZF -> 1
OF -> 1
SF -> 1

[4m[1m[34mkprove cmovnlel_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnlel_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnlel_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnlel_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovnlel_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnlel_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnlel_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "SF" |-> (mi(1, _607) )
echo Debug:  Result: "SF" |-> (MI607 )
echo Debug:  PreResult: "RCX" |-> ((#ifMInt (eqMInt(xorMInt(mi(1, _607), mi(1, _604)), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _606), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _605), 32, 64)) ) #fi)  )
echo Debug:  Result: "RCX" |-> ((#ifMInt (eqMInt(xorMInt(MI607, MI604), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI606, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI605, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "OF" |-> (mi(1, _604) )
echo Debug:  Result: "OF" |-> (MI604 )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _608), mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(mi(1, _607), mi(1, _604)), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _606), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _605), 32, 64)) ) #fi) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _605), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI608, mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(MI607, MI604), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI606, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI605, 32, 64)) ) #fi) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI605, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> (mi(1, _608)   )
echo Debug:  Result: "ZF" |-> (MI608   )
[4m[1m[34mwriteKDefn cmovnlel_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnlel_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnlel_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnleq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnleq_r64_r64.s[0m
[4m[1m[34mcreatespec cmovnleq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnleq_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnleq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnleq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovnleq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnleq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnleq_r64_r64.s[0m
Circuit: setnle %r14b
%sf -> 1
%r14b -> 1
%of -> 1
%zf -> 1

Circuit: sarb $0x1, %r14b
%pf -> 1
%sf -> 1
%r14b -> 1
\$0x1 -> 1
%zf -> 1
%cf -> 1
%of -> 1
%af -> 1

Circuit: cmovnaeq %rcx, %rbx
cmov -> 1
%cf -> 1
%rbx -> 1
%rcx -> 1

Total Circuit
SF -> 1
PF -> 1
CF -> 1
ZF -> 1
OF -> 1
R14 -> 1
AF -> 1
RCX -> 1
 -> 1
RBX -> 1

Target
SF -> 1
OF -> 1
ZF -> 1
RBX -> 1
 -> 1
RCX -> 1

[4m[1m[34mkprove cmovnleq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnleq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnleq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnleq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput cmovnleq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnleq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnleq_r64_r64[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (mi(1, 0) )
echo Debug:  Result: "SF" |-> (mi(1, 0) )
echo Debug:  PreResult: "R14" |-> (mi(64, 0) )
echo Debug:  Result: "R14" |-> (mi(64, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> (mi(1, 1) )
echo Debug:  Result: "PF" |-> (mi(1, 1) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _610) )
echo Debug:  Result: "RCX" |-> (MI610 )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _609) )
echo Debug:  Result: "RBX" |-> (MI609 )
echo Debug:  PreResult: "ZF" |-> (mi(1, 1)   )
echo Debug:  Result: "ZF" |-> (mi(1, 1)   )
[4m[1m[34mwriteKDefn cmovnleq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnleq_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnleq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnll_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnll_r32_r32.s[0m
[4m[1m[34mcreatespec cmovnll_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnll_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnll_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnll_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovnll_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnll_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnll_r32_r32.s[0m
Circuit: cmovngel %ebx, %ecx
%of -> 1
cmov -> 1
%sf -> 1
%rcx -> 1
%ecx -> 1
%ebx -> 1

Circuit: movl %ecx, %r10d
%ecx -> 1
%r10 -> 1
%r10d -> 1

Circuit: xchgl %ebx, %r10d
%r10 -> 1
%rbx -> 1
%ebx -> 1
%r10d -> 1

Total Circuit
SF -> 1
R10 -> 1
OF -> 1
RBX -> 1
RCX -> 1
 -> 1

Target
SF -> 1
OF -> 1
RBX -> 1
RCX -> 1
 -> 1

[4m[1m[34mkprove cmovnll_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnll_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnll_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnll_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovnll_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnll_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnll_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R10" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _604), 32, 64)) )
echo Debug:  Result: "R10" |-> (concatenateMInt(mi(32, 0), extractMInt(MI604, 32, 64)) )
echo Debug:  PreResult: "SF" |-> (mi(1, _606) )
echo Debug:  Result: "SF" |-> (MI606 )
echo Debug:  PreResult: "RCX" |-> ((#ifMInt (eqMInt(xorMInt(mi(1, _606), mi(1, _603)), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _605), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _604), 32, 64)) ) #fi)  )
echo Debug:  Result: "RCX" |-> ((#ifMInt (eqMInt(xorMInt(MI606, MI603), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI605, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI604, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "OF" |-> (mi(1, _603) )
echo Debug:  Result: "OF" |-> (MI603 )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(xorMInt(mi(1, _606), mi(1, _603)), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _605), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _604), 32, 64)) ) #fi)    )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(xorMInt(MI606, MI603), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI605, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI604, 32, 64)) ) #fi)    )
[4m[1m[34mwriteKDefn cmovnll_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnll_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnll_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnol_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnol_r32_r32.s[0m
[4m[1m[34mcreatespec cmovnol_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnol_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnol_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnol_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovnol_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnol_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnol_r32_r32.s[0m
Circuit: callq .set_sf
%sf -> 1

Circuit: cmovngel %ecx, %ebx
%ebx -> 1
%ecx -> 1
%sf -> 1
%rbx -> 1
%of -> 1
cmov -> 1

Total Circuit
SF -> 1
OF -> 1
RBX -> 1
 -> 1
RCX -> 1

Target
OF -> 1
RCX -> 1
 -> 1
RBX -> 1

[4m[1m[34mkprove cmovnol_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnol_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnol_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnol_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovnol_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnol_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnol_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(xorMInt(mi(1, 1), mi(1, _601)), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _602), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _603), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(xorMInt(mi(1, 1), MI601), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI602, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI603, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "SF" |-> (mi(1, 1) )
echo Debug:  Result: "SF" |-> (mi(1, 1) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _603) )
echo Debug:  Result: "RCX" |-> (MI603 )
echo Debug:  PreResult: "OF" |-> (mi(1, _601)   )
echo Debug:  Result: "OF" |-> (MI601   )
[4m[1m[34mwriteKDefn cmovnol_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnol_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnol_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovol_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovol_r32_r32.s[0m
[4m[1m[34mcreatespec cmovol_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovol_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovol_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovol_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovol_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovol_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovol_r32_r32.s[0m
Circuit: seto %r9b
%r9b -> 1
%of -> 1

Circuit: decb %r9b
%sf -> 1
%pf -> 1
%af -> 1
%of -> 1
%r9b -> 1
%zf -> 1

Circuit: cmovzl %ecx, %ebx
%rbx -> 1
%ecx -> 1
%ebx -> 1
cmov -> 1
%zf -> 1

Total Circuit
AF -> 1
 -> 1
RCX -> 1
RBX -> 1
ZF -> 1
OF -> 1
R9 -> 1
PF -> 1
SF -> 1

Target
OF -> 1
RCX -> 1
 -> 1
RBX -> 1

[4m[1m[34mkprove cmovol_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovol_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovol_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovol_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovol_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovol_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovol_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(mi(8, 255), concatenateMInt(mi(7, 0), mi(1, _605))), mi(8, 0)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(mi(8, 255), concatenateMInt(mi(7, 0), MI605)), mi(8, 0)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 255), concatenateMInt(mi(7, 0), mi(1, _605))), addMInt(addMInt(mi(8, 255), concatenateMInt(mi(7, 0), mi(1, _605))), mi(8, 0))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 255), concatenateMInt(mi(7, 0), MI605)), addMInt(addMInt(mi(8, 255), concatenateMInt(mi(7, 0), MI605)), mi(8, 0))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(mi(8, 255), concatenateMInt(mi(7, 0), mi(1, _605))), mi(8, 0)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(mi(8, 255), concatenateMInt(mi(7, 0), MI605)), mi(8, 0)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _607) )
echo Debug:  Result: "RCX" |-> (MI607 )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(56, 0), addMInt(addMInt(mi(8, 255), concatenateMInt(mi(7, 0), mi(1, _605))), mi(8, 0))) )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(56, 0), addMInt(addMInt(mi(8, 255), concatenateMInt(mi(7, 0), MI605)), mi(8, 0))) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(8, 255), concatenateMInt(mi(7, 0), mi(1, _605))), mi(8, 0)), mi(8, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _607), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _606), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(8, 255), concatenateMInt(mi(7, 0), MI605)), mi(8, 0)), mi(8, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI607, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI606, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(8, 255), concatenateMInt(mi(7, 0), mi(1, _605))), mi(8, 0)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(8, 255), concatenateMInt(mi(7, 0), MI605)), mi(8, 0)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn cmovol_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovol_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovol_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovpw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpw_r16_r16.s[0m
[4m[1m[34mcreatespec cmovpw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovpw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovpw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpw_r16_r16.s[0m
Circuit: movswl %cx, %r15d
%r15 -> 1
%cx -> 1
%r15d -> 1

Circuit: cmovpl %r15d, %ebx
%ebx -> 1
%r15d -> 1
%rbx -> 1
%pf -> 1
cmov -> 1

Total Circuit
PF -> 1
R15 -> 1
RCX -> 1
 -> 1
RBX -> 1

Target
 -> 1
RCX -> 1
RBX -> 1
PF -> 1

[4m[1m[34mkprove cmovpw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovpw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovpw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovpw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovpw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovpw_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(48, 0), addMInt(addMInt(concatenateMInt(mi(15, 0), mi(1, _602)), mi(16, 0)), mi(16, 0))), mi(64, 0)) ) #then ( mi(64, _603) ) #else ( concatenateMInt(extractMInt(mi(64, _603), 0, 48), extractMInt(mi(64, _604), 48, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(48, 0), addMInt(addMInt(concatenateMInt(mi(15, 0), MI602), mi(16, 0)), mi(16, 0))), mi(64, 0)) ) #then ( MI603 ) #else ( concatenateMInt(extractMInt(MI603, 0, 48), extractMInt(MI604, 48, 64)) ) #fi)  )
echo Debug:  PreResult: "PF" |-> (mi(1, _602) )
echo Debug:  Result: "PF" |-> (MI602 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _604) )
echo Debug:  Result: "RCX" |-> (MI604 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _603)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI603) )
echo Debug:  PreResult: "R15" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _604), 48, 64))), 32, 64))   )
echo Debug:  Result: "R15" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI604, 48, 64))), 32, 64))   )
[4m[1m[34mwriteKDefn cmovpw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovpw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovpw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovsw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovsw_r16_r16.s[0m
[4m[1m[34mcreatespec cmovsw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovsw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovsw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovsw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovsw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovsw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovsw_r16_r16.s[0m
Circuit: cmovnsw %bx, %cx
%cx -> 1
cmov -> 1
%bx -> 1
%sf -> 1

Circuit: xchgw %bx, %cx
%bx -> 1
%cx -> 1

Total Circuit
SF -> 1
RCX -> 1
 -> 1
RBX -> 1

Target
SF -> 1
RCX -> 1
 -> 1
RBX -> 1

[4m[1m[34mkprove cmovsw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovsw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovsw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovsw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovsw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovsw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovsw_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _603), mi(1, 1)) ) #then ( concatenateMInt(extractMInt(mi(64, _601), 0, 48), extractMInt(mi(64, _602), 48, 64)) ) #else ( mi(64, _601) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI603, mi(1, 1)) ) #then ( concatenateMInt(extractMInt(MI601, 0, 48), extractMInt(MI602, 48, 64)) ) #else ( MI601 ) #fi)  )
echo Debug:  PreResult: "SF" |-> (mi(1, _603) )
echo Debug:  Result: "SF" |-> (MI603 )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(extractMInt(mi(64, _602), 0, 48), extractMInt(mi(64, _601), 48, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(extractMInt(MI602, 0, 48), extractMInt(MI601, 48, 64)) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _601))   )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI601)   )
[4m[1m[34mwriteKDefn cmovsw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovsw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovsw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmpb_r8_rh[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpb_r8_rh.s[0m
[4m[1m[34mcreatespec cmpb_r8_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpb_r8_rh_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpb_r8_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmpb_r8_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpb_r8_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpb_r8_rh.s[0m
Circuit: movq $0x20, %r14
\$0x20 -> 1
%r14 -> 1

Circuit: movq %r14, %rcx
%r14 -> 1
%rcx -> 1

Circuit: xaddb %bl, %ch
%of -> 1
%af -> 1
%zf -> 1
%cf -> 1
%pf -> 1
%sf -> 1
%ch -> 1
%bl -> 1

Circuit: sbbb %ah, %ch
%of -> 1
%af -> 1
%cf -> 1
%zf -> 1
%ah -> 1
%sf -> 1
%pf -> 1
%ch -> 1

Total Circuit
R14 -> 1
RAX -> 1
ZF -> 1
OF -> 1
RBX -> 1
RCX -> 1
 -> 1
AF -> 1
SF -> 1
CF -> 1
PF -> 1

Target
CF -> 1
PF -> 1
SF -> 1
RBX -> 1
AF -> 1
RAX -> 1
OF -> 1
ZF -> 1

[4m[1m[34mkprove cmpb_r8_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpb_r8_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpb_r8_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmpb_r8_rh[0m
[4m[1m[34msanitizeSpecOutput cmpb_r8_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmpb_r8_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _617), 56, 64)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _617), 56, 64)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(mi(8, 0), extractMInt(MI617, 56, 64)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI617, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI617, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(mi(8, 0), extractMInt(MI617, 56, 64)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI617, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI617, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _617), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI617, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI617, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI617, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  PreResult: "R14" |-> (mi(64, 32) )
echo Debug:  Result: "R14" |-> (mi(64, 32) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _617), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _617), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI617, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI617, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI617, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI617, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _617), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(8, 32))) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI617, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI617, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI617, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(8, 32))) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _617), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI617, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI617, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI617, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _617), 56, 64)), mi(8, 0)), 0, 1), extractMInt(addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _617), 56, 64)), mi(8, 0)), 0, 1), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _617), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI617, 56, 64)), mi(8, 0)), 0, 1), extractMInt(addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI617, 56, 64)), mi(8, 0)), 0, 1), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI617, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI617, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI617, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (mi(64, _616) )
echo Debug:  Result: "RAX" |-> (MI616 )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _617), 0, 56), mi(8, 0)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI617, 0, 56), mi(8, 0)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _617), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI617, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI617, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI617, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn cmpb_r8_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmpb_r8_rh.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpb_r8_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmpq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpq_r64_r64.s[0m
[4m[1m[34mcreatespec cmpq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpq_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmpq_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpq_r64_r64.s[0m
Circuit: subq %rcx, %rbx
%zf -> 1
%cf -> 1
%of -> 1
%af -> 1
%rcx -> 1
%pf -> 1
%rbx -> 1
%sf -> 1

Total Circuit
PF -> 1
CF -> 1
SF -> 1
AF -> 1
RCX -> 1
RBX -> 1
ZF -> 1
OF -> 1

Target
PF -> 1
CF -> 1
SF -> 1
RBX -> 1
AF -> 1
RCX -> 1
ZF -> 1
OF -> 1

[4m[1m[34mkprove cmpq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmpq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput cmpq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmpq_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), mi(64, _615))), concatenateMInt(mi(1, 0), mi(64, _614))), mi(65, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), mi(64, _615))), concatenateMInt(mi(1, 0), mi(64, _614))), mi(65, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), MI615)), concatenateMInt(mi(1, 0), MI614)), mi(65, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), MI615)), concatenateMInt(mi(1, 0), MI614)), mi(65, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _615)), mi(64, _614)), mi(64, 1)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI615), MI614), mi(64, 1)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _615)), mi(64, _614)), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _615)), mi(64, _614)), mi(64, 1))), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(64, 18446744073709551615), MI615), MI614), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI615), MI614), mi(64, 1))), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _615)), mi(64, _614)), mi(64, 1)), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI615), MI614), mi(64, 1)), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _615) )
echo Debug:  Result: "RCX" |-> (MI615 )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(mi(64, _615), 0, 1)), extractMInt(mi(64, _614), 0, 1))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(mi(64, _615), 0, 1)), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _615)), mi(64, _614)), mi(64, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(MI615, 0, 1)), extractMInt(MI614, 0, 1))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(MI615, 0, 1)), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI615), MI614), mi(64, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _615)), mi(64, _614)), mi(64, 1)) )
echo Debug:  Result: "RBX" |-> (addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI615), MI614), mi(64, 1)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _615)), mi(64, _614)), mi(64, 1)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI615), MI614), mi(64, 1)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn cmpq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmpq_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cvttps2dq_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cvttps2dq_xmm_xmm.s[0m
cvttps2dq_xmm_xmm 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvttps2dq_xmm_xmm.k
Warn: [4m[1m[35mcvttps2dq_xmm_xmm: UnSupported[0m
[4m[1m[34mCheck if supported: hsubps_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/hsubps_xmm_xmm.s[0m
[4m[1m[34mcreatespec hsubps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_hsubps_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/hsubps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mhsubps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/hsubps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/hsubps_xmm_xmm.s[0m
Circuit: vpunpckldq %xmm2, %xmm1, %xmm8
%xmm2 -> 1
%xmm1 -> 1
%ymm8 -> 1
%xmm8 -> 1
avx -> 1

Circuit: vunpckhps %xmm2, %xmm1, %xmm10
%ymm10 -> 1
avx -> 1
%xmm10 -> 1
%xmm1 -> 1
%xmm2 -> 1

Circuit: vpunpckldq %xmm10, %xmm8, %xmm15
%xmm10 -> 1
%xmm15 -> 1
%ymm15 -> 1
%xmm8 -> 1
avx -> 1

Circuit: punpckhdq %xmm10, %xmm8
%xmm8 -> 1
%xmm10 -> 1
sse2 -> 1

Circuit: vsubps %xmm8, %xmm15, %xmm4
%xmm15 -> 1
%ymm4 -> 1
%xmm8 -> 1
%xmm4 -> 1
avx -> 1

Circuit: movdqu %xmm4, %xmm1
%xmm4 -> 1
sse2 -> 1
%xmm1 -> 1

Total Circuit
YMM15 -> 1
YMM2 -> 1
YMM1 -> 1
YMM4 -> 1
YMM8 -> 1
 -> 1
YMM10 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove hsubps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_hsubps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_hsubps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput hsubps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput hsubps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mhsubps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _604) )
echo Debug:  Result: "YMM2" |-> (MI604 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _603), 0, 128), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _604), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _604), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _604), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _604), 192, 224), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _603), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _603), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _603), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _603), 192, 224), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI603, 0, 128), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI604, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI604, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI604, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI604, 192, 224), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI603, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI603, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI603, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI603, 192, 224), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _604), 128, 160), extractMInt(mi(256, _603), 128, 160)), concatenateMInt(extractMInt(mi(256, _604), 160, 192), extractMInt(mi(256, _603), 160, 192)))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI604, 128, 160), extractMInt(MI603, 128, 160)), concatenateMInt(extractMInt(MI604, 160, 192), extractMInt(MI603, 160, 192)))) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _604), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _604), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _604), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _604), 192, 224), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _603), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _603), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _603), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _603), 192, 224), 24, 8) ) , 32))))) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI604, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI604, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI604, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI604, 192, 224), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI603, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI603, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI603, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI603, 192, 224), 24, 8) ) , 32))))) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _604), 128, 160), extractMInt(mi(256, _604), 192, 224)), concatenateMInt(extractMInt(mi(256, _603), 128, 160), extractMInt(mi(256, _603), 192, 224)))) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI604, 128, 160), extractMInt(MI604, 192, 224)), concatenateMInt(extractMInt(MI603, 128, 160), extractMInt(MI603, 192, 224)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _603) )
echo Debug:  Result: "SPAD1" |-> (MI603 )
echo Debug:  PreResult: "YMM15" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _604), 160, 192), extractMInt(mi(256, _604), 224, 256)), concatenateMInt(extractMInt(mi(256, _603), 160, 192), extractMInt(mi(256, _603), 224, 256)))) )
echo Debug:  Result: "YMM15" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI604, 160, 192), extractMInt(MI604, 224, 256)), concatenateMInt(extractMInt(MI603, 160, 192), extractMInt(MI603, 224, 256)))) )
[4m[1m[34mwriteKDefn hsubps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-hsubps_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/hsubps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: negq_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/negq_r64.s[0m
negq_r64 0 /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vcvttss2sil_r32_xmm.k
Warn: [4m[1m[35mnegq_r64: UnSupported[0m
[4m[1m[34mCheck if supported: rorb_r8_one[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rorb_r8_one.s[0m
[4m[1m[34mcreatespec rorb_r8_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rorb_r8_one_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rorb_r8_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrorb_r8_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rorb_r8_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rorb_r8_one.s[0m
Circuit: movb %bl, %bh
%bh -> 1
%bl -> 1

Circuit: sarw $0x1, %bx
%bx -> 1
%pf -> 1
%sf -> 1
%of -> 1
%af -> 1
\$0x1 -> 1
%cf -> 1
%zf -> 1

Circuit: movsbl %bl, %eax
%eax -> 1
%rax -> 1
%bl -> 1

Circuit: salb $0x1, %al
%pf -> 1
%sf -> 1
%zf -> 1
%cf -> 1
\$0x1 -> 1
%al -> 1
%af -> 1
%of -> 1

Total Circuit
SF -> 1
CF -> 1
PF -> 1
RAX -> 1
ZF -> 1
OF -> 1
RBX -> 1
 -> 1
AF -> 1

Target
CF -> 1
 -> 1
RBX -> 1
OF -> 1

[4m[1m[34mkprove rorb_r8_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rorb_r8_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rorb_r8_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput rorb_r8_one[0m
[4m[1m[34msanitizeSpecOutput rorb_r8_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrorb_r8_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _608), 56, 64), extractMInt(mi(64, _608), 56, 64)))))), 1), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _608), 56, 64), extractMInt(mi(64, _608), 56, 64)))))), 1), 56, 64))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI608, 56, 64), extractMInt(MI608, 56, 64)))))), 1), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI608, 56, 64), extractMInt(MI608, 56, 64)))))), 1), 56, 64))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _608), 56, 64), extractMInt(mi(64, _608), 56, 64)))))), 1), 56, 64), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _608), 56, 64), extractMInt(mi(64, _608), 56, 64)))))), 1), 56, 64)), mi(8, 0)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI608, 56, 64), extractMInt(MI608, 56, 64)))))), 1), 56, 64), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI608, 56, 64), extractMInt(MI608, 56, 64)))))), 1), 56, 64)), mi(8, 0)), 0, 1) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _608), 56, 64), extractMInt(mi(64, _608), 56, 64)))))), 1), 56, 64), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _608), 56, 64), extractMInt(mi(64, _608), 56, 64)))))), 1), 56, 64)), mi(8, 0)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI608, 56, 64), extractMInt(MI608, 56, 64)))))), 1), 56, 64), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI608, 56, 64), extractMInt(MI608, 56, 64)))))), 1), 56, 64)), mi(8, 0)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _608)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI608) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _608), 56, 64), extractMInt(mi(64, _608), 56, 64)))))), 1), 56, 57), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _608), 56, 64), extractMInt(mi(64, _608), 56, 64)))))), 1), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _608), 56, 64), extractMInt(mi(64, _608), 56, 64)))))), 1), 56, 57), extractMInt(addMInt(addMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _608), 56, 64), extractMInt(mi(64, _608), 56, 64)))))), 1), 56, 64), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _608), 56, 64), extractMInt(mi(64, _608), 56, 64)))))), 1), 56, 64)), mi(8, 0)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI608, 56, 64), extractMInt(MI608, 56, 64)))))), 1), 56, 57), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI608, 56, 64), extractMInt(MI608, 56, 64)))))), 1), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI608, 56, 64), extractMInt(MI608, 56, 64)))))), 1), 56, 57), extractMInt(addMInt(addMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI608, 56, 64), extractMInt(MI608, 56, 64)))))), 1), 56, 64), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI608, 56, 64), extractMInt(MI608, 56, 64)))))), 1), 56, 64)), mi(8, 0)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _608), 56, 64), extractMInt(mi(64, _608), 56, 64)))))), 1), 56, 64))), 32, 56)), addMInt(addMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _608), 56, 64), extractMInt(mi(64, _608), 56, 64)))))), 1), 56, 64), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _608), 56, 64), extractMInt(mi(64, _608), 56, 64)))))), 1), 56, 64)), mi(8, 0))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI608, 56, 64), extractMInt(MI608, 56, 64)))))), 1), 56, 64))), 32, 56)), addMInt(addMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI608, 56, 64), extractMInt(MI608, 56, 64)))))), 1), 56, 64), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI608, 56, 64), extractMInt(MI608, 56, 64)))))), 1), 56, 64)), mi(8, 0))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _608), 0, 56), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _608), 56, 64), extractMInt(mi(64, _608), 56, 64)))))), 1), 56, 64)) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI608, 0, 56), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI608, 56, 64), extractMInt(MI608, 56, 64)))))), 1), 56, 64)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _608), 56, 64), extractMInt(mi(64, _608), 56, 64)))))), 1), 56, 64), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _608), 56, 64), extractMInt(mi(64, _608), 56, 64)))))), 1), 56, 64)), mi(8, 0)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI608, 56, 64), extractMInt(MI608, 56, 64)))))), 1), 56, 64), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI608, 56, 64), extractMInt(MI608, 56, 64)))))), 1), 56, 64)), mi(8, 0)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn rorb_r8_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-rorb_r8_one.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rorb_r8_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: sarb_rh_one[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarb_rh_one.s[0m
[4m[1m[34mcreatespec sarb_rh_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sarb_rh_one_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarb_rh_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msarb_rh_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: sarb_rh_one[0m
Undef Set
af -> 1

[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarb_rh_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarb_rh_one.s[0m
Circuit: movsbl %ah, %edx
%edx -> 1
%rdx -> 1
%ah -> 1

Circuit: sarw $0x1, %dx
%af -> 1
%of -> 1
%zf -> 1
%cf -> 1
\$0x1 -> 1
%pf -> 1
%sf -> 1
%dx -> 1

Circuit: xchgb %dl, %ah
%dl -> 1
%ah -> 1

Total Circuit
RDX -> 1
RAX -> 1
OF -> 1
ZF -> 1
 -> 1
AF -> 1
SF -> 1
CF -> 1
PF -> 1

Target
 -> 1
AF -> 1
RAX -> 1
ZF -> 1
OF -> 1
CF -> 1
PF -> 1
SF -> 1

[4m[1m[34mkprove sarb_rh_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sarb_rh_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sarb_rh_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput sarb_rh_one[0m
[4m[1m[34msanitizeSpecOutput sarb_rh_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msarb_rh_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(mi(64, _614), 55, 56) )
echo Debug:  Result: "CF" |-> (extractMInt(MI614, 55, 56) )
echo Debug:  PreResult: "SF" |-> (extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 48, 56))), 48, 64))))), 1), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI614, 48, 56))), 48, 64))))), 1), 0, 1) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 48, 56))), 48, 64))))), 1), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI614, 48, 56))), 48, 64))))), 1), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _614)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI614) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 48, 56))), 32, 48)), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 48, 56))), 48, 64))))), 1), 48, 56)), extractMInt(mi(64, _614), 48, 56)) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI614, 48, 56))), 32, 48)), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI614, 48, 56))), 48, 64))))), 1), 48, 56)), extractMInt(MI614, 48, 56)) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _614), 0, 48), concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 48, 56))), 48, 64))))), 1), 56, 64), extractMInt(mi(64, _614), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI614, 0, 48), concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI614, 48, 56))), 48, 64))))), 1), 56, 64), extractMInt(MI614, 56, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 48, 56))), 48, 64))))), 1), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI614, 48, 56))), 48, 64))))), 1), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn sarb_rh_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-sarb_rh_one.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sarb_rh_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: sbbb_r8_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbb_r8_r8.s[0m
[4m[1m[34mcreatespec sbbb_r8_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sbbb_r8_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbb_r8_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msbbb_r8_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbb_r8_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbb_r8_r8.s[0m
Circuit: movb %bl, %dh
%bl -> 1
%dh -> 1

Circuit: xchgb %dh, %bl
%dh -> 1
%bl -> 1

Circuit: sbbb %cl, %dh
%pf -> 1
%sf -> 1
%dh -> 1
%of -> 1
%af -> 1
%cf -> 1
%zf -> 1
%cl -> 1

Circuit: movzbw %dh, %bx
%dh -> 1
%bx -> 1

Total Circuit
PF -> 1
CF -> 1
SF -> 1
RBX -> 1
AF -> 1
RCX -> 1
RDX -> 1
OF -> 1
ZF -> 1

Target
PF -> 1
CF -> 1
SF -> 1
RBX -> 1
AF -> 1
RCX -> 1
OF -> 1
ZF -> 1

[4m[1m[34mkprove sbbb_r8_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sbbb_r8_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sbbb_r8_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput sbbb_r8_r8[0m
[4m[1m[34msanitizeSpecOutput sbbb_r8_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msbbb_r8_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), mi(8, 0))))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _613))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _613))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), mi(8, 0))))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _613))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _613))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI617, 56, 64), mi(8, 0)), mi(8, 0))))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI613)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI613)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI617, 56, 64), mi(8, 0)), mi(8, 0))))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI613)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI613)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _613))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _613))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI617, 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI613)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI613)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), mi(8, 0)))), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _613))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _613))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI617, 56, 64), mi(8, 0)), mi(8, 0)))), addMInt(addMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI617, 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI613)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI613)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _613))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _613))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI617, 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI613)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI613)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _617) )
echo Debug:  Result: "RCX" |-> (MI617 )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _613))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _613))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(8, 0))) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(addMInt(addMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI617, 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI613)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI613)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(8, 0))) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _616)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI616) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _616), 56, 57), xorMInt(mi(1, 1), extractMInt(addMInt(addMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), mi(8, 0)), 0, 1)))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _616), 56, 57), extractMInt(addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _613))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _613))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI616, 56, 57), xorMInt(mi(1, 1), extractMInt(addMInt(addMInt(extractMInt(MI617, 56, 64), mi(8, 0)), mi(8, 0)), 0, 1)))  andBool   notBool  ( eqMInt(extractMInt(MI616, 56, 57), extractMInt(addMInt(addMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI617, 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI613)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI613)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _616), 0, 56), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _613))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _613))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI616, 0, 56), addMInt(addMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI617, 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI613)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI613)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _613))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _613))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI617, 56, 64), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI613)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI613)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn sbbb_r8_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-sbbb_r8_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbb_r8_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: sbbb_r8_rh[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbb_r8_rh.s[0m
[4m[1m[34mcreatespec sbbb_r8_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sbbb_r8_rh_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbb_r8_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msbbb_r8_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbb_r8_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbb_r8_rh.s[0m
Circuit: xchgb %bl, %ah
%bl -> 1
%ah -> 1

Circuit: sbbb %bl, %ah
%af -> 1
%of -> 1
%zf -> 1
%cf -> 1
%pf -> 1
%sf -> 1
%ah -> 1
%bl -> 1

Circuit: movsbw %ah, %bx
%ah -> 1
%bx -> 1

Total Circuit
PF -> 1
CF -> 1
SF -> 1
AF -> 1
RBX -> 1
OF -> 1
ZF -> 1
RAX -> 1

Target
RBX -> 1
AF -> 1
RAX -> 1
OF -> 1
ZF -> 1
CF -> 1
PF -> 1
SF -> 1

[4m[1m[34mkprove sbbb_r8_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sbbb_r8_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_sbbb_r8_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput sbbb_r8_rh[0m
[4m[1m[34msanitizeSpecOutput sbbb_r8_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msbbb_r8_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0))))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0))))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0))))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0))))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0)))), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0)))), addMInt(addMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _616)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI616) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _616), 56, 57), xorMInt(mi(1, 1), extractMInt(addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0)), 0, 1)))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _616), 56, 57), extractMInt(addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI616, 56, 57), xorMInt(mi(1, 1), extractMInt(addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0)), 0, 1)))  andBool   notBool  ( eqMInt(extractMInt(MI616, 56, 57), extractMInt(addMInt(addMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _615), 0, 48), concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), extractMInt(mi(64, _615), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI615, 0, 48), concatenateMInt(addMInt(addMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), extractMInt(MI615, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _616), 0, 56), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI616, 0, 56), addMInt(addMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _612))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI612)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn sbbb_r8_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-sbbb_r8_rh.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/sbbb_r8_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: setg_rh[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setg_rh.s[0m
[4m[1m[34mcreatespec setg_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setg_rh_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setg_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetg_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setg_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setg_rh.s[0m
Circuit: setnle %ah
%zf -> 1
%of -> 1
%sf -> 1
%ah -> 1

Total Circuit
ZF -> 1
OF -> 1
RAX -> 1
SF -> 1

Target
RAX -> 1
ZF -> 1
OF -> 1
SF -> 1

[4m[1m[34mkprove setg_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setg_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_setg_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput setg_rh[0m
[4m[1m[34msanitizeSpecOutput setg_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msetg_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _604), 0, 48), concatenateMInt(mi(8, 0), extractMInt(mi(64, _604), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI604, 0, 48), concatenateMInt(mi(8, 0), extractMInt(MI604, 56, 64))) )
echo Debug:  PreResult: "SF" |-> (mi(1, _605) )
echo Debug:  Result: "SF" |-> (MI605 )
echo Debug:  PreResult: "ZF" |-> (mi(1, _606) )
echo Debug:  Result: "ZF" |-> (MI606 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _604)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI604) )
echo Debug:  PreResult: "OF" |-> (mi(1, _603)   )
echo Debug:  Result: "OF" |-> (MI603   )
[4m[1m[34mwriteKDefn setg_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-setg_rh.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/setg_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: subb_rh_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subb_rh_r8.s[0m
[4m[1m[34mcreatespec subb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subb_rh_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subb_rh_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msubb_rh_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subb_rh_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subb_rh_r8.s[0m
Circuit: movzbl %bl, %ecx
%ecx -> 1
%bl -> 1
%rcx -> 1

Circuit: decl %ecx
%zf -> 1
%of -> 1
%af -> 1
%ecx -> 1
%rcx -> 1
%sf -> 1
%pf -> 1

Circuit: andl %ecx, %ecx
%zf -> 1
%cf -> 1
%af -> 1
%of -> 1
%ecx -> 1
%rcx -> 1
%sf -> 1
%pf -> 1

Circuit: sbbb %bl, %ah
%of -> 1
%af -> 1
%zf -> 1
%cf -> 1
%sf -> 1
%pf -> 1
%ah -> 1
%bl -> 1

Total Circuit
SF -> 1
PF -> 1
CF -> 1
OF -> 1
ZF -> 1
RAX -> 1
RBX -> 1
AF -> 1
RCX -> 1

Target
PF -> 1
CF -> 1
SF -> 1
AF -> 1
RBX -> 1
ZF -> 1
OF -> 1
RAX -> 1

[4m[1m[34mkprove subb_rh_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subb_rh_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subb_rh_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput subb_rh_r8[0m
[4m[1m[34msanitizeSpecOutput subb_rh_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msubb_rh_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 48, 56)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), mi(8, 0))))), mi(9, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 48, 56)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), mi(8, 0))))), mi(9, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 48, 56)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI617, 56, 64), mi(8, 0)), mi(8, 0))))), mi(9, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 48, 56)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI617, 56, 64), mi(8, 0)), mi(8, 0))))), mi(9, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(mi(64, _616), 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(MI616, 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI617, 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), mi(8, 0)))), addMInt(addMInt(extractMInt(mi(64, _616), 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI616, 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI617, 56, 64), mi(8, 0)), mi(8, 0)))), addMInt(addMInt(extractMInt(MI616, 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI617, 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(mi(64, _616), 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(MI616, 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI617, 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(32, 0), xorMInt(addMInt(addMInt(concatenateMInt(mi(24, 0), addMInt(addMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), mi(8, 0))), mi(32, -1)), mi(32, 0)), mi(32, 0))) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(32, 0), xorMInt(addMInt(addMInt(concatenateMInt(mi(24, 0), addMInt(addMInt(extractMInt(MI617, 56, 64), mi(8, 0)), mi(8, 0))), mi(32, -1)), mi(32, 0)), mi(32, 0))) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _616)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI616) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _616), 48, 49), xorMInt(mi(1, 1), extractMInt(addMInt(addMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), mi(8, 0)), 0, 1)))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _616), 48, 49), extractMInt(addMInt(addMInt(extractMInt(mi(64, _616), 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI616, 48, 49), xorMInt(mi(1, 1), extractMInt(addMInt(addMInt(extractMInt(MI617, 56, 64), mi(8, 0)), mi(8, 0)), 0, 1)))  andBool   notBool  ( eqMInt(extractMInt(MI616, 48, 49), extractMInt(addMInt(addMInt(extractMInt(MI616, 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI617, 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _616), 0, 48), concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _616), 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), extractMInt(mi(64, _616), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI616, 0, 48), concatenateMInt(addMInt(addMInt(extractMInt(MI616, 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI617, 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), extractMInt(MI616, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _617) )
echo Debug:  Result: "RBX" |-> (MI617 )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(mi(64, _616), 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _617), 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(MI616, 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI617, 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn subb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-subb_rh_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subb_rh_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: subb_rh_rh[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subb_rh_rh.s[0m
[4m[1m[34mcreatespec subb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subb_rh_rh_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subb_rh_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msubb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subb_rh_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subb_rh_rh.s[0m
Circuit: xorb %al, %al
%of -> 1
%af -> 1
%al -> 1
%zf -> 1
%cf -> 1
%pf -> 1
%sf -> 1

Circuit: sbbb %bh, %ah
%pf -> 1
%sf -> 1
%ah -> 1
%zf -> 1
%bh -> 1
%cf -> 1
%af -> 1
%of -> 1

Total Circuit
SF -> 1
PF -> 1
CF -> 1
ZF -> 1
OF -> 1
RAX -> 1
AF -> 1
RBX -> 1

Target
CF -> 1
PF -> 1
SF -> 1
AF -> 1
RBX -> 1
RAX -> 1
OF -> 1
ZF -> 1

[4m[1m[34mkprove subb_rh_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subb_rh_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subb_rh_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput subb_rh_rh[0m
[4m[1m[34msanitizeSpecOutput subb_rh_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msubb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 48, 56)), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), mi(9, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 48, 56)), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), mi(9, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI615, 48, 56)), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), mi(9, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI615, 48, 56)), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), mi(9, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(MI615, 48, 56), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _615), 48, 56), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI615, 48, 56), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), addMInt(addMInt(extractMInt(MI615, 48, 56), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(MI615, 48, 56), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _615)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI615) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _615), 48, 49), extractMInt(addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _615), 48, 49), extractMInt(addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI615, 48, 49), extractMInt(addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(MI615, 48, 49), extractMInt(addMInt(addMInt(extractMInt(MI615, 48, 56), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _615), 0, 48), concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1)), extractMInt(mi(64, _615), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI615, 0, 48), concatenateMInt(addMInt(addMInt(extractMInt(MI615, 48, 56), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1)), extractMInt(MI615, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _616) )
echo Debug:  Result: "RBX" |-> (MI616 )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(MI615, 48, 56), addMInt(addMInt(xorMInt(extractMInt(MI616, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn subb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-subb_rh_rh.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subb_rh_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: subl_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subl_r32_r32.s[0m
[4m[1m[34mcreatespec subl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subl_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msubl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subl_r32_r32.s[0m
Circuit: xorl %eax, %eax
%sf -> 1
%pf -> 1
%zf -> 1
%cf -> 1
%rax -> 1
%eax -> 1
%af -> 1
%of -> 1

Circuit: sbbl %ecx, %ebx
%zf -> 1
%cf -> 1
%of -> 1
%af -> 1
%ebx -> 1
%ecx -> 1
%sf -> 1
%pf -> 1
%rbx -> 1

Total Circuit
RCX -> 1
AF -> 1
RBX -> 1
RAX -> 1
ZF -> 1
OF -> 1
CF -> 1
PF -> 1
SF -> 1

Target
PF -> 1
CF -> 1
SF -> 1
RBX -> 1
AF -> 1
RCX -> 1
ZF -> 1
OF -> 1

[4m[1m[34mkprove subl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput subl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput subl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msubl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(mi(64, _616), 32, 64))), concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 32, 64))), mi(33, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(mi(64, _616), 32, 64))), concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 32, 64))), mi(33, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(MI616, 32, 64))), concatenateMInt(mi(1, 0), extractMInt(MI615, 32, 64))), mi(33, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(MI616, 32, 64))), concatenateMInt(mi(1, 0), extractMInt(MI615, 32, 64))), mi(33, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _616), 32, 64)), extractMInt(mi(64, _615), 32, 64)), mi(32, 1)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI616, 32, 64)), extractMInt(MI615, 32, 64)), mi(32, 1)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _616), 32, 64)), extractMInt(mi(64, _615), 32, 64)), addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _616), 32, 64)), extractMInt(mi(64, _615), 32, 64)), mi(32, 1))), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(32, -1), extractMInt(MI616, 32, 64)), extractMInt(MI615, 32, 64)), addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI616, 32, 64)), extractMInt(MI615, 32, 64)), mi(32, 1))), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _616), 32, 64)), extractMInt(mi(64, _615), 32, 64)), mi(32, 1)), 24, 32), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI616, 32, 64)), extractMInt(MI615, 32, 64)), mi(32, 1)), 24, 32), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _616) )
echo Debug:  Result: "RCX" |-> (MI616 )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(mi(64, _616), 32, 33)), extractMInt(mi(64, _615), 32, 33))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(mi(64, _616), 32, 33)), extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _616), 32, 64)), extractMInt(mi(64, _615), 32, 64)), mi(32, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(MI616, 32, 33)), extractMInt(MI615, 32, 33))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(MI616, 32, 33)), extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI616, 32, 64)), extractMInt(MI615, 32, 64)), mi(32, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (mi(64, 0) )
echo Debug:  Result: "RAX" |-> (mi(64, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _616), 32, 64)), extractMInt(mi(64, _615), 32, 64)), mi(32, 1))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI616, 32, 64)), extractMInt(MI615, 32, 64)), mi(32, 1))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _616), 32, 64)), extractMInt(mi(64, _615), 32, 64)), mi(32, 1)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI616, 32, 64)), extractMInt(MI615, 32, 64)), mi(32, 1)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn subl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-subl_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: subw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subw_r16_r16.s[0m
[4m[1m[34mcreatespec subw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msubw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subw_r16_r16.s[0m
Circuit: movswl %cx, %esp
%esp -> 1
%cx -> 1
%rsp -> 1

Circuit: xorw %ax, %ax
%cf -> 1
%ax -> 1
%zf -> 1
%of -> 1
%af -> 1
%pf -> 1
%sf -> 1

Circuit: rclb $0x1, %ch
\$0x1 -> 1
%cf -> 1
%of -> 1
%ch -> 1

Circuit: xorb %ah, %ch
%of -> 1
%af -> 1
%cf -> 1
%zf -> 1
%ah -> 1
%sf -> 1
%pf -> 1
%ch -> 1

Circuit: adcb %ah, %bh
%of -> 1
%af -> 1
%cf -> 1
%zf -> 1
%bh -> 1
%ah -> 1
%pf -> 1
%sf -> 1

Circuit: sbbw %sp, %bx
%pf -> 1
%sf -> 1
%bx -> 1
%zf -> 1
%cf -> 1
%of -> 1
%sp -> 1
%af -> 1

Total Circuit
CF -> 1
PF -> 1
SF -> 1
 -> 1
RCX -> 1
AF -> 1
RBX -> 1
RAX -> 1
RSP -> 1
OF -> 1
ZF -> 1

Target
PF -> 1
CF -> 1
SF -> 1
AF -> 1
RCX -> 1
RBX -> 1
ZF -> 1
OF -> 1

[4m[1m[34mkprove subw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput subw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput subw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msubw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _617), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _617), 56, 64))), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(mi(64, _618), 48, 64)))), concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _617), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _617), 56, 64))), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(mi(64, _618), 48, 64)))), concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(addMInt(addMInt(extractMInt(MI617, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI617, 56, 64))), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(MI618, 48, 64)))), concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI617, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI617, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(addMInt(addMInt(extractMInt(MI617, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI617, 56, 64))), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(MI618, 48, 64)))), concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI617, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI617, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _617), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _617), 56, 64)), xorMInt(mi(16, 65535), extractMInt(mi(64, _618), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(MI617, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI617, 56, 64)), xorMInt(mi(16, 65535), extractMInt(MI618, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI617, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI617, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _617), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _617), 56, 64)), xorMInt(mi(16, 65535), extractMInt(mi(64, _618), 48, 64))), addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _617), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _617), 56, 64)), xorMInt(mi(16, 65535), extractMInt(mi(64, _618), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(addMInt(addMInt(extractMInt(MI617, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI617, 56, 64)), xorMInt(mi(16, 65535), extractMInt(MI618, 48, 64))), addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(MI617, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI617, 56, 64)), xorMInt(mi(16, 65535), extractMInt(MI618, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI617, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI617, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(extractMInt(mi(64, _618), 0, 48), concatenateMInt(addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)), extractMInt(mi(64, _618), 56, 64))) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(extractMInt(MI618, 0, 48), concatenateMInt(addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)), extractMInt(MI618, 56, 64))) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _617), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _617), 56, 64)), xorMInt(mi(16, 65535), extractMInt(mi(64, _618), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 8, 16), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(MI617, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI617, 56, 64)), xorMInt(mi(16, 65535), extractMInt(MI618, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI617, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI617, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 8, 16), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _617)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI617) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(addMInt(extractMInt(mi(64, _617), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1), xorMInt(mi(1, 1), extractMInt(mi(64, _618), 48, 49)))  andBool   notBool  ( eqMInt(extractMInt(addMInt(addMInt(extractMInt(mi(64, _617), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1), extractMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _617), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _617), 56, 64)), xorMInt(mi(16, 65535), extractMInt(mi(64, _618), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(addMInt(extractMInt(MI617, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1), xorMInt(mi(1, 1), extractMInt(MI618, 48, 49)))  andBool   notBool  ( eqMInt(extractMInt(addMInt(addMInt(extractMInt(MI617, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1), extractMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(MI617, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI617, 56, 64)), xorMInt(mi(16, 65535), extractMInt(MI618, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI617, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI617, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (mi(64, 0) )
echo Debug:  Result: "RAX" |-> (mi(64, 0) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _617), 0, 48), addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _617), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _617), 56, 64)), xorMInt(mi(16, 65535), extractMInt(mi(64, _618), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI617, 0, 48), addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(MI617, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI617, 56, 64)), xorMInt(mi(16, 65535), extractMInt(MI618, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI617, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI617, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _617), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _617), 56, 64)), xorMInt(mi(16, 65535), extractMInt(mi(64, _618), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _617), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _618), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(MI617, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI617, 56, 64)), xorMInt(mi(16, 65535), extractMInt(MI618, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI617, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI617, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI618, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RSP" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _618), 48, 64))), 32, 64))   )
echo Debug:  Result: "RSP" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI618, 48, 64))), 32, 64))   )
[4m[1m[34mwriteKDefn subw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-subw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: testb_r8_rh[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testb_r8_rh.s[0m
[4m[1m[34mcreatespec testb_r8_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_testb_r8_rh_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testb_r8_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mtestb_r8_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: testb_r8_rh[0m
Undef Set
af -> 1

[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testb_r8_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testb_r8_rh.s[0m
Circuit: movzbw %ah, %ax
%ax -> 1
%ah -> 1

Circuit: testb %bl, %al
%af -> 1
%of -> 1
%zf -> 1
%cf -> 1
%al -> 1
%pf -> 1
%sf -> 1
%bl -> 1

Total Circuit
CF -> 1
PF -> 1
SF -> 1
AF -> 1
RBX -> 1
RAX -> 1
ZF -> 1
OF -> 1

Target
RAX -> 1
OF -> 1
ZF -> 1
AF -> 1
RBX -> 1
SF -> 1
CF -> 1
PF -> 1

[4m[1m[34mkprove testb_r8_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_testb_r8_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_testb_r8_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput testb_r8_rh[0m
[4m[1m[34msanitizeSpecOutput testb_r8_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mtestb_r8_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 48, 56))), 32, 33), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _615), 56, 64))), 32, 33), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _615), 56, 64))), 32, 33), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 48, 56))), 32, 33)))) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI614, 48, 56))), 32, 33), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI615, 56, 64))), 32, 33), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI615, 56, 64))), 32, 33), extractMInt(mi(64, svalueMInt(extractMInt(MI614, 48, 56))), 32, 33)))) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, _614), 48, 56), xorMInt(extractMInt(mi(64, _615), 56, 64), orMInt(extractMInt(mi(64, _615), 56, 64), extractMInt(mi(64, _614), 48, 56)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI614, 48, 56), xorMInt(extractMInt(MI615, 56, 64), orMInt(extractMInt(MI615, 56, 64), extractMInt(MI614, 48, 56)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _614), 0, 48), concatenateMInt(mi(8, 0), extractMInt(mi(64, _614), 48, 56))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI614, 0, 48), concatenateMInt(mi(8, 0), extractMInt(MI614, 48, 56))) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _615) )
echo Debug:  Result: "RBX" |-> (MI615 )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 48, 56))), 32, 64), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _615), 56, 64))), 32, 64), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _615), 56, 64))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 48, 56))), 32, 64)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI614, 48, 56))), 32, 64), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI615, 56, 64))), 32, 64), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI615, 56, 64))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(MI614, 48, 56))), 32, 64)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn testb_r8_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-testb_r8_rh.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testb_r8_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: testq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testq_r64_r64.s[0m
[4m[1m[34mcreatespec testq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_testq_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mtestq_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: testq_r64_r64[0m
Undef Set
af -> 1

[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testq_r64_r64.s[0m
Circuit: andnq %rbx, %rcx, %rdi
%rcx -> 1
%rdi -> 1
%rbx -> 1
%pf -> 1
%sf -> 1
%zf -> 1
%cf -> 1
bmi1 -> 1
%af -> 1
%of -> 1

Circuit: subq %rdi, %rbx
%rbx -> 1
%pf -> 1
%sf -> 1
%rdi -> 1
%of -> 1
%af -> 1
%cf -> 1
%zf -> 1

Total Circuit
PF -> 1
CF -> 1
SF -> 1
AF -> 1
RCX -> 1
 -> 1
RBX -> 1
RDI -> 1
OF -> 1
ZF -> 1

Target
OF -> 1
ZF -> 1
RBX -> 1
RCX -> 1
AF -> 1
SF -> 1
CF -> 1
PF -> 1

[4m[1m[34mkprove testq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_testq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_testq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput testq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput testq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mtestq_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), xorMInt(mi(64, _616), orMInt(mi(64, _616), mi(64, _615))))), concatenateMInt(mi(1, 0), mi(64, _615))), mi(65, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), xorMInt(mi(64, _616), orMInt(mi(64, _616), mi(64, _615))))), concatenateMInt(mi(1, 0), mi(64, _615))), mi(65, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), xorMInt(MI616, orMInt(MI616, MI615)))), concatenateMInt(mi(1, 0), MI615)), mi(65, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), xorMInt(MI616, orMInt(MI616, MI615)))), concatenateMInt(mi(1, 0), MI615)), mi(65, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(mi(64, _616), orMInt(mi(64, _616), mi(64, _615)))), mi(64, _615)), mi(64, 1)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(MI616, orMInt(MI616, MI615))), MI615), mi(64, 1)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(mi(64, _616), orMInt(mi(64, _616), mi(64, _615)))), mi(64, _615)), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(mi(64, _616), orMInt(mi(64, _616), mi(64, _615)))), mi(64, _615)), mi(64, 1))), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(MI616, orMInt(MI616, MI615))), MI615), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(MI616, orMInt(MI616, MI615))), MI615), mi(64, 1))), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(mi(64, _616), orMInt(mi(64, _616), mi(64, _615)))), mi(64, _615)), mi(64, 1)), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(MI616, orMInt(MI616, MI615))), MI615), mi(64, 1)), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _616) )
echo Debug:  Result: "RCX" |-> (MI616 )
echo Debug:  PreResult: "RDI" |-> (xorMInt(mi(64, _616), orMInt(mi(64, _616), mi(64, _615))) )
echo Debug:  Result: "RDI" |-> (xorMInt(MI616, orMInt(MI616, MI615)) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), xorMInt(extractMInt(mi(64, _616), 0, 1), orMInt(extractMInt(mi(64, _616), 0, 1), extractMInt(mi(64, _615), 0, 1)))), extractMInt(mi(64, _615), 0, 1))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), xorMInt(extractMInt(mi(64, _616), 0, 1), orMInt(extractMInt(mi(64, _616), 0, 1), extractMInt(mi(64, _615), 0, 1)))), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(mi(64, _616), orMInt(mi(64, _616), mi(64, _615)))), mi(64, _615)), mi(64, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), xorMInt(extractMInt(MI616, 0, 1), orMInt(extractMInt(MI616, 0, 1), extractMInt(MI615, 0, 1)))), extractMInt(MI615, 0, 1))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), xorMInt(extractMInt(MI616, 0, 1), orMInt(extractMInt(MI616, 0, 1), extractMInt(MI615, 0, 1)))), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(MI616, orMInt(MI616, MI615))), MI615), mi(64, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(mi(64, _616), orMInt(mi(64, _616), mi(64, _615)))), mi(64, _615)), mi(64, 1)) )
echo Debug:  Result: "RBX" |-> (addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(MI616, orMInt(MI616, MI615))), MI615), mi(64, 1)) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(mi(64, _616), orMInt(mi(64, _616), mi(64, _615)))), mi(64, _615)), mi(64, 1)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), xorMInt(MI616, orMInt(MI616, MI615))), MI615), mi(64, 1)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn testq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-testq_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vandpd_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vandpd_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vandpd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandpd_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vandpd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvandpd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vandpd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vandpd_ymm_ymm_ymm.s[0m
Circuit: vandps %ymm3, %ymm2, %ymm1
%ymm1 -> 1
avx -> 1
%ymm2 -> 1
%ymm3 -> 1

Total Circuit
YMM2 -> 1
 -> 1
YMM3 -> 1
YMM1 -> 1

Target
YMM2 -> 1
 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vandpd_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandpd_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vandpd_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vandpd_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vandpd_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvandpd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _601) )
echo Debug:  Result: "YMM2" |-> (MI601 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _602), 0, 64), extractMInt(mi(256, _601), 0, 64)), extractMInt(mi(256, _601), 0, 64)), xorMInt(extractMInt(mi(256, _602), 0, 64), extractMInt(mi(256, _601), 0, 64))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _602), 64, 128), extractMInt(mi(256, _601), 64, 128)), extractMInt(mi(256, _601), 64, 128)), xorMInt(extractMInt(mi(256, _602), 64, 128), extractMInt(mi(256, _601), 64, 128)))), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _602), 128, 192), extractMInt(mi(256, _601), 128, 192)), extractMInt(mi(256, _601), 128, 192)), xorMInt(extractMInt(mi(256, _602), 128, 192), extractMInt(mi(256, _601), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _602), 192, 256), extractMInt(mi(256, _601), 192, 256)), extractMInt(mi(256, _601), 192, 256)), xorMInt(extractMInt(mi(256, _602), 192, 256), extractMInt(mi(256, _601), 192, 256))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI602, 0, 64), extractMInt(MI601, 0, 64)), extractMInt(MI601, 0, 64)), xorMInt(extractMInt(MI602, 0, 64), extractMInt(MI601, 0, 64))), xorMInt(orMInt(xorMInt(extractMInt(MI602, 64, 128), extractMInt(MI601, 64, 128)), extractMInt(MI601, 64, 128)), xorMInt(extractMInt(MI602, 64, 128), extractMInt(MI601, 64, 128)))), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI602, 128, 192), extractMInt(MI601, 128, 192)), extractMInt(MI601, 128, 192)), xorMInt(extractMInt(MI602, 128, 192), extractMInt(MI601, 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(MI602, 192, 256), extractMInt(MI601, 192, 256)), extractMInt(MI601, 192, 256)), xorMInt(extractMInt(MI602, 192, 256), extractMInt(MI601, 192, 256))))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _602)   )
echo Debug:  Result: "YMM3" |-> (MI602   )
[4m[1m[34mwriteKDefn vandpd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vandpd_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vandpd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmadd132ps_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd132ps_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfmadd132ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd132ps_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd132ps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd132ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd132ps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd132ps_xmm_xmm_xmm.s[0m
Circuit: vfmadd213ps %xmm2, %xmm1, %xmm3
%xmm2 -> 1
%xmm1 -> 1
%xmm3 -> 1
fma -> 1
%ymm3 -> 1

Circuit: callq .move_128_064_xmm3_r8_r9
%xmm3 -> 1
%r9 -> 1
%r8 -> 1

Circuit: vzeroall
%ymm2 -> 1
%ymm5 -> 1
%ymm3 -> 1
%ymm10 -> 1
%ymm11 -> 1
avx -> 1
%ymm6 -> 1
%ymm1 -> 1
%ymm15 -> 1
%ymm7 -> 1
%ymm0 -> 1
%ymm4 -> 1
%ymm13 -> 1
%ymm8 -> 1
%ymm9 -> 1
%ymm12 -> 1
%ymm14 -> 1

Circuit: callq .move_064_128_r8_r9_xmm2
%r8 -> 1
%r9 -> 1
%xmm2 -> 1

Circuit: vorps %xmm14, %xmm2, %xmm1
%xmm14 -> 1
%xmm2 -> 1
%xmm1 -> 1
avx -> 1
%ymm1 -> 1

Total Circuit
YMM14 -> 1
YMM0 -> 1
 -> 1
YMM13 -> 1
YMM3 -> 1
YMM10 -> 1
YMM4 -> 1
YMM9 -> 1
YMM1 -> 1
YMM8 -> 1
YMM12 -> 1
YMM11 -> 1
YMM5 -> 1
YMM2 -> 1
R9 -> 1
YMM15 -> 1
YMM7 -> 1
R8 -> 1
YMM6 -> 1

Target
YMM1 -> 1
YMM3 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove vfmadd132ps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd132ps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd132ps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmadd132ps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmadd132ps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd132ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI615, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 192, 224), 24, 8) )  +Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI615, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 224, 256), 24, 8) )  +Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32)) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8) ) , 32)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI615, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 128, 160), 24, 8) )  +Float  MInt2Float(extractMInt(MI616, 128, 160), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI615, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 160, 192), 24, 8) )  +Float  MInt2Float(extractMInt(MI616, 160, 192), 24, 8) ) , 32)) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI615, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 128, 160), 24, 8) )  +Float  MInt2Float(extractMInt(MI616, 128, 160), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI615, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 160, 192), 24, 8) )  +Float  MInt2Float(extractMInt(MI616, 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI615, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 192, 224), 24, 8) )  +Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI615, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 224, 256), 24, 8) )  +Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 128, 160), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _616), 128, 160), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 160, 192), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _616), 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 192, 224), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _616), 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _615), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _617), 224, 256), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _616), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI615, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 128, 160), 24, 8) )  +Float  MInt2Float(extractMInt(MI616, 128, 160), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI615, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 160, 192), 24, 8) )  +Float  MInt2Float(extractMInt(MI616, 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI615, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 192, 224), 24, 8) )  +Float  MInt2Float(extractMInt(MI616, 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI615, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI617, 224, 256), 24, 8) )  +Float  MInt2Float(extractMInt(MI616, 224, 256), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vfmadd132ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmadd132ps_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd132ps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmadd213pd_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213pd_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfmadd213pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd213pd_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd213pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213pd_xmm_xmm_xmm.s[0m
Circuit: vfmadd132pd %xmm1, %xmm3, %xmm2
%ymm2 -> 1
%xmm1 -> 1
%xmm2 -> 1
fma -> 1
%xmm3 -> 1

Circuit: callq .move_128_064_xmm2_r10_r11
%xmm2 -> 1
%r11 -> 1
%r10 -> 1

Circuit: vzeroall
%ymm13 -> 1
%ymm8 -> 1
%ymm12 -> 1
%ymm9 -> 1
%ymm7 -> 1
%ymm4 -> 1
%ymm0 -> 1
%ymm14 -> 1
%ymm11 -> 1
avx -> 1
%ymm6 -> 1
%ymm2 -> 1
%ymm5 -> 1
%ymm3 -> 1
%ymm10 -> 1
%ymm15 -> 1
%ymm1 -> 1

Circuit: callq .move_064_128_r10_r11_xmm1
%xmm1 -> 1
%r11 -> 1
%r10 -> 1

Total Circuit
YMM0 -> 1
YMM14 -> 1
 -> 1
YMM3 -> 1
YMM13 -> 1
YMM10 -> 1
YMM4 -> 1
YMM1 -> 1
YMM9 -> 1
YMM8 -> 1
YMM12 -> 1
YMM11 -> 1
YMM5 -> 1
R10 -> 1
YMM2 -> 1
YMM15 -> 1
YMM7 -> 1
R11 -> 1
YMM6 -> 1

Target
YMM1 -> 1
YMM3 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove vfmadd213pd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd213pd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd213pd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmadd213pd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmadd213pd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd213pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "R10" |-> (Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11) )  ) , 64) )
echo Debug:  Result: "R10" |-> (Float2MInt( (  ( MInt2Float(extractMInt(MI616, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI617, 192, 256), 53, 11) )  ) , 64) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _617), 128, 192), 53, 11) )  ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI616, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 128, 192), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI617, 128, 192), 53, 11) )  ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI616, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI617, 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "R11" |-> (Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _616), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _615), 128, 192), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _617), 128, 192), 53, 11) )  ) , 64) )
echo Debug:  Result: "R11" |-> (Float2MInt( (  ( MInt2Float(extractMInt(MI616, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI615, 128, 192), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI617, 128, 192), 53, 11) )  ) , 64) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vfmadd213pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmadd213pd_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd213pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmadd231sd_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd231sd_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfmadd231sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd231sd_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd231sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd231sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd231sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd231sd_xmm_xmm_xmm.s[0m
Circuit: vfmadd132pd %xmm3, %xmm1, %xmm2
%xmm3 -> 1
fma -> 1
%xmm2 -> 1
%xmm1 -> 1
%ymm2 -> 1

Circuit: callq .move_128_64_xmm2_xmm10_xmm11
%xmm11 -> 1
%xmm10 -> 1
%xmm2 -> 1

Circuit: vmovsd %xmm10, %xmm1, %xmm1
%xmm1 -> 1
%xmm10 -> 1
%ymm1 -> 1
avx -> 1

Total Circuit
YMM2 -> 1
YMM11 -> 1
 -> 1
YMM3 -> 1
YMM10 -> 1
YMM1 -> 1

Target
YMM1 -> 1
YMM3 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove vfmadd231sd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd231sd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmadd231sd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmadd231sd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmadd231sd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmadd231sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _603), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 128, 192), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _602), 128, 192), 53, 11) )  ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _602), 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI603, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 128, 192), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI602, 128, 192), 53, 11) )  ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI603, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI602, 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _602), 128, 192), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _602), 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI602, 128, 192), Float2MInt( (  ( MInt2Float(extractMInt(MI603, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI602, 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(192, 0), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _602), 192, 256), 53, 11) )  ) , 64)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(192, 0), Float2MInt( (  ( MInt2Float(extractMInt(MI603, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI602, 192, 256), 53, 11) )  ) , 64)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(192, 0), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _603), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 128, 192), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _602), 128, 192), 53, 11) )  ) , 64)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(192, 0), Float2MInt( (  ( MInt2Float(extractMInt(MI603, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 128, 192), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI602, 128, 192), 53, 11) )  ) , 64)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _604) )
echo Debug:  Result: "YMM3" |-> (MI604 )
[4m[1m[34mwriteKDefn vfmadd231sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmadd231sd_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmadd231sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmaddsub213ps_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmaddsub213ps_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfmaddsub213ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmaddsub213ps_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmaddsub213ps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmaddsub213ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmaddsub213ps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmaddsub213ps_xmm_xmm_xmm.s[0m
Circuit: vpor %xmm3, %xmm3, %xmm10
%ymm10 -> 1
avx -> 1
%xmm10 -> 1
%xmm3 -> 1

Circuit: vxorpd %xmm3, %xmm10, %xmm3
avx -> 1
%ymm3 -> 1
%xmm3 -> 1
%xmm10 -> 1

Circuit: vfnmsub132ps %ymm3, %ymm3, %ymm3
%ymm3 -> 1
fma -> 1

Circuit: addsubps %xmm10, %xmm3
%xmm10 -> 1
%xmm3 -> 1
pni -> 1

Circuit: vfmadd213ps %xmm3, %xmm2, %xmm1
%ymm1 -> 1
fma -> 1
%xmm3 -> 1
%xmm2 -> 1
%xmm1 -> 1

Total Circuit
YMM2 -> 1
 -> 1
YMM10 -> 1
YMM3 -> 1
YMM1 -> 1

Target
YMM1 -> 1
 -> 1
YMM3 -> 1
YMM2 -> 1

[4m[1m[34mkprove vfmaddsub213ps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmaddsub213ps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmaddsub213ps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmaddsub213ps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmaddsub213ps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmaddsub213ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _602) )
echo Debug:  Result: "YMM2" |-> (MI602 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _602), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _601), 128, 160), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _603), 128, 160), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _602), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _601), 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _603), 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _602), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _601), 192, 224), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _603), 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _602), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _601), 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _603), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI602, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI601, 128, 160), 24, 8) )  +Float  MInt2Float(extractMInt(MI603, 128, 160), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI602, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI601, 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(MI603, 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI602, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI601, 192, 224), 24, 8) )  +Float  MInt2Float(extractMInt(MI603, 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI602, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI601, 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(MI603, 224, 256), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _603), 128, 256)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), extractMInt(MI603, 128, 256)) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 170141183500083312998042844551658340352), concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 128, 160), Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(mi(256, _603), 160, 192), 24, 8) ) , 32)), concatenateMInt(extractMInt(mi(256, _603), 192, 224), Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(mi(256, _603), 224, 256), 24, 8) ) , 32))))   )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 170141183500083312998042844551658340352), concatenateMInt(concatenateMInt(extractMInt(MI603, 128, 160), Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(MI603, 160, 192), 24, 8) ) , 32)), concatenateMInt(extractMInt(MI603, 192, 224), Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(MI603, 224, 256), 24, 8) ) , 32))))   )
[4m[1m[34mwriteKDefn vfmaddsub213ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmaddsub213ps_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmaddsub213ps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmsub213sd_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub213sd_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfnmsub213sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub213sd_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub213sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub213sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub213sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub213sd_xmm_xmm_xmm.s[0m
Circuit: movddup %xmm1, %xmm14
%xmm14 -> 1
%xmm1 -> 1
pni -> 1

Circuit: callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11
%xmm9 -> 1
%xmm2 -> 1
%xmm11 -> 1
%xmm10 -> 1
%xmm8 -> 1

Circuit: vminsd %xmm8, %xmm10, %xmm15
%xmm10 -> 1
%xmm15 -> 1
avx -> 1
%ymm15 -> 1
%xmm8 -> 1

Circuit: movaps %xmm3, %xmm6
%xmm3 -> 1
sse -> 1
%xmm6 -> 1

Circuit: vfnmsub213pd %xmm2, %xmm15, %xmm15
%xmm2 -> 1
%xmm15 -> 1
fma -> 1
%ymm15 -> 1

Circuit: vxorps %xmm8, %xmm1, %xmm10
%xmm8 -> 1
%ymm10 -> 1
avx -> 1
%xmm10 -> 1
%xmm1 -> 1

Circuit: vfmsub213sd %xmm6, %xmm15, %xmm14
%xmm6 -> 1
%ymm14 -> 1
fma -> 1
%xmm15 -> 1
%xmm14 -> 1

Circuit: vmovsd %xmm14, %xmm10, %xmm1
avx -> 1
%ymm1 -> 1
%xmm14 -> 1
%xmm1 -> 1
%xmm10 -> 1

Total Circuit
YMM6 -> 1
YMM15 -> 1
YMM2 -> 1
YMM11 -> 1
YMM1 -> 1
YMM9 -> 1
YMM8 -> 1
 -> 1
YMM14 -> 1
YMM10 -> 1
YMM3 -> 1

Target
YMM2 -> 1
YMM1 -> 1
 -> 1
YMM3 -> 1

[4m[1m[34mkprove vfnmsub213sd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub213sd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub213sd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmsub213sd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmsub213sd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub213sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _608) )
echo Debug:  Result: "YMM2" |-> (MI608 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(mi(64, 0), extractMInt(mi(256, _607), 128, 192)), Float2MInt( (  (  ( negateFloat( ( minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _608), 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _608), 160, 192)), 53, 11))  *Float  minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _608), 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _608), 160, 192)), 53, 11)) ) )  -Float  MInt2Float(extractMInt(mi(256, _608), 192, 256), 53, 11) )  *Float  MInt2Float(extractMInt(mi(256, _607), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _609), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(mi(64, 0), extractMInt(MI607, 128, 192)), Float2MInt( (  (  ( negateFloat( ( minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI608, 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI608, 160, 192)), 53, 11))  *Float  minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI608, 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI608, 160, 192)), 53, 11)) ) )  -Float  MInt2Float(extractMInt(MI608, 192, 256), 53, 11) )  *Float  MInt2Float(extractMInt(MI607, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI609, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(mi(64, 0), extractMInt(mi(256, _607), 128, 192)), xorMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _608), 224, 256)), extractMInt(mi(256, _607), 192, 256)))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(mi(64, 0), extractMInt(MI607, 128, 192)), xorMInt(concatenateMInt(mi(32, 0), extractMInt(MI608, 224, 256)), extractMInt(MI607, 192, 256)))) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _608), 128, 160)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(MI608, 128, 160)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _609) )
echo Debug:  Result: "YMM3" |-> (MI609 )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _609), 128, 256)) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(128, 0), extractMInt(MI609, 128, 256)) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _608), 224, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(MI608, 224, 256)) )
echo Debug:  PreResult: "YMM14" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _607), 192, 256), Float2MInt( (  (  ( negateFloat( ( minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _608), 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _608), 160, 192)), 53, 11))  *Float  minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _608), 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _608), 160, 192)), 53, 11)) ) )  -Float  MInt2Float(extractMInt(mi(256, _608), 192, 256), 53, 11) )  *Float  MInt2Float(extractMInt(mi(256, _607), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _609), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM14" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI607, 192, 256), Float2MInt( (  (  ( negateFloat( ( minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI608, 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI608, 160, 192)), 53, 11))  *Float  minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI608, 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI608, 160, 192)), 53, 11)) ) )  -Float  MInt2Float(extractMInt(MI608, 192, 256), 53, 11) )  *Float  MInt2Float(extractMInt(MI607, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI609, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM15" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _608), 128, 192), 53, 11) ) , 64), Float2MInt( ( negateFloat( ( minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _608), 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _608), 160, 192)), 53, 11))  *Float  minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _608), 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _608), 160, 192)), 53, 11)) ) )  -Float  MInt2Float(extractMInt(mi(256, _608), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM15" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( -0e+00  -Float  MInt2Float(extractMInt(MI608, 128, 192), 53, 11) ) , 64), Float2MInt( ( negateFloat( ( minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI608, 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI608, 160, 192)), 53, 11))  *Float  minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI608, 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI608, 160, 192)), 53, 11)) ) )  -Float  MInt2Float(extractMInt(MI608, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _608), 192, 224))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(MI608, 192, 224))   )
[4m[1m[34mwriteKDefn vfnmsub213sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmsub213sd_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub213sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmsub231pd_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231pd_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfnmsub231pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub231pd_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub231pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231pd_xmm_xmm_xmm.s[0m
Circuit: vorpd %xmm3, %xmm3, %xmm6
%xmm6 -> 1
avx -> 1
%ymm6 -> 1
%xmm3 -> 1

Circuit: vmovapd %xmm1, %xmm3
%xmm1 -> 1
%xmm3 -> 1
avx -> 1
%ymm3 -> 1

Circuit: movaps %xmm6, %xmm1
%xmm1 -> 1
sse -> 1
%xmm6 -> 1

Circuit: vfnmsub213pd %xmm3, %xmm2, %xmm1
%ymm1 -> 1
%xmm2 -> 1
%xmm1 -> 1
fma -> 1
%xmm3 -> 1

Total Circuit
YMM2 -> 1
YMM6 -> 1
YMM1 -> 1
YMM3 -> 1
 -> 1

Target
YMM2 -> 1
 -> 1
YMM3 -> 1
YMM1 -> 1

[4m[1m[34mkprove vfnmsub231pd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub231pd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub231pd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmsub231pd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmsub231pd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub231pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _602) )
echo Debug:  Result: "YMM2" |-> (MI602 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _602), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _603), 128, 192), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _601), 128, 192), 53, 11) ) , 64), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _602), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _601), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI602, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI603, 128, 192), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI601, 128, 192), 53, 11) ) , 64), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI602, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI603, 192, 256), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI601, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _601), 128, 256)) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), extractMInt(MI601, 128, 256)) )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _603), 128, 256))   )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(128, 0), extractMInt(MI603, 128, 256))   )
[4m[1m[34mwriteKDefn vfnmsub231pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmsub231pd_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vhaddps_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vhaddps_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vhaddps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhaddps_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vhaddps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvhaddps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vhaddps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vhaddps_xmm_xmm_xmm.s[0m
Circuit: vpbroadcastq %xmm3, %xmm14
avx2 -> 1
%xmm14 -> 1
%ymm14 -> 1
%xmm3 -> 1

Circuit: callq .move_128_64_xmm2_xmm12_xmm13
%xmm12 -> 1
%xmm2 -> 1
%xmm13 -> 1

Circuit: vunpckhps %xmm3, %xmm14, %xmm12
%xmm3 -> 1
%ymm12 -> 1
%xmm14 -> 1
%xmm12 -> 1
avx -> 1

Circuit: vpunpckldq %xmm13, %xmm2, %xmm1
avx -> 1
%ymm1 -> 1
%xmm13 -> 1
%xmm2 -> 1
%xmm1 -> 1

Circuit: vpunpckhqdq %ymm12, %ymm1, %ymm11
%ymm12 -> 1
%ymm11 -> 1
avx2 -> 1
%ymm1 -> 1

Circuit: movlhps %xmm12, %xmm1
%xmm1 -> 1
%xmm12 -> 1
sse -> 1

Circuit: addps %xmm11, %xmm1
%xmm1 -> 1
%xmm11 -> 1
sse -> 1

Total Circuit
YMM13 -> 1
YMM3 -> 1
 -> 1
YMM14 -> 1
YMM1 -> 1
YMM11 -> 1
YMM12 -> 1
YMM2 -> 1

Target
YMM1 -> 1
 -> 1
YMM3 -> 1
YMM2 -> 1

[4m[1m[34mkprove vhaddps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhaddps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhaddps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vhaddps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vhaddps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvhaddps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _606), 128, 160), extractMInt(mi(256, _606), 192, 224)), concatenateMInt(extractMInt(mi(256, _606), 160, 192), extractMInt(mi(256, _606), 224, 256)))) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI606, 128, 160), extractMInt(MI606, 192, 224)), concatenateMInt(extractMInt(MI606, 160, 192), extractMInt(MI606, 224, 256)))) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _605) )
echo Debug:  Result: "YMM2" |-> (MI605 )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _605), 128, 192)) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(192, 0), extractMInt(MI605, 128, 192)) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _605), 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _605), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _605), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI606, 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI606, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI606, 224, 256), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI605, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI605, 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI605, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI605, 224, 256), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _606), 128, 160), extractMInt(mi(256, _606), 192, 224)), concatenateMInt(extractMInt(mi(256, _605), 128, 160), extractMInt(mi(256, _605), 192, 224)))) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI606, 128, 160), extractMInt(MI606, 192, 224)), concatenateMInt(extractMInt(MI605, 128, 160), extractMInt(MI605, 192, 224)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _606) )
echo Debug:  Result: "YMM3" |-> (MI606 )
echo Debug:  PreResult: "YMM14" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _606), 192, 256), extractMInt(mi(256, _606), 192, 256))) )
echo Debug:  Result: "YMM14" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI606, 192, 256), extractMInt(MI606, 192, 256))) )
[4m[1m[34mwriteKDefn vhaddps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vhaddps_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vhaddps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vhsubps_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vhsubps_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vhsubps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhsubps_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vhsubps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvhsubps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vhsubps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vhsubps_ymm_ymm_ymm.s[0m
Circuit: vmovddup %ymm2, %ymm12
%ymm12 -> 1
avx -> 1
%ymm2 -> 1

Circuit: vpunpckhdq %ymm2, %ymm12, %ymm0
%ymm2 -> 1
avx2 -> 1
%ymm0 -> 1
%ymm12 -> 1

Circuit: vunpcklps %ymm3, %ymm0, %ymm6
%ymm0 -> 1
avx -> 1
%ymm6 -> 1
%ymm3 -> 1

Circuit: vpunpckhdq %ymm3, %ymm6, %ymm1
%ymm1 -> 1
%ymm3 -> 1
avx2 -> 1
%ymm6 -> 1

Circuit: vunpcklps %ymm1, %ymm6, %ymm14
%ymm14 -> 1
avx -> 1
%ymm6 -> 1
%ymm1 -> 1

Circuit: vpunpckhqdq %ymm1, %ymm0, %ymm5
avx2 -> 1
%ymm5 -> 1
%ymm1 -> 1
%ymm0 -> 1

Circuit: vsubps %ymm5, %ymm14, %ymm1
%ymm5 -> 1
avx -> 1
%ymm1 -> 1
%ymm14 -> 1

Total Circuit
YMM5 -> 1
YMM2 -> 1
YMM6 -> 1
YMM1 -> 1
YMM14 -> 1
YMM0 -> 1
 -> 1
YMM3 -> 1
YMM12 -> 1

Target
YMM1 -> 1
YMM3 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove vhsubps_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhsubps_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhsubps_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vhsubps_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vhsubps_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvhsubps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(concatenateMInt(extractMInt(mi(256, _606), 64, 128), extractMInt(mi(256, _606), 64, 128)), concatenateMInt(extractMInt(mi(256, _606), 192, 256), extractMInt(mi(256, _606), 192, 256))) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(concatenateMInt(extractMInt(MI606, 64, 128), extractMInt(MI606, 64, 128)), concatenateMInt(extractMInt(MI606, 192, 256), extractMInt(MI606, 192, 256))) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _606) )
echo Debug:  Result: "YMM2" |-> (MI606 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _607), 32, 64), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _607), 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _607), 96, 128), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _607), 64, 96), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 32, 64), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _606), 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 96, 128), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _606), 64, 96), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _607), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _607), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _607), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _607), 192, 224), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _606), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _606), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _606), 192, 224), 24, 8) ) , 32)))))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI607, 32, 64), 24, 8)  -Float  MInt2Float(extractMInt(MI607, 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI607, 96, 128), 24, 8)  -Float  MInt2Float(extractMInt(MI607, 64, 96), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 32, 64), 24, 8)  -Float  MInt2Float(extractMInt(MI606, 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 96, 128), 24, 8)  -Float  MInt2Float(extractMInt(MI606, 64, 96), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI607, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI607, 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI607, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI607, 192, 224), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI606, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI606, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI606, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI606, 192, 224), 24, 8) ) , 32)))))))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _607) )
echo Debug:  Result: "YMM3" |-> (MI607 )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _607), 64, 96), extractMInt(mi(256, _606), 32, 64)), concatenateMInt(extractMInt(mi(256, _607), 96, 128), extractMInt(mi(256, _606), 96, 128))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _607), 192, 224), extractMInt(mi(256, _606), 160, 192)), concatenateMInt(extractMInt(mi(256, _607), 224, 256), extractMInt(mi(256, _606), 224, 256)))) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI607, 64, 96), extractMInt(MI606, 32, 64)), concatenateMInt(extractMInt(MI607, 96, 128), extractMInt(MI606, 96, 128))), concatenateMInt(concatenateMInt(extractMInt(MI607, 192, 224), extractMInt(MI606, 160, 192)), concatenateMInt(extractMInt(MI607, 224, 256), extractMInt(MI606, 224, 256)))) )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _607), 0, 32), extractMInt(mi(256, _607), 64, 96)), concatenateMInt(extractMInt(mi(256, _606), 0, 32), extractMInt(mi(256, _606), 64, 96))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _607), 128, 160), extractMInt(mi(256, _607), 192, 224)), concatenateMInt(extractMInt(mi(256, _606), 128, 160), extractMInt(mi(256, _606), 192, 224)))) )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI607, 0, 32), extractMInt(MI607, 64, 96)), concatenateMInt(extractMInt(MI606, 0, 32), extractMInt(MI606, 64, 96))), concatenateMInt(concatenateMInt(extractMInt(MI607, 128, 160), extractMInt(MI607, 192, 224)), concatenateMInt(extractMInt(MI606, 128, 160), extractMInt(MI606, 192, 224)))) )
echo Debug:  PreResult: "YMM14" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _607), 32, 64), extractMInt(mi(256, _607), 96, 128)), concatenateMInt(extractMInt(mi(256, _606), 32, 64), extractMInt(mi(256, _606), 96, 128))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _607), 160, 192), extractMInt(mi(256, _607), 224, 256)), concatenateMInt(extractMInt(mi(256, _606), 160, 192), extractMInt(mi(256, _606), 224, 256)))) )
echo Debug:  Result: "YMM14" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI607, 32, 64), extractMInt(MI607, 96, 128)), concatenateMInt(extractMInt(MI606, 32, 64), extractMInt(MI606, 96, 128))), concatenateMInt(concatenateMInt(extractMInt(MI607, 160, 192), extractMInt(MI607, 224, 256)), concatenateMInt(extractMInt(MI606, 160, 192), extractMInt(MI606, 224, 256)))) )
echo Debug:  PreResult: "YMM0" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _606), 0, 32), extractMInt(mi(256, _606), 64, 96)), concatenateMInt(extractMInt(mi(256, _606), 32, 64), extractMInt(mi(256, _606), 96, 128))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _606), 128, 160), extractMInt(mi(256, _606), 192, 224)), concatenateMInt(extractMInt(mi(256, _606), 160, 192), extractMInt(mi(256, _606), 224, 256))))   )
echo Debug:  Result: "YMM0" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI606, 0, 32), extractMInt(MI606, 64, 96)), concatenateMInt(extractMInt(MI606, 32, 64), extractMInt(MI606, 96, 128))), concatenateMInt(concatenateMInt(extractMInt(MI606, 128, 160), extractMInt(MI606, 192, 224)), concatenateMInt(extractMInt(MI606, 160, 192), extractMInt(MI606, 224, 256))))   )
[4m[1m[34mwriteKDefn vhsubps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vhsubps_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vhsubps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpaddd_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpaddd_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vpaddd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpaddd_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpaddd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpaddd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpaddd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpaddd_xmm_xmm_xmm.s[0m
Circuit: paddd %xmm3, %xmm2
%xmm2 -> 1
sse2 -> 1
%xmm3 -> 1

Circuit: callq .move_128_064_xmm2_r12_r13
%r13 -> 1
%r12 -> 1
%xmm2 -> 1

Circuit: vzeroall
%ymm14 -> 1
%ymm4 -> 1
%ymm0 -> 1
%ymm7 -> 1
%ymm8 -> 1
%ymm9 -> 1
%ymm12 -> 1
%ymm13 -> 1
%ymm1 -> 1
%ymm15 -> 1
%ymm3 -> 1
%ymm10 -> 1
%ymm2 -> 1
%ymm5 -> 1
%ymm11 -> 1
avx -> 1
%ymm6 -> 1

Circuit: callq .move_064_128_r12_r13_xmm1
%r13 -> 1
%xmm1 -> 1
%r12 -> 1

Total Circuit
YMM7 -> 1
YMM6 -> 1
YMM5 -> 1
YMM2 -> 1
R12 -> 1
YMM15 -> 1
YMM12 -> 1
YMM11 -> 1
YMM14 -> 1
YMM0 -> 1
 -> 1
YMM13 -> 1
YMM3 -> 1
YMM10 -> 1
R13 -> 1
YMM4 -> 1
YMM9 -> 1
YMM1 -> 1
YMM8 -> 1

Target
 -> 1
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove vpaddd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpaddd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpaddd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpaddd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpaddd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpaddd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _616), 128, 160)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _617), 128, 160))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _616), 160, 192), extractMInt(mi(256, _617), 160, 192)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _616), 160, 192))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _617), 192, 224), extractMInt(mi(256, _617), 192, 224)), concatenateMInt(extractMInt(mi(256, _617), 192, 224), extractMInt(mi(256, _616), 192, 224))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _617), 224, 256), extractMInt(mi(256, _617), 224, 256)), concatenateMInt(extractMInt(mi(256, _617), 224, 256), extractMInt(mi(256, _616), 224, 256))), mi(64, 0)), 32, 64)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(MI616, 128, 160)), concatenateMInt(mi(32, 0), extractMInt(MI617, 128, 160))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI616, 160, 192), extractMInt(MI617, 160, 192)), concatenateMInt(mi(32, 0), extractMInt(MI616, 160, 192))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI617, 192, 224), extractMInt(MI617, 192, 224)), concatenateMInt(extractMInt(MI617, 192, 224), extractMInt(MI616, 192, 224))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI617, 224, 256), extractMInt(MI617, 224, 256)), concatenateMInt(extractMInt(MI617, 224, 256), extractMInt(MI616, 224, 256))), mi(64, 0)), 32, 64)))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "R12" |-> (concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _617), 192, 224), extractMInt(mi(256, _617), 192, 224)), concatenateMInt(extractMInt(mi(256, _617), 192, 224), extractMInt(mi(256, _616), 192, 224))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _617), 224, 256), extractMInt(mi(256, _617), 224, 256)), concatenateMInt(extractMInt(mi(256, _617), 224, 256), extractMInt(mi(256, _616), 224, 256))), mi(64, 0)), 32, 64)) )
echo Debug:  Result: "R12" |-> (concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI617, 192, 224), extractMInt(MI617, 192, 224)), concatenateMInt(extractMInt(MI617, 192, 224), extractMInt(MI616, 192, 224))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI617, 224, 256), extractMInt(MI617, 224, 256)), concatenateMInt(extractMInt(MI617, 224, 256), extractMInt(MI616, 224, 256))), mi(64, 0)), 32, 64)) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "R13" |-> (concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _616), 128, 160)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _617), 128, 160))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _616), 160, 192), extractMInt(mi(256, _617), 160, 192)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _616), 160, 192))), mi(64, 0)), 32, 64)) )
echo Debug:  Result: "R13" |-> (concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(MI616, 128, 160)), concatenateMInt(mi(32, 0), extractMInt(MI617, 128, 160))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI616, 160, 192), extractMInt(MI617, 160, 192)), concatenateMInt(mi(32, 0), extractMInt(MI616, 160, 192))), mi(64, 0)), 32, 64)) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vpaddd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpaddd_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpaddd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpaddd_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpaddd_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vpaddd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpaddd_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpaddd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpaddd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpaddd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpaddd_ymm_ymm_ymm.s[0m
Circuit: callq .move_256_128_ymm2_xmm12_xmm13
%ymm2 -> 1
%xmm13 -> 1
%xmm12 -> 1

Circuit: callq .move_256_128_ymm3_xmm10_xmm11
%ymm3 -> 1
%xmm10 -> 1
%xmm11 -> 1

Circuit: paddd %xmm3, %xmm12
%xmm3 -> 1
sse2 -> 1
%xmm12 -> 1

Circuit: paddd %xmm11, %xmm13
%xmm13 -> 1
%xmm11 -> 1
sse2 -> 1

Circuit: callq .move_128_256_xmm12_xmm13_ymm1
%ymm1 -> 1
%xmm13 -> 1
%xmm12 -> 1

Total Circuit
YMM2 -> 1
YMM12 -> 1
YMM11 -> 1
YMM13 -> 1
YMM3 -> 1
YMM10 -> 1
 -> 1
YMM1 -> 1

Target
YMM2 -> 1
YMM3 -> 1
 -> 1
YMM1 -> 1

[4m[1m[34mkprove vpaddd_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpaddd_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpaddd_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpaddd_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vpaddd_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpaddd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _605), 128, 160)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 128, 160))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _605), 160, 192), extractMInt(mi(256, _606), 160, 192)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _605), 160, 192))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _606), 192, 224), extractMInt(mi(256, _606), 192, 224)), concatenateMInt(extractMInt(mi(256, _606), 192, 224), extractMInt(mi(256, _605), 192, 224))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _606), 224, 256), extractMInt(mi(256, _606), 224, 256)), concatenateMInt(extractMInt(mi(256, _606), 224, 256), extractMInt(mi(256, _605), 224, 256))), mi(64, 0)), 32, 64)))) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(MI605, 128, 160)), concatenateMInt(mi(32, 0), extractMInt(MI606, 128, 160))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI605, 160, 192), extractMInt(MI606, 160, 192)), concatenateMInt(mi(32, 0), extractMInt(MI605, 160, 192))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI606, 192, 224), extractMInt(MI606, 192, 224)), concatenateMInt(extractMInt(MI606, 192, 224), extractMInt(MI605, 192, 224))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI606, 224, 256), extractMInt(MI606, 224, 256)), concatenateMInt(extractMInt(MI606, 224, 256), extractMInt(MI605, 224, 256))), mi(64, 0)), 32, 64)))) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _605) )
echo Debug:  Result: "YMM2" |-> (MI605 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _605), 0, 32)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 0, 32))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _605), 32, 64), extractMInt(mi(256, _606), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _605), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _606), 64, 96), extractMInt(mi(256, _606), 64, 96)), concatenateMInt(extractMInt(mi(256, _606), 64, 96), extractMInt(mi(256, _605), 64, 96))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _606), 96, 128), extractMInt(mi(256, _606), 96, 128)), concatenateMInt(extractMInt(mi(256, _606), 96, 128), extractMInt(mi(256, _605), 96, 128))), mi(64, 0)), 32, 64))), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _605), 128, 160)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 128, 160))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _605), 160, 192), extractMInt(mi(256, _606), 160, 192)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _605), 160, 192))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _606), 192, 224), extractMInt(mi(256, _606), 192, 224)), concatenateMInt(extractMInt(mi(256, _606), 192, 224), extractMInt(mi(256, _605), 192, 224))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _606), 224, 256), extractMInt(mi(256, _606), 224, 256)), concatenateMInt(extractMInt(mi(256, _606), 224, 256), extractMInt(mi(256, _605), 224, 256))), mi(64, 0)), 32, 64)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(MI605, 0, 32)), concatenateMInt(mi(32, 0), extractMInt(MI606, 0, 32))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI605, 32, 64), extractMInt(MI606, 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI605, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI606, 64, 96), extractMInt(MI606, 64, 96)), concatenateMInt(extractMInt(MI606, 64, 96), extractMInt(MI605, 64, 96))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI606, 96, 128), extractMInt(MI606, 96, 128)), concatenateMInt(extractMInt(MI606, 96, 128), extractMInt(MI605, 96, 128))), mi(64, 0)), 32, 64))), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(MI605, 128, 160)), concatenateMInt(mi(32, 0), extractMInt(MI606, 128, 160))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI605, 160, 192), extractMInt(MI606, 160, 192)), concatenateMInt(mi(32, 0), extractMInt(MI605, 160, 192))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI606, 192, 224), extractMInt(MI606, 192, 224)), concatenateMInt(extractMInt(MI606, 192, 224), extractMInt(MI605, 192, 224))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI606, 224, 256), extractMInt(MI606, 224, 256)), concatenateMInt(extractMInt(MI606, 224, 256), extractMInt(MI605, 224, 256))), mi(64, 0)), 32, 64)))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(mi(256, _605), 0, 32)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 0, 32))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _605), 32, 64), extractMInt(mi(256, _606), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(256, _605), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _606), 64, 96), extractMInt(mi(256, _606), 64, 96)), concatenateMInt(extractMInt(mi(256, _606), 64, 96), extractMInt(mi(256, _605), 64, 96))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(mi(256, _606), 96, 128), extractMInt(mi(256, _606), 96, 128)), concatenateMInt(extractMInt(mi(256, _606), 96, 128), extractMInt(mi(256, _605), 96, 128))), mi(64, 0)), 32, 64)))) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(MI605, 0, 32)), concatenateMInt(mi(32, 0), extractMInt(MI606, 0, 32))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI605, 32, 64), extractMInt(MI606, 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI605, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI606, 64, 96), extractMInt(MI606, 64, 96)), concatenateMInt(extractMInt(MI606, 64, 96), extractMInt(MI605, 64, 96))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(MI606, 96, 128), extractMInt(MI606, 96, 128)), concatenateMInt(extractMInt(MI606, 96, 128), extractMInt(MI605, 96, 128))), mi(64, 0)), 32, 64)))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _606), 128, 256)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), extractMInt(MI606, 128, 256)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _606), 0, 128)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(128, 0), extractMInt(MI606, 0, 128)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _606) )
echo Debug:  Result: "YMM3" |-> (MI606 )
[4m[1m[34mwriteKDefn vpaddd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpaddd_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpaddd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpmovsxdq_ymm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovsxdq_ymm_xmm.s[0m
[4m[1m[34mcreatespec vpmovsxdq_ymm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovsxdq_ymm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovsxdq_ymm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpmovsxdq_ymm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovsxdq_ymm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovsxdq_ymm_xmm.s[0m
Circuit: callq .move_128_032_xmm2_xmm4_xmm5_xmm6_xmm7
%xmm5 -> 1
%xmm6 -> 1
%xmm4 -> 1
%xmm7 -> 1
%xmm2 -> 1

Circuit: vpunpckldq %xmm7, %xmm6, %xmm3
%xmm3 -> 1
%xmm7 -> 1
%ymm3 -> 1
%xmm6 -> 1
avx -> 1

Circuit: pmovsxdq %xmm3, %xmm9
sse4_1 -> 1
%xmm3 -> 1
%xmm9 -> 1

Circuit: pmovsxdq %xmm2, %xmm8
%xmm8 -> 1
sse4_1 -> 1
%xmm2 -> 1

Circuit: callq .move_128_256_xmm8_xmm9_ymm1
%ymm1 -> 1
%xmm8 -> 1
%xmm9 -> 1

Total Circuit
YMM7 -> 1
YMM6 -> 1
YMM5 -> 1
YMM2 -> 1
 -> 1
YMM3 -> 1
YMM1 -> 1
YMM9 -> 1
YMM4 -> 1
YMM8 -> 1

Target
YMM1 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove vpmovsxdq_ymm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovsxdq_ymm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpmovsxdq_ymm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpmovsxdq_ymm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpmovsxdq_ymm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpmovsxdq_ymm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _606) )
echo Debug:  Result: "YMM2" |-> (MI606 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(mi(64, svalueMInt(extractMInt(mi(256, _606), 128, 160))), mi(64, svalueMInt(extractMInt(mi(256, _606), 160, 192)))), concatenateMInt(mi(64, svalueMInt(extractMInt(mi(256, _606), 192, 224))), mi(64, svalueMInt(extractMInt(mi(256, _606), 224, 256))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(mi(64, svalueMInt(extractMInt(MI606, 128, 160))), mi(64, svalueMInt(extractMInt(MI606, 160, 192)))), concatenateMInt(mi(64, svalueMInt(extractMInt(MI606, 192, 224))), mi(64, svalueMInt(extractMInt(MI606, 224, 256))))) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _606), 224, 256)) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(224, 0), extractMInt(MI606, 224, 256)) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _606), 128, 192)) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(192, 0), extractMInt(MI606, 128, 192)) )
echo Debug:  PreResult: "YMM6" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _606), 160, 192)) )
echo Debug:  Result: "YMM6" |-> (concatenateMInt(mi(224, 0), extractMInt(MI606, 160, 192)) )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _606), 192, 224)) )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(mi(224, 0), extractMInt(MI606, 192, 224)) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(mi(64, svalueMInt(extractMInt(mi(256, _606), 192, 224))), mi(64, svalueMInt(extractMInt(mi(256, _606), 224, 256))))) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(128, 0), concatenateMInt(mi(64, svalueMInt(extractMInt(MI606, 192, 224))), mi(64, svalueMInt(extractMInt(MI606, 224, 256))))) )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _606), 128, 160)) )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(224, 0), extractMInt(MI606, 128, 160)) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(mi(64, svalueMInt(extractMInt(mi(256, _606), 128, 160))), mi(64, svalueMInt(extractMInt(mi(256, _606), 160, 192)))))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(mi(64, svalueMInt(extractMInt(MI606, 128, 160))), mi(64, svalueMInt(extractMInt(MI606, 160, 192)))))   )
[4m[1m[34mwriteKDefn vpmovsxdq_ymm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpmovsxdq_ymm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpmovsxdq_ymm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpsubq_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpsubq_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vpsubq_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpsubq_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpsubq_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpsubq_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpsubq_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpsubq_xmm_xmm_xmm.s[0m
Circuit: callq .move_128_064_xmm2_r10_r11
%r10 -> 1
%r11 -> 1
%xmm2 -> 1

Circuit: callq .move_128_064_xmm3_r8_r9
%r8 -> 1
%xmm3 -> 1
%r9 -> 1

Circuit: vzeroall
%ymm12 -> 1
%ymm9 -> 1
%ymm8 -> 1
%ymm13 -> 1
%ymm0 -> 1
%ymm4 -> 1
%ymm7 -> 1
%ymm14 -> 1
%ymm11 -> 1
avx -> 1
%ymm6 -> 1
%ymm10 -> 1
%ymm3 -> 1
%ymm5 -> 1
%ymm2 -> 1
%ymm15 -> 1
%ymm1 -> 1

Circuit: subq %r9, %r11
%zf -> 1
%cf -> 1
%af -> 1
%of -> 1
%r11 -> 1
%r9 -> 1
%pf -> 1
%sf -> 1

Circuit: subq %r8, %r10
%zf -> 1
%cf -> 1
%of -> 1
%af -> 1
%pf -> 1
%r8 -> 1
%sf -> 1
%r10 -> 1

Circuit: callq .move_064_128_r10_r11_xmm1
%xmm1 -> 1
%r11 -> 1
%r10 -> 1

Total Circuit
R11 -> 1
YMM6 -> 1
R8 -> 1
YMM7 -> 1
SF -> 1
YMM15 -> 1
CF -> 1
YMM5 -> 1
R10 -> 1
R9 -> 1
PF -> 1
YMM2 -> 1
YMM11 -> 1
OF -> 1
ZF -> 1
YMM12 -> 1
YMM9 -> 1
YMM1 -> 1
YMM4 -> 1
YMM8 -> 1
 -> 1
YMM14 -> 1
YMM0 -> 1
YMM10 -> 1
YMM13 -> 1
YMM3 -> 1
AF -> 1

Target
YMM1 -> 1
 -> 1
YMM3 -> 1
YMM2 -> 1

[4m[1m[34mkprove vpsubq_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpsubq_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpsubq_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpsubq_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vpsubq_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpsubq_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _625), 192, 256)), extractMInt(mi(256, _624), 192, 256)), mi(64, 1)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI625, 192, 256)), extractMInt(MI624, 192, 256)), mi(64, 1)), 0, 1) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(mi(256, _625), 192, 193)), extractMInt(mi(256, _624), 192, 193))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(mi(256, _625), 192, 193)), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _625), 192, 256)), extractMInt(mi(256, _624), 192, 256)), mi(64, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(MI625, 192, 193)), extractMInt(MI624, 192, 193))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(MI625, 192, 193)), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI625, 192, 256)), extractMInt(MI624, 192, 256)), mi(64, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _625), 192, 256))), concatenateMInt(mi(1, 0), extractMInt(mi(256, _624), 192, 256))), mi(65, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _625), 192, 256))), concatenateMInt(mi(1, 0), extractMInt(mi(256, _624), 192, 256))), mi(65, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), extractMInt(MI625, 192, 256))), concatenateMInt(mi(1, 0), extractMInt(MI624, 192, 256))), mi(65, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), extractMInt(MI625, 192, 256))), concatenateMInt(mi(1, 0), extractMInt(MI624, 192, 256))), mi(65, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _625), 192, 256)), extractMInt(mi(256, _624), 192, 256)), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _625), 192, 256)), extractMInt(mi(256, _624), 192, 256)), mi(64, 1))), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI625, 192, 256)), extractMInt(MI624, 192, 256)), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI625, 192, 256)), extractMInt(MI624, 192, 256)), mi(64, 1))), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R8" |-> (extractMInt(mi(256, _625), 192, 256) )
echo Debug:  Result: "R8" |-> (extractMInt(MI625, 192, 256) )
echo Debug:  PreResult: "R9" |-> (extractMInt(mi(256, _625), 128, 192) )
echo Debug:  Result: "R9" |-> (extractMInt(MI625, 128, 192) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _625), 192, 256)), extractMInt(mi(256, _624), 192, 256)), mi(64, 1)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI625, 192, 256)), extractMInt(MI624, 192, 256)), mi(64, 1)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "R10" |-> (addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _625), 192, 256)), extractMInt(mi(256, _624), 192, 256)), mi(64, 1)) )
echo Debug:  Result: "R10" |-> (addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI625, 192, 256)), extractMInt(MI624, 192, 256)), mi(64, 1)) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _625), 128, 192)), extractMInt(mi(256, _624), 128, 192)), mi(64, 1)), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _625), 192, 256)), extractMInt(mi(256, _624), 192, 256)), mi(64, 1)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI625, 128, 192)), extractMInt(MI624, 128, 192)), mi(64, 1)), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI625, 192, 256)), extractMInt(MI624, 192, 256)), mi(64, 1)))) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "R11" |-> (addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _625), 128, 192)), extractMInt(mi(256, _624), 128, 192)), mi(64, 1)) )
echo Debug:  Result: "R11" |-> (addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI625, 128, 192)), extractMInt(MI624, 128, 192)), mi(64, 1)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _625), 192, 256)), extractMInt(mi(256, _624), 192, 256)), mi(64, 1)), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI625, 192, 256)), extractMInt(MI624, 192, 256)), mi(64, 1)), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vpsubq_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpsubq_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpsubq_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpunpckldq_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpckldq_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vpunpckldq_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpckldq_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpckldq_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpunpckldq_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpckldq_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpckldq_ymm_ymm_ymm.s[0m
Circuit: vunpcklps %ymm3, %ymm2, %ymm11
avx -> 1
%ymm11 -> 1
%ymm2 -> 1
%ymm3 -> 1

Circuit: vmovaps %ymm11, %ymm1
%ymm1 -> 1
avx -> 1
%ymm11 -> 1

Total Circuit
 -> 1
YMM3 -> 1
YMM1 -> 1
YMM11 -> 1
YMM2 -> 1

Target
YMM1 -> 1
YMM3 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove vpunpckldq_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpckldq_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpunpckldq_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpunpckldq_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vpunpckldq_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpunpckldq_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _602) )
echo Debug:  Result: "YMM2" |-> (MI602 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 64, 96), extractMInt(mi(256, _602), 64, 96)), concatenateMInt(extractMInt(mi(256, _603), 96, 128), extractMInt(mi(256, _602), 96, 128))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 192, 224), extractMInt(mi(256, _602), 192, 224)), concatenateMInt(extractMInt(mi(256, _603), 224, 256), extractMInt(mi(256, _602), 224, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI603, 64, 96), extractMInt(MI602, 64, 96)), concatenateMInt(extractMInt(MI603, 96, 128), extractMInt(MI602, 96, 128))), concatenateMInt(concatenateMInt(extractMInt(MI603, 192, 224), extractMInt(MI602, 192, 224)), concatenateMInt(extractMInt(MI603, 224, 256), extractMInt(MI602, 224, 256)))) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 64, 96), extractMInt(mi(256, _602), 64, 96)), concatenateMInt(extractMInt(mi(256, _603), 96, 128), extractMInt(mi(256, _602), 96, 128))), concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 192, 224), extractMInt(mi(256, _602), 192, 224)), concatenateMInt(extractMInt(mi(256, _603), 224, 256), extractMInt(mi(256, _602), 224, 256)))) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(MI603, 64, 96), extractMInt(MI602, 64, 96)), concatenateMInt(extractMInt(MI603, 96, 128), extractMInt(MI602, 96, 128))), concatenateMInt(concatenateMInt(extractMInt(MI603, 192, 224), extractMInt(MI602, 192, 224)), concatenateMInt(extractMInt(MI603, 224, 256), extractMInt(MI602, 224, 256)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _603)   )
echo Debug:  Result: "YMM3" |-> (MI603   )
[4m[1m[34mwriteKDefn vpunpckldq_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpunpckldq_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpunpckldq_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vunpcklps_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vunpcklps_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vunpcklps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpcklps_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vunpcklps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvunpcklps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vunpcklps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vunpcklps_xmm_xmm_xmm.s[0m
Circuit: vpunpckldq %xmm3, %xmm2, %xmm2
%xmm3 -> 1
%xmm2 -> 1
%ymm2 -> 1
avx -> 1

Circuit: callq .move_128_064_xmm2_r8_r9
%xmm2 -> 1
%r9 -> 1
%r8 -> 1

Circuit: vzeroall
%ymm11 -> 1
avx -> 1
%ymm6 -> 1
%ymm3 -> 1
%ymm10 -> 1
%ymm2 -> 1
%ymm5 -> 1
%ymm15 -> 1
%ymm1 -> 1
%ymm8 -> 1
%ymm9 -> 1
%ymm12 -> 1
%ymm13 -> 1
%ymm4 -> 1
%ymm0 -> 1
%ymm7 -> 1
%ymm14 -> 1

Circuit: callq .move_064_128_r8_r9_xmm1
%r8 -> 1
%xmm1 -> 1
%r9 -> 1

Total Circuit
YMM15 -> 1
YMM2 -> 1
R9 -> 1
YMM5 -> 1
R8 -> 1
YMM6 -> 1
YMM7 -> 1
YMM8 -> 1
YMM4 -> 1
YMM1 -> 1
YMM9 -> 1
YMM13 -> 1
YMM3 -> 1
YMM10 -> 1
YMM14 -> 1
YMM0 -> 1
 -> 1
YMM12 -> 1
YMM11 -> 1

Target
YMM3 -> 1
 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove vunpcklps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpcklps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vunpcklps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vunpcklps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vunpcklps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvunpcklps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R8" |-> (concatenateMInt(extractMInt(mi(256, _617), 224, 256), extractMInt(mi(256, _616), 224, 256)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(extractMInt(MI617, 224, 256), extractMInt(MI616, 224, 256)) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(extractMInt(mi(256, _617), 192, 224), extractMInt(mi(256, _616), 192, 224)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(extractMInt(MI617, 192, 224), extractMInt(MI616, 192, 224)) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _617), 192, 224), extractMInt(mi(256, _616), 192, 224)), concatenateMInt(extractMInt(mi(256, _617), 224, 256), extractMInt(mi(256, _616), 224, 256)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI617, 192, 224), extractMInt(MI616, 192, 224)), concatenateMInt(extractMInt(MI617, 224, 256), extractMInt(MI616, 224, 256)))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vunpcklps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vunpcklps_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vunpcklps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vxorpd_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vxorpd_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vxorpd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vxorpd_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vxorpd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvxorpd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vxorpd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vxorpd_ymm_ymm_ymm.s[0m
Circuit: vorpd %ymm3, %ymm2, %ymm4
%ymm4 -> 1
avx -> 1
%ymm2 -> 1
%ymm3 -> 1

Circuit: vandps %ymm2, %ymm3, %ymm13
%ymm13 -> 1
avx -> 1
%ymm2 -> 1
%ymm3 -> 1

Circuit: vandnps %ymm4, %ymm13, %ymm1
%ymm4 -> 1
%ymm13 -> 1
%ymm1 -> 1
avx -> 1

Total Circuit
YMM2 -> 1
YMM4 -> 1
YMM1 -> 1
YMM3 -> 1
YMM13 -> 1
 -> 1

Target
YMM1 -> 1
YMM3 -> 1
 -> 1
YMM2 -> 1

[4m[1m[34mkprove vxorpd_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vxorpd_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vxorpd_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vxorpd_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vxorpd_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvxorpd_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _603) )
echo Debug:  Result: "YMM2" |-> (MI603 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(orMInt(extractMInt(mi(256, _603), 0, 64), extractMInt(mi(256, _604), 0, 64)), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 0, 64), extractMInt(mi(256, _604), 0, 64)), extractMInt(mi(256, _604), 0, 64)), xorMInt(extractMInt(mi(256, _603), 0, 64), extractMInt(mi(256, _604), 0, 64)))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 0, 64), extractMInt(mi(256, _604), 0, 64)), extractMInt(mi(256, _604), 0, 64)), xorMInt(extractMInt(mi(256, _603), 0, 64), extractMInt(mi(256, _604), 0, 64)))), xorMInt(orMInt(orMInt(extractMInt(mi(256, _603), 64, 128), extractMInt(mi(256, _604), 64, 128)), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 64, 128), extractMInt(mi(256, _604), 64, 128)), extractMInt(mi(256, _604), 64, 128)), xorMInt(extractMInt(mi(256, _603), 64, 128), extractMInt(mi(256, _604), 64, 128)))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 64, 128), extractMInt(mi(256, _604), 64, 128)), extractMInt(mi(256, _604), 64, 128)), xorMInt(extractMInt(mi(256, _603), 64, 128), extractMInt(mi(256, _604), 64, 128))))), concatenateMInt(xorMInt(orMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 128, 192), extractMInt(mi(256, _604), 128, 192)), extractMInt(mi(256, _604), 128, 192)), xorMInt(extractMInt(mi(256, _603), 128, 192), extractMInt(mi(256, _604), 128, 192))), orMInt(extractMInt(mi(256, _603), 128, 192), extractMInt(mi(256, _604), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 128, 192), extractMInt(mi(256, _604), 128, 192)), extractMInt(mi(256, _604), 128, 192)), xorMInt(extractMInt(mi(256, _603), 128, 192), extractMInt(mi(256, _604), 128, 192)))), xorMInt(orMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 192, 256), extractMInt(mi(256, _604), 192, 256)), extractMInt(mi(256, _604), 192, 256)), xorMInt(extractMInt(mi(256, _603), 192, 256), extractMInt(mi(256, _604), 192, 256))), orMInt(extractMInt(mi(256, _603), 192, 256), extractMInt(mi(256, _604), 192, 256))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 192, 256), extractMInt(mi(256, _604), 192, 256)), extractMInt(mi(256, _604), 192, 256)), xorMInt(extractMInt(mi(256, _603), 192, 256), extractMInt(mi(256, _604), 192, 256)))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(orMInt(extractMInt(MI603, 0, 64), extractMInt(MI604, 0, 64)), xorMInt(orMInt(xorMInt(extractMInt(MI603, 0, 64), extractMInt(MI604, 0, 64)), extractMInt(MI604, 0, 64)), xorMInt(extractMInt(MI603, 0, 64), extractMInt(MI604, 0, 64)))), xorMInt(orMInt(xorMInt(extractMInt(MI603, 0, 64), extractMInt(MI604, 0, 64)), extractMInt(MI604, 0, 64)), xorMInt(extractMInt(MI603, 0, 64), extractMInt(MI604, 0, 64)))), xorMInt(orMInt(orMInt(extractMInt(MI603, 64, 128), extractMInt(MI604, 64, 128)), xorMInt(orMInt(xorMInt(extractMInt(MI603, 64, 128), extractMInt(MI604, 64, 128)), extractMInt(MI604, 64, 128)), xorMInt(extractMInt(MI603, 64, 128), extractMInt(MI604, 64, 128)))), xorMInt(orMInt(xorMInt(extractMInt(MI603, 64, 128), extractMInt(MI604, 64, 128)), extractMInt(MI604, 64, 128)), xorMInt(extractMInt(MI603, 64, 128), extractMInt(MI604, 64, 128))))), concatenateMInt(xorMInt(orMInt(xorMInt(orMInt(xorMInt(extractMInt(MI603, 128, 192), extractMInt(MI604, 128, 192)), extractMInt(MI604, 128, 192)), xorMInt(extractMInt(MI603, 128, 192), extractMInt(MI604, 128, 192))), orMInt(extractMInt(MI603, 128, 192), extractMInt(MI604, 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(MI603, 128, 192), extractMInt(MI604, 128, 192)), extractMInt(MI604, 128, 192)), xorMInt(extractMInt(MI603, 128, 192), extractMInt(MI604, 128, 192)))), xorMInt(orMInt(xorMInt(orMInt(xorMInt(extractMInt(MI603, 192, 256), extractMInt(MI604, 192, 256)), extractMInt(MI604, 192, 256)), xorMInt(extractMInt(MI603, 192, 256), extractMInt(MI604, 192, 256))), orMInt(extractMInt(MI603, 192, 256), extractMInt(MI604, 192, 256))), xorMInt(orMInt(xorMInt(extractMInt(MI603, 192, 256), extractMInt(MI604, 192, 256)), extractMInt(MI604, 192, 256)), xorMInt(extractMInt(MI603, 192, 256), extractMInt(MI604, 192, 256)))))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 0, 64), extractMInt(mi(256, _604), 0, 64)), extractMInt(mi(256, _604), 0, 64)), xorMInt(extractMInt(mi(256, _603), 0, 64), extractMInt(mi(256, _604), 0, 64))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 64, 128), extractMInt(mi(256, _604), 64, 128)), extractMInt(mi(256, _604), 64, 128)), xorMInt(extractMInt(mi(256, _603), 64, 128), extractMInt(mi(256, _604), 64, 128)))), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 128, 192), extractMInt(mi(256, _604), 128, 192)), extractMInt(mi(256, _604), 128, 192)), xorMInt(extractMInt(mi(256, _603), 128, 192), extractMInt(mi(256, _604), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 192, 256), extractMInt(mi(256, _604), 192, 256)), extractMInt(mi(256, _604), 192, 256)), xorMInt(extractMInt(mi(256, _603), 192, 256), extractMInt(mi(256, _604), 192, 256))))) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI603, 0, 64), extractMInt(MI604, 0, 64)), extractMInt(MI604, 0, 64)), xorMInt(extractMInt(MI603, 0, 64), extractMInt(MI604, 0, 64))), xorMInt(orMInt(xorMInt(extractMInt(MI603, 64, 128), extractMInt(MI604, 64, 128)), extractMInt(MI604, 64, 128)), xorMInt(extractMInt(MI603, 64, 128), extractMInt(MI604, 64, 128)))), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI603, 128, 192), extractMInt(MI604, 128, 192)), extractMInt(MI604, 128, 192)), xorMInt(extractMInt(MI603, 128, 192), extractMInt(MI604, 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(MI603, 192, 256), extractMInt(MI604, 192, 256)), extractMInt(MI604, 192, 256)), xorMInt(extractMInt(MI603, 192, 256), extractMInt(MI604, 192, 256))))) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(concatenateMInt(orMInt(extractMInt(mi(256, _603), 0, 64), extractMInt(mi(256, _604), 0, 64)), orMInt(extractMInt(mi(256, _603), 64, 128), extractMInt(mi(256, _604), 64, 128))), concatenateMInt(orMInt(extractMInt(mi(256, _603), 128, 192), extractMInt(mi(256, _604), 128, 192)), orMInt(extractMInt(mi(256, _603), 192, 256), extractMInt(mi(256, _604), 192, 256)))) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(concatenateMInt(orMInt(extractMInt(MI603, 0, 64), extractMInt(MI604, 0, 64)), orMInt(extractMInt(MI603, 64, 128), extractMInt(MI604, 64, 128))), concatenateMInt(orMInt(extractMInt(MI603, 128, 192), extractMInt(MI604, 128, 192)), orMInt(extractMInt(MI603, 192, 256), extractMInt(MI604, 192, 256)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _604) )
echo Debug:  Result: "YMM3" |-> (MI604 )
[4m[1m[34mwriteKDefn vxorpd_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vxorpd_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vxorpd_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vxorps_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vxorps_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vxorps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vxorps_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vxorps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvxorps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vxorps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vxorps_ymm_ymm_ymm.s[0m
Circuit: vpor %ymm2, %ymm3, %ymm14
%ymm14 -> 1
avx2 -> 1
%ymm2 -> 1
%ymm3 -> 1

Circuit: vandps %ymm3, %ymm2, %ymm4
%ymm4 -> 1
avx -> 1
%ymm3 -> 1
%ymm2 -> 1

Circuit: vandnpd %ymm14, %ymm4, %ymm1
avx -> 1
%ymm1 -> 1
%ymm4 -> 1
%ymm14 -> 1

Total Circuit
YMM2 -> 1
YMM3 -> 1
YMM14 -> 1
 -> 1
YMM4 -> 1
YMM1 -> 1

Target
YMM1 -> 1
 -> 1
YMM3 -> 1
YMM2 -> 1

[4m[1m[34mkprove vxorps_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vxorps_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vxorps_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vxorps_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vxorps_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvxorps_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _603) )
echo Debug:  Result: "YMM2" |-> (MI603 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(orMInt(extractMInt(mi(256, _603), 0, 64), extractMInt(mi(256, _604), 0, 64)), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _604), 0, 64), extractMInt(mi(256, _603), 0, 64)), extractMInt(mi(256, _603), 0, 64)), xorMInt(extractMInt(mi(256, _604), 0, 64), extractMInt(mi(256, _603), 0, 64)))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _604), 0, 64), extractMInt(mi(256, _603), 0, 64)), extractMInt(mi(256, _603), 0, 64)), xorMInt(extractMInt(mi(256, _604), 0, 64), extractMInt(mi(256, _603), 0, 64)))), xorMInt(orMInt(orMInt(extractMInt(mi(256, _603), 64, 128), extractMInt(mi(256, _604), 64, 128)), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _604), 64, 128), extractMInt(mi(256, _603), 64, 128)), extractMInt(mi(256, _603), 64, 128)), xorMInt(extractMInt(mi(256, _604), 64, 128), extractMInt(mi(256, _603), 64, 128)))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _604), 64, 128), extractMInt(mi(256, _603), 64, 128)), extractMInt(mi(256, _603), 64, 128)), xorMInt(extractMInt(mi(256, _604), 64, 128), extractMInt(mi(256, _603), 64, 128))))), concatenateMInt(xorMInt(orMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _604), 128, 192), extractMInt(mi(256, _603), 128, 192)), extractMInt(mi(256, _603), 128, 192)), xorMInt(extractMInt(mi(256, _604), 128, 192), extractMInt(mi(256, _603), 128, 192))), orMInt(extractMInt(mi(256, _603), 128, 192), extractMInt(mi(256, _604), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _604), 128, 192), extractMInt(mi(256, _603), 128, 192)), extractMInt(mi(256, _603), 128, 192)), xorMInt(extractMInt(mi(256, _604), 128, 192), extractMInt(mi(256, _603), 128, 192)))), xorMInt(orMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _604), 192, 256), extractMInt(mi(256, _603), 192, 256)), extractMInt(mi(256, _603), 192, 256)), xorMInt(extractMInt(mi(256, _604), 192, 256), extractMInt(mi(256, _603), 192, 256))), orMInt(extractMInt(mi(256, _603), 192, 256), extractMInt(mi(256, _604), 192, 256))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _604), 192, 256), extractMInt(mi(256, _603), 192, 256)), extractMInt(mi(256, _603), 192, 256)), xorMInt(extractMInt(mi(256, _604), 192, 256), extractMInt(mi(256, _603), 192, 256)))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(orMInt(extractMInt(MI603, 0, 64), extractMInt(MI604, 0, 64)), xorMInt(orMInt(xorMInt(extractMInt(MI604, 0, 64), extractMInt(MI603, 0, 64)), extractMInt(MI603, 0, 64)), xorMInt(extractMInt(MI604, 0, 64), extractMInt(MI603, 0, 64)))), xorMInt(orMInt(xorMInt(extractMInt(MI604, 0, 64), extractMInt(MI603, 0, 64)), extractMInt(MI603, 0, 64)), xorMInt(extractMInt(MI604, 0, 64), extractMInt(MI603, 0, 64)))), xorMInt(orMInt(orMInt(extractMInt(MI603, 64, 128), extractMInt(MI604, 64, 128)), xorMInt(orMInt(xorMInt(extractMInt(MI604, 64, 128), extractMInt(MI603, 64, 128)), extractMInt(MI603, 64, 128)), xorMInt(extractMInt(MI604, 64, 128), extractMInt(MI603, 64, 128)))), xorMInt(orMInt(xorMInt(extractMInt(MI604, 64, 128), extractMInt(MI603, 64, 128)), extractMInt(MI603, 64, 128)), xorMInt(extractMInt(MI604, 64, 128), extractMInt(MI603, 64, 128))))), concatenateMInt(xorMInt(orMInt(xorMInt(orMInt(xorMInt(extractMInt(MI604, 128, 192), extractMInt(MI603, 128, 192)), extractMInt(MI603, 128, 192)), xorMInt(extractMInt(MI604, 128, 192), extractMInt(MI603, 128, 192))), orMInt(extractMInt(MI603, 128, 192), extractMInt(MI604, 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(MI604, 128, 192), extractMInt(MI603, 128, 192)), extractMInt(MI603, 128, 192)), xorMInt(extractMInt(MI604, 128, 192), extractMInt(MI603, 128, 192)))), xorMInt(orMInt(xorMInt(orMInt(xorMInt(extractMInt(MI604, 192, 256), extractMInt(MI603, 192, 256)), extractMInt(MI603, 192, 256)), xorMInt(extractMInt(MI604, 192, 256), extractMInt(MI603, 192, 256))), orMInt(extractMInt(MI603, 192, 256), extractMInt(MI604, 192, 256))), xorMInt(orMInt(xorMInt(extractMInt(MI604, 192, 256), extractMInt(MI603, 192, 256)), extractMInt(MI603, 192, 256)), xorMInt(extractMInt(MI604, 192, 256), extractMInt(MI603, 192, 256)))))) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _604), 0, 64), extractMInt(mi(256, _603), 0, 64)), extractMInt(mi(256, _603), 0, 64)), xorMInt(extractMInt(mi(256, _604), 0, 64), extractMInt(mi(256, _603), 0, 64))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _604), 64, 128), extractMInt(mi(256, _603), 64, 128)), extractMInt(mi(256, _603), 64, 128)), xorMInt(extractMInt(mi(256, _604), 64, 128), extractMInt(mi(256, _603), 64, 128)))), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _604), 128, 192), extractMInt(mi(256, _603), 128, 192)), extractMInt(mi(256, _603), 128, 192)), xorMInt(extractMInt(mi(256, _604), 128, 192), extractMInt(mi(256, _603), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _604), 192, 256), extractMInt(mi(256, _603), 192, 256)), extractMInt(mi(256, _603), 192, 256)), xorMInt(extractMInt(mi(256, _604), 192, 256), extractMInt(mi(256, _603), 192, 256))))) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI604, 0, 64), extractMInt(MI603, 0, 64)), extractMInt(MI603, 0, 64)), xorMInt(extractMInt(MI604, 0, 64), extractMInt(MI603, 0, 64))), xorMInt(orMInt(xorMInt(extractMInt(MI604, 64, 128), extractMInt(MI603, 64, 128)), extractMInt(MI603, 64, 128)), xorMInt(extractMInt(MI604, 64, 128), extractMInt(MI603, 64, 128)))), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI604, 128, 192), extractMInt(MI603, 128, 192)), extractMInt(MI603, 128, 192)), xorMInt(extractMInt(MI604, 128, 192), extractMInt(MI603, 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(MI604, 192, 256), extractMInt(MI603, 192, 256)), extractMInt(MI603, 192, 256)), xorMInt(extractMInt(MI604, 192, 256), extractMInt(MI603, 192, 256))))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _604) )
echo Debug:  Result: "YMM3" |-> (MI604 )
echo Debug:  PreResult: "YMM14" |-> (concatenateMInt(concatenateMInt(orMInt(extractMInt(mi(256, _603), 0, 64), extractMInt(mi(256, _604), 0, 64)), orMInt(extractMInt(mi(256, _603), 64, 128), extractMInt(mi(256, _604), 64, 128))), concatenateMInt(orMInt(extractMInt(mi(256, _603), 128, 192), extractMInt(mi(256, _604), 128, 192)), orMInt(extractMInt(mi(256, _603), 192, 256), extractMInt(mi(256, _604), 192, 256)))) )
echo Debug:  Result: "YMM14" |-> (concatenateMInt(concatenateMInt(orMInt(extractMInt(MI603, 0, 64), extractMInt(MI604, 0, 64)), orMInt(extractMInt(MI603, 64, 128), extractMInt(MI604, 64, 128))), concatenateMInt(orMInt(extractMInt(MI603, 128, 192), extractMInt(MI604, 128, 192)), orMInt(extractMInt(MI603, 192, 256), extractMInt(MI604, 192, 256)))) )
[4m[1m[34mwriteKDefn vxorps_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vxorps_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vxorps_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

