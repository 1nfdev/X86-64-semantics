[4m[1m[34mCheck if supported: andb_rh_rh[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andb_rh_rh.s[0m
[4m[1m[34mcreatespec andb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andb_rh_rh_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andb_rh_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: andb_rh_rh[0m
Undef Set
af -> 1

[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andb_rh_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andb_rh_rh.s[0m
Circuit: movsbw %ah, %dx
%dx -> 1
%ah -> 1

Circuit: andb %bh, %dl
%sf -> 1
%bh -> 1
%cf -> 1
%dl -> 1
%zf -> 1
%of -> 1
%af -> 1
%pf -> 1

Circuit: xchgb %ah, %dl
%ah -> 1
%dl -> 1

Circuit: testb %bh, %dl
%zf -> 1
%cf -> 1
%dl -> 1
%sf -> 1
%bh -> 1
%pf -> 1
%of -> 1
%af -> 1

Total Circuit
ZF -> 1
RBX -> 1
SF -> 1
OF -> 1
RAX -> 1
AF -> 1
RDX -> 1
CF -> 1
PF -> 1

Target
RBX -> 1
SF -> 1
ZF -> 1
OF -> 1
RAX -> 1
PF -> 1
AF -> 1
CF -> 1

[4m[1m[34mkprove andb_rh_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andb_rh_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andb_rh_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput andb_rh_rh[0m
[4m[1m[34msanitizeSpecOutput andb_rh_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _617), 48, 56))), 32, 33), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _616), 48, 56))), 32, 33), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _616), 48, 56))), 32, 33), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _617), 48, 56))), 32, 33)))) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI617, 48, 56))), 32, 33), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI616, 48, 56))), 32, 33), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI616, 48, 56))), 32, 33), extractMInt(mi(64, svalueMInt(extractMInt(MI617, 48, 56))), 32, 33)))) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, _617), 48, 56), xorMInt(extractMInt(mi(64, _616), 48, 56), orMInt(extractMInt(mi(64, _616), 48, 56), extractMInt(mi(64, _617), 48, 56)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI617, 48, 56), xorMInt(extractMInt(MI616, 48, 56), orMInt(extractMInt(MI616, 48, 56), extractMInt(MI617, 48, 56)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _616)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI616) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(concatenateMInt(mi(48, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _616), 48, 56))), 48, 56)), extractMInt(mi(64, _616), 48, 56)) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(concatenateMInt(mi(48, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI616, 48, 56))), 48, 56)), extractMInt(MI616, 48, 56)) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _616), 0, 48), concatenateMInt(xorMInt(orMInt(xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 0)), mi(8, 0))), extractMInt(mi(64, _617), 48, 56)), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _616), 48, 56), mi(8, 0)), mi(8, 0)))), extractMInt(mi(64, _616), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI616, 0, 48), concatenateMInt(xorMInt(orMInt(xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI616, 48, 56), mi(8, 0)), mi(8, 0))), extractMInt(MI617, 48, 56)), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI616, 48, 56), mi(8, 0)), mi(8, 0)))), extractMInt(MI616, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _617) )
echo Debug:  Result: "RBX" |-> (MI617 )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _617), 48, 56))), 32, 64), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _616), 48, 56))), 32, 64), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _616), 48, 56))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _617), 48, 56))), 32, 64)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI617, 48, 56))), 32, 64), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI616, 48, 56))), 32, 64), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI616, 48, 56))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(MI617, 48, 56))), 32, 64)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn andb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-andb_rh_rh.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andb_rh_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: andq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andq_r64_r64.s[0m
[4m[1m[34mcreatespec andq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andq_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandq_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: andq_r64_r64[0m
Undef Set
af -> 1

[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andq_r64_r64.s[0m
Circuit: vmovq %rbx, %xmm12
%xmm12 -> 1
%ymm12 -> 1
avx -> 1
%rbx -> 1

Circuit: vmovq %xmm12, %xmm2
avx -> 1
%ymm2 -> 1
%xmm12 -> 1
%xmm2 -> 1

Circuit: vmovq %rcx, %xmm4
%ymm4 -> 1
%rcx -> 1
%xmm4 -> 1
avx -> 1

Circuit: xorw %cx, %cx
%sf -> 1
%cf -> 1
%zf -> 1
%af -> 1
%cx -> 1
%of -> 1
%pf -> 1

Circuit: vandpd %ymm2, %ymm4, %ymm1
avx -> 1
%ymm4 -> 1
%ymm1 -> 1
%ymm2 -> 1

Circuit: vmovq %xmm1, %rbx
%rbx -> 1
avx -> 1
%xmm1 -> 1

Circuit: callq .set_szp_for_rbx
%rbx -> 1
%pf -> 1
%zf -> 1
%sf -> 1

Total Circuit
YMM2 -> 1
OF -> 1
YMM1 -> 1
YMM12 -> 1
SF -> 1
RBX -> 1
ZF -> 1
RCX -> 1
PF -> 1
AF -> 1
CF -> 1
 -> 1
YMM4 -> 1

Target
RCX -> 1
ZF -> 1
SF -> 1
RBX -> 1
OF -> 1
AF -> 1
CF -> 1
PF -> 1

[4m[1m[34mkprove andq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_andq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput andq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput andq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mandq_r64_r64: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(extractMInt(mi(64, _619), 0, 48), mi(16, 0)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(extractMInt(MI619, 0, 48), mi(16, 0)) )
echo Debug:  PreResult: "RBX" |-> (xorMInt(orMInt(xorMInt(xorMInt(mi(64, _618), mi(64, 0)), xorMInt(mi(64, _619), mi(64, 0))), xorMInt(mi(64, _619), mi(64, 0))), xorMInt(xorMInt(mi(64, _618), mi(64, 0)), xorMInt(mi(64, _619), mi(64, 0)))) )
echo Debug:  Result: "RBX" |-> (xorMInt(orMInt(xorMInt(xorMInt(MI618, mi(64, 0)), xorMInt(MI619, mi(64, 0))), xorMInt(MI619, mi(64, 0))), xorMInt(xorMInt(MI618, mi(64, 0)), xorMInt(MI619, mi(64, 0)))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(orMInt(xorMInt(xorMInt(mi(64, _618), mi(64, 0)), xorMInt(mi(64, _619), mi(64, 0))), xorMInt(mi(64, _619), mi(64, 0))), xorMInt(xorMInt(mi(64, _618), mi(64, 0)), xorMInt(mi(64, _619), mi(64, 0)))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(orMInt(xorMInt(xorMInt(MI618, mi(64, 0)), xorMInt(MI619, mi(64, 0))), xorMInt(MI619, mi(64, 0))), xorMInt(xorMInt(MI618, mi(64, 0)), xorMInt(MI619, mi(64, 0)))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(192, 0), xorMInt(mi(64, _618), mi(64, 0))) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(192, 0), xorMInt(MI618, mi(64, 0))) )
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(192, 0), xorMInt(mi(64, _618), mi(64, 0))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(192, 0), xorMInt(MI618, mi(64, 0))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(192, 0), xorMInt(orMInt(xorMInt(xorMInt(mi(64, _618), mi(64, 0)), xorMInt(mi(64, _619), mi(64, 0))), xorMInt(mi(64, _619), mi(64, 0))), xorMInt(xorMInt(mi(64, _618), mi(64, 0)), xorMInt(mi(64, _619), mi(64, 0))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(192, 0), xorMInt(orMInt(xorMInt(xorMInt(MI618, mi(64, 0)), xorMInt(MI619, mi(64, 0))), xorMInt(MI619, mi(64, 0))), xorMInt(xorMInt(MI618, mi(64, 0)), xorMInt(MI619, mi(64, 0))))) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(mi(192, 0), xorMInt(mi(64, _619), mi(64, 0))) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(mi(192, 0), xorMInt(MI619, mi(64, 0))) )
echo Debug:  PreResult: "SF" |-> (xorMInt(orMInt(xorMInt(xorMInt(extractMInt(mi(64, _618), 0, 1), mi(1, 0)), xorMInt(extractMInt(mi(64, _619), 0, 1), mi(1, 0))), xorMInt(extractMInt(mi(64, _619), 0, 1), mi(1, 0))), xorMInt(xorMInt(extractMInt(mi(64, _618), 0, 1), mi(1, 0)), xorMInt(extractMInt(mi(64, _619), 0, 1), mi(1, 0)))) )
echo Debug:  Result: "SF" |-> (xorMInt(orMInt(xorMInt(xorMInt(extractMInt(MI618, 0, 1), mi(1, 0)), xorMInt(extractMInt(MI619, 0, 1), mi(1, 0))), xorMInt(extractMInt(MI619, 0, 1), mi(1, 0))), xorMInt(xorMInt(extractMInt(MI618, 0, 1), mi(1, 0)), xorMInt(extractMInt(MI619, 0, 1), mi(1, 0)))) )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(orMInt(xorMInt(xorMInt(extractMInt(mi(64, _618), 56, 64), mi(8, 0)), xorMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 0))), xorMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 0))), xorMInt(xorMInt(extractMInt(mi(64, _618), 56, 64), mi(8, 0)), xorMInt(extractMInt(mi(64, _619), 56, 64), mi(8, 0)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(orMInt(xorMInt(xorMInt(extractMInt(MI618, 56, 64), mi(8, 0)), xorMInt(extractMInt(MI619, 56, 64), mi(8, 0))), xorMInt(extractMInt(MI619, 56, 64), mi(8, 0))), xorMInt(xorMInt(extractMInt(MI618, 56, 64), mi(8, 0)), xorMInt(extractMInt(MI619, 56, 64), mi(8, 0)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
[4m[1m[34mwriteKDefn andq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-andq_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/andq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: blsil_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/blsil_r32_r32.s[0m
Warn: [4m[1m[35mblsil_r32_r32: Manually Generated[0m
[4m[1m[34mCheck if supported: cmovaw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovaw_r16_r16.s[0m
[4m[1m[34mcreatespec cmovaw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovaw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovaw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovaw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovaw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovaw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovaw_r16_r16.s[0m
Circuit: movzwl %bx, %eax
%eax -> 1
%bx -> 1
%rax -> 1

Circuit: cmovbel %eax, %ecx
%rcx -> 1
%ecx -> 1
cmov -> 1
%cf -> 1
%zf -> 1
%eax -> 1

Circuit: movswq %cx, %rbx
%rbx -> 1
%cx -> 1

Total Circuit
ZF -> 1
RBX -> 1
RCX -> 1
 -> 1
RAX -> 1
CF -> 1

Target
RCX -> 1
RBX -> 1
ZF -> 1
CF -> 1
 -> 1

[4m[1m[34mkprove cmovaw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovaw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovaw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovaw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovaw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovaw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovaw_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, _604) )
echo Debug:  Result: "CF" |-> (MI604 )
echo Debug:  PreResult: "RCX" |-> ((#ifMInt (eqMInt(addMInt(mi(8, 0), concatenateMInt(mi(7, 0), mi(1, _604))), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(mi(1, _607), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _606), 32, 64)) ) #else ( concatenateMInt(mi(48, 0), extractMInt(mi(64, _605), 48, 64)) ) #fi) ) #else ( concatenateMInt(mi(48, 0), extractMInt(mi(64, _605), 48, 64)) ) #fi)  )
echo Debug:  Result: "RCX" |-> ((#ifMInt (eqMInt(addMInt(mi(8, 0), concatenateMInt(mi(7, 0), MI604)), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(MI607, mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI606, 32, 64)) ) #else ( concatenateMInt(mi(48, 0), extractMInt(MI605, 48, 64)) ) #fi) ) #else ( concatenateMInt(mi(48, 0), extractMInt(MI605, 48, 64)) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _605)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI605) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _605), 48, 64)) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(mi(48, 0), extractMInt(MI605, 48, 64)) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(mi(8, 0), concatenateMInt(mi(7, 0), mi(1, _604))), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(mi(1, _607), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _605), 0, 48), extractMInt(mi(64, _606), 48, 64)) ) #else ( mi(64, _605) ) #fi) ) #else ( mi(64, _605) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(mi(8, 0), concatenateMInt(mi(7, 0), MI604)), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(MI607, mi(1, 0)) ) #then ( concatenateMInt(extractMInt(MI605, 0, 48), extractMInt(MI606, 48, 64)) ) #else ( MI605 ) #fi) ) #else ( MI605 ) #fi)  )
echo Debug:  PreResult: "ZF" |-> (mi(1, _607)   )
echo Debug:  Result: "ZF" |-> (MI607   )
[4m[1m[34mwriteKDefn cmovaw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovaw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovaw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovbew_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovbew_r16_r16.s[0m
[4m[1m[34mcreatespec cmovbew_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovbew_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovbew_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovbew_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovbew_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovbew_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovbew_r16_r16.s[0m
Circuit: movswl %cx, %edx
%edx -> 1
%cx -> 1
%rdx -> 1

Circuit: cmovbel %edx, %ebx
%cf -> 1
%ebx -> 1
%zf -> 1
%rbx -> 1
cmov -> 1
%edx -> 1

Total Circuit
 -> 1
RDX -> 1
CF -> 1
RCX -> 1
ZF -> 1
RBX -> 1

Target
 -> 1
CF -> 1
RBX -> 1
ZF -> 1
RCX -> 1

[4m[1m[34mkprove cmovbew_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovbew_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovbew_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovbew_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovbew_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovbew_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovbew_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, _604) )
echo Debug:  Result: "CF" |-> (MI604 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _606) )
echo Debug:  Result: "RCX" |-> (MI606 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _605)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI605) )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _606), 48, 64))), 32, 64)) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(MI606, 48, 64))), 32, 64)) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(mi(8, 0), concatenateMInt(mi(7, 0), mi(1, _604))), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(mi(1, _607), mi(1, 0)) ) #then ( mi(64, _605) ) #else ( concatenateMInt(extractMInt(mi(64, _605), 0, 48), extractMInt(mi(64, _606), 48, 64)) ) #fi) ) #else ( concatenateMInt(extractMInt(mi(64, _605), 0, 48), extractMInt(mi(64, _606), 48, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(mi(8, 0), concatenateMInt(mi(7, 0), MI604)), mi(8, 0)) ) #then ( (#ifMInt (eqMInt(MI607, mi(1, 0)) ) #then ( MI605 ) #else ( concatenateMInt(extractMInt(MI605, 0, 48), extractMInt(MI606, 48, 64)) ) #fi) ) #else ( concatenateMInt(extractMInt(MI605, 0, 48), extractMInt(MI606, 48, 64)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> (mi(1, _607)   )
echo Debug:  Result: "ZF" |-> (MI607   )
[4m[1m[34mwriteKDefn cmovbew_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovbew_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovbew_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovgel_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgel_r32_r32.s[0m
[4m[1m[34mcreatespec cmovgel_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovgel_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgel_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovgel_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovgel_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgel_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgel_r32_r32.s[0m
Circuit: cmovnll %ecx, %ebx
%rbx -> 1
%of -> 1
cmov -> 1
%ecx -> 1
%ebx -> 1
%sf -> 1

Total Circuit
 -> 1
RCX -> 1
RBX -> 1
SF -> 1
OF -> 1

Target
OF -> 1
RCX -> 1
RBX -> 1
SF -> 1
 -> 1

[4m[1m[34mkprove cmovgel_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovgel_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovgel_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovgel_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovgel_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovgel_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovgel_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(xorMInt(mi(1, _605), mi(1, _602)), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _604), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _603), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(xorMInt(MI605, MI602), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI604, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI603, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "SF" |-> (mi(1, _605) )
echo Debug:  Result: "SF" |-> (MI605 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _604) )
echo Debug:  Result: "RCX" |-> (MI604 )
echo Debug:  PreResult: "OF" |-> (mi(1, _602)   )
echo Debug:  Result: "OF" |-> (MI602   )
[4m[1m[34mwriteKDefn cmovgel_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovgel_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgel_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovgl_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgl_r32_r32.s[0m
[4m[1m[34mcreatespec cmovgl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovgl_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovgl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovgl_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgl_r32_r32.s[0m
Circuit: movl %ecx, %r11d
%r11d -> 1
%r11 -> 1
%ecx -> 1

Circuit: cmovnlel %r11d, %ebx
%of -> 1
cmov -> 1
%r11d -> 1
%rbx -> 1
%ebx -> 1
%sf -> 1
%zf -> 1

Total Circuit
R11 -> 1
ZF -> 1
RBX -> 1
SF -> 1
RCX -> 1
OF -> 1
 -> 1

Target
OF -> 1
SF -> 1
RBX -> 1
ZF -> 1
RCX -> 1
 -> 1

[4m[1m[34mkprove cmovgl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovgl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovgl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovgl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovgl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovgl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovgl_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "R11" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _607), 32, 64)) )
echo Debug:  Result: "R11" |-> (concatenateMInt(mi(32, 0), extractMInt(MI607, 32, 64)) )
echo Debug:  PreResult: "SF" |-> (mi(1, _608) )
echo Debug:  Result: "SF" |-> (MI608 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _607) )
echo Debug:  Result: "RCX" |-> (MI607 )
echo Debug:  PreResult: "OF" |-> (mi(1, _605) )
echo Debug:  Result: "OF" |-> (MI605 )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _609), mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(mi(1, _608), mi(1, _605)), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _607), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _606), 32, 64)) ) #fi) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _606), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI609, mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(MI608, MI605), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI607, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI606, 32, 64)) ) #fi) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI606, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> (mi(1, _609)   )
echo Debug:  Result: "ZF" |-> (MI609   )
[4m[1m[34mwriteKDefn cmovgl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovgl_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovgq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgq_r64_r64.s[0m
[4m[1m[34mcreatespec cmovgq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovgq_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovgq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovgq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgq_r64_r64.s[0m
Circuit: cmovnleq %rcx, %rbx
%zf -> 1
%sf -> 1
cmov -> 1
%of -> 1
%rcx -> 1
%rbx -> 1

Total Circuit
OF -> 1
RCX -> 1
RBX -> 1
SF -> 1
ZF -> 1
 -> 1

Target
 -> 1
OF -> 1
ZF -> 1
RBX -> 1
SF -> 1
RCX -> 1

[4m[1m[34mkprove cmovgq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovgq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovgq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovgq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput cmovgq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovgq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovgq_r64_r64[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "SF" |-> (mi(1, _607) )
echo Debug:  Result: "SF" |-> (MI607 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _606) )
echo Debug:  Result: "RCX" |-> (MI606 )
echo Debug:  PreResult: "OF" |-> (mi(1, _604) )
echo Debug:  Result: "OF" |-> (MI604 )
echo Debug:  PreResult: "RBX" |-> (mi(64, _605) )
echo Debug:  Result: "RBX" |-> (MI605 )
echo Debug:  PreResult: "ZF" |-> (mi(1, _608)   )
echo Debug:  Result: "ZF" |-> (MI608   )
[4m[1m[34mwriteKDefn cmovgq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovgq_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovgq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovlew_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovlew_r16_r16.s[0m
[4m[1m[34mcreatespec cmovlew_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovlew_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovlew_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovlew_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovlew_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovlew_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovlew_r16_r16.s[0m
Circuit: movzwq %cx, %r9
%r9 -> 1
%cx -> 1

Circuit: cmovngew %r9w, %bx
%r9w -> 1
%of -> 1
cmov -> 1
%sf -> 1
%bx -> 1

Circuit: cmovzl %r9d, %ebx
%rbx -> 1
%r9d -> 1
cmov -> 1
%ebx -> 1
%zf -> 1

Total Circuit
 -> 1
OF -> 1
RCX -> 1
R9 -> 1
RBX -> 1
SF -> 1
ZF -> 1

Target
OF -> 1
RCX -> 1
SF -> 1
RBX -> 1
ZF -> 1
 -> 1

[4m[1m[34mkprove cmovlew_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovlew_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovlew_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovlew_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovlew_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovlew_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovlew_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "SF" |-> (mi(1, _609) )
echo Debug:  Result: "SF" |-> (MI609 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _608) )
echo Debug:  Result: "RCX" |-> (MI608 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _607)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI607) )
echo Debug:  PreResult: "OF" |-> (mi(1, _606) )
echo Debug:  Result: "OF" |-> (MI606 )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _608), 48, 64)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(48, 0), extractMInt(MI608, 48, 64)) )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _610), mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(mi(1, _609), mi(1, _606)), mi(1, 0)) ) #then ( mi(64, _607) ) #else ( concatenateMInt(extractMInt(mi(64, _607), 0, 48), extractMInt(mi(64, _608), 48, 64)) ) #fi) ) #else ( concatenateMInt(extractMInt(mi(64, _607), 0, 48), extractMInt(mi(64, _608), 48, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI610, mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(MI609, MI606), mi(1, 0)) ) #then ( MI607 ) #else ( concatenateMInt(extractMInt(MI607, 0, 48), extractMInt(MI608, 48, 64)) ) #fi) ) #else ( concatenateMInt(extractMInt(MI607, 0, 48), extractMInt(MI608, 48, 64)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> (mi(1, _610)   )
echo Debug:  Result: "ZF" |-> (MI610   )
[4m[1m[34mwriteKDefn cmovlew_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovlew_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovlew_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovlw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovlw_r16_r16.s[0m
[4m[1m[34mcreatespec cmovlw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovlw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovlw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovlw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovlw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovlw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovlw_r16_r16.s[0m
Circuit: cmovngew %cx, %bx
%bx -> 1
%sf -> 1
%of -> 1
%cx -> 1
cmov -> 1

Total Circuit
OF -> 1
RCX -> 1
SF -> 1
RBX -> 1
 -> 1

Target
 -> 1
OF -> 1
RBX -> 1
SF -> 1
RCX -> 1

[4m[1m[34mkprove cmovlw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovlw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovlw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovlw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovlw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovlw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovlw_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(xorMInt(mi(1, _606), mi(1, _603)), mi(1, 0)) ) #then ( mi(64, _604) ) #else ( concatenateMInt(extractMInt(mi(64, _604), 0, 48), extractMInt(mi(64, _605), 48, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(xorMInt(MI606, MI603), mi(1, 0)) ) #then ( MI604 ) #else ( concatenateMInt(extractMInt(MI604, 0, 48), extractMInt(MI605, 48, 64)) ) #fi)  )
echo Debug:  PreResult: "SF" |-> (mi(1, _606) )
echo Debug:  Result: "SF" |-> (MI606 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _605) )
echo Debug:  Result: "RCX" |-> (MI605 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _604)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI604) )
echo Debug:  PreResult: "OF" |-> (mi(1, _603)   )
echo Debug:  Result: "OF" |-> (MI603   )
[4m[1m[34mwriteKDefn cmovlw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovlw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovlw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnbw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnbw_r16_r16.s[0m
[4m[1m[34mcreatespec cmovnbw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnbw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnbw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnbw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovnbw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnbw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnbw_r16_r16.s[0m
Circuit: movzwq %cx, %r9
%cx -> 1
%r9 -> 1

Circuit: cmovnbl %r9d, %ebx
%cf -> 1
%ebx -> 1
cmov -> 1
%r9d -> 1
%rbx -> 1

Total Circuit
CF -> 1
 -> 1
RCX -> 1
RBX -> 1
R9 -> 1

Target
CF -> 1
 -> 1
RCX -> 1
RBX -> 1

[4m[1m[34mkprove cmovnbw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnbw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnbw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnbw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovnbw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnbw_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnbw_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), mi(1, _602)), mi(8, 0))), mi(16, 0)), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _603), 0, 48), extractMInt(mi(64, _604), 48, 64)) ) #else ( mi(64, _603) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), MI602), mi(8, 0))), mi(16, 0)), mi(16, 0)) ) #then ( concatenateMInt(extractMInt(MI603, 0, 48), extractMInt(MI604, 48, 64)) ) #else ( MI603 ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _602) )
echo Debug:  Result: "CF" |-> (MI602 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _604) )
echo Debug:  Result: "RCX" |-> (MI604 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _603)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI603) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(mi(48, 0), extractMInt(mi(64, _604), 48, 64))   )
echo Debug:  Result: "R9" |-> (concatenateMInt(mi(48, 0), extractMInt(MI604, 48, 64))   )
[4m[1m[34mwriteKDefn cmovnbw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnbw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnbw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovncq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovncq_r64_r64.s[0m
[4m[1m[34mcreatespec cmovncq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovncq_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovncq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovncq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovncq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovncq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovncq_r64_r64.s[0m
Circuit: cmovbw %cx, %cx
%cf -> 1
%cx -> 1
cmov -> 1

Circuit: cmovaeq %rcx, %rbx
%rcx -> 1
cmov -> 1
%rbx -> 1
%cf -> 1

Total Circuit
CF -> 1
 -> 1
RCX -> 1
RBX -> 1

Target
RBX -> 1
RCX -> 1
 -> 1
CF -> 1

[4m[1m[34mkprove cmovncq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovncq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovncq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovncq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput cmovncq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovncq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovncq_r64_r64[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(mi(16, 65535), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _600))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), mi(1, _600))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(16, 0)) ) #then ( mi(64, _602) ) #else ( mi(64, _601) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(mi(16, 65535), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI600)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), MI600)), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(16, 0)) ) #then ( MI602 ) #else ( MI601 ) #fi)  )
echo Debug:  PreResult: "CF" |-> (mi(1, _600) )
echo Debug:  Result: "CF" |-> (MI600 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _602)   )
echo Debug:  Result: "RCX" |-> (MI602   )
[4m[1m[34mwriteKDefn cmovncq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovncq_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovncq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovngl_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngl_r32_r32.s[0m
[4m[1m[34mcreatespec cmovngl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovngl_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovngl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovngl_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngl_r32_r32.s[0m
Circuit: xchgl %ecx, %ebx
%rbx -> 1
%ecx -> 1
%rcx -> 1
%ebx -> 1

Circuit: vmovd %ecx, %xmm1
%ymm1 -> 1
%xmm1 -> 1
avx -> 1
%ecx -> 1

Circuit: callq .move_128_064_xmm1_r8_r9
%r9 -> 1
%xmm1 -> 1
%r8 -> 1

Circuit: cmovnlel %r8d, %ebx
%zf -> 1
%ebx -> 1
%sf -> 1
%r8d -> 1
%rbx -> 1
%of -> 1
cmov -> 1

Total Circuit
 -> 1
R9 -> 1
R8 -> 1
RBX -> 1
SF -> 1
ZF -> 1
RCX -> 1
OF -> 1
YMM1 -> 1

Target
OF -> 1
RCX -> 1
SF -> 1
ZF -> 1
RBX -> 1
 -> 1

[4m[1m[34mkprove cmovngl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovngl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovngl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovngl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovngl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovngl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovngl_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(64, _608), 32, 64)) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(224, 0), extractMInt(MI608, 32, 64)) )
echo Debug:  PreResult: "SF" |-> (mi(1, _610) )
echo Debug:  Result: "SF" |-> (MI610 )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _608), 32, 64)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(mi(32, 0), extractMInt(MI608, 32, 64)) )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, _608), 32, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(mi(32, 0), extractMInt(MI608, 32, 64)) )
echo Debug:  PreResult: "R9" |-> (mi(64, 0) )
echo Debug:  Result: "R9" |-> (mi(64, 0) )
echo Debug:  PreResult: "OF" |-> (mi(1, _607) )
echo Debug:  Result: "OF" |-> (MI607 )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(mi(1, _611), mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(mi(1, _610), mi(1, _607)), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _608), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _609), 32, 64)) ) #fi) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _609), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(MI611, mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(MI610, MI607), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI608, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI609, 32, 64)) ) #fi) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI609, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "ZF" |-> (mi(1, _611)   )
echo Debug:  Result: "ZF" |-> (MI611   )
[4m[1m[34mwriteKDefn cmovngl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovngl_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovngq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngq_r64_r64.s[0m
[4m[1m[34mcreatespec cmovngq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovngq_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovngq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovngq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngq_r64_r64.s[0m
Circuit: cmovleq %rcx, %rbx
%zf -> 1
%sf -> 1
%rbx -> 1
%rcx -> 1
%of -> 1
cmov -> 1

Total Circuit
 -> 1
RBX -> 1
ZF -> 1
SF -> 1
RCX -> 1
OF -> 1

Target
 -> 1
OF -> 1
RBX -> 1
ZF -> 1
SF -> 1
RCX -> 1

[4m[1m[34mkprove cmovngq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovngq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovngq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovngq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput cmovngq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovngq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovngq_r64_r64[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "SF" |-> (mi(1, _607) )
echo Debug:  Result: "SF" |-> (MI607 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _606) )
echo Debug:  Result: "RCX" |-> (MI606 )
echo Debug:  PreResult: "OF" |-> (mi(1, _604) )
echo Debug:  Result: "OF" |-> (MI604 )
echo Debug:  PreResult: "RBX" |-> (mi(64, _605) )
echo Debug:  Result: "RBX" |-> (MI605 )
echo Debug:  PreResult: "ZF" |-> (mi(1, _608)   )
echo Debug:  Result: "ZF" |-> (MI608   )
[4m[1m[34mwriteKDefn cmovngq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovngq_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovngq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovnow_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnow_r16_r16.s[0m
[4m[1m[34mcreatespec cmovnow_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnow_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnow_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnow_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovnow_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnow_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnow_r16_r16.s[0m
Circuit: callq .set_sf
%sf -> 1

Circuit: cmovngew %cx, %bx
%cx -> 1
%of -> 1
cmov -> 1
%sf -> 1
%bx -> 1

Total Circuit
 -> 1
OF -> 1
RCX -> 1
SF -> 1
RBX -> 1

Target
 -> 1
OF -> 1
RCX -> 1
RBX -> 1

[4m[1m[34mkprove cmovnow_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnow_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovnow_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovnow_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovnow_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovnow_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovnow_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(xorMInt(mi(1, 1), mi(1, _602)), mi(1, 0)) ) #then ( mi(64, _603) ) #else ( concatenateMInt(extractMInt(mi(64, _603), 0, 48), extractMInt(mi(64, _604), 48, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(xorMInt(mi(1, 1), MI602), mi(1, 0)) ) #then ( MI603 ) #else ( concatenateMInt(extractMInt(MI603, 0, 48), extractMInt(MI604, 48, 64)) ) #fi)  )
echo Debug:  PreResult: "SF" |-> (mi(1, 1) )
echo Debug:  Result: "SF" |-> (mi(1, 1) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _604) )
echo Debug:  Result: "RCX" |-> (MI604 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _603)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI603) )
echo Debug:  PreResult: "OF" |-> (mi(1, _602)   )
echo Debug:  Result: "OF" |-> (MI602   )
[4m[1m[34mwriteKDefn cmovnow_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovnow_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovnow_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovow_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovow_r16_r16.s[0m
[4m[1m[34mcreatespec cmovow_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovow_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovow_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovow_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bx does not belong to Must Write: cmovow_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovow_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovow_r16_r16.s[0m
Circuit: movswq %cx, %r12
%cx -> 1
%r12 -> 1

Circuit: cmovol %r12d, %ebx
%ebx -> 1
%r12d -> 1
%of -> 1
cmov -> 1
%rbx -> 1

Total Circuit
RBX -> 1
RCX -> 1
OF -> 1
R12 -> 1
 -> 1

Target
RCX -> 1
RBX -> 1
OF -> 1
 -> 1

[4m[1m[34mkprove cmovow_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovow_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovow_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovow_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmovow_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovow_r16_r16: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovow_r16_r16[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(8, 255), concatenateMInt(mi(7, 0), mi(1, _602))), mi(8, 0)), mi(8, 0)) ) #then ( concatenateMInt(extractMInt(mi(64, _603), 0, 48), extractMInt(mi(64, _604), 48, 64)) ) #else ( mi(64, _603) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(mi(8, 255), concatenateMInt(mi(7, 0), MI602)), mi(8, 0)), mi(8, 0)) ) #then ( concatenateMInt(extractMInt(MI603, 0, 48), extractMInt(MI604, 48, 64)) ) #else ( MI603 ) #fi)  )
echo Debug:  PreResult: "R12" |-> (mi(64, svalueMInt(extractMInt(mi(64, _604), 48, 64))) )
echo Debug:  Result: "R12" |-> (mi(64, svalueMInt(extractMInt(MI604, 48, 64))) )
echo Debug:  PreResult: "RCX" |-> (mi(64, _604) )
echo Debug:  Result: "RCX" |-> (MI604 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _603)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI603) )
echo Debug:  PreResult: "OF" |-> (mi(1, _602)   )
echo Debug:  Result: "OF" |-> (MI602   )
[4m[1m[34mwriteKDefn cmovow_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovow_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovow_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmovsl_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovsl_r32_r32.s[0m
[4m[1m[34mcreatespec cmovsl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovsl_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovsl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovsl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmovsl_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovsl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovsl_r32_r32.s[0m
Circuit: callq .set_of
%of -> 1

Circuit: cmovnll %ecx, %ebx
%of -> 1
cmov -> 1
%ecx -> 1
%rbx -> 1
%ebx -> 1
%sf -> 1

Total Circuit
OF -> 1
SF -> 1
RBX -> 1
RCX -> 1
 -> 1

Target
RCX -> 1
SF -> 1
RBX -> 1
 -> 1

[4m[1m[34mkprove cmovsl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovsl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmovsl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmovsl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmovsl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmovsl_r32_r32: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmovsl_r32_r32[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(xorMInt(mi(1, _603), mi(1, 1)), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _602), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(mi(64, _601), 32, 64)) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(xorMInt(MI603, mi(1, 1)), mi(1, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(MI602, 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(MI601, 32, 64)) ) #fi)  )
echo Debug:  PreResult: "SF" |-> (mi(1, _603) )
echo Debug:  Result: "SF" |-> (MI603 )
echo Debug:  PreResult: "RCX" |-> (mi(64, _602) )
echo Debug:  Result: "RCX" |-> (MI602 )
echo Debug:  PreResult: "OF" |-> (mi(1, 1)   )
echo Debug:  Result: "OF" |-> (mi(1, 1)   )
[4m[1m[34mwriteKDefn cmovsl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmovsl_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmovsl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmpb_r8_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpb_r8_r8.s[0m
[4m[1m[34mcreatespec cmpb_r8_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpb_r8_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpb_r8_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmpb_r8_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpb_r8_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpb_r8_r8.s[0m
Circuit: xorq %rax, %rax
%af -> 1
%of -> 1
%pf -> 1
%rax -> 1
%cf -> 1
%sf -> 1
%zf -> 1

Circuit: salw $0x1, %ax
%of -> 1
%af -> 1
%pf -> 1
\$0x1 -> 1
%ax -> 1
%cf -> 1
%sf -> 1
%zf -> 1

Circuit: xchgb %ah, %cl
%cl -> 1
%ah -> 1

Circuit: cmpb %ah, %bl
%zf -> 1
%sf -> 1
%cf -> 1
%bl -> 1
%pf -> 1
%af -> 1
%of -> 1
%ah -> 1

Total Circuit
CF -> 1
AF -> 1
PF -> 1
RAX -> 1
 -> 1
OF -> 1
RCX -> 1
SF -> 1
ZF -> 1
RBX -> 1

Target
PF -> 1
AF -> 1
CF -> 1
SF -> 1
ZF -> 1
RBX -> 1
RCX -> 1
OF -> 1

[4m[1m[34mkprove cmpb_r8_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpb_r8_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpb_r8_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmpb_r8_r8[0m
[4m[1m[34msanitizeSpecOutput cmpb_r8_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmpb_r8_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _615), 56, 64)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 255)), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _615), 56, 64)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 255)), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(mi(8, 0), extractMInt(MI615, 56, 64)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(MI616, 56, 64), mi(8, 255)), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI615, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI615, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(mi(8, 0), extractMInt(MI615, 56, 64)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(MI616, 56, 64), mi(8, 255)), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI615, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI615, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _615), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI615, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI616, 56, 64), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI615, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI615, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _615), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 255)), mi(8, 0)), mi(8, 0))), addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _615), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI615, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI616, 56, 64), mi(8, 255)), mi(8, 0)), mi(8, 0))), addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI615, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI616, 56, 64), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI615, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI615, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _615), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI615, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI616, 56, 64), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI615, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI615, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(extractMInt(mi(64, _616), 0, 56), mi(8, 0)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(extractMInt(MI616, 0, 56), mi(8, 0)) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _615), 56, 64)), mi(8, 0)), 0, 1), extractMInt(addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 255)), mi(8, 0)), mi(8, 0)), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _615), 56, 64)), mi(8, 0)), 0, 1), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _615), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI615, 56, 64)), mi(8, 0)), 0, 1), extractMInt(addMInt(addMInt(xorMInt(extractMInt(MI616, 56, 64), mi(8, 255)), mi(8, 0)), mi(8, 0)), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI615, 56, 64)), mi(8, 0)), 0, 1), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI615, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI616, 56, 64), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI615, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI615, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(extractMInt(MI616, 56, 64), mi(8, 0))) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _615) )
echo Debug:  Result: "RBX" |-> (MI615 )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _615), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI615, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI616, 56, 64), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI615, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI615, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn cmpb_r8_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmpb_r8_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpb_r8_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmpb_rh_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpb_rh_r8.s[0m
[4m[1m[34mcreatespec cmpb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpb_rh_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpb_rh_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmpb_rh_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpb_rh_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpb_rh_r8.s[0m
Circuit: subb %bl, %ah
%bl -> 1
%zf -> 1
%cf -> 1
%sf -> 1
%pf -> 1
%ah -> 1
%of -> 1
%af -> 1

Total Circuit
RAX -> 1
PF -> 1
CF -> 1
AF -> 1
SF -> 1
ZF -> 1
RBX -> 1
OF -> 1

Target
RAX -> 1
CF -> 1
AF -> 1
PF -> 1
SF -> 1
ZF -> 1
RBX -> 1
OF -> 1

[4m[1m[34mkprove cmpb_rh_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpb_rh_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpb_rh_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmpb_rh_r8[0m
[4m[1m[34msanitizeSpecOutput cmpb_rh_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmpb_rh_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 48, 56)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 56, 64), mi(8, 0)), mi(8, 0))))), mi(9, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 48, 56)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 56, 64), mi(8, 0)), mi(8, 0))))), mi(9, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 48, 56)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 56, 64), mi(8, 0)), mi(8, 0))))), mi(9, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 48, 56)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 56, 64), mi(8, 0)), mi(8, 0))))), mi(9, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(MI614, 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _614), 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 56, 64), mi(8, 0)), mi(8, 0)))), addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI614, 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 56, 64), mi(8, 0)), mi(8, 0)))), addMInt(addMInt(extractMInt(MI614, 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(MI614, 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _614), 48, 49), xorMInt(mi(1, 1), extractMInt(addMInt(addMInt(extractMInt(mi(64, _615), 56, 64), mi(8, 0)), mi(8, 0)), 0, 1)))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _614), 48, 49), extractMInt(addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI614, 48, 49), xorMInt(mi(1, 1), extractMInt(addMInt(addMInt(extractMInt(MI615, 56, 64), mi(8, 0)), mi(8, 0)), 0, 1)))  andBool   notBool  ( eqMInt(extractMInt(MI614, 48, 49), extractMInt(addMInt(addMInt(extractMInt(MI614, 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _614), 0, 48), concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), extractMInt(mi(64, _614), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI614, 0, 48), concatenateMInt(addMInt(addMInt(extractMInt(MI614, 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), extractMInt(MI614, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _615) )
echo Debug:  Result: "RBX" |-> (MI615 )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(MI614, 48, 56), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn cmpb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmpb_rh_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpb_rh_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmpb_rh_rh[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpb_rh_rh.s[0m
[4m[1m[34mcreatespec cmpb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpb_rh_rh_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpb_rh_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmpb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpb_rh_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpb_rh_rh.s[0m
Circuit: subb %bh, %ah
%pf -> 1
%ah -> 1
%of -> 1
%af -> 1
%zf -> 1
%cf -> 1
%sf -> 1
%bh -> 1

Total Circuit
RBX -> 1
ZF -> 1
SF -> 1
OF -> 1
RAX -> 1
AF -> 1
CF -> 1
PF -> 1

Target
PF -> 1
AF -> 1
CF -> 1
RAX -> 1
OF -> 1
RBX -> 1
SF -> 1
ZF -> 1

[4m[1m[34mkprove cmpb_rh_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpb_rh_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpb_rh_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmpb_rh_rh[0m
[4m[1m[34msanitizeSpecOutput cmpb_rh_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmpb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 48, 56)), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), mi(9, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 48, 56)), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), mi(9, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 48, 56)), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(MI615, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), mi(9, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 48, 56)), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(MI615, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), mi(9, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), addMInt(addMInt(xorMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(MI614, 48, 56), addMInt(addMInt(xorMInt(extractMInt(MI615, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _614), 48, 56), addMInt(addMInt(xorMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), addMInt(addMInt(xorMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI614, 48, 56), addMInt(addMInt(xorMInt(extractMInt(MI615, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), addMInt(addMInt(extractMInt(MI614, 48, 56), addMInt(addMInt(xorMInt(extractMInt(MI615, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), addMInt(addMInt(xorMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(MI614, 48, 56), addMInt(addMInt(xorMInt(extractMInt(MI615, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _614), 48, 49), extractMInt(addMInt(addMInt(xorMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _614), 48, 49), extractMInt(addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), addMInt(addMInt(xorMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI614, 48, 49), extractMInt(addMInt(addMInt(xorMInt(extractMInt(MI615, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(MI614, 48, 49), extractMInt(addMInt(addMInt(extractMInt(MI614, 48, 56), addMInt(addMInt(xorMInt(extractMInt(MI615, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _614), 0, 48), concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), addMInt(addMInt(xorMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1)), extractMInt(mi(64, _614), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI614, 0, 48), concatenateMInt(addMInt(addMInt(extractMInt(MI614, 48, 56), addMInt(addMInt(xorMInt(extractMInt(MI615, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1)), extractMInt(MI614, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _615) )
echo Debug:  Result: "RBX" |-> (MI615 )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), addMInt(addMInt(xorMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(MI614, 48, 56), addMInt(addMInt(xorMInt(extractMInt(MI615, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), mi(8, 1)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn cmpb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmpb_rh_rh.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpb_rh_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmpl_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpl_r32_r32.s[0m
[4m[1m[34mcreatespec cmpl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpl_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmpl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpl_r32_r32.s[0m
Circuit: subl %ecx, %ebx
%zf -> 1
%sf -> 1
%ebx -> 1
%cf -> 1
%pf -> 1
%of -> 1
%af -> 1
%ecx -> 1
%rbx -> 1

Total Circuit
AF -> 1
CF -> 1
PF -> 1
OF -> 1
RCX -> 1
SF -> 1
RBX -> 1
ZF -> 1

Target
CF -> 1
AF -> 1
PF -> 1
RCX -> 1
RBX -> 1
SF -> 1
ZF -> 1
OF -> 1

[4m[1m[34mkprove cmpl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmpl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput cmpl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmpl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(mi(64, _615), 32, 64))), concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 32, 64))), mi(33, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(mi(64, _615), 32, 64))), concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 32, 64))), mi(33, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(MI615, 32, 64))), concatenateMInt(mi(1, 0), extractMInt(MI614, 32, 64))), mi(33, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(MI615, 32, 64))), concatenateMInt(mi(1, 0), extractMInt(MI614, 32, 64))), mi(33, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _615), 32, 64)), extractMInt(mi(64, _614), 32, 64)), mi(32, 1)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI615, 32, 64)), extractMInt(MI614, 32, 64)), mi(32, 1)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _615), 32, 64)), extractMInt(mi(64, _614), 32, 64)), addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _615), 32, 64)), extractMInt(mi(64, _614), 32, 64)), mi(32, 1))), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(32, -1), extractMInt(MI615, 32, 64)), extractMInt(MI614, 32, 64)), addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI615, 32, 64)), extractMInt(MI614, 32, 64)), mi(32, 1))), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _615), 32, 64)), extractMInt(mi(64, _614), 32, 64)), mi(32, 1)), 24, 32), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI615, 32, 64)), extractMInt(MI614, 32, 64)), mi(32, 1)), 24, 32), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _615) )
echo Debug:  Result: "RCX" |-> (MI615 )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(mi(64, _615), 32, 33)), extractMInt(mi(64, _614), 32, 33))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(mi(64, _615), 32, 33)), extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _615), 32, 64)), extractMInt(mi(64, _614), 32, 64)), mi(32, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(MI615, 32, 33)), extractMInt(MI614, 32, 33))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(MI615, 32, 33)), extractMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI615, 32, 64)), extractMInt(MI614, 32, 64)), mi(32, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _615), 32, 64)), extractMInt(mi(64, _614), 32, 64)), mi(32, 1))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI615, 32, 64)), extractMInt(MI614, 32, 64)), mi(32, 1))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(mi(64, _615), 32, 64)), extractMInt(mi(64, _614), 32, 64)), mi(32, 1)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(32, -1), extractMInt(MI615, 32, 64)), extractMInt(MI614, 32, 64)), mi(32, 1)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn cmpl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmpl_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmpw_r16_r16[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpw_r16_r16.s[0m
[4m[1m[34mcreatespec cmpw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpw_r16_r16_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmpw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpw_r16_r16.s[0m
Circuit: subw %cx, %bx
%cf -> 1
%sf -> 1
%zf -> 1
%bx -> 1
%of -> 1
%af -> 1
%cx -> 1
%pf -> 1

Total Circuit
OF -> 1
ZF -> 1
SF -> 1
RBX -> 1
RCX -> 1
PF -> 1
CF -> 1
AF -> 1

Target
PF -> 1
AF -> 1
CF -> 1
OF -> 1
RBX -> 1
SF -> 1
ZF -> 1
RCX -> 1

[4m[1m[34mkprove cmpw_r16_r16[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpw_r16_r16_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpw_r16_r16_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmpw_r16_r16[0m
[4m[1m[34msanitizeSpecOutput cmpw_r16_r16[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmpw_r16_r16: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _614), 56, 64))), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(mi(64, _615), 48, 64)))), concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _614), 56, 64))), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(mi(64, _615), 48, 64)))), concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(addMInt(addMInt(extractMInt(MI614, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI614, 56, 64))), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(MI615, 48, 64)))), concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(addMInt(addMInt(extractMInt(MI614, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI614, 56, 64))), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(MI615, 48, 64)))), concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _614), 56, 64)), xorMInt(mi(16, 65535), extractMInt(mi(64, _615), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(MI614, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI614, 56, 64)), xorMInt(mi(16, 65535), extractMInt(MI615, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _614), 56, 64)), xorMInt(mi(16, 65535), extractMInt(mi(64, _615), 48, 64))), addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _614), 56, 64)), xorMInt(mi(16, 65535), extractMInt(mi(64, _615), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(addMInt(addMInt(extractMInt(MI614, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI614, 56, 64)), xorMInt(mi(16, 65535), extractMInt(MI615, 48, 64))), addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(MI614, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI614, 56, 64)), xorMInt(mi(16, 65535), extractMInt(MI615, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _614), 56, 64)), xorMInt(mi(16, 65535), extractMInt(mi(64, _615), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 8, 16), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(MI614, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI614, 56, 64)), xorMInt(mi(16, 65535), extractMInt(MI615, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 8, 16), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _615) )
echo Debug:  Result: "RCX" |-> (MI615 )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1), xorMInt(mi(1, 1), extractMInt(mi(64, _615), 48, 49)))  andBool   notBool  ( eqMInt(extractMInt(addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1), extractMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _614), 56, 64)), xorMInt(mi(16, 65535), extractMInt(mi(64, _615), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(addMInt(extractMInt(MI614, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1), xorMInt(mi(1, 1), extractMInt(MI615, 48, 49)))  andBool   notBool  ( eqMInt(extractMInt(addMInt(addMInt(extractMInt(MI614, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1), extractMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(MI614, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI614, 56, 64)), xorMInt(mi(16, 65535), extractMInt(MI615, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _614), 0, 48), addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _614), 56, 64)), xorMInt(mi(16, 65535), extractMInt(mi(64, _615), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI614, 0, 48), addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(MI614, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI614, 56, 64)), xorMInt(mi(16, 65535), extractMInt(MI615, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(mi(64, _614), 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(mi(64, _614), 56, 64)), xorMInt(mi(16, 65535), extractMInt(mi(64, _615), 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _614), 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(concatenateMInt(addMInt(addMInt(extractMInt(MI614, 48, 56), mi(8, 0)), concatenateMInt(mi(7, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), extractMInt(MI614, 56, 64)), xorMInt(mi(16, 65535), extractMInt(MI615, 48, 64))), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI614, 48, 56)), mi(9, 0)), concatenateMInt(mi(8, 0), extractMInt(addMInt(mi(33, 16), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(addMInt(addMInt(extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24), extractMInt(addMInt(addMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI615, 48, 56), mi(8, 1)))), 32, 64)), mi(32, 0)), 16, 24)), mi(8, 0)), mi(8, 0)), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn cmpw_r16_r16: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmpw_r16_r16.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpw_r16_r16.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmpxchgb_rh_rh[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpxchgb_rh_rh.s[0m
[4m[1m[34mcreatespec cmpxchgb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpxchgb_rh_rh_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpxchgb_rh_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmpxchgb_rh_rh: Check if May == Must[0m
Warn: [4m[1m[35mMay Write bh does not belong to Must Write: cmpxchgb_rh_rh[0m
Warn: [4m[1m[35mMay Write al does not belong to Must Write: cmpxchgb_rh_rh[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpxchgb_rh_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpxchgb_rh_rh.s[0m
Circuit: cmpb %bh, %al
%af -> 1
%of -> 1
%pf -> 1
%al -> 1
%cf -> 1
%bh -> 1
%sf -> 1
%zf -> 1

Circuit: setnle %cl
%zf -> 1
%cl -> 1
%sf -> 1
%of -> 1

Circuit: movb %bh, %al
%bh -> 1
%al -> 1

Circuit: cmovew %cx, %bx
%cx -> 1
cmov -> 1
%bx -> 1
%zf -> 1

Total Circuit
ZF -> 1
SF -> 1
RBX -> 1
RCX -> 1
OF -> 1
 -> 1
RAX -> 1
PF -> 1
CF -> 1
AF -> 1

Target
PF -> 1
CF -> 1
AF -> 1
RAX -> 1
OF -> 1
ZF -> 1
SF -> 1
RBX -> 1
RCX -> 1

[4m[1m[34mkprove cmpxchgb_rh_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpxchgb_rh_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpxchgb_rh_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmpxchgb_rh_rh[0m
[4m[1m[34msanitizeSpecOutput cmpxchgb_rh_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmpxchgb_rh_rh: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmpxchgb_rh_rh[0m
Warn: [4m[1m[35mMay Write RAX does not belong to Must Write: cmpxchgb_rh_rh[0m
Warn: [4m[1m[35mcmpxchgb_rh_rh: More that one writes. May Need to schedule.[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _618), 56, 64)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(mi(64, _619), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _618), 56, 64)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(mi(64, _619), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(mi(8, 0), extractMInt(MI618, 56, 64)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(MI619, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(mi(8, 0), extractMInt(MI618, 56, 64)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(xorMInt(extractMInt(MI619, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _618), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _619), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI618, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI619, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  PreResult: "SPAD2" |-> (concatenateMInt(mi(192, 0), mi(64, _619)) )
echo Debug:  Result: "SPAD2" |-> (concatenateMInt(mi(192, 0), MI619) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _618), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _619), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _618), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _619), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI618, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI619, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI618, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI619, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _620) )
echo Debug:  Result: "RCX" |-> (MI620 )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _618), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _619), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI618, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI619, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _618)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI618) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _618), 56, 64)), mi(8, 0)), 0, 1), extractMInt(addMInt(addMInt(xorMInt(extractMInt(mi(64, _619), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _618), 56, 64)), mi(8, 0)), 0, 1), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _618), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _619), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI618, 56, 64)), mi(8, 0)), 0, 1), extractMInt(addMInt(addMInt(xorMInt(extractMInt(MI619, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0)), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI618, 56, 64)), mi(8, 0)), 0, 1), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI618, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI619, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _618), 0, 56), extractMInt(mi(64, _619), 48, 56)) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI618, 0, 56), extractMInt(MI619, 48, 56)) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _619) )
echo Debug:  Result: "RBX" |-> (MI619 )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(mi(64, _618), 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(mi(64, _619), 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(mi(64, _618), 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(addMInt(addMInt(mi(8, 0), extractMInt(MI618, 56, 64)), mi(8, 0)), addMInt(addMInt(xorMInt(extractMInt(MI619, 48, 56), mi(8, 255)), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(mi(9, 0), concatenateMInt(mi(1, 0), extractMInt(MI618, 56, 64))), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn cmpxchgb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmpxchgb_rh_rh.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpxchgb_rh_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: cmpxchgq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpxchgq_r64_r64.s[0m
[4m[1m[34mcreatespec cmpxchgq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpxchgq_r64_r64_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpxchgq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmpxchgq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write rbx does not belong to Must Write: cmpxchgq_r64_r64[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpxchgq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpxchgq_r64_r64.s[0m
Circuit: cmpq %rbx, %rax
%pf -> 1
%rax -> 1
%af -> 1
%of -> 1
%rbx -> 1
%zf -> 1
%sf -> 1
%cf -> 1

Circuit: cmovneq %rbx, %rax
%rbx -> 1
%rax -> 1
cmov -> 1
%zf -> 1

Circuit: cmoveq %rcx, %rbx
cmov -> 1
%rcx -> 1
%rbx -> 1
%zf -> 1

Total Circuit
CF -> 1
AF -> 1
PF -> 1
RAX -> 1
 -> 1
OF -> 1
RCX -> 1
RBX -> 1
SF -> 1
ZF -> 1

Target
OF -> 1
RBX -> 1
SF -> 1
ZF -> 1
RCX -> 1
PF -> 1
CF -> 1
AF -> 1
RAX -> 1

[4m[1m[34mkprove cmpxchgq_r64_r64[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpxchgq_r64_r64_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_cmpxchgq_r64_r64_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput cmpxchgq_r64_r64[0m
[4m[1m[34msanitizeSpecOutput cmpxchgq_r64_r64[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mcmpxchgq_r64_r64: Check if May == Must[0m
Warn: [4m[1m[35mMay Write RBX does not belong to Must Write: cmpxchgq_r64_r64[0m
Warn: [4m[1m[35mcmpxchgq_r64_r64: More that one writes. May Need to schedule.[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), mi(64, _617))), concatenateMInt(mi(1, 0), mi(64, _616))), mi(65, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), mi(64, _617))), concatenateMInt(mi(1, 0), mi(64, _616))), mi(65, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), MI617)), concatenateMInt(mi(1, 0), MI616)), mi(65, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), MI617)), concatenateMInt(mi(1, 0), MI616)), mi(65, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _617)), mi(64, _616)), mi(64, 1)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI617), MI616), mi(64, 1)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _617)), mi(64, _616)), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _617)), mi(64, _616)), mi(64, 1))), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(64, 18446744073709551615), MI617), MI616), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI617), MI616), mi(64, 1))), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _617)), mi(64, _616)), mi(64, 1)), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI617), MI616), mi(64, 1)), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _618) )
echo Debug:  Result: "RCX" |-> (MI618 )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(mi(64, _617), 0, 1)), extractMInt(mi(64, _616), 0, 1))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(mi(64, _617), 0, 1)), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _617)), mi(64, _616)), mi(64, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(MI617, 0, 1)), extractMInt(MI616, 0, 1))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(MI617, 0, 1)), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI617), MI616), mi(64, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _617)), mi(64, _616)), mi(64, 1)), mi(64, 0)) ) #then ( mi(64, _616) ) #else ( mi(64, _617) ) #fi)  )
echo Debug:  Result: "RAX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI617), MI616), mi(64, 1)), mi(64, 0)) ) #then ( MI616 ) #else ( MI617 ) #fi)  )
echo Debug:  PreResult: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _617)), mi(64, _616)), mi(64, 1)), mi(64, 0)) ) #then ( mi(64, _618) ) #else ( mi(64, _617) ) #fi)  )
echo Debug:  Result: "RBX" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI617), MI616), mi(64, 1)), mi(64, 0)) ) #then ( MI618 ) #else ( MI617 ) #fi)  )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), mi(64, _617)), mi(64, _616)), mi(64, 1)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), MI617), MI616), mi(64, 1)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn cmpxchgq_r64_r64: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-cmpxchgq_r64_r64.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/cmpxchgq_r64_r64.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: haddps_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/haddps_xmm_xmm.s[0m
[4m[1m[34mcreatespec haddps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_haddps_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/haddps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mhaddps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/haddps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/haddps_xmm_xmm.s[0m
Circuit: vmovupd %xmm1, %xmm5
%xmm1 -> 1
%xmm5 -> 1
%ymm5 -> 1
avx -> 1

Circuit: vhaddps %xmm2, %xmm5, %xmm5
avx -> 1
%xmm5 -> 1
%ymm5 -> 1
%xmm2 -> 1

Circuit: movups %xmm5, %xmm1
%xmm5 -> 1
sse -> 1
%xmm1 -> 1

Total Circuit
YMM1 -> 1
YMM2 -> 1
YMM5 -> 1
 -> 1

Target
YMM2 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove haddps_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_haddps_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_haddps_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput haddps_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput haddps_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mhaddps_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _601) )
echo Debug:  Result: "YMM2" |-> (MI601 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _600), 0, 128), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _601), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _601), 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _601), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _601), 224, 256), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _600), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _600), 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _600), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _600), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI600, 0, 128), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI601, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI601, 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI601, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI601, 224, 256), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI600, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI600, 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI600, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI600, 224, 256), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM5" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _601), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _601), 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _601), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _601), 224, 256), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _600), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _600), 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _600), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(mi(256, _600), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM5" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI601, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI601, 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI601, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI601, 224, 256), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI600, 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(MI600, 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI600, 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(MI600, 224, 256), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _600)   )
echo Debug:  Result: "SPAD1" |-> (MI600   )
[4m[1m[34mwriteKDefn haddps_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-haddps_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/haddps_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: phsubd_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/phsubd_xmm_xmm.s[0m
[4m[1m[34mcreatespec phsubd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_phsubd_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/phsubd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mphsubd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/phsubd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/phsubd_xmm_xmm.s[0m
Circuit: movsldup %xmm2, %xmm0
%xmm0 -> 1
%xmm2 -> 1
pni -> 1

Circuit: vmovsldup %xmm1, %xmm13
%xmm13 -> 1
avx -> 1
%xmm1 -> 1
%ymm13 -> 1

Circuit: movdqu %xmm0, %xmm15
%xmm15 -> 1
sse2 -> 1
%xmm0 -> 1

Circuit: vpsubq %xmm1, %xmm13, %xmm9
%xmm1 -> 1
%ymm9 -> 1
%xmm9 -> 1
avx -> 1
%xmm13 -> 1

Circuit: vpsubq %xmm2, %xmm15, %xmm0
%xmm2 -> 1
%xmm15 -> 1
%xmm0 -> 1
avx -> 1
%ymm0 -> 1

Circuit: movdqu %xmm9, %xmm1
sse2 -> 1
%xmm1 -> 1
%xmm9 -> 1

Circuit: phaddd %xmm0, %xmm1
%xmm0 -> 1
ssse3 -> 1
%xmm1 -> 1

Total Circuit
YMM0 -> 1
YMM15 -> 1
 -> 1
YMM13 -> 1
YMM9 -> 1
YMM1 -> 1
YMM2 -> 1

Target
YMM2 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove phsubd_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_phsubd_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_phsubd_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput phsubd_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput phsubd_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mphsubd_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _604) )
echo Debug:  Result: "YMM2" |-> (MI604 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _603), 0, 128), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _604), 128, 192)), concatenateMInt(extractMInt(mi(256, _604), 160, 192), extractMInt(mi(256, _604), 160, 192))), mi(64, 1)), 0, 32)), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _604), 128, 192)), concatenateMInt(extractMInt(mi(256, _604), 160, 192), extractMInt(mi(256, _604), 160, 192))), mi(64, 1)), 32, 64))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _604), 192, 256)), concatenateMInt(extractMInt(mi(256, _604), 224, 256), extractMInt(mi(256, _604), 224, 256))), mi(64, 1)), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _604), 192, 256)), concatenateMInt(extractMInt(mi(256, _604), 224, 256), extractMInt(mi(256, _604), 224, 256))), mi(64, 1)), 0, 32))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _603), 128, 192)), concatenateMInt(extractMInt(mi(256, _603), 160, 192), extractMInt(mi(256, _603), 160, 192))), mi(64, 1)), 0, 32), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _603), 128, 192)), concatenateMInt(extractMInt(mi(256, _603), 160, 192), extractMInt(mi(256, _603), 160, 192))), mi(64, 1)), 0, 32)), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _603), 128, 192)), concatenateMInt(extractMInt(mi(256, _603), 160, 192), extractMInt(mi(256, _603), 160, 192))), mi(64, 1))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _603), 192, 256)), concatenateMInt(extractMInt(mi(256, _603), 224, 256), extractMInt(mi(256, _603), 224, 256))), mi(64, 1)), 0, 32), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _603), 192, 256)), concatenateMInt(extractMInt(mi(256, _603), 224, 256), extractMInt(mi(256, _603), 224, 256))), mi(64, 1)), 0, 32)), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _603), 192, 256)), concatenateMInt(extractMInt(mi(256, _603), 224, 256), extractMInt(mi(256, _603), 224, 256))), mi(64, 1))), mi(64, 0)), 32, 64)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI603, 0, 128), concatenateMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI604, 128, 192)), concatenateMInt(extractMInt(MI604, 160, 192), extractMInt(MI604, 160, 192))), mi(64, 1)), 0, 32)), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI604, 128, 192)), concatenateMInt(extractMInt(MI604, 160, 192), extractMInt(MI604, 160, 192))), mi(64, 1)), 32, 64))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI604, 192, 256)), concatenateMInt(extractMInt(MI604, 224, 256), extractMInt(MI604, 224, 256))), mi(64, 1)), concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI604, 192, 256)), concatenateMInt(extractMInt(MI604, 224, 256), extractMInt(MI604, 224, 256))), mi(64, 1)), 0, 32))), mi(64, 0)), 32, 64)), concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI603, 128, 192)), concatenateMInt(extractMInt(MI603, 160, 192), extractMInt(MI603, 160, 192))), mi(64, 1)), 0, 32), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI603, 128, 192)), concatenateMInt(extractMInt(MI603, 160, 192), extractMInt(MI603, 160, 192))), mi(64, 1)), 0, 32)), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI603, 128, 192)), concatenateMInt(extractMInt(MI603, 160, 192), extractMInt(MI603, 160, 192))), mi(64, 1))), mi(64, 0)), 32, 64), extractMInt(addMInt(addMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI603, 192, 256)), concatenateMInt(extractMInt(MI603, 224, 256), extractMInt(MI603, 224, 256))), mi(64, 1)), 0, 32), extractMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI603, 192, 256)), concatenateMInt(extractMInt(MI603, 224, 256), extractMInt(MI603, 224, 256))), mi(64, 1)), 0, 32)), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI603, 192, 256)), concatenateMInt(extractMInt(MI603, 224, 256), extractMInt(MI603, 224, 256))), mi(64, 1))), mi(64, 0)), 32, 64)))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 160, 192), extractMInt(mi(256, _603), 160, 192)), concatenateMInt(extractMInt(mi(256, _603), 224, 256), extractMInt(mi(256, _603), 224, 256)))) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI603, 160, 192), extractMInt(MI603, 160, 192)), concatenateMInt(extractMInt(MI603, 224, 256), extractMInt(MI603, 224, 256)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _603) )
echo Debug:  Result: "SPAD1" |-> (MI603 )
echo Debug:  PreResult: "YMM15" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _604), 160, 192), extractMInt(mi(256, _604), 160, 192)), concatenateMInt(extractMInt(mi(256, _604), 224, 256), extractMInt(mi(256, _604), 224, 256)))) )
echo Debug:  Result: "YMM15" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI604, 160, 192), extractMInt(MI604, 160, 192)), concatenateMInt(extractMInt(MI604, 224, 256), extractMInt(MI604, 224, 256)))) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _603), 128, 192)), concatenateMInt(extractMInt(mi(256, _603), 160, 192), extractMInt(mi(256, _603), 160, 192))), mi(64, 1)), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _603), 192, 256)), concatenateMInt(extractMInt(mi(256, _603), 224, 256), extractMInt(mi(256, _603), 224, 256))), mi(64, 1)))) )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(128, 0), concatenateMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI603, 128, 192)), concatenateMInt(extractMInt(MI603, 160, 192), extractMInt(MI603, 160, 192))), mi(64, 1)), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI603, 192, 256)), concatenateMInt(extractMInt(MI603, 224, 256), extractMInt(MI603, 224, 256))), mi(64, 1)))) )
echo Debug:  PreResult: "YMM0" |-> (concatenateMInt(mi(128, 0), concatenateMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _604), 128, 192)), concatenateMInt(extractMInt(mi(256, _604), 160, 192), extractMInt(mi(256, _604), 160, 192))), mi(64, 1)), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _604), 192, 256)), concatenateMInt(extractMInt(mi(256, _604), 224, 256), extractMInt(mi(256, _604), 224, 256))), mi(64, 1))))   )
echo Debug:  Result: "YMM0" |-> (concatenateMInt(mi(128, 0), concatenateMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI604, 128, 192)), concatenateMInt(extractMInt(MI604, 160, 192), extractMInt(MI604, 160, 192))), mi(64, 1)), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI604, 192, 256)), concatenateMInt(extractMInt(MI604, 224, 256), extractMInt(MI604, 224, 256))), mi(64, 1))))   )
[4m[1m[34mwriteKDefn phsubd_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-phsubd_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/phsubd_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: psubq_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/psubq_xmm_xmm.s[0m
[4m[1m[34mcreatespec psubq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_psubq_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/psubq_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpsubq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/psubq_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/psubq_xmm_xmm.s[0m
Circuit: vpsubq %xmm2, %xmm1, %xmm12
avx -> 1
%xmm12 -> 1
%xmm2 -> 1
%ymm12 -> 1
%xmm1 -> 1

Circuit: movupd %xmm12, %xmm1
sse2 -> 1
%xmm12 -> 1
%xmm1 -> 1

Total Circuit
 -> 1
YMM2 -> 1
YMM1 -> 1
YMM12 -> 1

Target
YMM2 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove psubq_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_psubq_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_psubq_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput psubq_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput psubq_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mpsubq_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _601), 128, 192)), extractMInt(mi(256, _600), 128, 192)), mi(64, 1)), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _601), 192, 256)), extractMInt(mi(256, _600), 192, 256)), mi(64, 1)))) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(128, 0), concatenateMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI601, 128, 192)), extractMInt(MI600, 128, 192)), mi(64, 1)), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI601, 192, 256)), extractMInt(MI600, 192, 256)), mi(64, 1)))) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _601) )
echo Debug:  Result: "YMM2" |-> (MI601 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(extractMInt(mi(256, _600), 0, 128), concatenateMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _601), 128, 192)), extractMInt(mi(256, _600), 128, 192)), mi(64, 1)), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(mi(256, _601), 192, 256)), extractMInt(mi(256, _600), 192, 256)), mi(64, 1)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(extractMInt(MI600, 0, 128), concatenateMInt(addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI601, 128, 192)), extractMInt(MI600, 128, 192)), mi(64, 1)), addMInt(addMInt(xorMInt(mi(64, 18446744073709551615), extractMInt(MI601, 192, 256)), extractMInt(MI600, 192, 256)), mi(64, 1)))) )
echo Debug:  PreResult: "SPAD1" |-> (mi(256, _600)   )
echo Debug:  Result: "SPAD1" |-> (MI600   )
[4m[1m[34mwriteKDefn psubq_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-psubq_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/psubq_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: rorb_rh_one[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rorb_rh_one.s[0m
[4m[1m[34mcreatespec rorb_rh_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rorb_rh_one_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rorb_rh_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrorb_rh_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rorb_rh_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rorb_rh_one.s[0m
Circuit: movb %ah, %dh
%dh -> 1
%ah -> 1

Circuit: movb %dh, %al
%dh -> 1
%al -> 1

Circuit: rorb $0x1, %al
%al -> 1
%of -> 1
\$0x1 -> 1
%cf -> 1

Circuit: movswq %ax, %rbx
%rbx -> 1
%ax -> 1

Circuit: xchgb %ah, %bl
%ah -> 1
%bl -> 1

Total Circuit
 -> 1
RAX -> 1
RDX -> 1
CF -> 1
RBX -> 1
OF -> 1

Target
RAX -> 1
 -> 1
CF -> 1
OF -> 1

[4m[1m[34mkprove rorb_rh_one[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rorb_rh_one_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_rorb_rh_one_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput rorb_rh_one[0m
[4m[1m[34msanitizeSpecOutput rorb_rh_one[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mrorb_rh_one: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _605), 48, 56), extractMInt(mi(64, _605), 48, 56)))))), 1), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _605), 48, 56), extractMInt(mi(64, _605), 48, 56)))))), 1), 56, 64))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI605, 48, 56), extractMInt(MI605, 48, 56)))))), 1), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI605, 48, 56), extractMInt(MI605, 48, 56)))))), 1), 56, 64))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _605)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI605) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _605), 48, 56), extractMInt(mi(64, _605), 48, 56)))))), 1), 56, 57), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _605), 48, 56), extractMInt(mi(64, _605), 48, 56)))))), 1), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _605), 48, 56), extractMInt(mi(64, _605), 48, 56)))))), 1), 56, 57), extractMInt(addMInt(addMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _605), 48, 56), extractMInt(mi(64, _605), 48, 56)))))), 1), 56, 64), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _605), 48, 56), extractMInt(mi(64, _605), 48, 56)))))), 1), 56, 64)), mi(8, 0)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI605, 48, 56), extractMInt(MI605, 48, 56)))))), 1), 56, 57), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI605, 48, 56), extractMInt(MI605, 48, 56)))))), 1), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI605, 48, 56), extractMInt(MI605, 48, 56)))))), 1), 56, 57), extractMInt(addMInt(addMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI605, 48, 56), extractMInt(MI605, 48, 56)))))), 1), 56, 64), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI605, 48, 56), extractMInt(MI605, 48, 56)))))), 1), 56, 64)), mi(8, 0)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(extractMInt(mi(64, _605), 48, 56), mi(8, 0))) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(48, 0), concatenateMInt(extractMInt(MI605, 48, 56), mi(8, 0))) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _605), 0, 48), concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _605), 48, 56), extractMInt(mi(64, _605), 48, 56)))))), 1), 56, 64), extractMInt(mi(64, _605), 56, 64))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI605, 0, 48), concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI605, 48, 56), extractMInt(MI605, 48, 56)))))), 1), 56, 64), extractMInt(MI605, 56, 64))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _605), 48, 56), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(mi(64, _605), 48, 56), extractMInt(mi(64, _605), 48, 56)))))), 1), 56, 64)))), 0, 56), extractMInt(mi(64, _605), 48, 56))   )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI605, 48, 56), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(MI605, 48, 56), extractMInt(MI605, 48, 56)))))), 1), 56, 64)))), 0, 56), extractMInt(MI605, 48, 56))   )
[4m[1m[34mwriteKDefn rorb_rh_one: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-rorb_rh_one.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/rorb_rh_one.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: subb_r8_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subb_r8_r8.s[0m
[4m[1m[34mcreatespec subb_r8_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subb_r8_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subb_r8_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msubb_r8_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subb_r8_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subb_r8_r8.s[0m
Circuit: movb %bl, %bh
%bl -> 1
%bh -> 1

Circuit: subb %cl, %bh
%zf -> 1
%sf -> 1
%bh -> 1
%cl -> 1
%cf -> 1
%pf -> 1
%of -> 1
%af -> 1

Circuit: movb %bh, %bl
%bl -> 1
%bh -> 1

Total Circuit
PF -> 1
AF -> 1
CF -> 1
OF -> 1
SF -> 1
ZF -> 1
RBX -> 1
RCX -> 1

Target
CF -> 1
AF -> 1
PF -> 1
RCX -> 1
RBX -> 1
SF -> 1
ZF -> 1
OF -> 1

[4m[1m[34mkprove subb_r8_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subb_r8_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subb_r8_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput subb_r8_r8[0m
[4m[1m[34msanitizeSpecOutput subb_r8_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msubb_r8_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0)), mi(8, 0))))), mi(9, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _615), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0)), mi(8, 0))))), mi(9, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI615, 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI616, 56, 64), mi(8, 0)), mi(8, 0))))), mi(9, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI615, 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI616, 56, 64), mi(8, 0)), mi(8, 0))))), mi(9, 1)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(mi(64, _615), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(MI615, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI616, 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _615), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0)), mi(8, 0)))), addMInt(addMInt(extractMInt(mi(64, _615), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI615, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI616, 56, 64), mi(8, 0)), mi(8, 0)))), addMInt(addMInt(extractMInt(MI615, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI616, 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(mi(64, _615), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(MI615, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI616, 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (mi(64, _616) )
echo Debug:  Result: "RCX" |-> (MI616 )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _615)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI615) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _615), 56, 57), xorMInt(mi(1, 1), extractMInt(addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0)), mi(8, 0)), 0, 1)))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _615), 56, 57), extractMInt(addMInt(addMInt(extractMInt(mi(64, _615), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI615, 56, 57), xorMInt(mi(1, 1), extractMInt(addMInt(addMInt(extractMInt(MI616, 56, 64), mi(8, 0)), mi(8, 0)), 0, 1)))  andBool   notBool  ( eqMInt(extractMInt(MI615, 56, 57), extractMInt(addMInt(addMInt(extractMInt(MI615, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI616, 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _615), 0, 56), addMInt(addMInt(extractMInt(mi(64, _615), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI615, 0, 56), addMInt(addMInt(extractMInt(MI615, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI616, 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(mi(64, _615), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(MI615, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI616, 56, 64), mi(8, 0)), mi(8, 0)))), mi(8, 1)), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn subb_r8_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-subb_r8_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subb_r8_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: subb_r8_rh[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subb_r8_rh.s[0m
[4m[1m[34mcreatespec subb_r8_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subb_r8_rh_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subb_r8_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msubb_r8_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subb_r8_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subb_r8_rh.s[0m
Circuit: xorb %al, %al
%al -> 1
%pf -> 1
%of -> 1
%af -> 1
%zf -> 1
%cf -> 1
%sf -> 1

Circuit: adcb %bl, %al
%bl -> 1
%zf -> 1
%cf -> 1
%sf -> 1
%al -> 1
%pf -> 1
%of -> 1
%af -> 1

Circuit: sbbb %ah, %bl
%bl -> 1
%cf -> 1
%sf -> 1
%zf -> 1
%ah -> 1
%of -> 1
%af -> 1
%pf -> 1

Total Circuit
AF -> 1
CF -> 1
PF -> 1
RAX -> 1
OF -> 1
SF -> 1
ZF -> 1
RBX -> 1

Target
SF -> 1
RBX -> 1
ZF -> 1
OF -> 1
RAX -> 1
PF -> 1
AF -> 1
CF -> 1

[4m[1m[34mkprove subb_r8_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subb_r8_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_subb_r8_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput subb_r8_rh[0m
[4m[1m[34msanitizeSpecOutput subb_r8_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34msubb_r8_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0))))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0))))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0))))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 56, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0))))), concatenateMInt(mi(8, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0)))), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0)))), addMInt(addMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(addMInt(addMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "SPAD1" |-> (concatenateMInt(mi(192, 0), mi(64, _616)) )
echo Debug:  Result: "SPAD1" |-> (concatenateMInt(mi(192, 0), MI616) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(mi(64, _616), 56, 57), xorMInt(mi(1, 1), extractMInt(addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0)), 0, 1)))  andBool   notBool  ( eqMInt(extractMInt(mi(64, _616), 56, 57), extractMInt(addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MI616, 56, 57), xorMInt(mi(1, 1), extractMInt(addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0)), 0, 1)))  andBool   notBool  ( eqMInt(extractMInt(MI616, 56, 57), extractMInt(addMInt(addMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(extractMInt(mi(64, _615), 0, 56), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), mi(8, 0)), mi(8, 0))) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(extractMInt(MI615, 0, 56), addMInt(addMInt(extractMInt(MI616, 56, 64), mi(8, 0)), mi(8, 0))) )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _616), 0, 56), addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI616, 0, 56), addMInt(addMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1)))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(mi(64, _616), 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(mi(64, _615), 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(mi(64, _616), 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(MI616, 56, 64), xorMInt(mi(8, 255), addMInt(addMInt(extractMInt(MI615, 48, 56), mi(8, 0)), mi(8, 0)))), concatenateMInt(mi(7, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16)), concatenateMInt(mi(1, 0), extractMInt(addMInt(addMInt(addMInt(addMInt(mi(16, 0), concatenateMInt(mi(15, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(MI616, 56, 64)), mi(9, 0)), mi(9, 0)), 0, 1))), mi(16, 0)), mi(16, 65535)), mi(16, 0)), 8, 16))), mi(9, 0)), 0, 1))), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn subb_r8_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-subb_r8_rh.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/subb_r8_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: testb_rh_r8[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testb_rh_r8.s[0m
[4m[1m[34mcreatespec testb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_testb_rh_r8_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testb_rh_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mtestb_rh_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: testb_rh_r8[0m
Undef Set
af -> 1

[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testb_rh_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testb_rh_r8.s[0m
Circuit: xorl %edx, %edx
%pf -> 1
%of -> 1
%edx -> 1
%af -> 1
%zf -> 1
%sf -> 1
%cf -> 1
%rdx -> 1

Circuit: callq .clear_cf
%cf -> 1

Circuit: setg %bh
%sf -> 1
%bh -> 1
%zf -> 1
%of -> 1

Circuit: adcw %bx, %dx
%cf -> 1
%dx -> 1
%sf -> 1
%zf -> 1
%bx -> 1
%of -> 1
%af -> 1
%pf -> 1

Circuit: testb %ah, %dl
%sf -> 1
%cf -> 1
%dl -> 1
%zf -> 1
%of -> 1
%af -> 1
%ah -> 1
%pf -> 1

Total Circuit
OF -> 1
RBX -> 1
ZF -> 1
SF -> 1
CF -> 1
RDX -> 1
AF -> 1
PF -> 1
RAX -> 1

Target
RAX -> 1
CF -> 1
AF -> 1
PF -> 1
SF -> 1
RBX -> 1
ZF -> 1
OF -> 1

[4m[1m[34mkprove testb_rh_r8[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_testb_rh_r8_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_testb_rh_r8_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput testb_rh_r8[0m
[4m[1m[34msanitizeSpecOutput testb_rh_r8[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mtestb_rh_r8: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _615), 48, 56))), 32, 33), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(8, 0), extractMInt(mi(64, _616), 56, 64)), mi(16, 0)), mi(16, 0)), 8, 16))), 32, 33), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(8, 0), extractMInt(mi(64, _616), 56, 64)), mi(16, 0)), mi(16, 0)), 8, 16))), 32, 33), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _615), 48, 56))), 32, 33)))) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI615, 48, 56))), 32, 33), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(8, 0), extractMInt(MI616, 56, 64)), mi(16, 0)), mi(16, 0)), 8, 16))), 32, 33), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(8, 0), extractMInt(MI616, 56, 64)), mi(16, 0)), mi(16, 0)), 8, 16))), 32, 33), extractMInt(mi(64, svalueMInt(extractMInt(MI615, 48, 56))), 32, 33)))) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, _615), 48, 56), xorMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(8, 0), extractMInt(mi(64, _616), 56, 64)), mi(16, 0)), mi(16, 0)), 8, 16), orMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(8, 0), extractMInt(mi(64, _616), 56, 64)), mi(16, 0)), mi(16, 0)), 8, 16), extractMInt(mi(64, _615), 48, 56)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI615, 48, 56), xorMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(8, 0), extractMInt(MI616, 56, 64)), mi(16, 0)), mi(16, 0)), 8, 16), orMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(8, 0), extractMInt(MI616, 56, 64)), mi(16, 0)), mi(16, 0)), 8, 16), extractMInt(MI615, 48, 56)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RDX" |-> (concatenateMInt(mi(48, 0), addMInt(addMInt(concatenateMInt(mi(8, 0), extractMInt(mi(64, _616), 56, 64)), mi(16, 0)), mi(16, 0))) )
echo Debug:  Result: "RDX" |-> (concatenateMInt(mi(48, 0), addMInt(addMInt(concatenateMInt(mi(8, 0), extractMInt(MI616, 56, 64)), mi(16, 0)), mi(16, 0))) )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (mi(64, _615) )
echo Debug:  Result: "RAX" |-> (MI615 )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(extractMInt(mi(64, _616), 0, 48), concatenateMInt(mi(8, 0), extractMInt(mi(64, _616), 56, 64))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(extractMInt(MI616, 0, 48), concatenateMInt(mi(8, 0), extractMInt(MI616, 56, 64))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _615), 48, 56))), 32, 64), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(8, 0), extractMInt(mi(64, _616), 56, 64)), mi(16, 0)), mi(16, 0)), 8, 16))), 32, 64), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(8, 0), extractMInt(mi(64, _616), 56, 64)), mi(16, 0)), mi(16, 0)), 8, 16))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _615), 48, 56))), 32, 64)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI615, 48, 56))), 32, 64), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(8, 0), extractMInt(MI616, 56, 64)), mi(16, 0)), mi(16, 0)), 8, 16))), 32, 64), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(8, 0), extractMInt(MI616, 56, 64)), mi(16, 0)), mi(16, 0)), 8, 16))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(MI615, 48, 56))), 32, 64)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn testb_rh_r8: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-testb_rh_r8.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testb_rh_r8.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: testb_rh_rh[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testb_rh_rh.s[0m
[4m[1m[34mcreatespec testb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_testb_rh_rh_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testb_rh_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mtestb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: testb_rh_rh[0m
Undef Set
af -> 1

[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testb_rh_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testb_rh_rh.s[0m
Circuit: movzbl %ah, %eax
%ah -> 1
%rax -> 1
%eax -> 1

Circuit: testb %bh, %al
%zf -> 1
%cf -> 1
%bh -> 1
%sf -> 1
%al -> 1
%pf -> 1
%of -> 1
%af -> 1

Total Circuit
OF -> 1
ZF -> 1
RBX -> 1
SF -> 1
AF -> 1
CF -> 1
PF -> 1
RAX -> 1

Target
OF -> 1
SF -> 1
ZF -> 1
RBX -> 1
PF -> 1
CF -> 1
AF -> 1
RAX -> 1

[4m[1m[34mkprove testb_rh_rh[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_testb_rh_rh_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_testb_rh_rh_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput testb_rh_rh[0m
[4m[1m[34msanitizeSpecOutput testb_rh_rh[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mtestb_rh_rh: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (mi(1, 0) )
echo Debug:  Result: "CF" |-> (mi(1, 0) )
echo Debug:  PreResult: "SF" |-> (xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _615), 48, 56))), 32, 33), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 48, 56))), 32, 33), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 48, 56))), 32, 33), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _615), 48, 56))), 32, 33)))) )
echo Debug:  Result: "SF" |-> (xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI615, 48, 56))), 32, 33), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI614, 48, 56))), 32, 33), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI614, 48, 56))), 32, 33), extractMInt(mi(64, svalueMInt(extractMInt(MI615, 48, 56))), 32, 33)))) )
echo Debug:  PreResult: "AF" |-> (undef )
echo Debug:  Result: "AF" |-> (undef )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(mi(64, _615), 48, 56), xorMInt(extractMInt(mi(64, _614), 48, 56), orMInt(extractMInt(mi(64, _614), 48, 56), extractMInt(mi(64, _615), 48, 56)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(MI615, 48, 56), xorMInt(extractMInt(MI614, 48, 56), orMInt(extractMInt(MI614, 48, 56), extractMInt(MI615, 48, 56)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "OF" |-> (mi(1, 0) )
echo Debug:  Result: "OF" |-> (mi(1, 0) )
echo Debug:  PreResult: "RAX" |-> (concatenateMInt(mi(56, 0), extractMInt(mi(64, _614), 48, 56)) )
echo Debug:  Result: "RAX" |-> (concatenateMInt(mi(56, 0), extractMInt(MI614, 48, 56)) )
echo Debug:  PreResult: "RBX" |-> (mi(64, _615) )
echo Debug:  Result: "RBX" |-> (MI615 )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _615), 48, 56))), 32, 64), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 48, 56))), 32, 64), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _614), 48, 56))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(mi(64, _615), 48, 56))), 32, 64)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI615, 48, 56))), 32, 64), xorMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI614, 48, 56))), 32, 64), orMInt(extractMInt(mi(64, svalueMInt(extractMInt(MI614, 48, 56))), 32, 64), extractMInt(mi(64, svalueMInt(extractMInt(MI615, 48, 56))), 32, 64)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn testb_rh_rh: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-testb_rh_rh.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/testb_rh_rh.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: tzcntl_r32_r32[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/tzcntl_r32_r32.s[0m
[4m[1m[34mcreatespec tzcntl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_tzcntl_r32_r32_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/tzcntl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mtzcntl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
Warn: [4m[1m[35m[getSpecCode] Undef Present: tzcntl_r32_r32[0m
Undef Set
af -> 1
pf -> 1
of -> 1
sf -> 1

[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/tzcntl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/tzcntl_r32_r32.s[0m
Circuit: blsmskl %ecx, %ecx
%af -> 1
%of -> 1
%rcx -> 1
%ecx -> 1
%pf -> 1
bmi1 -> 1
%sf -> 1
%cf -> 1
%zf -> 1

Circuit: rclq $0x1, %rcx
%cf -> 1
\$0x1 -> 1
%of -> 1
%rcx -> 1

Circuit: popcntq %rcx, %rbx
%cf -> 1
%sf -> 1
%zf -> 1
%af -> 1
%of -> 1
%rcx -> 1
%pf -> 1
popcnt -> 1
%rbx -> 1

Circuit: decl %ebx
%ebx -> 1
%sf -> 1
%zf -> 1
%af -> 1
%of -> 1
%pf -> 1
%rbx -> 1

Circuit: rorb $0x1, %cl
%of -> 1
\$0x1 -> 1
%cl -> 1
%cf -> 1

Total Circuit
OF -> 1
RCX -> 1
ZF -> 1
RBX -> 1
SF -> 1
AF -> 1
CF -> 1
PF -> 1
 -> 1

Target
ZF -> 1
SF -> 1
RBX -> 1
RCX -> 1
OF -> 1
 -> 1
PF -> 1
AF -> 1
CF -> 1

[4m[1m[34mkprove tzcntl_r32_r32[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_tzcntl_r32_r32_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_tzcntl_r32_r32_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput tzcntl_r32_r32[0m
[4m[1m[34msanitizeSpecOutput tzcntl_r32_r32[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mtzcntl_r32_r32: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 64))), mi(9, 0)), 0, 1) )
echo Debug:  Result: "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 64))), mi(9, 0)), 0, 1) )
echo Debug:  PreResult: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(mi(64, countOnes(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0)), 32, 64), mi(32, -1)), mi(32, 0)), 0, 1) )
echo Debug:  Result: "SF" |-> (extractMInt(addMInt(addMInt(extractMInt(mi(64, countOnes(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0)), 32, 64), mi(32, -1)), mi(32, 0)), 0, 1) )
echo Debug:  PreResult: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, countOnes(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0)), 32, 64), mi(32, -1)), addMInt(addMInt(extractMInt(mi(64, countOnes(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0)), 32, 64), mi(32, -1)), mi(32, 0))), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(64, countOnes(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0)), 32, 64), mi(32, -1)), addMInt(addMInt(extractMInt(mi(64, countOnes(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0)), 32, 64), mi(32, -1)), mi(32, 0))), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(extractMInt(mi(64, countOnes(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0)), 32, 64), mi(32, -1)), mi(32, 0)), 24, 32), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(extractMInt(mi(64, countOnes(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0)), 32, 64), mi(32, -1)), mi(32, 0)), 24, 32), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RCX" |-> (concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 56), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 64)) )
echo Debug:  Result: "RCX" |-> (concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0, 56), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 64)) )
echo Debug:  PreResult: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 57), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 57), extractMInt(addMInt(addMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 64), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 64)), mi(8, 0)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  Result: "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 57), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 57), extractMInt(addMInt(addMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 64), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64), extractMInt(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 56, 64)))))), 1), 56, 64)), mi(8, 0)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
echo Debug:  PreResult: "RBX" |-> (concatenateMInt(mi(32, 0), addMInt(addMInt(extractMInt(mi(64, countOnes(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0)), 32, 64), mi(32, -1)), mi(32, 0))) )
echo Debug:  Result: "RBX" |-> (concatenateMInt(mi(32, 0), addMInt(addMInt(extractMInt(mi(64, countOnes(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0)), 32, 64), mi(32, -1)), mi(32, 0))) )
echo Debug:  PreResult: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(mi(64, countOnes(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(mi(64, _615), 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0)), 32, 64), mi(32, -1)), mi(32, 0)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
echo Debug:  Result: "ZF" |-> ((#ifMInt (eqMInt(addMInt(addMInt(extractMInt(mi(64, countOnes(addMInt(addMInt(xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 32, 64)), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64)))), concatenateMInt(mi(63, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0))), concatenateMInt(mi(1, 0), addMInt(addMInt(extractMInt(addMInt(addMInt(mi(64, 18446744073709551615), concatenateMInt(mi(32, 0), extractMInt(MI615, 32, 64))), mi(64, 0)), 16, 24), mi(8, 0)), mi(8, 0)))), mi(9, 0)), 0, 1))), 0)), 32, 64), mi(32, -1)), mi(32, 0)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
[4m[1m[34mwriteKDefn tzcntl_r32_r32: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-tzcntl_r32_r32.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/tzcntl_r32_r32.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmaddsub132ps_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmaddsub132ps_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfmaddsub132ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmaddsub132ps_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmaddsub132ps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmaddsub132ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmaddsub132ps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmaddsub132ps_xmm_xmm_xmm.s[0m
Circuit: vpandn %xmm1, %xmm1, %xmm10
%xmm1 -> 1
avx -> 1
%ymm10 -> 1
%xmm10 -> 1

Circuit: vfnmsub231ps %ymm10, %ymm10, %ymm10
fma -> 1
%ymm10 -> 1

Circuit: movdqa %xmm2, %xmm7
sse2 -> 1
%xmm2 -> 1
%xmm7 -> 1

Circuit: vaddsubps %xmm7, %xmm10, %xmm2
%xmm7 -> 1
avx -> 1
%xmm10 -> 1
%ymm2 -> 1
%xmm2 -> 1

Circuit: vfmadd132ps %xmm3, %xmm2, %xmm1
fma -> 1
%ymm1 -> 1
%xmm2 -> 1
%xmm1 -> 1
%xmm3 -> 1

Total Circuit
 -> 1
YMM3 -> 1
YMM1 -> 1
YMM7 -> 1
YMM10 -> 1
YMM2 -> 1

Target
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove vfmaddsub132ps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmaddsub132ps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmaddsub132ps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmaddsub132ps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmaddsub132ps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmaddsub132ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _603), 128, 160), Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(mi(256, _603), 160, 192), 24, 8) ) , 32)), concatenateMInt(extractMInt(mi(256, _603), 192, 224), Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(mi(256, _603), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI603, 128, 160), Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(MI603, 160, 192), 24, 8) ) , 32)), concatenateMInt(extractMInt(MI603, 192, 224), Float2MInt( ( -0e+00f  -Float  MInt2Float(extractMInt(MI603, 224, 256), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _602), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 128, 160), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _603), 128, 160), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _602), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _603), 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _602), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 192, 224), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _603), 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _602), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _604), 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _603), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI602, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 128, 160), 24, 8) )  +Float  MInt2Float(extractMInt(MI603, 128, 160), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI602, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(MI603, 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI602, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 192, 224), 24, 8) )  +Float  MInt2Float(extractMInt(MI603, 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI602, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI604, 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(MI603, 224, 256), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 57896044632138071048499363270101552670898295023844613168406440321120011812864) )
echo Debug:  Result: "YMM10" |-> (mi(256, 57896044632138071048499363270101552670898295023844613168406440321120011812864) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _604) )
echo Debug:  Result: "YMM3" |-> (MI604 )
echo Debug:  PreResult: "YMM7" |-> (concatenateMInt(mi(128, 0), extractMInt(mi(256, _603), 128, 256)) )
echo Debug:  Result: "YMM7" |-> (concatenateMInt(mi(128, 0), extractMInt(MI603, 128, 256)) )
[4m[1m[34mwriteKDefn vfmaddsub132ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmaddsub132ps_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmaddsub132ps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmaddsub231ps_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmaddsub231ps_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfmaddsub231ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmaddsub231ps_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmaddsub231ps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmaddsub231ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmaddsub231ps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmaddsub231ps_xmm_xmm_xmm.s[0m
Circuit: vfmaddsub213ps %xmm1, %xmm2, %xmm3
fma -> 1
%ymm3 -> 1
%xmm2 -> 1
%xmm1 -> 1
%xmm3 -> 1

Circuit: vpor %xmm3, %xmm3, %xmm1
avx -> 1
%xmm3 -> 1
%xmm1 -> 1
%ymm1 -> 1

Total Circuit
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1
 -> 1

Target
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1
 -> 1

[4m[1m[34mkprove vfmaddsub231ps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmaddsub231ps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmaddsub231ps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmaddsub231ps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmaddsub231ps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmaddsub231ps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _601) )
echo Debug:  Result: "YMM2" |-> (MI601 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _601), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _602), 128, 160), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _600), 128, 160), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _601), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _602), 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _600), 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _601), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _602), 192, 224), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _600), 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _601), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _602), 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _600), 224, 256), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI601, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI602, 128, 160), 24, 8) )  +Float  MInt2Float(extractMInt(MI600, 128, 160), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI601, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI602, 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(MI600, 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI601, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI602, 192, 224), 24, 8) )  +Float  MInt2Float(extractMInt(MI600, 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI601, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI602, 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(MI600, 224, 256), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _601), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _602), 128, 160), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _600), 128, 160), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _601), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _602), 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _600), 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _601), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _602), 192, 224), 24, 8) )  +Float  MInt2Float(extractMInt(mi(256, _600), 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _601), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _602), 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(mi(256, _600), 224, 256), 24, 8) ) , 32))))   )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI601, 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(MI602, 128, 160), 24, 8) )  +Float  MInt2Float(extractMInt(MI600, 128, 160), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI601, 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(MI602, 160, 192), 24, 8) )  -Float  MInt2Float(extractMInt(MI600, 160, 192), 24, 8) ) , 32)), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI601, 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(MI602, 192, 224), 24, 8) )  +Float  MInt2Float(extractMInt(MI600, 192, 224), 24, 8) ) , 32), Float2MInt( (  ( MInt2Float(extractMInt(MI601, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI602, 224, 256), 24, 8) )  -Float  MInt2Float(extractMInt(MI600, 224, 256), 24, 8) ) , 32))))   )
[4m[1m[34mwriteKDefn vfmaddsub231ps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmaddsub231ps_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmaddsub231ps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfmsubadd213pd_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsubadd213pd_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfmsubadd213pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsubadd213pd_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsubadd213pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsubadd213pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsubadd213pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsubadd213pd_xmm_xmm_xmm.s[0m
Circuit: callq .move_128_032_xmm3_xmm8_xmm9_xmm10_xmm11
%xmm3 -> 1
%xmm11 -> 1
%xmm8 -> 1
%xmm9 -> 1
%xmm10 -> 1

Circuit: vfnmsub213sd %xmm3, %xmm11, %xmm3
%xmm3 -> 1
%xmm11 -> 1
%ymm3 -> 1
fma -> 1

Circuit: callq .move_256_128_ymm3_xmm10_xmm11
%xmm11 -> 1
%ymm3 -> 1
%xmm10 -> 1

Circuit: vfmsub213pd %xmm10, %xmm2, %xmm1
%xmm1 -> 1
%xmm2 -> 1
%ymm1 -> 1
fma -> 1
%xmm10 -> 1

Total Circuit
YMM11 -> 1
 -> 1
YMM3 -> 1
YMM9 -> 1
YMM8 -> 1
YMM1 -> 1
YMM2 -> 1
YMM10 -> 1

Target
 -> 1
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove vfmsubadd213pd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsubadd213pd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfmsubadd213pd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfmsubadd213pd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfmsubadd213pd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfmsubadd213pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _605) )
echo Debug:  Result: "YMM2" |-> (MI605 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 128, 192), 53, 11) )  -Float  MInt2Float(xorMInt(mi(64, 0), extractMInt(mi(256, _606), 128, 192)), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(mi(256, _605), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) )  -Float  (  (  ( negateFloat( ( minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 128, 160)), 53, 11), 0e+00)  *Float  minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 128, 160)), 53, 11), 0e+00) ) )  -Float  MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 128, 160)), 53, 11) )  *Float  MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(MI605, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 128, 192), 53, 11) )  -Float  MInt2Float(xorMInt(mi(64, 0), extractMInt(MI606, 128, 192)), 53, 11) ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(MI605, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) )  -Float  (  (  ( negateFloat( ( minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI606, 128, 160)), 53, 11), 0e+00)  *Float  minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI606, 128, 160)), 53, 11), 0e+00) ) )  -Float  MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI606, 128, 160)), 53, 11) )  *Float  MInt2Float(extractMInt(MI606, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI606, 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(mi(64, 0), extractMInt(mi(256, _606), 128, 192)), Float2MInt( (  (  ( negateFloat( ( minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 128, 160)), 53, 11), 0e+00)  *Float  minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 128, 160)), 53, 11), 0e+00) ) )  -Float  MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 128, 160)), 53, 11) )  *Float  MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(mi(64, 0), extractMInt(MI606, 128, 192)), Float2MInt( (  (  ( negateFloat( ( minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI606, 128, 160)), 53, 11), 0e+00)  *Float  minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI606, 128, 160)), 53, 11), 0e+00) ) )  -Float  MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI606, 128, 160)), 53, 11) )  *Float  MInt2Float(extractMInt(MI606, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI606, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(mi(64, 0), extractMInt(mi(256, _606), 128, 192)), Float2MInt( (  (  ( negateFloat( ( minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 128, 160)), 53, 11), 0e+00)  *Float  minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 128, 160)), 53, 11), 0e+00) ) )  -Float  MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _606), 128, 160)), 53, 11) )  *Float  MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM3" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(mi(64, 0), extractMInt(MI606, 128, 192)), Float2MInt( (  (  ( negateFloat( ( minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI606, 128, 160)), 53, 11), 0e+00)  *Float  minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI606, 128, 160)), 53, 11), 0e+00) ) )  -Float  MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI606, 128, 160)), 53, 11) )  *Float  MInt2Float(extractMInt(MI606, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI606, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _606), 224, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(MI606, 224, 256)) )
echo Debug:  PreResult: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _606), 192, 224))   )
echo Debug:  Result: "YMM9" |-> (concatenateMInt(mi(224, 0), extractMInt(MI606, 192, 224))   )
[4m[1m[34mwriteKDefn vfmsubadd213pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfmsubadd213pd_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfmsubadd213pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmadd132pd_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd132pd_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfnmadd132pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd132pd_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd132pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd132pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd132pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd132pd_xmm_xmm_xmm.s[0m
Circuit: callq .move_128_032_xmm1_xmm8_xmm9_xmm10_xmm11
%xmm8 -> 1
%xmm11 -> 1
%xmm10 -> 1
%xmm9 -> 1
%xmm1 -> 1

Circuit: vpxor %xmm12, %xmm12, %xmm9
%xmm9 -> 1
avx -> 1
%ymm9 -> 1
%xmm12 -> 1

Circuit: vfnmsub231pd %xmm10, %xmm9, %xmm2
%ymm2 -> 1
%xmm2 -> 1
%xmm10 -> 1
fma -> 1
%xmm9 -> 1

Circuit: vfnmsub132pd %xmm3, %xmm2, %xmm1
%xmm3 -> 1
%xmm1 -> 1
%xmm2 -> 1
%ymm1 -> 1
fma -> 1

Total Circuit
 -> 1
YMM11 -> 1
YMM3 -> 1
YMM12 -> 1
YMM9 -> 1
YMM1 -> 1
YMM8 -> 1
YMM2 -> 1
YMM10 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1

[4m[1m[34mkprove vfnmadd132pd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd132pd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd132pd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmadd132pd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmadd132pd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd132pd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _606), 128, 192), 53, 11) ) , 64), Float2MInt( ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( -0e+00  -Float  MInt2Float(extractMInt(MI606, 128, 192), 53, 11) ) , 64), Float2MInt( ( -0e+00  -Float  MInt2Float(extractMInt(MI606, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _607), 128, 192), 53, 11) ) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _606), 128, 192), 53, 11) )  ) , 64), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _605), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _607), 192, 256), 53, 11) ) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _606), 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(MI607, 128, 192), 53, 11) ) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI606, 128, 192), 53, 11) )  ) , 64), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI605, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI607, 192, 256), 53, 11) ) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI606, 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _605), 160, 192)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(224, 0), extractMInt(MI605, 160, 192)) )
echo Debug:  PreResult: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _605), 128, 160)) )
echo Debug:  Result: "YMM11" |-> (concatenateMInt(mi(224, 0), extractMInt(MI605, 128, 160)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _607) )
echo Debug:  Result: "YMM3" |-> (MI607 )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(mi(256, _605), 224, 256)) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(mi(224, 0), extractMInt(MI605, 224, 256)) )
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM9" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vfnmadd132pd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmadd132pd_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd132pd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmadd213sd_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd213sd_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfnmadd213sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd213sd_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd213sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd213sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd213sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd213sd_xmm_xmm_xmm.s[0m
Circuit: vpandn %xmm3, %xmm3, %xmm10
%ymm10 -> 1
avx -> 1
%xmm10 -> 1
%xmm3 -> 1

Circuit: vfnmsub213sd %xmm3, %xmm10, %xmm10
%xmm10 -> 1
%ymm10 -> 1
fma -> 1
%xmm3 -> 1

Circuit: vfnmsub213sd %xmm10, %xmm2, %xmm1
%xmm2 -> 1
%ymm1 -> 1
%xmm1 -> 1
fma -> 1
%xmm10 -> 1

Total Circuit
 -> 1
YMM3 -> 1
YMM2 -> 1
YMM10 -> 1
YMM1 -> 1

Target
 -> 1
YMM1 -> 1
YMM2 -> 1
YMM3 -> 1

[4m[1m[34mkprove vfnmadd213sd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd213sd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd213sd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmadd213sd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmadd213sd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd213sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _602) )
echo Debug:  Result: "YMM2" |-> (MI602 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(mi(64, 0), extractMInt(mi(256, _601), 128, 192)), Float2MInt( (  (  ( negateFloat( ( minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _602), 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _602), 160, 192)), 53, 11))  *Float  minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _602), 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _602), 160, 192)), 53, 11)) ) )  -Float  MInt2Float(extractMInt(mi(256, _602), 192, 256), 53, 11) )  *Float  MInt2Float(extractMInt(mi(256, _601), 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(mi(64, 0), extractMInt(MI601, 128, 192)), Float2MInt( (  (  ( negateFloat( ( minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI602, 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI602, 160, 192)), 53, 11))  *Float  minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI602, 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI602, 160, 192)), 53, 11)) ) )  -Float  MInt2Float(extractMInt(MI602, 192, 256), 53, 11) )  *Float  MInt2Float(extractMInt(MI601, 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI603, 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(192, 0), Float2MInt( ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11) ) , 64)) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(192, 0), Float2MInt( ( -0e+00  -Float  MInt2Float(extractMInt(MI603, 192, 256), 53, 11) ) , 64)) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _603)   )
echo Debug:  Result: "YMM3" |-> (MI603   )
[4m[1m[34mwriteKDefn vfnmadd213sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmadd213sd_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd213sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmadd231sd_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd231sd_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfnmadd231sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd231sd_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd231sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd231sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd231sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd231sd_xmm_xmm_xmm.s[0m
Circuit: vpandn %xmm2, %xmm2, %xmm14
%ymm14 -> 1
%xmm2 -> 1
%xmm14 -> 1
avx -> 1

Circuit: vfnmsub213pd %xmm2, %xmm14, %xmm14
%ymm14 -> 1
%xmm2 -> 1
%xmm14 -> 1
fma -> 1

Circuit: vfmadd231sd %xmm3, %xmm14, %xmm1
%ymm1 -> 1
%xmm1 -> 1
%xmm3 -> 1
fma -> 1
%xmm14 -> 1

Total Circuit
 -> 1
YMM2 -> 1
YMM1 -> 1
YMM14 -> 1
YMM3 -> 1

Target
YMM3 -> 1
YMM2 -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove vfnmadd231sd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd231sd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmadd231sd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmadd231sd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmadd231sd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmadd231sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _602) )
echo Debug:  Result: "YMM2" |-> (MI602 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _601), 128, 192), Float2MInt( (  (  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _602), 192, 256), 53, 11) )  *Float  MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _601), 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI601, 128, 192), Float2MInt( (  (  ( -0e+00  -Float  MInt2Float(extractMInt(MI602, 192, 256), 53, 11) )  *Float  MInt2Float(extractMInt(MI603, 192, 256), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(MI601, 192, 256), 53, 11) )  ) , 64))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _603) )
echo Debug:  Result: "YMM3" |-> (MI603 )
echo Debug:  PreResult: "YMM14" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _602), 128, 192), 53, 11) ) , 64), Float2MInt( ( -0e+00  -Float  MInt2Float(extractMInt(mi(256, _602), 192, 256), 53, 11) ) , 64)))   )
echo Debug:  Result: "YMM14" |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( -0e+00  -Float  MInt2Float(extractMInt(MI602, 128, 192), 53, 11) ) , 64), Float2MInt( ( -0e+00  -Float  MInt2Float(extractMInt(MI602, 192, 256), 53, 11) ) , 64)))   )
[4m[1m[34mwriteKDefn vfnmadd231sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmadd231sd_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmadd231sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmsub132sd_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub132sd_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfnmsub132sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub132sd_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub132sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub132sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub132sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub132sd_xmm_xmm_xmm.s[0m
Circuit: vfnmsub231pd %xmm3, %xmm1, %xmm2
fma -> 1
%xmm3 -> 1
%xmm2 -> 1
%ymm2 -> 1
%xmm1 -> 1

Circuit: movsd %xmm2, %xmm1
sse2 -> 1
%xmm1 -> 1
%xmm2 -> 1

Circuit: callq .move_128_064_xmm1_r10_r11
%xmm1 -> 1
%r10 -> 1
%r11 -> 1

Circuit: vzeroall
%ymm6 -> 1
%ymm14 -> 1
%ymm15 -> 1
%ymm1 -> 1
%ymm5 -> 1
avx -> 1
%ymm9 -> 1
%ymm11 -> 1
%ymm2 -> 1
%ymm12 -> 1
%ymm13 -> 1
%ymm4 -> 1
%ymm3 -> 1
%ymm8 -> 1
%ymm0 -> 1
%ymm10 -> 1
%ymm7 -> 1

Circuit: vfmadd231ss %xmm14, %xmm12, %xmm1
%ymm1 -> 1
%xmm1 -> 1
%xmm12 -> 1
fma -> 1
%xmm14 -> 1

Circuit: callq .move_064_128_r10_r11_xmm1
%xmm1 -> 1
%r11 -> 1
%r10 -> 1

Total Circuit
YMM9 -> 1
YMM12 -> 1
YMM2 -> 1
YMM10 -> 1
YMM1 -> 1
YMM11 -> 1
YMM15 -> 1
YMM4 -> 1
YMM13 -> 1
R10 -> 1
R11 -> 1
YMM5 -> 1
YMM3 -> 1
YMM14 -> 1
YMM7 -> 1
YMM8 -> 1
YMM0 -> 1
 -> 1
YMM6 -> 1

Target
YMM2 -> 1
YMM1 -> 1
 -> 1
YMM3 -> 1

[4m[1m[34mkprove vfnmsub132sd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub132sd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub132sd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmsub132sd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmsub132sd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub132sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM9" |-> (mi(256, 0) )
echo Debug:  Result: "YMM9" |-> (mi(256, 0) )
echo Debug:  PreResult: "R10" |-> (Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11) ) , 64) )
echo Debug:  Result: "R10" |-> (Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI617, 192, 256), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI616, 192, 256), 53, 11) ) , 64) )
echo Debug:  PreResult: "YMM12" |-> (mi(256, 0) )
echo Debug:  Result: "YMM12" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, 0) )
echo Debug:  Result: "YMM2" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _615), 128, 192), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _615), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(mi(256, _617), 192, 256), 53, 11) ) )  -Float  MInt2Float(extractMInt(mi(256, _616), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI615, 128, 192), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI615, 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(MI617, 192, 256), 53, 11) ) )  -Float  MInt2Float(extractMInt(MI616, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM13" |-> (mi(256, 0) )
echo Debug:  Result: "YMM13" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM10" |-> (mi(256, 0) )
echo Debug:  Result: "YMM10" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM4" |-> (mi(256, 0) )
echo Debug:  Result: "YMM4" |-> (mi(256, 0) )
echo Debug:  PreResult: "R11" |-> (extractMInt(mi(256, _615), 128, 192) )
echo Debug:  Result: "R11" |-> (extractMInt(MI615, 128, 192) )
echo Debug:  PreResult: "YMM11" |-> (mi(256, 0) )
echo Debug:  Result: "YMM11" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, 0) )
echo Debug:  Result: "YMM3" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM6" |-> (mi(256, 0) )
echo Debug:  Result: "YMM6" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM5" |-> (mi(256, 0) )
echo Debug:  Result: "YMM5" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM14" |-> (mi(256, 0) )
echo Debug:  Result: "YMM14" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM8" |-> (mi(256, 0) )
echo Debug:  Result: "YMM8" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM15" |-> (mi(256, 0) )
echo Debug:  Result: "YMM15" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM7" |-> (mi(256, 0) )
echo Debug:  Result: "YMM7" |-> (mi(256, 0) )
echo Debug:  PreResult: "YMM0" |-> (mi(256, 0)   )
echo Debug:  Result: "YMM0" |-> (mi(256, 0)   )
[4m[1m[34mwriteKDefn vfnmsub132sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmsub132sd_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub132sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmsub231sd_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231sd_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfnmsub231sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub231sd_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub231sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231sd_xmm_xmm_xmm.s[0m
Circuit: callq .move_128_64_xmm3_xmm12_xmm13
%xmm3 -> 1
%xmm12 -> 1
%xmm13 -> 1

Circuit: vfnmsub213sd %xmm1, %xmm2, %xmm12
%xmm2 -> 1
%xmm1 -> 1
fma -> 1
%xmm12 -> 1
%ymm12 -> 1

Circuit: vmovsd %xmm12, %xmm1, %xmm10
%ymm10 -> 1
%xmm12 -> 1
avx -> 1
%xmm10 -> 1
%xmm1 -> 1

Circuit: vmovdqa %xmm10, %xmm1
%xmm1 -> 1
%ymm1 -> 1
avx -> 1
%xmm10 -> 1

Total Circuit
YMM12 -> 1
YMM10 -> 1
YMM2 -> 1
YMM1 -> 1
YMM13 -> 1
YMM3 -> 1
 -> 1

Target
 -> 1
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove vfnmsub231sd_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub231sd_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub231sd_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmsub231sd_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmsub231sd_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub231sd_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(mi(192, 0), Float2MInt( (  (  ( negateFloat( ( minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _604), 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _604), 160, 192)), 53, 11))  *Float  minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _604), 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _604), 160, 192)), 53, 11)) ) )  -Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) )  *Float  MInt2Float(extractMInt(mi(256, _605), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11) ) , 64)) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(mi(192, 0), Float2MInt( (  (  ( negateFloat( ( minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI604, 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI604, 160, 192)), 53, 11))  *Float  minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI604, 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI604, 160, 192)), 53, 11)) ) )  -Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) )  *Float  MInt2Float(extractMInt(MI605, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI603, 192, 256), 53, 11) ) , 64)) )
echo Debug:  PreResult: "YMM2" |-> (mi(256, _604) )
echo Debug:  Result: "YMM2" |-> (MI604 )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(192, 0), extractMInt(mi(256, _605), 128, 192)) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(192, 0), extractMInt(MI605, 128, 192)) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _603), 128, 192), Float2MInt( (  (  ( negateFloat( ( minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _604), 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _604), 160, 192)), 53, 11))  *Float  minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _604), 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _604), 160, 192)), 53, 11)) ) )  -Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) )  *Float  MInt2Float(extractMInt(mi(256, _605), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI603, 128, 192), Float2MInt( (  (  ( negateFloat( ( minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI604, 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI604, 160, 192)), 53, 11))  *Float  minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI604, 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI604, 160, 192)), 53, 11)) ) )  -Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) )  *Float  MInt2Float(extractMInt(MI605, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI603, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _603), 128, 192), Float2MInt( (  (  ( negateFloat( ( minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _604), 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _604), 160, 192)), 53, 11))  *Float  minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _604), 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(mi(256, _604), 160, 192)), 53, 11)) ) )  -Float  MInt2Float(extractMInt(mi(256, _604), 192, 256), 53, 11) )  *Float  MInt2Float(extractMInt(mi(256, _605), 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(mi(256, _603), 192, 256), 53, 11) ) , 64))) )
echo Debug:  Result: "YMM10" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI603, 128, 192), Float2MInt( (  (  ( negateFloat( ( minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI604, 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI604, 160, 192)), 53, 11))  *Float  minFloat(MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI604, 224, 256)), 53, 11), MInt2Float(concatenateMInt(mi(32, 0), extractMInt(MI604, 160, 192)), 53, 11)) ) )  -Float  MInt2Float(extractMInt(MI604, 192, 256), 53, 11) )  *Float  MInt2Float(extractMInt(MI605, 192, 256), 53, 11) )  -Float  MInt2Float(extractMInt(MI603, 192, 256), 53, 11) ) , 64))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _605) )
echo Debug:  Result: "YMM3" |-> (MI605 )
[4m[1m[34mwriteKDefn vfnmsub231sd_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmsub231sd_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231sd_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vfnmsub231ss_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231ss_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vfnmsub231ss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub231ss_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231ss_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub231ss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231ss_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231ss_xmm_xmm_xmm.s[0m
Circuit: vpunpcklqdq %xmm1, %xmm1, %xmm13
%xmm1 -> 1
avx -> 1
%ymm13 -> 1
%xmm13 -> 1

Circuit: movss %xmm3, %xmm1
sse -> 1
%xmm3 -> 1
%xmm1 -> 1

Circuit: vpunpckldq %ymm13, %ymm13, %ymm13
%ymm13 -> 1
avx2 -> 1

Circuit: vfnmsub213ss %xmm13, %xmm2, %xmm1
%xmm13 -> 1
fma -> 1
%ymm1 -> 1
%xmm2 -> 1
%xmm1 -> 1

Total Circuit
YMM1 -> 1
YMM2 -> 1
YMM13 -> 1
YMM3 -> 1
 -> 1

Target
 -> 1
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove vfnmsub231ss_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub231ss_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vfnmsub231ss_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vfnmsub231ss_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vfnmsub231ss_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvfnmsub231ss_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _602) )
echo Debug:  Result: "YMM2" |-> (MI602 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(mi(256, _601), 128, 224), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(mi(256, _602), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(mi(256, _603), 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(mi(256, _601), 224, 256), 24, 8) ) , 32))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(extractMInt(MI601, 128, 224), Float2MInt( ( negateFloat( ( MInt2Float(extractMInt(MI602, 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(MI603, 224, 256), 24, 8) ) )  -Float  MInt2Float(extractMInt(MI601, 224, 256), 24, 8) ) , 32))) )
echo Debug:  PreResult: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(mi(256, _601), 192, 224), extractMInt(mi(256, _601), 192, 224)), concatenateMInt(extractMInt(mi(256, _601), 224, 256), extractMInt(mi(256, _601), 224, 256)))) )
echo Debug:  Result: "YMM13" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(extractMInt(MI601, 192, 224), extractMInt(MI601, 192, 224)), concatenateMInt(extractMInt(MI601, 224, 256), extractMInt(MI601, 224, 256)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _603)   )
echo Debug:  Result: "YMM3" |-> (MI603   )
[4m[1m[34mwriteKDefn vfnmsub231ss_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vfnmsub231ss_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vfnmsub231ss_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vhsubps_xmm_xmm_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vhsubps_xmm_xmm_xmm.s[0m
[4m[1m[34mcreatespec vhsubps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhsubps_xmm_xmm_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vhsubps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvhsubps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vhsubps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vhsubps_xmm_xmm_xmm.s[0m
Circuit: hsubps %xmm3, %xmm2
%xmm3 -> 1
%xmm2 -> 1
pni -> 1

Circuit: callq .move_128_064_xmm2_r8_r9
%r8 -> 1
%xmm2 -> 1
%r9 -> 1

Circuit: callq .move_064_128_r8_r9_xmm2
%r9 -> 1
%xmm2 -> 1
%r8 -> 1

Circuit: vmovdqu %xmm2, %xmm1
avx -> 1
%xmm1 -> 1
%xmm2 -> 1
%ymm1 -> 1

Total Circuit
 -> 1
YMM3 -> 1
R9 -> 1
R8 -> 1
YMM1 -> 1
YMM2 -> 1

Target
 -> 1
YMM3 -> 1
YMM1 -> 1
YMM2 -> 1

[4m[1m[34mkprove vhsubps_xmm_xmm_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhsubps_xmm_xmm_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vhsubps_xmm_xmm_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vhsubps_xmm_xmm_xmm[0m
[4m[1m[34msanitizeSpecOutput vhsubps_xmm_xmm_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvhsubps_xmm_xmm_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(extractMInt(mi(256, _603), 0, 128), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _604), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _604), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _604), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _604), 192, 224), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _603), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _603), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _603), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _603), 192, 224), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(extractMInt(MI603, 0, 128), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI604, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI604, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI604, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI604, 192, 224), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI603, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI603, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI603, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI603, 192, 224), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _604), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _604), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _604), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _604), 192, 224), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _603), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _603), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _603), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _603), 192, 224), 24, 8) ) , 32)))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI604, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI604, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI604, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI604, 192, 224), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI603, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI603, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI603, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI603, 192, 224), 24, 8) ) , 32)))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _604) )
echo Debug:  Result: "YMM3" |-> (MI604 )
echo Debug:  PreResult: "R8" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _603), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _603), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _603), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _603), 192, 224), 24, 8) ) , 32)) )
echo Debug:  Result: "R8" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI603, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI603, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI603, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI603, 192, 224), 24, 8) ) , 32)) )
echo Debug:  PreResult: "R9" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(mi(256, _604), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _604), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(mi(256, _604), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(mi(256, _604), 192, 224), 24, 8) ) , 32)) )
echo Debug:  Result: "R9" |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(MI604, 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(MI604, 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(MI604, 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(MI604, 192, 224), 24, 8) ) , 32)) )
[4m[1m[34mwriteKDefn vhsubps_xmm_xmm_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vhsubps_xmm_xmm_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vhsubps_xmm_xmm_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovmskps_r32_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovmskps_r32_xmm.s[0m
[4m[1m[34mcreatespec vmovmskps_r32_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovmskps_r32_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovmskps_r32_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovmskps_r32_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovmskps_r32_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovmskps_r32_xmm.s[0m
Circuit: vpmovsxdq %xmm1, %ymm12
%ymm12 -> 1
%xmm1 -> 1
avx2 -> 1

Circuit: vmovmskpd %ymm12, %rbx
avx -> 1
%ymm12 -> 1
%rbx -> 1

Total Circuit
 -> 1
YMM1 -> 1
RBX -> 1
YMM12 -> 1

Target
RBX -> 1
YMM1 -> 1
 -> 1

[4m[1m[34mkprove vmovmskps_r32_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovmskps_r32_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovmskps_r32_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovmskps_r32_xmm[0m
[4m[1m[34msanitizeSpecOutput vmovmskps_r32_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovmskps_r32_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM12" |-> (concatenateMInt(concatenateMInt(mi(64, svalueMInt(extractMInt(mi(256, _600), 128, 160))), mi(64, svalueMInt(extractMInt(mi(256, _600), 160, 192)))), concatenateMInt(mi(64, svalueMInt(extractMInt(mi(256, _600), 192, 224))), mi(64, svalueMInt(extractMInt(mi(256, _600), 224, 256))))) )
echo Debug:  Result: "YMM12" |-> (concatenateMInt(concatenateMInt(mi(64, svalueMInt(extractMInt(MI600, 128, 160))), mi(64, svalueMInt(extractMInt(MI600, 160, 192)))), concatenateMInt(mi(64, svalueMInt(extractMInt(MI600, 192, 224))), mi(64, svalueMInt(extractMInt(MI600, 224, 256))))) )
echo Debug:  PreResult: "YMM1" |-> (mi(256, _600) )
echo Debug:  Result: "YMM1" |-> (MI600 )
echo Debug:  PreResult: "RBX" |-> (mi(64, _599)   )
echo Debug:  Result: "RBX" |-> (MI599   )
[4m[1m[34mwriteKDefn vmovmskps_r32_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovmskps_r32_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovmskps_r32_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vmovmskps_r64_xmm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovmskps_r64_xmm.s[0m
[4m[1m[34mcreatespec vmovmskps_r64_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovmskps_r64_xmm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovmskps_r64_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovmskps_r64_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovmskps_r64_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovmskps_r64_xmm.s[0m
Circuit: vpmovsxdq %xmm1, %ymm2
%xmm1 -> 1
avx2 -> 1
%ymm2 -> 1

Circuit: vmovmskpd %ymm2, %rbx
avx -> 1
%ymm2 -> 1
%rbx -> 1

Total Circuit
YMM1 -> 1
YMM2 -> 1
RBX -> 1
 -> 1

Target
 -> 1
YMM1 -> 1
RBX -> 1

[4m[1m[34mkprove vmovmskps_r64_xmm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovmskps_r64_xmm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vmovmskps_r64_xmm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vmovmskps_r64_xmm[0m
[4m[1m[34msanitizeSpecOutput vmovmskps_r64_xmm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvmovmskps_r64_xmm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (concatenateMInt(concatenateMInt(mi(64, svalueMInt(extractMInt(mi(256, _600), 128, 160))), mi(64, svalueMInt(extractMInt(mi(256, _600), 160, 192)))), concatenateMInt(mi(64, svalueMInt(extractMInt(mi(256, _600), 192, 224))), mi(64, svalueMInt(extractMInt(mi(256, _600), 224, 256))))) )
echo Debug:  Result: "YMM2" |-> (concatenateMInt(concatenateMInt(mi(64, svalueMInt(extractMInt(MI600, 128, 160))), mi(64, svalueMInt(extractMInt(MI600, 160, 192)))), concatenateMInt(mi(64, svalueMInt(extractMInt(MI600, 192, 224))), mi(64, svalueMInt(extractMInt(MI600, 224, 256))))) )
echo Debug:  PreResult: "YMM1" |-> (mi(256, _600) )
echo Debug:  Result: "YMM1" |-> (MI600 )
echo Debug:  PreResult: "RBX" |-> (mi(64, _599)   )
echo Debug:  Result: "RBX" |-> (MI599   )
[4m[1m[34mwriteKDefn vmovmskps_r64_xmm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vmovmskps_r64_xmm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vmovmskps_r64_xmm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpand_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpand_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vpand_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpand_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpand_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpand_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpand_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpand_ymm_ymm_ymm.s[0m
Circuit: vandpd %ymm3, %ymm2, %ymm1
%ymm3 -> 1
%ymm2 -> 1
avx -> 1
%ymm1 -> 1

Total Circuit
YMM2 -> 1
YMM1 -> 1
 -> 1
YMM3 -> 1

Target
YMM1 -> 1
YMM2 -> 1
 -> 1
YMM3 -> 1

[4m[1m[34mkprove vpand_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpand_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpand_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpand_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vpand_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpand_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _601) )
echo Debug:  Result: "YMM2" |-> (MI601 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _602), 0, 64), extractMInt(mi(256, _601), 0, 64)), extractMInt(mi(256, _601), 0, 64)), xorMInt(extractMInt(mi(256, _602), 0, 64), extractMInt(mi(256, _601), 0, 64))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _602), 64, 128), extractMInt(mi(256, _601), 64, 128)), extractMInt(mi(256, _601), 64, 128)), xorMInt(extractMInt(mi(256, _602), 64, 128), extractMInt(mi(256, _601), 64, 128)))), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _602), 128, 192), extractMInt(mi(256, _601), 128, 192)), extractMInt(mi(256, _601), 128, 192)), xorMInt(extractMInt(mi(256, _602), 128, 192), extractMInt(mi(256, _601), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _602), 192, 256), extractMInt(mi(256, _601), 192, 256)), extractMInt(mi(256, _601), 192, 256)), xorMInt(extractMInt(mi(256, _602), 192, 256), extractMInt(mi(256, _601), 192, 256))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI602, 0, 64), extractMInt(MI601, 0, 64)), extractMInt(MI601, 0, 64)), xorMInt(extractMInt(MI602, 0, 64), extractMInt(MI601, 0, 64))), xorMInt(orMInt(xorMInt(extractMInt(MI602, 64, 128), extractMInt(MI601, 64, 128)), extractMInt(MI601, 64, 128)), xorMInt(extractMInt(MI602, 64, 128), extractMInt(MI601, 64, 128)))), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI602, 128, 192), extractMInt(MI601, 128, 192)), extractMInt(MI601, 128, 192)), xorMInt(extractMInt(MI602, 128, 192), extractMInt(MI601, 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(MI602, 192, 256), extractMInt(MI601, 192, 256)), extractMInt(MI601, 192, 256)), xorMInt(extractMInt(MI602, 192, 256), extractMInt(MI601, 192, 256))))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _602)   )
echo Debug:  Result: "YMM3" |-> (MI602   )
[4m[1m[34mwriteKDefn vpand_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpand_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpand_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

[4m[1m[34mCheck if supported: vpxor_ymm_ymm_ymm[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpxor_ymm_ymm_ymm.s[0m
[4m[1m[34mcreatespec vpxor_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpxor_ymm_ymm_ymm_spec.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpxor_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpxor_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpxor_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpxor_ymm_ymm_ymm.s[0m
Circuit: vpor %ymm3, %ymm2, %ymm8
%ymm3 -> 1
%ymm8 -> 1
%ymm2 -> 1
avx2 -> 1

Circuit: vandpd %ymm2, %ymm3, %ymm4
%ymm3 -> 1
%ymm4 -> 1
%ymm2 -> 1
avx -> 1

Circuit: vandnpd %ymm8, %ymm4, %ymm1
%ymm1 -> 1
avx -> 1
%ymm4 -> 1
%ymm8 -> 1

Total Circuit
YMM1 -> 1
YMM2 -> 1
YMM4 -> 1
YMM8 -> 1
YMM3 -> 1
 -> 1

Target
YMM3 -> 1
 -> 1
YMM2 -> 1
YMM1 -> 1

[4m[1m[34mkprove vpxor_ymm_ymm_ymm[0m
time krun --prove /home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpxor_ymm_ymm_ymm_spec.k ~/Junk/dummy.k  --smt_prelude /home/sdasgup3/Github/k/k-distribution/include/z3/basic.smt2 1>/home/sdasgup3/Github/binary-decompilation/x86-semantics/specs//x86-semantics_vpxor_ymm_ymm_ymm_spec.output 2>&1 
[4m[1m[34mprocessSpecOutput vpxor_ymm_ymm_ymm[0m
[4m[1m[34msanitizeSpecOutput vpxor_ymm_ymm_ymm[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.
[4m[1m[34mvpxor_ymm_ymm_ymm: Check if May == Must[0m
Passed:[4m[1m[92mequal[0m
echo Debug:  PreResult:
echo Debug:  Result:
echo Debug:  PreResult: "YMM2" |-> (mi(256, _603) )
echo Debug:  Result: "YMM2" |-> (MI603 )
echo Debug:  PreResult: "YMM1" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(orMInt(extractMInt(mi(256, _604), 0, 64), extractMInt(mi(256, _603), 0, 64)), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 0, 64), extractMInt(mi(256, _604), 0, 64)), extractMInt(mi(256, _604), 0, 64)), xorMInt(extractMInt(mi(256, _603), 0, 64), extractMInt(mi(256, _604), 0, 64)))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 0, 64), extractMInt(mi(256, _604), 0, 64)), extractMInt(mi(256, _604), 0, 64)), xorMInt(extractMInt(mi(256, _603), 0, 64), extractMInt(mi(256, _604), 0, 64)))), xorMInt(orMInt(orMInt(extractMInt(mi(256, _604), 64, 128), extractMInt(mi(256, _603), 64, 128)), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 64, 128), extractMInt(mi(256, _604), 64, 128)), extractMInt(mi(256, _604), 64, 128)), xorMInt(extractMInt(mi(256, _603), 64, 128), extractMInt(mi(256, _604), 64, 128)))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 64, 128), extractMInt(mi(256, _604), 64, 128)), extractMInt(mi(256, _604), 64, 128)), xorMInt(extractMInt(mi(256, _603), 64, 128), extractMInt(mi(256, _604), 64, 128))))), concatenateMInt(xorMInt(orMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 128, 192), extractMInt(mi(256, _604), 128, 192)), extractMInt(mi(256, _604), 128, 192)), xorMInt(extractMInt(mi(256, _603), 128, 192), extractMInt(mi(256, _604), 128, 192))), orMInt(extractMInt(mi(256, _604), 128, 192), extractMInt(mi(256, _603), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 128, 192), extractMInt(mi(256, _604), 128, 192)), extractMInt(mi(256, _604), 128, 192)), xorMInt(extractMInt(mi(256, _603), 128, 192), extractMInt(mi(256, _604), 128, 192)))), xorMInt(orMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 192, 256), extractMInt(mi(256, _604), 192, 256)), extractMInt(mi(256, _604), 192, 256)), xorMInt(extractMInt(mi(256, _603), 192, 256), extractMInt(mi(256, _604), 192, 256))), orMInt(extractMInt(mi(256, _604), 192, 256), extractMInt(mi(256, _603), 192, 256))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 192, 256), extractMInt(mi(256, _604), 192, 256)), extractMInt(mi(256, _604), 192, 256)), xorMInt(extractMInt(mi(256, _603), 192, 256), extractMInt(mi(256, _604), 192, 256)))))) )
echo Debug:  Result: "YMM1" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(orMInt(extractMInt(MI604, 0, 64), extractMInt(MI603, 0, 64)), xorMInt(orMInt(xorMInt(extractMInt(MI603, 0, 64), extractMInt(MI604, 0, 64)), extractMInt(MI604, 0, 64)), xorMInt(extractMInt(MI603, 0, 64), extractMInt(MI604, 0, 64)))), xorMInt(orMInt(xorMInt(extractMInt(MI603, 0, 64), extractMInt(MI604, 0, 64)), extractMInt(MI604, 0, 64)), xorMInt(extractMInt(MI603, 0, 64), extractMInt(MI604, 0, 64)))), xorMInt(orMInt(orMInt(extractMInt(MI604, 64, 128), extractMInt(MI603, 64, 128)), xorMInt(orMInt(xorMInt(extractMInt(MI603, 64, 128), extractMInt(MI604, 64, 128)), extractMInt(MI604, 64, 128)), xorMInt(extractMInt(MI603, 64, 128), extractMInt(MI604, 64, 128)))), xorMInt(orMInt(xorMInt(extractMInt(MI603, 64, 128), extractMInt(MI604, 64, 128)), extractMInt(MI604, 64, 128)), xorMInt(extractMInt(MI603, 64, 128), extractMInt(MI604, 64, 128))))), concatenateMInt(xorMInt(orMInt(xorMInt(orMInt(xorMInt(extractMInt(MI603, 128, 192), extractMInt(MI604, 128, 192)), extractMInt(MI604, 128, 192)), xorMInt(extractMInt(MI603, 128, 192), extractMInt(MI604, 128, 192))), orMInt(extractMInt(MI604, 128, 192), extractMInt(MI603, 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(MI603, 128, 192), extractMInt(MI604, 128, 192)), extractMInt(MI604, 128, 192)), xorMInt(extractMInt(MI603, 128, 192), extractMInt(MI604, 128, 192)))), xorMInt(orMInt(xorMInt(orMInt(xorMInt(extractMInt(MI603, 192, 256), extractMInt(MI604, 192, 256)), extractMInt(MI604, 192, 256)), xorMInt(extractMInt(MI603, 192, 256), extractMInt(MI604, 192, 256))), orMInt(extractMInt(MI604, 192, 256), extractMInt(MI603, 192, 256))), xorMInt(orMInt(xorMInt(extractMInt(MI603, 192, 256), extractMInt(MI604, 192, 256)), extractMInt(MI604, 192, 256)), xorMInt(extractMInt(MI603, 192, 256), extractMInt(MI604, 192, 256)))))) )
echo Debug:  PreResult: "YMM4" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 0, 64), extractMInt(mi(256, _604), 0, 64)), extractMInt(mi(256, _604), 0, 64)), xorMInt(extractMInt(mi(256, _603), 0, 64), extractMInt(mi(256, _604), 0, 64))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 64, 128), extractMInt(mi(256, _604), 64, 128)), extractMInt(mi(256, _604), 64, 128)), xorMInt(extractMInt(mi(256, _603), 64, 128), extractMInt(mi(256, _604), 64, 128)))), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 128, 192), extractMInt(mi(256, _604), 128, 192)), extractMInt(mi(256, _604), 128, 192)), xorMInt(extractMInt(mi(256, _603), 128, 192), extractMInt(mi(256, _604), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(mi(256, _603), 192, 256), extractMInt(mi(256, _604), 192, 256)), extractMInt(mi(256, _604), 192, 256)), xorMInt(extractMInt(mi(256, _603), 192, 256), extractMInt(mi(256, _604), 192, 256))))) )
echo Debug:  Result: "YMM4" |-> (concatenateMInt(concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI603, 0, 64), extractMInt(MI604, 0, 64)), extractMInt(MI604, 0, 64)), xorMInt(extractMInt(MI603, 0, 64), extractMInt(MI604, 0, 64))), xorMInt(orMInt(xorMInt(extractMInt(MI603, 64, 128), extractMInt(MI604, 64, 128)), extractMInt(MI604, 64, 128)), xorMInt(extractMInt(MI603, 64, 128), extractMInt(MI604, 64, 128)))), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(MI603, 128, 192), extractMInt(MI604, 128, 192)), extractMInt(MI604, 128, 192)), xorMInt(extractMInt(MI603, 128, 192), extractMInt(MI604, 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(MI603, 192, 256), extractMInt(MI604, 192, 256)), extractMInt(MI604, 192, 256)), xorMInt(extractMInt(MI603, 192, 256), extractMInt(MI604, 192, 256))))) )
echo Debug:  PreResult: "YMM3" |-> (mi(256, _604) )
echo Debug:  Result: "YMM3" |-> (MI604 )
echo Debug:  PreResult: "YMM8" |-> (concatenateMInt(concatenateMInt(orMInt(extractMInt(mi(256, _604), 0, 64), extractMInt(mi(256, _603), 0, 64)), orMInt(extractMInt(mi(256, _604), 64, 128), extractMInt(mi(256, _603), 64, 128))), concatenateMInt(orMInt(extractMInt(mi(256, _604), 128, 192), extractMInt(mi(256, _603), 128, 192)), orMInt(extractMInt(mi(256, _604), 192, 256), extractMInt(mi(256, _603), 192, 256)))) )
echo Debug:  Result: "YMM8" |-> (concatenateMInt(concatenateMInt(orMInt(extractMInt(MI604, 0, 64), extractMInt(MI603, 0, 64)), orMInt(extractMInt(MI604, 64, 128), extractMInt(MI603, 64, 128))), concatenateMInt(orMInt(extractMInt(MI604, 128, 192), extractMInt(MI603, 128, 192)), orMInt(extractMInt(MI604, 192, 256), extractMInt(MI603, 192, 256)))) )
[4m[1m[34mwriteKDefn vpxor_ymm_ymm_ymm: /home/sdasgup3/Github/binary-decompilation/x86-semantics/derivedInstructions//x86-vpxor_ymm_ymm_ymm.k[0m
[4m[1m[34mReading circuit from /home/sdasgup3/Github/strata-data/circuits/vpxor_ymm_ymm_ymm.s[0m
Use of uninitialized value in new at /home/sdasgup3/scripts-n-docs/scripts/perl/utils.pm line 69.

