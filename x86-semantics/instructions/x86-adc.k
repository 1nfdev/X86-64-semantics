// Autogenerated from templates.
requires "x86-semantic-utils.k"

/*@ This file defines the semantics of following 51 base instructions.
  - adcw_r16_r16, adcl_r32_r32, adcq_r64_r64, adcb_r8_r8,
*/

module ADC-R8-R8
  imports X86-SEMANTIC-UTILS

  // Unroll START
  rule <k> 
    execinstr ( adcb , (%al ,  (%al , .Typedoperands)) ) =>
      execinstr(adcb, (%rax, extractLSBitsFromRegister(%rax, 8), extractLSBitsFromRegister(%rax, 8), zeroExtend(MI3,8), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcb , (%bl ,  (%al , .Typedoperands)) ) =>
      execinstr(adcb, (%rax, extractLSBitsFromRegister(%rbx, 8), extractLSBitsFromRegister(%rax, 8), zeroExtend(MI3,8), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcb , (%cl ,  (%al , .Typedoperands)) ) =>
      execinstr(adcb, (%rax, extractLSBitsFromRegister(%rcx, 8), extractLSBitsFromRegister(%rax, 8), zeroExtend(MI3,8), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcb , (%al ,  (%bl , .Typedoperands)) ) =>
      execinstr(adcb, (%rbx, extractLSBitsFromRegister(%rax, 8), extractLSBitsFromRegister(%rbx, 8), zeroExtend(MI3,8), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcb , (%bl ,  (%bl , .Typedoperands)) ) =>
      execinstr(adcb, (%rbx, extractLSBitsFromRegister(%rbx, 8), extractLSBitsFromRegister(%rbx, 8), zeroExtend(MI3,8), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcb , (%cl ,  (%bl , .Typedoperands)) ) =>
      execinstr(adcb, (%rbx, extractLSBitsFromRegister(%rcx, 8), extractLSBitsFromRegister(%rbx, 8), zeroExtend(MI3,8), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcb , (%al ,  (%cl , .Typedoperands)) ) =>
      execinstr(adcb, (%rcx, extractLSBitsFromRegister(%rax, 8), extractLSBitsFromRegister(%rcx, 8), zeroExtend(MI3,8), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcb , (%bl ,  (%cl , .Typedoperands)) ) =>
      execinstr(adcb, (%rcx, extractLSBitsFromRegister(%rbx, 8), extractLSBitsFromRegister(%rcx, 8), zeroExtend(MI3,8), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcb , (%cl ,  (%cl , .Typedoperands)) ) =>
      execinstr(adcb, (%rcx, extractLSBitsFromRegister(%rcx, 8), extractLSBitsFromRegister(%rcx, 8), zeroExtend(MI3,8), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  // Unroll END

  //MI,m2 type check
  context execinstr(adcb, (_:Typeoperand, HOLE:Typeoperand, _:Typeoperand, _:MInt, .Typedoperands))
  context execinstr(adcb, (_:Typeoperand, MInt,          HOLE:Typeoperand, _:MInt, .Typedoperands))

  rule
    execinstr(adcb, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, .Typedoperands )) => 
      execinstr(adcb, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry, addMInt(MIsrc1, MIsrc2), .Typedoperands )) 
  
  rule
    execinstr(adcb, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, MIsum:MInt, .Typedoperands )) => 
      execinstr(adcb, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry, MIsum, addMInt(MIsum, MIcarry), .Typedoperands ))

  rule
    execinstr(adcb, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, MIsum:MInt, MIresult:MInt, .Typedoperands )) 
    => 
      updateOverflowAdd(MIsrc1, MIsrc2, MIresult) ~> 
      updateZeroFlag(MIresult) ~> 
      updateSignFlag(MIresult) ~> 
      updateAuxCarryFlag(MIsrc1, MIsrc2, MIresult) ~> 
      updateCarryFlagAdd(MIsrc1, MIsrc2, MIsum, MIcarry, MIresult) ~> 
      updateParityFlag(MIresult) ~> 
      pluginLSBitsToRegister(MIresult, DestR) 

endmodule

module ADC-R16-R16
  imports X86-SEMANTIC-UTILS

  // Unroll START
  rule <k> 
    execinstr ( adcw , (%ax ,  (%ax , .Typedoperands)) ) =>
      execinstr(adcw, (%rax, extractLSBitsFromRegister(%rax, 16), extractLSBitsFromRegister(%rax, 16), zeroExtend(MI3,16), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcw , (%bx ,  (%ax , .Typedoperands)) ) =>
      execinstr(adcw, (%rax, extractLSBitsFromRegister(%rbx, 16), extractLSBitsFromRegister(%rax, 16), zeroExtend(MI3,16), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcw , (%cx ,  (%ax , .Typedoperands)) ) =>
      execinstr(adcw, (%rax, extractLSBitsFromRegister(%rcx, 16), extractLSBitsFromRegister(%rax, 16), zeroExtend(MI3,16), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcw , (%ax ,  (%bx , .Typedoperands)) ) =>
      execinstr(adcw, (%rbx, extractLSBitsFromRegister(%rax, 16), extractLSBitsFromRegister(%rbx, 16), zeroExtend(MI3,16), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcw , (%bx ,  (%bx , .Typedoperands)) ) =>
      execinstr(adcw, (%rbx, extractLSBitsFromRegister(%rbx, 16), extractLSBitsFromRegister(%rbx, 16), zeroExtend(MI3,16), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcw , (%cx ,  (%bx , .Typedoperands)) ) =>
      execinstr(adcw, (%rbx, extractLSBitsFromRegister(%rcx, 16), extractLSBitsFromRegister(%rbx, 16), zeroExtend(MI3,16), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcw , (%ax ,  (%cx , .Typedoperands)) ) =>
      execinstr(adcw, (%rcx, extractLSBitsFromRegister(%rax, 16), extractLSBitsFromRegister(%rcx, 16), zeroExtend(MI3,16), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcw , (%bx ,  (%cx , .Typedoperands)) ) =>
      execinstr(adcw, (%rcx, extractLSBitsFromRegister(%rbx, 16), extractLSBitsFromRegister(%rcx, 16), zeroExtend(MI3,16), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcw , (%cx ,  (%cx , .Typedoperands)) ) =>
      execinstr(adcw, (%rcx, extractLSBitsFromRegister(%rcx, 16), extractLSBitsFromRegister(%rcx, 16), zeroExtend(MI3,16), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  // Unroll END

  //MI,m2 type check
  context execinstr(adcw, (_:Typeoperand, HOLE:Typeoperand, _:Typeoperand, _:MInt, .Typedoperands))
  context execinstr(adcw, (_:Typeoperand, MInt,          HOLE:Typeoperand, _:MInt, .Typedoperands))

  rule
    execinstr(adcw, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, .Typedoperands )) => 
      execinstr(adcw, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry, addMInt(MIsrc1, MIsrc2), .Typedoperands )) 
  
  rule
    execinstr(adcw, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, MIsum:MInt, .Typedoperands )) => 
      execinstr(adcw, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry, MIsum, addMInt(MIsum, MIcarry), .Typedoperands ))

  rule
    execinstr(adcw, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, MIsum:MInt, MIresult:MInt, .Typedoperands )) 
    => 
      updateOverflowAdd(MIsrc1, MIsrc2, MIresult) ~> 
      updateZeroFlag(MIresult) ~> 
      updateSignFlag(MIresult) ~> 
      updateAuxCarryFlag(MIsrc1, MIsrc2, MIresult) ~> 
      updateCarryFlagAdd(MIsrc1, MIsrc2, MIsum, MIcarry, MIresult) ~> 
      updateParityFlag(MIresult) ~> 
      pluginLSBitsToRegister(MIresult, DestR) 

endmodule

module ADC-R32-R32
  imports X86-SEMANTIC-UTILS

  // Unroll START
  rule <k> 
    execinstr ( adcl , (%eax ,  (%eax , .Typedoperands)) ) =>
      execinstr(adcl, (%rax, extractLSBitsFromRegister(%rax, 32), extractLSBitsFromRegister(%rax, 32), zeroExtend(MI3,32), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcl , (%ebx ,  (%eax , .Typedoperands)) ) =>
      execinstr(adcl, (%rax, extractLSBitsFromRegister(%rbx, 32), extractLSBitsFromRegister(%rax, 32), zeroExtend(MI3,32), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcl , (%ecx ,  (%eax , .Typedoperands)) ) =>
      execinstr(adcl, (%rax, extractLSBitsFromRegister(%rcx, 32), extractLSBitsFromRegister(%rax, 32), zeroExtend(MI3,32), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcl , (%eax ,  (%ebx , .Typedoperands)) ) =>
      execinstr(adcl, (%rbx, extractLSBitsFromRegister(%rax, 32), extractLSBitsFromRegister(%rbx, 32), zeroExtend(MI3,32), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcl , (%ebx ,  (%ebx , .Typedoperands)) ) =>
      execinstr(adcl, (%rbx, extractLSBitsFromRegister(%rbx, 32), extractLSBitsFromRegister(%rbx, 32), zeroExtend(MI3,32), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcl , (%ecx ,  (%ebx , .Typedoperands)) ) =>
      execinstr(adcl, (%rbx, extractLSBitsFromRegister(%rcx, 32), extractLSBitsFromRegister(%rbx, 32), zeroExtend(MI3,32), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcl , (%eax ,  (%ecx , .Typedoperands)) ) =>
      execinstr(adcl, (%rcx, extractLSBitsFromRegister(%rax, 32), extractLSBitsFromRegister(%rcx, 32), zeroExtend(MI3,32), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcl , (%ebx ,  (%ecx , .Typedoperands)) ) =>
      execinstr(adcl, (%rcx, extractLSBitsFromRegister(%rbx, 32), extractLSBitsFromRegister(%rcx, 32), zeroExtend(MI3,32), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  rule <k> 
    execinstr ( adcl , (%ecx ,  (%ecx , .Typedoperands)) ) =>
      execinstr(adcl, (%rcx, extractLSBitsFromRegister(%rcx, 32), extractLSBitsFromRegister(%rcx, 32), zeroExtend(MI3,32), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  // Unroll END

  //MI,m2 type check
  context execinstr(adcl, (_:Typeoperand, HOLE:Typeoperand, _:Typeoperand, _:MInt, .Typedoperands))
  context execinstr(adcl, (_:Typeoperand, MInt,          HOLE:Typeoperand, _:MInt, .Typedoperands))

  rule
    execinstr(adcl, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, .Typedoperands )) => 
      execinstr(adcl, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry, addMInt(MIsrc1, MIsrc2), .Typedoperands )) 
  
  rule
    execinstr(adcl, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, MIsum:MInt, .Typedoperands )) => 
      execinstr(adcl, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry, MIsum, addMInt(MIsum, MIcarry), .Typedoperands ))

  rule
    execinstr(adcl, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, MIsum:MInt, MIresult:MInt, .Typedoperands )) 
    => 
      updateOverflowAdd(MIsrc1, MIsrc2, MIresult) ~> 
      updateZeroFlag(MIresult) ~> 
      updateSignFlag(MIresult) ~> 
      updateAuxCarryFlag(MIsrc1, MIsrc2, MIresult) ~> 
      updateCarryFlagAdd(MIsrc1, MIsrc2, MIsum, MIcarry, MIresult) ~> 
      updateParityFlag(MIresult) ~> 
      pluginLSBitsToRegister(MIresult, DestR) 

endmodule

module ADC-R64-R64
  imports X86-SEMANTIC-UTILS

  // Unroll START
  rule <k> 
    execinstr ( adcq , (%rax ,  (%rax , .Typedoperands)) ) =>
      execinstr(adcq, (%rax, MIsrc, MIsrc, zeroExtend(MIc,64), .Typedoperands)) 
  ...</k>
  <cf> MIc </cf>
  <rax> MIsrc </rax>
  rule <k> 
    execinstr ( adcq , (%rbx ,  (%rbx , .Typedoperands)) ) =>
      execinstr(adcq, (%rbx, MIsrc, MIsrc, zeroExtend(MIc,64), .Typedoperands)) 
  ...</k>
  <cf> MIc </cf>
  <rbx> MIsrc </rbx>
  rule <k> 
    execinstr ( adcq , (%rcx ,  (%rcx , .Typedoperands)) ) =>
      execinstr(adcq, (%rcx, MIsrc, MIsrc, zeroExtend(MIc,64), .Typedoperands)) 
  ...</k>
  <cf> MIc </cf>
  <rcx> MIsrc </rcx>

  rule <k> 
    execinstr ( adcq , (%rbx ,  (%rax , .Typedoperands)) ) =>
      execinstr(adcq, (%rax, MIsrc1, MIsrc2, zeroExtend(MI3,64), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  <rbx> MIsrc1 </rbx>
  <rax> MIsrc2 </rax>
  rule <k> 
    execinstr ( adcq , (%rcx ,  (%rax , .Typedoperands)) ) =>
      execinstr(adcq, (%rax, MIsrc1, MIsrc2, zeroExtend(MI3,64), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  <rcx> MIsrc1 </rcx>
  <rax> MIsrc2 </rax>
  rule <k> 
    execinstr ( adcq , (%rax ,  (%rbx , .Typedoperands)) ) =>
      execinstr(adcq, (%rbx, MIsrc1, MIsrc2, zeroExtend(MI3,64), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  <rax> MIsrc1 </rax>
  <rbx> MIsrc2 </rbx>
  rule <k> 
    execinstr ( adcq , (%rcx ,  (%rbx , .Typedoperands)) ) =>
      execinstr(adcq, (%rbx, MIsrc1, MIsrc2, zeroExtend(MI3,64), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  <rcx> MIsrc1 </rcx>
  <rbx> MIsrc2 </rbx>
  rule <k> 
    execinstr ( adcq , (%rax ,  (%rcx , .Typedoperands)) ) =>
      execinstr(adcq, (%rcx, MIsrc1, MIsrc2, zeroExtend(MI3,64), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  <rax> MIsrc1 </rax>
  <rcx> MIsrc2 </rcx>
  rule <k> 
    execinstr ( adcq , (%rbx ,  (%rcx , .Typedoperands)) ) =>
      execinstr(adcq, (%rcx, MIsrc1, MIsrc2, zeroExtend(MI3,64), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  <rbx> MIsrc1 </rbx>
  <rcx> MIsrc2 </rcx>
  // Unroll END

  rule
    execinstr(adcq, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, .Typedoperands )) => 
      execinstr(adcq, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry, addMInt(MIsrc1, MIsrc2), .Typedoperands )) 
  
  rule
    execinstr(adcq, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, MIsum:MInt, .Typedoperands )) => 
      execinstr(adcq, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry, MIsum, addMInt(MIsum, MIcarry), .Typedoperands ))

  rule
    execinstr(adcq, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, MIsum:MInt, MIresult:MInt, .Typedoperands )) 
    => 
      updateOverflowAdd(MIsrc1, MIsrc2, MIresult) ~> 
      updateZeroFlag(MIresult) ~> 
      updateSignFlag(MIresult) ~> 
      updateAuxCarryFlag(MIsrc1, MIsrc2, MIresult) ~> 
      updateCarryFlagAdd(MIsrc1, MIsrc2, MIsum, MIcarry, MIresult) ~> 
      updateParityFlag(MIresult) ~> 
      updateReg(MIresult, DestR) 

endmodule

module ADC-SEMANTICS
  imports ADC-R8-R8
  imports ADC-R16-R16
  imports ADC-R32-R32
  imports ADC-R64-R64
endmodule
