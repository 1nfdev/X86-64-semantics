// Autogenerated from templates.
requires "x86-configuration.k"

/*@ This file defines the semantics of following 51 base instructions.
  - movq_r64_imm64, movq_r64_r64, movb_r8_rh, movb_rh_r8,
*/

module MOV-R64-R64
  imports X86-CONFIGURATION

  rule <k> 
    execinstr(movq  (R1:R64,  (R2:R64, .Typedoperands)) ) => .
  ...</k>
    <regstate> RSMap </regstate>
      requires sameRegisters(R1, R2)
  

  rule <k> 
    execinstr(movq  (R1:R64,  (R2:R64, .Typedoperands)) ) =>
      setRegisterValue(getRegisterValue(R1, RSMap), R2)
  ...</k>
    <regstate> RSMap </regstate>
      requires notBool sameRegisters(R1, R2)
  
endmodule

module MOV-R64-IMM64
  imports X86-CONFIGURATION

  rule <k> 
    execinstr(movq  (I:Imm,  (R:R64, .Typedoperands)) ) =>
      setRegisterValue(handleImmediate(I, 64), R)
  ...</k>
endmodule

module MOV-R8-RH
  imports X86-CONFIGURATION

  rule <k> 
    execinstr(movb  (R1:Rh,  (R2:R8, .Typedoperands)) ) =>
      setRegisterValue(getRegisterValue(R1, RSMap), R2)
  ...</k>
    <regstate> RSMap </regstate>

endmodule

module MOV-RH-R8
  imports X86-CONFIGURATION

  rule <k> 
    execinstr(movb  (R1:R8,  (R2:Rh, .Typedoperands)) ) =>
      setRegisterValue(getRegisterValue(R1, RSMap), R2)
  ...</k>
    <regstate> RSMap </regstate>

endmodule

module MOV-SEMANTICS
  imports MOV-R64-R64
  imports MOV-R64-IMM64
  imports MOV-R8-RH
  imports MOV-RH-R8
endmodule


/*
Target

movq %rax, %rbx

  maybe read:      { %rax }
  must read:       { %rax }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : %rax

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

Target

movq %rax, %rax

  maybe read:      { %rax }
  must read:       { %rax }
  maybe write:     { %rax }
  must write:      { %rax }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv
  


Target

movb %al, %bh

  maybe read:      { %al }
  must read:       { %al }
  maybe write:     { %bh }
  must write:      { %bh }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : %rbx[63:16] ∘ %rax[7:0] ∘ %rbx[7:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movb %al, %ah

  maybe read:      { %al }
  must read:       { %al }
  maybe write:     { %ah }
  must write:      { %ah }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : %rax[63:16] ∘ %rax[7:0] ∘ %rax[7:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

Target

movb %ah, %bl

  maybe read:      { %ah }
  must read:       { %ah }
  maybe write:     { %bl }
  must write:      { %bl }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : %rbx[63:8] ∘ %rax[15:8]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv


WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movb %ah, %al

  maybe read:      { %ah }
  must read:       { %ah }
  maybe write:     { %al }
  must write:      { %al }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : %rax[63:8] ∘ %rax[15:8]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv



*/   
