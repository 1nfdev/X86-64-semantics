// Autogenerated from templates.
requires "x86-configuration.k"
requires "x86-flag-checks-syntax.k"

/*@ This file defines the semantics of following 51 base instructions.
  - movswq_r64_r16, movsbq_r64_r8, movswq_r64_r32,

*/

module MOVS-R64-R8
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS-SYNTAX

  // Unroll START
  rule <k> 
    execinstr (movsbq , (%al ,  (%rax , .Typedoperands)) ) =>
      execinstr(movsbq, (%rax, signExtend(truncate(MI, 8), 64), .Typedoperands)) 
  ...</k>
  <rax> MI </rax>
  rule <k> 
    execinstr (movsbq , (%bl ,  (%rax , .Typedoperands)) ) =>
      execinstr(movsbq, (%rax, signExtend(truncate(MI, 8), 64), .Typedoperands)) 
  ...</k>
  <rbx> MI </rbx>
  rule <k> 
    execinstr (movsbq , (%cl ,  (%rax , .Typedoperands)) ) =>
      execinstr(movsbq, (%rax, signExtend(truncate(MI, 8), 64), .Typedoperands)) 
  ...</k>
  <rcx> MI </rcx>
  rule <k> 
    execinstr (movsbq , (%al ,  (%rbx , .Typedoperands)) ) =>
      execinstr(movsbq, (%rbx, signExtend(truncate(MI, 8), 64), .Typedoperands)) 
  ...</k>
  <rax> MI </rax>
  rule <k> 
    execinstr (movsbq , (%bl ,  (%rbx , .Typedoperands)) ) =>
      execinstr(movsbq, (%rbx, signExtend(truncate(MI, 8), 64), .Typedoperands)) 
  ...</k>
  <rbx> MI </rbx>
  rule <k> 
    execinstr (movsbq , (%cl ,  (%rbx , .Typedoperands)) ) =>
      execinstr(movsbq, (%rbx, signExtend(truncate(MI, 8), 64), .Typedoperands)) 
  ...</k>
  <rcx> MI </rcx>
  rule <k> 
    execinstr (movsbq , (%al ,  (%rcx , .Typedoperands)) ) =>
      execinstr(movsbq, (%rcx, signExtend(truncate(MI, 8), 64), .Typedoperands)) 
  ...</k>
  <rax> MI </rax>
  rule <k> 
    execinstr (movsbq , (%bl ,  (%rcx , .Typedoperands)) ) =>
      execinstr(movsbq, (%rcx, signExtend(truncate(MI, 8), 64), .Typedoperands)) 
  ...</k>
  <rbx> MI </rbx>
  rule <k> 
    execinstr (movsbq , (%cl ,  (%rcx , .Typedoperands)) ) =>
      execinstr(movsbq, (%rcx, signExtend(truncate(MI, 8), 64), .Typedoperands)) 
  ...</k>
  <rcx> MI </rcx>
  // Unroll END

  rule
    execinstr(movsbq, ( DestR:R64, MIsrc:MInt, .Typedoperands )) => 
      updateReg(MIsrc, DestR) 

endmodule

module MOVS-R64-R16
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS-SYNTAX

  // Unroll START
  rule <k> 
    execinstr (movswq , (%ax ,  (%rax , .Typedoperands)) ) =>
      execinstr(movswq, (%rax, signExtend(truncate(MI, 16), 64), .Typedoperands)) 
  ...</k>
  <rax> MI </rax>
  rule <k> 
    execinstr (movswq , (%bx ,  (%rax , .Typedoperands)) ) =>
      execinstr(movswq, (%rax, signExtend(truncate(MI, 16), 64), .Typedoperands)) 
  ...</k>
  <rbx> MI </rbx>
  rule <k> 
    execinstr (movswq , (%cx ,  (%rax , .Typedoperands)) ) =>
      execinstr(movswq, (%rax, signExtend(truncate(MI, 16), 64), .Typedoperands)) 
  ...</k>
  <rcx> MI </rcx>
  rule <k> 
    execinstr (movswq , (%ax ,  (%rbx , .Typedoperands)) ) =>
      execinstr(movswq, (%rbx, signExtend(truncate(MI, 16), 64), .Typedoperands)) 
  ...</k>
  <rax> MI </rax>
  rule <k> 
    execinstr (movswq , (%bx ,  (%rbx , .Typedoperands)) ) =>
      execinstr(movswq, (%rbx, signExtend(truncate(MI, 16), 64), .Typedoperands)) 
  ...</k>
  <rbx> MI </rbx>
  rule <k> 
    execinstr (movswq , (%cx ,  (%rbx , .Typedoperands)) ) =>
      execinstr(movswq, (%rbx, signExtend(truncate(MI, 16), 64), .Typedoperands)) 
  ...</k>
  <rcx> MI </rcx>
  rule <k> 
    execinstr (movswq , (%ax ,  (%rcx , .Typedoperands)) ) =>
      execinstr(movswq, (%rcx, signExtend(truncate(MI, 16), 64), .Typedoperands)) 
  ...</k>
  <rax> MI </rax>
  rule <k> 
    execinstr (movswq , (%bx ,  (%rcx , .Typedoperands)) ) =>
      execinstr(movswq, (%rcx, signExtend(truncate(MI, 16), 64), .Typedoperands)) 
  ...</k>
  <rbx> MI </rbx>
  rule <k> 
    execinstr (movswq , (%cx ,  (%rcx , .Typedoperands)) ) =>
      execinstr(movswq, (%rcx, signExtend(truncate(MI, 16), 64), .Typedoperands)) 
  ...</k>
  <rcx> MI </rcx>
  // Unroll END

  rule
    execinstr(movswq, ( DestR:R64, MIsrc:MInt, .Typedoperands )) => 
      updateReg(MIsrc, DestR) 

endmodule

module MOVS-R64-R32
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS-SYNTAX

  // Unroll START
  rule <k> 
    execinstr (movslq , (%eax ,  (%rax , .Typedoperands)) ) =>
      execinstr(movslq, (%rax, signExtend(truncate(MI, 32), 64), .Typedoperands)) 
  ...</k>
  <rax> MI </rax>
  rule <k> 
    execinstr (movslq , (%ebx ,  (%rax , .Typedoperands)) ) =>
      execinstr(movslq, (%rax, signExtend(truncate(MI, 32), 64), .Typedoperands)) 
  ...</k>
  <rbx> MI </rbx>
  rule <k> 
    execinstr (movslq , (%ecx ,  (%rax , .Typedoperands)) ) =>
      execinstr(movslq, (%rax, signExtend(truncate(MI, 32), 64), .Typedoperands)) 
  ...</k>
  <rcx> MI </rcx>
  rule <k> 
    execinstr (movslq , (%eax ,  (%rbx , .Typedoperands)) ) =>
      execinstr(movslq, (%rbx, signExtend(truncate(MI, 32), 64), .Typedoperands)) 
  ...</k>
  <rax> MI </rax>
  rule <k> 
    execinstr (movslq , (%ebx ,  (%rbx , .Typedoperands)) ) =>
      execinstr(movslq, (%rbx, signExtend(truncate(MI, 32), 64), .Typedoperands)) 
  ...</k>
  <rbx> MI </rbx>
  rule <k> 
    execinstr (movslq , (%ecx ,  (%rbx , .Typedoperands)) ) =>
      execinstr(movslq, (%rbx, signExtend(truncate(MI, 32), 64), .Typedoperands)) 
  ...</k>
  <rcx> MI </rcx>
  rule <k> 
    execinstr (movslq , (%eax ,  (%rcx , .Typedoperands)) ) =>
      execinstr(movslq, (%rcx, signExtend(truncate(MI, 32), 64), .Typedoperands)) 
  ...</k>
  <rax> MI </rax>
  rule <k> 
    execinstr (movslq , (%ebx ,  (%rcx , .Typedoperands)) ) =>
      execinstr(movslq, (%rcx, signExtend(truncate(MI, 32), 64), .Typedoperands)) 
  ...</k>
  <rbx> MI </rbx>
  rule <k> 
    execinstr (movslq , (%ecx ,  (%rcx , .Typedoperands)) ) =>
      execinstr(movslq, (%rcx, signExtend(truncate(MI, 32), 64), .Typedoperands)) 
  ...</k>
  <rcx> MI </rcx>
  // Unroll END

  rule
    execinstr(movslq, ( DestR:R64, MIsrc:MInt, .Typedoperands )) => 
      updateReg(MIsrc, DestR) 

endmodule

module MOVS-SEMANTICS
  imports MOVS-R64-R8
  imports MOVS-R64-R16
  imports MOVS-R64-R32
endmodule
