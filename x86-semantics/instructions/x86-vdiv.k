// Autogenerated from templates.
requires "x86-semantic-utils.k"

/*@ This file defines the semantics of following 51 base instructions.
  - vdivpd_ymm_ymm_ymm, vdivps_ymm_ymm_ymm,
*/

module VDIVPD-YMM-YMM-YMM
  imports X86-SEMANTIC-UTILS

  // Unroll START
  rule <k>
    execinstr ( divpd , %ymm1 ,  %ymm1 , DestR, .Typedoperands) =>
      execinstr( divpd, DestR, 
      joinVector(operateOnVector(splitVector(MI, 64), splitVector(MI, 64), vfdiv, 64)), 
      .Typedoperands)
  ...</k>
  <ymm1> MI </ymm1>
  rule <k>
    execinstr ( divpd , %ymm2 ,  %ymm2 , DestR, .Typedoperands) =>
      execinstr( divpd, DestR, 
      joinVector(operateOnVector(splitVector(MI, 64), splitVector(MI, 64), vfdiv, 64)), 
      .Typedoperands)
  ...</k>
  <ymm2> MI </ymm2>
  rule <k>
    execinstr ( divpd , %ymm3 ,  %ymm3 , DestR, .Typedoperands) =>
      execinstr( divpd, DestR, 
      joinVector(operateOnVector(splitVector(MI, 64), splitVector(MI, 64), vfdiv, 64)), 
      .Typedoperands)
  ...</k>
  <ymm3> MI </ymm3>
  // Unroll END

  // Unroll START
  rule <k>
    execinstr ( divpd , %ymm1 ,  %ymm2 , DestR, .Typedoperands) =>
      execinstr( divpd, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfdiv, 64)), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm2> MI2 </ymm2>
  rule <k>
    execinstr ( divpd , %ymm1 ,  %ymm3 , DestR, .Typedoperands) =>
      execinstr( divpd, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfdiv, 64)), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( divpd , %ymm2 ,  %ymm1 , DestR, .Typedoperands) =>
      execinstr( divpd, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfdiv, 64)), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( divpd , %ymm2 ,  %ymm3 , DestR, .Typedoperands) =>
      execinstr( divpd, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfdiv, 64)), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( divpd , %ymm3 ,  %ymm1 , DestR, .Typedoperands) =>
      execinstr( divpd, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfdiv, 64)), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( divpd , %ymm3 ,  %ymm2 , DestR, .Typedoperands) =>
      execinstr( divpd, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfdiv, 64)), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm2> MI2 </ymm2>
  // Unroll END

  rule <k> execinstr(divpd, DestR:Ymm, MIsrc:MInt, .Typedoperands ) => updateReg(MIsrc, DestR) ...</k>
endmodule

module VDIVPS-YMM-YMM-YMM
  imports X86-SEMANTIC-UTILS

  // Unroll START
  rule <k>
    execinstr ( divps , %ymm1 ,  %ymm1 , DestR, .Typedoperands) =>
      execinstr( divps, DestR, 
      joinVector(operateOnVector(splitVector(MI, 32), splitVector(MI, 32), vfdiv, 32)), 
      .Typedoperands)
  ...</k>
  <ymm1> MI </ymm1>
  rule <k>
    execinstr ( divps , %ymm2 ,  %ymm2 , DestR, .Typedoperands) =>
      execinstr( divps, DestR, 
      joinVector(operateOnVector(splitVector(MI, 32), splitVector(MI, 32), vfdiv, 32)), 
      .Typedoperands)
  ...</k>
  <ymm2> MI </ymm2>
  rule <k>
    execinstr ( divps , %ymm3 ,  %ymm3 , DestR, .Typedoperands) =>
      execinstr( divps, DestR, 
      joinVector(operateOnVector(splitVector(MI, 32), splitVector(MI, 32), vfdiv, 32)), 
      .Typedoperands)
  ...</k>
  <ymm3> MI </ymm3>
  // Unroll END

  // Unroll START
  rule <k>
    execinstr ( divps , %ymm1 ,  %ymm2 , DestR, .Typedoperands) =>
      execinstr( divps, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfdiv, 32)), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm2> MI2 </ymm2>
  rule <k>
    execinstr ( divps , %ymm1 ,  %ymm3 , DestR, .Typedoperands) =>
      execinstr( divps, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfdiv, 32)), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( divps , %ymm2 ,  %ymm1 , DestR, .Typedoperands) =>
      execinstr( divps, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfdiv, 32)), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( divps , %ymm2 ,  %ymm3 , DestR, .Typedoperands) =>
      execinstr( divps, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfdiv, 32)), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( divps , %ymm3 ,  %ymm1 , DestR, .Typedoperands) =>
      execinstr( divps, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfdiv, 32)), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( divps , %ymm3 ,  %ymm2 , DestR, .Typedoperands) =>
      execinstr( divps, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfdiv, 32)), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm2> MI2 </ymm2>
  // Unroll END

  rule <k> execinstr(divps, DestR:Ymm, MIsrc:MInt, .Typedoperands ) => updateReg(MIsrc, DestR) ...</k>
endmodule


module VDIV-SEMANTICS
  imports VDIVPD-YMM-YMM-YMM
  imports VDIVPS-YMM-YMM-YMM
endmodule
