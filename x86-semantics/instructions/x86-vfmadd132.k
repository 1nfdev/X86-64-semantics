// Autogenerated from templates.
requires "x86-semantic-utils.k"

/*@ This file defines the semantics of following 51 base instructions.
  - vfmadd132pd_ymm_ymm_ymm, vfmadd132ps_ymm_ymm_ymm,
*/

module VFMADD132PD-YMM-YMM-YMM
  imports X86-SEMANTIC-UTILS

  // Unroll START
  rule <k>
    execinstr ( fmadd132pd , %ymm1 ,  %ymm1 , %ymm1, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm1, 
      joinVector(
        operateOnVector(splitVector(MI, 64), operateOnVector(splitVector(MI, 64), splitVector(MI, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm1> MI </ymm1>
  rule <k>
    execinstr ( fmadd132pd , %ymm2 ,  %ymm2 , %ymm2, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm2, 
      joinVector(
        operateOnVector(splitVector(MI, 64), operateOnVector(splitVector(MI, 64), splitVector(MI, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm2> MI </ymm2>
  rule <k>
    execinstr ( fmadd132pd , %ymm3 ,  %ymm3 , %ymm3, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm3, 
      joinVector(
        operateOnVector(splitVector(MI, 64), operateOnVector(splitVector(MI, 64), splitVector(MI, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm3> MI </ymm3>
  // Unroll END

  // Unroll START
  rule <k>
    execinstr ( fmadd132pd , %ymm2 ,  %ymm2 , %ymm1, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm1, 
      joinVector(
        operateOnVector(splitVector(MI2, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm2> MI2 </ymm2>
  rule <k>
    execinstr ( fmadd132pd , %ymm3 ,  %ymm3 , %ymm1, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm1, 
      joinVector(
        operateOnVector(splitVector(MI2, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( fmadd132pd , %ymm1 ,  %ymm1 , %ymm2, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm2, 
      joinVector(
        operateOnVector(splitVector(MI2, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( fmadd132pd , %ymm3 ,  %ymm3 , %ymm2, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm2, 
      joinVector(
        operateOnVector(splitVector(MI2, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( fmadd132pd , %ymm1 ,  %ymm1 , %ymm3, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm3, 
      joinVector(
        operateOnVector(splitVector(MI2, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( fmadd132pd , %ymm2 ,  %ymm2 , %ymm3, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm3, 
      joinVector(
        operateOnVector(splitVector(MI2, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm2> MI2 </ymm2>
  // Unroll END

  // Unroll START
  rule <k>
    execinstr ( fmadd132pd , %ymm2 ,  %ymm1 , %ymm1, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm1, 
      joinVector(
        operateOnVector(splitVector(MI1, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm2> MI2 </ymm2>
  rule <k>
    execinstr ( fmadd132pd , %ymm3 ,  %ymm1 , %ymm1, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm1, 
      joinVector(
        operateOnVector(splitVector(MI1, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( fmadd132pd , %ymm1 ,  %ymm2 , %ymm2, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm2, 
      joinVector(
        operateOnVector(splitVector(MI1, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( fmadd132pd , %ymm3 ,  %ymm2 , %ymm2, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm2, 
      joinVector(
        operateOnVector(splitVector(MI1, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( fmadd132pd , %ymm1 ,  %ymm3 , %ymm3, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm3, 
      joinVector(
        operateOnVector(splitVector(MI1, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( fmadd132pd , %ymm2 ,  %ymm3 , %ymm3, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm3, 
      joinVector(
        operateOnVector(splitVector(MI1, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm2> MI2 </ymm2>
  // Unroll END

  // Unroll START
  rule <k>
    execinstr ( fmadd132pd , %ymm1 ,  %ymm2, %ymm1, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm1, 
      joinVector(
        operateOnVector(splitVector(MI2, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI1, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm2> MI2 </ymm2>
  rule <k>
    execinstr ( fmadd132pd , %ymm1 ,  %ymm3, %ymm1, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm1, 
      joinVector(
        operateOnVector(splitVector(MI2, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI1, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( fmadd132pd , %ymm2 ,  %ymm1, %ymm2, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm2, 
      joinVector(
        operateOnVector(splitVector(MI2, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI1, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( fmadd132pd , %ymm2 ,  %ymm3, %ymm2, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm2, 
      joinVector(
        operateOnVector(splitVector(MI2, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI1, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( fmadd132pd , %ymm3 ,  %ymm1, %ymm3, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm3, 
      joinVector(
        operateOnVector(splitVector(MI2, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI1, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( fmadd132pd , %ymm3 ,  %ymm2, %ymm3, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm3, 
      joinVector(
        operateOnVector(splitVector(MI2, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI1, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm2> MI2 </ymm2>
  // Unroll END

  // Unroll START
  rule <k>
    execinstr ( fmadd132pd , %ymm3 ,  %ymm2 , %ymm1, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm1, 
      joinVector(
        operateOnVector(splitVector(MI2, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI3, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm2> MI2 </ymm2>
  <ymm3> MI3 </ymm3>
  rule <k>
    execinstr ( fmadd132pd , %ymm2 ,  %ymm3 , %ymm1, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm1, 
      joinVector(
        operateOnVector(splitVector(MI2, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI3, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm3> MI2 </ymm3>
  <ymm2> MI3 </ymm2>
  rule <k>
    execinstr ( fmadd132pd , %ymm3 ,  %ymm1 , %ymm2, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm2, 
      joinVector(
        operateOnVector(splitVector(MI2, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI3, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm1> MI2 </ymm1>
  <ymm3> MI3 </ymm3>
  rule <k>
    execinstr ( fmadd132pd , %ymm1 ,  %ymm3 , %ymm2, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm2, 
      joinVector(
        operateOnVector(splitVector(MI2, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI3, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm3> MI2 </ymm3>
  <ymm1> MI3 </ymm1>
  rule <k>
    execinstr ( fmadd132pd , %ymm2 ,  %ymm1 , %ymm3, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm3, 
      joinVector(
        operateOnVector(splitVector(MI2, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI3, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm1> MI2 </ymm1>
  <ymm2> MI3 </ymm2>
  rule <k>
    execinstr ( fmadd132pd , %ymm1 ,  %ymm2 , %ymm3, .Typedoperands) =>
      execinstr( fmadd132pd, %ymm3, 
      joinVector(
        operateOnVector(splitVector(MI2, 64), operateOnVector(splitVector(MI1, 64), splitVector(MI3, 64), vfmul, 64), vfadd, 64)
      ), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm2> MI2 </ymm2>
  <ymm1> MI3 </ymm1>
  // Unroll END

  rule <k> execinstr(fmadd132pd, DestR:Ymm, MIsrc:MInt, .Typedoperands ) => updateReg(MIsrc, DestR) ...</k>
endmodule

module VFMADD132PS-YMM-YMM-YMM
  imports X86-SEMANTIC-UTILS

  // Unroll START
  rule <k>
    execinstr ( fmadd132ps , %ymm1 ,  %ymm1 , %ymm1, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm1, 
      joinVector(
        operateOnVector(splitVector(MI, 32), operateOnVector(splitVector(MI, 32), splitVector(MI, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm1> MI </ymm1>
  rule <k>
    execinstr ( fmadd132ps , %ymm2 ,  %ymm2 , %ymm2, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm2, 
      joinVector(
        operateOnVector(splitVector(MI, 32), operateOnVector(splitVector(MI, 32), splitVector(MI, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm2> MI </ymm2>
  rule <k>
    execinstr ( fmadd132ps , %ymm3 ,  %ymm3 , %ymm3, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm3, 
      joinVector(
        operateOnVector(splitVector(MI, 32), operateOnVector(splitVector(MI, 32), splitVector(MI, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm3> MI </ymm3>
  // Unroll END

  // Unroll START
  rule <k>
    execinstr ( fmadd132ps , %ymm2 ,  %ymm2 , %ymm1, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm1, 
      joinVector(
        operateOnVector(splitVector(MI2, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm2> MI2 </ymm2>
  rule <k>
    execinstr ( fmadd132ps , %ymm3 ,  %ymm3 , %ymm1, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm1, 
      joinVector(
        operateOnVector(splitVector(MI2, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( fmadd132ps , %ymm1 ,  %ymm1 , %ymm2, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm2, 
      joinVector(
        operateOnVector(splitVector(MI2, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( fmadd132ps , %ymm3 ,  %ymm3 , %ymm2, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm2, 
      joinVector(
        operateOnVector(splitVector(MI2, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( fmadd132ps , %ymm1 ,  %ymm1 , %ymm3, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm3, 
      joinVector(
        operateOnVector(splitVector(MI2, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( fmadd132ps , %ymm2 ,  %ymm2 , %ymm3, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm3, 
      joinVector(
        operateOnVector(splitVector(MI2, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm2> MI2 </ymm2>
  // Unroll END

  // Unroll START
  rule <k>
    execinstr ( fmadd132ps , %ymm2 ,  %ymm1 , %ymm1, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm1, 
      joinVector(
        operateOnVector(splitVector(MI1, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm2> MI2 </ymm2>
  rule <k>
    execinstr ( fmadd132ps , %ymm3 ,  %ymm1 , %ymm1, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm1, 
      joinVector(
        operateOnVector(splitVector(MI1, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( fmadd132ps , %ymm1 ,  %ymm2 , %ymm2, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm2, 
      joinVector(
        operateOnVector(splitVector(MI1, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( fmadd132ps , %ymm3 ,  %ymm2 , %ymm2, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm2, 
      joinVector(
        operateOnVector(splitVector(MI1, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( fmadd132ps , %ymm1 ,  %ymm3 , %ymm3, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm3, 
      joinVector(
        operateOnVector(splitVector(MI1, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( fmadd132ps , %ymm2 ,  %ymm3 , %ymm3, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm3, 
      joinVector(
        operateOnVector(splitVector(MI1, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm2> MI2 </ymm2>
  // Unroll END

  // Unroll START
  rule <k>
    execinstr ( fmadd132ps , %ymm1 ,  %ymm2, %ymm1, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm1, 
      joinVector(
        operateOnVector(splitVector(MI2, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI1, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm2> MI2 </ymm2>
  rule <k>
    execinstr ( fmadd132ps , %ymm1 ,  %ymm3, %ymm1, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm1, 
      joinVector(
        operateOnVector(splitVector(MI2, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI1, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( fmadd132ps , %ymm2 ,  %ymm1, %ymm2, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm2, 
      joinVector(
        operateOnVector(splitVector(MI2, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI1, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( fmadd132ps , %ymm2 ,  %ymm3, %ymm2, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm2, 
      joinVector(
        operateOnVector(splitVector(MI2, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI1, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( fmadd132ps , %ymm3 ,  %ymm1, %ymm3, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm3, 
      joinVector(
        operateOnVector(splitVector(MI2, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI1, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( fmadd132ps , %ymm3 ,  %ymm2, %ymm3, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm3, 
      joinVector(
        operateOnVector(splitVector(MI2, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI1, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm2> MI2 </ymm2>
  // Unroll END

  // Unroll START
  rule <k>
    execinstr ( fmadd132ps , %ymm3 ,  %ymm2 , %ymm1, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm1, 
      joinVector(
        operateOnVector(splitVector(MI2, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI3, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm2> MI2 </ymm2>
  <ymm3> MI3 </ymm3>
  rule <k>
    execinstr ( fmadd132ps , %ymm2 ,  %ymm3 , %ymm1, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm1, 
      joinVector(
        operateOnVector(splitVector(MI2, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI3, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm3> MI2 </ymm3>
  <ymm2> MI3 </ymm2>
  rule <k>
    execinstr ( fmadd132ps , %ymm3 ,  %ymm1 , %ymm2, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm2, 
      joinVector(
        operateOnVector(splitVector(MI2, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI3, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm1> MI2 </ymm1>
  <ymm3> MI3 </ymm3>
  rule <k>
    execinstr ( fmadd132ps , %ymm1 ,  %ymm3 , %ymm2, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm2, 
      joinVector(
        operateOnVector(splitVector(MI2, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI3, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm3> MI2 </ymm3>
  <ymm1> MI3 </ymm1>
  rule <k>
    execinstr ( fmadd132ps , %ymm2 ,  %ymm1 , %ymm3, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm3, 
      joinVector(
        operateOnVector(splitVector(MI2, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI3, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm1> MI2 </ymm1>
  <ymm2> MI3 </ymm2>
  rule <k>
    execinstr ( fmadd132ps , %ymm1 ,  %ymm2 , %ymm3, .Typedoperands) =>
      execinstr( fmadd132ps, %ymm3, 
      joinVector(
        operateOnVector(splitVector(MI2, 32), operateOnVector(splitVector(MI1, 32), splitVector(MI3, 32), vfmul, 32), vfadd, 32)
      ), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm2> MI2 </ymm2>
  <ymm1> MI3 </ymm1>
  // Unroll END

  rule <k> execinstr(fmadd132ps, DestR:Ymm, MIsrc:MInt, .Typedoperands ) => upsateReg(MIsrc, DestR) ...</k>
endmodule

module VFMADD132-SEMANTICS
  imports VFMADD132PD-YMM-YMM-YMM
  imports VFMADD132PS-YMM-YMM-YMM
endmodule
