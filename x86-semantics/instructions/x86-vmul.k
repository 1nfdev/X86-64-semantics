// Autogenerated from templates.
requires "x86-configuration.k"
requires "x86-flag-checks-syntax.k"

/*@ This file defines the semantics of following 51 base instructions.
  - vmulpd_ymm_ymm_ymm, vmulps_ymm_ymm_ymm,
*/

module VMULPD-YMM-YMM-YMM
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS-SYNTAX

  // Unroll START
  rule <k>
    execinstr ( mulpd , %ymm1 ,  %ymm1 , DestR, .Typedoperands) =>
      execinstr( mulpd, DestR, 
      joinVector(operateOnVector(splitVector(MI, 64), splitVector(MI, 64), vfmul, 64)), 
      .Typedoperands)
  ...</k>
  <ymm1> MI </ymm1>
  rule <k>
    execinstr ( mulpd , %ymm2 ,  %ymm2 , DestR, .Typedoperands) =>
      execinstr( mulpd, DestR, 
      joinVector(operateOnVector(splitVector(MI, 64), splitVector(MI, 64), vfmul, 64)), 
      .Typedoperands)
  ...</k>
  <ymm2> MI </ymm2>
  rule <k>
    execinstr ( mulpd , %ymm3 ,  %ymm3 , DestR, .Typedoperands) =>
      execinstr( mulpd, DestR, 
      joinVector(operateOnVector(splitVector(MI, 64), splitVector(MI, 64), vfmul, 64)), 
      .Typedoperands)
  ...</k>
  <ymm3> MI </ymm3>
  // Unroll END

  // Unroll START
  rule <k>
    execinstr ( mulpd , %ymm1 ,  %ymm2 , DestR, .Typedoperands) =>
      execinstr( mulpd, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmul, 64)), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm2> MI2 </ymm2>
  rule <k>
    execinstr ( mulpd , %ymm1 ,  %ymm3 , DestR, .Typedoperands) =>
      execinstr( mulpd, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmul, 64)), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( mulpd , %ymm2 ,  %ymm1 , DestR, .Typedoperands) =>
      execinstr( mulpd, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmul, 64)), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( mulpd , %ymm2 ,  %ymm3 , DestR, .Typedoperands) =>
      execinstr( mulpd, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmul, 64)), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( mulpd , %ymm3 ,  %ymm1 , DestR, .Typedoperands) =>
      execinstr( mulpd, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmul, 64)), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( mulpd , %ymm3 ,  %ymm2 , DestR, .Typedoperands) =>
      execinstr( mulpd, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 64), splitVector(MI2, 64), vfmul, 64)), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm2> MI2 </ymm2>
  // Unroll END

  rule <k> execinstr(mulpd, DestR:Ymm, MIsrc:MInt, .Typedoperands ) => updateReg(MIsrc, DestR) ...</k>
endmodule

module VMULPS-YMM-YMM-YMM
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS-SYNTAX

  // Unroll START
  rule <k>
    execinstr ( mulps , %ymm1 ,  %ymm1 , DestR, .Typedoperands) =>
      execinstr( mulps, DestR, 
      joinVector(operateOnVector(splitVector(MI, 32), splitVector(MI, 32), vfmul, 32)), 
      .Typedoperands)
  ...</k>
  <ymm1> MI </ymm1>
  rule <k>
    execinstr ( mulps , %ymm2 ,  %ymm2 , DestR, .Typedoperands) =>
      execinstr( mulps, DestR, 
      joinVector(operateOnVector(splitVector(MI, 32), splitVector(MI, 32), vfmul, 32)), 
      .Typedoperands)
  ...</k>
  <ymm2> MI </ymm2>
  rule <k>
    execinstr ( mulps , %ymm3 ,  %ymm3 , DestR, .Typedoperands) =>
      execinstr( mulps, DestR, 
      joinVector(operateOnVector(splitVector(MI, 32), splitVector(MI, 32), vfmul, 32)), 
      .Typedoperands)
  ...</k>
  <ymm3> MI </ymm3>
  // Unroll END

  // Unroll START
  rule <k>
    execinstr ( mulps , %ymm1 ,  %ymm2 , DestR, .Typedoperands) =>
      execinstr( mulps, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmul, 32)), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm2> MI2 </ymm2>
  rule <k>
    execinstr ( mulps , %ymm1 ,  %ymm3 , DestR, .Typedoperands) =>
      execinstr( mulps, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmul, 32)), 
      .Typedoperands)
  ...</k>
  <ymm1> MI1 </ymm1>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( mulps , %ymm2 ,  %ymm1 , DestR, .Typedoperands) =>
      execinstr( mulps, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmul, 32)), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( mulps , %ymm2 ,  %ymm3 , DestR, .Typedoperands) =>
      execinstr( mulps, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmul, 32)), 
      .Typedoperands)
  ...</k>
  <ymm2> MI1 </ymm2>
  <ymm3> MI2 </ymm3>
  rule <k>
    execinstr ( mulps , %ymm3 ,  %ymm1 , DestR, .Typedoperands) =>
      execinstr( mulps, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmul, 32)), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm1> MI2 </ymm1>
  rule <k>
    execinstr ( mulps , %ymm3 ,  %ymm2 , DestR, .Typedoperands) =>
      execinstr( mulps, DestR, 
      joinVector(operateOnVector(splitVector(MI1, 32), splitVector(MI2, 32), vfmul, 32)), 
      .Typedoperands)
  ...</k>
  <ymm3> MI1 </ymm3>
  <ymm2> MI2 </ymm2>
  // Unroll END

  rule <k> execinstr(mulps, DestR:Ymm, MIsrc:MInt, .Typedoperands ) => updateReg(MIsrc, DestR) ...</k>
endmodule


module VMUL-SEMANTICS
  imports VMULPD-YMM-YMM-YMM
  imports VMULPS-YMM-YMM-YMM
endmodule
