// Autogenerated using stratification.
requires "x86-configuration.k"

module ANDL-R32-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (andl R1:R32, R2:R32,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )

 "SF" |-> (xorMInt(extractMInt(getParentValue(R1, RSMap), 32, 33), xorMInt(extractMInt(getParentValue(R2, RSMap), 32, 33), orMInt(extractMInt(getParentValue(R2, RSMap), 32, 33), extractMInt(getParentValue(R1, RSMap), 32, 33)))) )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ( (  ( countOnes(xorMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), xorMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), orMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R1, RSMap), 56, 64)))), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> (mi(1, 0) )

convToRegKeys(R2) |-> (concatenateMInt(mi(32, 0), xorMInt(extractMInt(getParentValue(R1, RSMap), 32, 64), xorMInt(extractMInt(getParentValue(R2, RSMap), 32, 64), orMInt(extractMInt(getParentValue(R2, RSMap), 32, 64), extractMInt(getParentValue(R1, RSMap), 32, 64))))) )

 "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 32, 64), xorMInt(extractMInt(getParentValue(R2, RSMap), 32, 64), orMInt(extractMInt(getParentValue(R2, RSMap), 32, 64), extractMInt(getParentValue(R1, RSMap), 32, 64)))), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module ANDL-R32-R32-SEMANTICS
  imports ANDL-R32-R32
endmodule
/*
TargetInstr:
andl %ecx, %ebx
RWSet:
maybe read:{ %ecx %ebx }
must read:{ %ecx %ebx }
maybe write:{ %rbx %cf %pf %zf %sf %of }
must write:{ %rbx %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:andnl %ecx, %ebx, %r13d  #  1     0    5      OPC=andnl_r32_r32_r32
circuit:movzbl %bh, %ebx         #  2     0x5  3      OPC=movzbl_r32_rh
circuit:xorl %r13d, %ecx         #  3     0x8  3      OPC=xorl_r32_r32
circuit:xchgl %ebx, %ecx         #  4     0xb  2      OPC=xchgl_r32_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

andl %ecx, %ebx

  maybe read:      { %ecx %ebx }
  must read:       { %ecx %ebx }
  maybe write:     { %rbx %cf %pf %zf %sf %of }
  must write:      { %rbx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Circuits:

%rbx   : (concat <0x0|32> (^ (^ (| <%rcx|64>[31:0] <%rbx|64>[31:0]) <%rbx|64>[31:0]) <%rcx|64>[31:0]))

%cf    : FALSE
%pf    : (not (xor (xor (xor (xor (xor (xor (xor (== (^ (^ (| <%rcx|64>[0:0] <%rbx|64>[0:0]) <%rbx|64>[0:0]) <%rcx|64>[0:0]) <0x1|1>) (== (^ (^ (| <%rcx|64>[1:1] <%rbx|64>[1:1]) <%rbx|64>[1:1]) <%rcx|64>[1:1]) <0x1|1>)) (== (^ (^ (| <%rcx|64>[2:2] <%rbx|64>[2:2]) <%rbx|64>[2:2]) <%rcx|64>[2:2]) <0x1|1>)) (== (^ (^ (| <%rcx|64>[3:3] <%rbx|64>[3:3]) <%rbx|64>[3:3]) <%rcx|64>[3:3]) <0x1|1>)) (== (^ (^ (| <%rcx|64>[4:4] <%rbx|64>[4:4]) <%rbx|64>[4:4]) <%rcx|64>[4:4]) <0x1|1>)) (== (^ (^ (| <%rcx|64>[5:5] <%rbx|64>[5:5]) <%rbx|64>[5:5]) <%rcx|64>[5:5]) <0x1|1>)) (== (^ (^ (| <%rcx|64>[6:6] <%rbx|64>[6:6]) <%rbx|64>[6:6]) <%rcx|64>[6:6]) <0x1|1>)) (== (^ (^ (| <%rcx|64>[7:7] <%rbx|64>[7:7]) <%rbx|64>[7:7]) <%rcx|64>[7:7]) <0x1|1>)))
%zf    : (== (^ (^ (| <%rcx|64>[31:0] <%rbx|64>[31:0]) <%rbx|64>[31:0]) <%rcx|64>[31:0]) <0x0|32>)
%sf    : (== (^ (^ (| <%rcx|64>[31:31] <%rbx|64>[31:31]) <%rbx|64>[31:31]) <%rcx|64>[31:31]) <0x1|1>)
%of    : FALSE

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/