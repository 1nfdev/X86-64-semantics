// Autogenerated using stratification.
requires "x86-configuration.k"

module BLSMSKL-R32-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (blsmskl R1:R32, R2:R32,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 17, 25)), concatenateMInt(mi(1, 0), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 17, 25))), 0, 1) )

 "SF" |-> (xorMInt(extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 33, 34), extractMInt(getParentValue(R1, RSMap), 32, 33)) )

 "AF" |-> (undef)

 "PF" |-> (undef)

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 17, 18), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 17, 18))  andBool   notBool  ( eqMInt(extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 17, 18), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 17, 25)), concatenateMInt(mi(1, 0), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 17, 25))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (xorMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 33, 65)), concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))) )

 "ZF" |-> ((#ifMInt (eqMInt(xorMInt(extractMInt(addMInt(mi(65, 18446744073709551615), concatenateMInt(mi(33, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 33, 65), extractMInt(getParentValue(R1, RSMap), 32, 64)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module BLSMSKL-R32-R32-SEMANTICS
  imports BLSMSKL-R32-R32
endmodule
/*
TargetInstr:
blsmskl %ecx, %ebx
RWSet:
maybe read:{ %ecx %ebx }
must read:{ %ecx %ebx }
maybe write:{ %rbx %cf %zf %sf %of }
must write:{ %rbx %cf %zf %sf %of }
maybe undef:{ %pf %af }
must undef:{ %pf %af }
required flags:{ bmi1 }

Circuit:
circuit:movl %ecx, %ebx                   #  1     0    2      OPC=movl_r32_r32
circuit:decq %rbx                         #  2     0x2  3      OPC=decq_r64
circuit:callq .move_byte_5_of_rbx_to_r9b  #  3     0x5  5      OPC=callq_label
circuit:xorl %ecx, %ebx                   #  4     0xa  2      OPC=xorl_r32_r32
circuit:rclb $0x1, %r9b                   #  5     0xc  3      OPC=rclb_r8_one
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

blsmskl %ecx, %ebx

  maybe read:      { %ecx %ebx }
  must read:       { %ecx %ebx }
  maybe write:     { %rbx %cf %zf %sf %of }
  must write:      { %rbx %cf %zf %sf %of }
  maybe undef:     { %pf %af }
  must undef:      { %pf %af }
  required flags:  { bmi1 }

Circuits:

%rbx   : (^ (concat <0x0|32> <%rcx|64>[31:0]) (concat <0x0|32> (plus (concat <0x0|1> <0xffffffffffffffff|64>) (concat <0x0|1> (concat <0x0|32> <%rcx|64>[31:0])))[31:0]))

%cf    : (== (plus (concat <0x0|1> (plus (concat <0x0|1> <0xffffffffffffffff|64>) (concat <0x0|1> (concat <0x0|32> <%rcx|64>[31:0])))[47:40]) (concat <0x0|1> (plus (concat <0x0|1> <0xffffffffffffffff|64>) (concat <0x0|1> (concat <0x0|32> <%rcx|64>[31:0])))[47:40]))[8:8] <0x1|1>)
%zf    : (== (^ <%rcx|64>[31:0] (plus (concat <0x0|1> <0xffffffffffffffff|64>) (concat <0x0|1> (concat <0x0|32> <%rcx|64>[31:0])))[31:0]) <0x0|32>)
%sf    : (== (^ <%rcx|64>[31:31] (plus (concat <0x0|1> <0xffffffffffffffff|64>) (concat <0x0|1> (concat <0x0|32> <%rcx|64>[31:0])))[31:31]) <0x1|1>)
%of    : (and (== (== (plus (concat <0x0|1> <0xffffffffffffffff|64>) (concat <0x0|1> (concat <0x0|32> <%rcx|64>[31:0])))[47:47] <0x1|1>) (== (plus (concat <0x0|1> <0xffffffffffffffff|64>) (concat <0x0|1> (concat <0x0|32> <%rcx|64>[31:0])))[47:47] <0x1|1>)) (not (== (== (plus (concat <0x0|1> <0xffffffffffffffff|64>) (concat <0x0|1> (concat <0x0|32> <%rcx|64>[31:0])))[47:47] <0x1|1>) (== (plus (concat <0x0|1> (plus (concat <0x0|1> <0xffffffffffffffff|64>) (concat <0x0|1> (concat <0x0|32> <%rcx|64>[31:0])))[47:40]) (concat <0x0|1> (plus (concat <0x0|1> <0xffffffffffffffff|64>) (concat <0x0|1> (concat <0x0|32> <%rcx|64>[31:0])))[47:40]))[7:7] <0x1|1>))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/