// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVGEW-R16-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovgew R1:R16, R2:R16,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ((#ifMInt (eqMInt(concatenateMInt(mi(56, 0), xorMInt(xorMInt(concatenateMInt(mi(7, 0), getFlag("SF", RSMap)), concatenateMInt(mi(7, 0), getFlag("OF", RSMap))), mi(8, 1))), mi(64, 0)) ) #then ( getParentValue(R2, RSMap) ) #else ( concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), extractMInt(getParentValue(R1, RSMap), 48, 64)) ) #fi)  )


)

    </regstate>
endmodule

module CMOVGEW-R16-R16-SEMANTICS
  imports CMOVGEW-R16-R16
endmodule
/*
TargetInstr:
cmovgew %cx, %bx
RWSet:
maybe read:{ %cx %sf %of }
must read:{ %cx %sf %of }
maybe write:{ %bx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:setge %bpl         #  1     0     4      OPC=setge_r8
circuit:movzbl %bpl, %r8d  #  2     0x4   4      OPC=movzbl_r32_r8
circuit:popcntq %r8, %rax  #  3     0x8   5      OPC=popcntq_r64_r64
circuit:cmovnew %cx, %bx   #  4     0xd   4      OPC=cmovnew_r16_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovgew %cx, %bx

  maybe read:      { %cx %sf %of }
  must read:       { %cx %sf %of }
  maybe write:     { %bx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

Circuits:

%rbx   : (concat <%rbx|64>[63:16] (if (== (concat <0x0|56> (^ <0x1|8> (^ (if <%of> then <0x1|8> else <0x0|8>) (if <%sf> then <0x1|8> else <0x0|8>)))) <0x0|64>) then <%rbx|64>[15:0] else <%rcx|64>[15:0]))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/