// Autogenerated using stratification.
requires "x86-configuration.k"

module CMPB-RH-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmpb R1:Rh, R2:Rh,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), mi(8, 255)))), mi(9, 1)), 0, 1)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), mi(8, 255)))), mi(9, 1)), 0, 1)), mi(17, 65535)), 9, 17))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), mi(8, 255)))), mi(9, 1)), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), xorMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), mi(8, 255))), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), mi(8, 255)))), mi(9, 1)), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), mi(8, 255)))), mi(9, 1)), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), xorMInt(extractMInt(getParentValue(R1, RSMap), 48, 49), mi(1, 1)))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), mi(8, 255)))), mi(9, 1)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 56)), concatenateMInt(mi(1, 0), xorMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), mi(8, 255)))), mi(9, 1)), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module CMPB-RH-RH-SEMANTICS
  imports CMPB-RH-RH
endmodule
/*
TargetInstr:
cmpb %bh, %ah
RWSet:
maybe read:{ %ah %bh }
must read:{ %ah %bh }
maybe write:{ %cf %pf %af %zf %sf %of }
must write:{ %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:subb %bh, %ah  #  1     0    2      OPC=subb_rh_rh
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmpb %bh, %ah

  maybe read:      { %ah %bh }
  must read:       { %ah %bh }
  maybe write:     { %cf %pf %af %zf %sf %of }
  must write:      { %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%cf    : (== (plus (if (== (plus (plus (concat <0x0|1> <%rax|64>[15:8]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rbx|64>[15:8])))[8:8] <0x1|1>) then <0x0|9> else <0xff|9>) (if (== (plus (plus (concat <0x0|1> <%rax|64>[15:8]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rbx|64>[15:8])))[8:8] <0x1|1>) then <0x0|9> else <0xff|9>))[8:8] <0x1|1>)
%pf    : (not (xor (xor (xor (xor (xor (xor (xor (== (plus (plus (concat <0x0|1> <%rax|64>[15:8]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rbx|64>[15:8])))[0:0] <0x1|1>) (== (plus (plus (concat <0x0|1> <%rax|64>[15:8]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rbx|64>[15:8])))[1:1] <0x1|1>)) (== (plus (plus (concat <0x0|1> <%rax|64>[15:8]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rbx|64>[15:8])))[2:2] <0x1|1>)) (== (plus (plus (concat <0x0|1> <%rax|64>[15:8]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rbx|64>[15:8])))[3:3] <0x1|1>)) (== (plus (plus (concat <0x0|1> <%rax|64>[15:8]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rbx|64>[15:8])))[4:4] <0x1|1>)) (== (plus (plus (concat <0x0|1> <%rax|64>[15:8]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rbx|64>[15:8])))[5:5] <0x1|1>)) (== (plus (plus (concat <0x0|1> <%rax|64>[15:8]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rbx|64>[15:8])))[6:6] <0x1|1>)) (== (plus (plus (concat <0x0|1> <%rax|64>[15:8]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rbx|64>[15:8])))[7:7] <0x1|1>)))
%af    : (== (plus (concat <0x0|1> <%rax|64>[11:8]) (concat <0x0|1> (^ <0xf|4> <%rbx|64>[11:8])))[4:4] <0x1|1>)
%zf    : (== (plus (plus (concat <0x0|1> <%rax|64>[15:8]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rbx|64>[15:8])))[7:0] <0x0|8>)
%sf    : (== (plus (plus (concat <0x0|1> <%rax|64>[15:8]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rbx|64>[15:8])))[7:7] <0x1|1>)
%of    : (and (== (== <%rax|64>[15:15] <0x1|1>) (== (^ <0x1|1> <%rbx|64>[15:15]) <0x1|1>)) (not (== (== <%rax|64>[15:15] <0x1|1>) (== (plus (plus (concat <0x0|1> <%rax|64>[15:8]) <0x1|9>) (concat <0x0|1> (^ <0xff|8> <%rbx|64>[15:8])))[7:7] <0x1|1>))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/