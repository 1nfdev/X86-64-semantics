// Autogenerated using stratification.
requires "x86-configuration.k"

module ORL-R32-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (orl R1:R32, R2:R32,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )

 "SF" |-> (orMInt(extractMInt(getParentValue(R1, RSMap), 32, 33), extractMInt(getParentValue(R2, RSMap), 32, 33)) )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ( (  ( countOnes(orMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> (mi(1, 0) )

convToRegKeys(R2) |-> (concatenateMInt(mi(32, 0), orMInt(extractMInt(getParentValue(R1, RSMap), 32, 64), extractMInt(getParentValue(R2, RSMap), 32, 64))) )

 "ZF" |-> ((#ifMInt (eqMInt(orMInt(extractMInt(getParentValue(R1, RSMap), 32, 64), extractMInt(getParentValue(R2, RSMap), 32, 64)), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module ORL-R32-R32-SEMANTICS
  imports ORL-R32-R32
endmodule
/*
TargetInstr:
orl %ecx, %ebx
RWSet:
maybe read:{ %ecx %ebx }
must read:{ %ecx %ebx }
maybe write:{ %rbx %cf %pf %zf %sf %of }
must write:{ %rbx %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:movl %ebx, %r8d         #  1     0     3      OPC=movl_r32_r32
circuit:movswq %cx, %r11        #  2     0x3   4      OPC=movswq_r64_r16
circuit:xaddl %r11d, %ecx       #  3     0x7   4      OPC=xaddl_r32_r32
circuit:orq %r11, %r8           #  4     0xb   3      OPC=orq_r64_r64
circuit:xchgl %ebx, %r8d        #  5     0xe   3      OPC=xchgl_r32_r32
circuit:callq .set_szp_for_ebx  #  6     0x11  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

orl %ecx, %ebx

  maybe read:      { %ecx %ebx }
  must read:       { %ecx %ebx }
  maybe write:     { %rbx %cf %pf %zf %sf %of }
  must write:      { %rbx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Circuits:

%rbx   : (concat <0x0|32> (| <%rbx|64>[31:0] <%rcx|64>[31:0]))

%cf    : FALSE
%pf    : (not (xor (xor (xor (xor (xor (xor (xor (== (| <%rbx|64>[0:0] <%rcx|64>[0:0]) <0x1|1>) (== (| <%rbx|64>[1:1] <%rcx|64>[1:1]) <0x1|1>)) (== (| <%rbx|64>[2:2] <%rcx|64>[2:2]) <0x1|1>)) (== (| <%rbx|64>[3:3] <%rcx|64>[3:3]) <0x1|1>)) (== (| <%rbx|64>[4:4] <%rcx|64>[4:4]) <0x1|1>)) (== (| <%rbx|64>[5:5] <%rcx|64>[5:5]) <0x1|1>)) (== (| <%rbx|64>[6:6] <%rcx|64>[6:6]) <0x1|1>)) (== (| <%rbx|64>[7:7] <%rcx|64>[7:7]) <0x1|1>)))
%zf    : (== (| <%rbx|64>[31:0] <%rcx|64>[31:0]) <0x0|32>)
%sf    : (== (| <%rbx|64>[31:31] <%rcx|64>[31:31]) <0x1|1>)
%of    : FALSE

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/