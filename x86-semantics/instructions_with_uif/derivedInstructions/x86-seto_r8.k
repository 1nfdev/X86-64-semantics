// Autogenerated using stratification.
requires "x86-configuration.k"

module SETO-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (seto R1:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), concatenateMInt(mi(7, 0), getFlag("OF", RSMap))) )


)

    </regstate>
endmodule

module SETO-R8-SEMANTICS
  imports SETO-R8
endmodule
/*
TargetInstr:
seto %bl
RWSet:
maybe read:{ %of }
must read:{ %of }
maybe write:{ %bl }
must write:{ %bl }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .read_of_into_rbx           #  1     0    5      OPC=callq_label
circuit:callq .move_byte_6_of_rbx_to_r9b  #  2     0x5  5      OPC=callq_label
circuit:callq .move_r9b_to_byte_6_of_rbx  #  3     0xa  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

seto %bl

  maybe read:      { %of }
  must read:       { %of }
  maybe write:     { %bl }
  must write:      { %bl }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (concat <%rbx|64>[63:8] (if <%of> then <0x1|8> else <0x0|8>))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/