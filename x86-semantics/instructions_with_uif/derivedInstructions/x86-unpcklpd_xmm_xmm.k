// Autogenerated using stratification.
requires "x86-configuration.k"

module UNPCKLPD-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (unpcklpd R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 192, 256), extractMInt(getParentValue(R2, RSMap), 192, 256))) )


)

    </regstate>
endmodule

module UNPCKLPD-XMM-XMM-SEMANTICS
  imports UNPCKLPD-XMM-XMM
endmodule
/*
TargetInstr:
unpcklpd %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 }
must read:{ %xmm1 %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse2 }

Circuit:
circuit:callq .move_128_64_xmm1_xmm10_xmm11  #  1     0    5      OPC=callq_label
circuit:vmovdqu %xmm2, %xmm11                #  2     0x5  4      OPC=vmovdqu_xmm_xmm
circuit:callq .move_64_128_xmm10_xmm11_xmm1  #  3     0x9  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

unpcklpd %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 }
  must read:       { %xmm1 %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse2 }

Circuits:

%ymm1  : (concat <%ymm1|256>[255:128] (concat <%ymm2|256>[63:0] <%ymm1|256>[63:0]))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/