// Autogenerated using stratification.
requires "x86-configuration.k"

module VFMADDSUB213PD-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vfmaddsub213pd R1:Xmm, R2:Xmm, R3:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt( vfmsub132_double ( extractMInt(getParentValue(R2, RSMap), 128, 192), vfnmsub132_double ( concatenateMInt( maxcmp_single ( xorMInt(orMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 128, 160), mi(32, 0)), extractMInt(getParentValue(R1, RSMap), 128, 160)), xorMInt(extractMInt(getParentValue(R1, RSMap), 128, 160), mi(32, 0))), mi(32, 0) ) ,  maxcmp_single ( xorMInt(orMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 160, 192), mi(32, 0)), extractMInt(getParentValue(R1, RSMap), 160, 192)), xorMInt(extractMInt(getParentValue(R1, RSMap), 160, 192), mi(32, 0))), mi(32, 0) ) ), extractMInt(getParentValue(R1, RSMap), 128, 192), mi(64, 0) ), extractMInt(getParentValue(R3, RSMap), 128, 192) ) ,  vfmsub132_double ( extractMInt(getParentValue(R2, RSMap), 192, 256), vfnmsub132_double ( vfnmsub132_double ( concatenateMInt( maxcmp_single ( xorMInt(orMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 192, 224), mi(32, 0)), extractMInt(getParentValue(R1, RSMap), 192, 224)), xorMInt(extractMInt(getParentValue(R1, RSMap), 192, 224), mi(32, 0))), extractMInt(getParentValue(R3, RSMap), 192, 224) ) ,  maxcmp_single ( xorMInt(orMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 224, 256), mi(32, 0)), extractMInt(getParentValue(R1, RSMap), 224, 256)), xorMInt(extractMInt(getParentValue(R1, RSMap), 224, 256), mi(32, 0))), extractMInt(getParentValue(R3, RSMap), 224, 256) ) ), extractMInt(getParentValue(R1, RSMap), 192, 256), mi(64, 0) ), vfnmsub132_double ( concatenateMInt( maxcmp_single ( xorMInt(orMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 192, 224), mi(32, 0)), extractMInt(getParentValue(R1, RSMap), 192, 224)), xorMInt(extractMInt(getParentValue(R1, RSMap), 192, 224), mi(32, 0))), extractMInt(getParentValue(R3, RSMap), 192, 224) ) ,  maxcmp_single ( xorMInt(orMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 224, 256), mi(32, 0)), extractMInt(getParentValue(R1, RSMap), 224, 256)), xorMInt(extractMInt(getParentValue(R1, RSMap), 224, 256), mi(32, 0))), extractMInt(getParentValue(R3, RSMap), 224, 256) ) ), extractMInt(getParentValue(R1, RSMap), 192, 256), mi(64, 0) ), concatenateMInt(mi(32, 0), extractMInt( vfnmsub132_double ( concatenateMInt( maxcmp_single ( xorMInt(orMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 128, 160), mi(32, 0)), extractMInt(getParentValue(R1, RSMap), 128, 160)), xorMInt(extractMInt(getParentValue(R1, RSMap), 128, 160), mi(32, 0))), mi(32, 0) ) ,  maxcmp_single ( xorMInt(orMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 160, 192), mi(32, 0)), extractMInt(getParentValue(R1, RSMap), 160, 192)), xorMInt(extractMInt(getParentValue(R1, RSMap), 160, 192), mi(32, 0))), mi(32, 0) ) ), extractMInt(getParentValue(R1, RSMap), 128, 192), mi(64, 0) ) , 0, 32)) ), extractMInt(getParentValue(R3, RSMap), 192, 256) ) )) )


)

    </regstate>
endmodule

module VFMADDSUB213PD-XMM-XMM-XMM-SEMANTICS
  imports VFMADDSUB213PD-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vfmaddsub213pd %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 %xmm3 }
must read:{ %xmm1 %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ fma }

Circuit:
circuit:vfmaddsub231pd %xmm1, %xmm2, %xmm3  #  1     0     5      OPC=vfmaddsub231pd_xmm_xmm_xmm
circuit:callq .move_128_064_xmm3_r12_r13    #  2     0x5   5      OPC=callq_label
circuit:vaddps %xmm2, %xmm3, %xmm1          #  3     0xa   4      OPC=vaddps_xmm_xmm_xmm
circuit:callq .move_064_128_r12_r13_xmm1    #  4     0xe   5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vfmaddsub213pd %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 %xmm3 }
  must read:       { %xmm1 %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { fma }

Circuits:

%ymm1  : (concat <0x0|128> (concat vfmsub132_double(<%ymm2|256>[127:64], vnfmsub132_double((concat (if (== maxcmp_single(<0x0|32>, (^ (^ <0x0|32> (| <%ymm3|256>[127:96] <0x0|32>)) (| <%ymm3|256>[127:96] (^ <0x0|32> (| <%ymm3|256>[127:96] <0x0|32>))))) <0x1|1>) then <0x0|32> else (^ (^ <0x0|32> (| <%ymm3|256>[127:96] <0x0|32>)) (| <%ymm3|256>[127:96] (^ <0x0|32> (| <%ymm3|256>[127:96] <0x0|32>))))) (if (== maxcmp_single(<0x0|32>, (^ (^ <0x0|32> (| <%ymm3|256>[95:64] <0x0|32>)) (| <%ymm3|256>[95:64] (^ <0x0|32> (| <%ymm3|256>[95:64] <0x0|32>))))) <0x1|1>) then <0x0|32> else (^ (^ <0x0|32> (| <%ymm3|256>[95:64] <0x0|32>)) (| <%ymm3|256>[95:64] (^ <0x0|32> (| <%ymm3|256>[95:64] <0x0|32>)))))), <%ymm3|256>[127:64], <0x0|64>), <%ymm1|256>[127:64]) vfmsub132_double(<%ymm2|256>[63:0], vnfmsub132_double(vnfmsub132_double((concat (if (== maxcmp_single(<%ymm1|256>[63:32], (^ (^ <0x0|32> (| <%ymm3|256>[63:32] <0x0|32>)) (| <%ymm3|256>[63:32] (^ <0x0|32> (| <%ymm3|256>[63:32] <0x0|32>))))) <0x1|1>) then <%ymm1|256>[63:32] else (^ (^ <0x0|32> (| <%ymm3|256>[63:32] <0x0|32>)) (| <%ymm3|256>[63:32] (^ <0x0|32> (| <%ymm3|256>[63:32] <0x0|32>))))) (if (== maxcmp_single(<%ymm1|256>[31:0], (^ (^ <0x0|32> (| <%ymm3|256>[31:0] <0x0|32>)) (| <%ymm3|256>[31:0] (^ <0x0|32> (| <%ymm3|256>[31:0] <0x0|32>))))) <0x1|1>) then <%ymm1|256>[31:0] else (^ (^ <0x0|32> (| <%ymm3|256>[31:0] <0x0|32>)) (| <%ymm3|256>[31:0] (^ <0x0|32> (| <%ymm3|256>[31:0] <0x0|32>)))))), <%ymm3|256>[63:0], <0x0|64>), vnfmsub132_double((concat (if (== maxcmp_single(<%ymm1|256>[63:32], (^ (^ <0x0|32> (| <%ymm3|256>[63:32] <0x0|32>)) (| <%ymm3|256>[63:32] (^ <0x0|32> (| <%ymm3|256>[63:32] <0x0|32>))))) <0x1|1>) then <%ymm1|256>[63:32] else (^ (^ <0x0|32> (| <%ymm3|256>[63:32] <0x0|32>)) (| <%ymm3|256>[63:32] (^ <0x0|32> (| <%ymm3|256>[63:32] <0x0|32>))))) (if (== maxcmp_single(<%ymm1|256>[31:0], (^ (^ <0x0|32> (| <%ymm3|256>[31:0] <0x0|32>)) (| <%ymm3|256>[31:0] (^ <0x0|32> (| <%ymm3|256>[31:0] <0x0|32>))))) <0x1|1>) then <%ymm1|256>[31:0] else (^ (^ <0x0|32> (| <%ymm3|256>[31:0] <0x0|32>)) (| <%ymm3|256>[31:0] (^ <0x0|32> (| <%ymm3|256>[31:0] <0x0|32>)))))), <%ymm3|256>[63:0], <0x0|64>), (concat <0x0|32> vnfmsub132_double((concat (if (== maxcmp_single(<0x0|32>, (^ (^ <0x0|32> (| <%ymm3|256>[127:96] <0x0|32>)) (| <%ymm3|256>[127:96] (^ <0x0|32> (| <%ymm3|256>[127:96] <0x0|32>))))) <0x1|1>) then <0x0|32> else (^ (^ <0x0|32> (| <%ymm3|256>[127:96] <0x0|32>)) (| <%ymm3|256>[127:96] (^ <0x0|32> (| <%ymm3|256>[127:96] <0x0|32>))))) (if (== maxcmp_single(<0x0|32>, (^ (^ <0x0|32> (| <%ymm3|256>[95:64] <0x0|32>)) (| <%ymm3|256>[95:64] (^ <0x0|32> (| <%ymm3|256>[95:64] <0x0|32>))))) <0x1|1>) then <0x0|32> else (^ (^ <0x0|32> (| <%ymm3|256>[95:64] <0x0|32>)) (| <%ymm3|256>[95:64] (^ <0x0|32> (| <%ymm3|256>[95:64] <0x0|32>)))))), <%ymm3|256>[127:64], <0x0|64>)[63:32])), <%ymm1|256>[63:0])))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/