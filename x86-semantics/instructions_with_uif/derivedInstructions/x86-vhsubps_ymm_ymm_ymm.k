// Autogenerated using stratification.
requires "x86-configuration.k"

module VHSUBPS-YMM-YMM-YMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vhsubps R1:Ymm, R2:Ymm, R3:Ymm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt( sub_single ( extractMInt(getParentValue(R1, RSMap), 0, 32), extractMInt(getParentValue(R1, RSMap), 32, 64) ) , concatenateMInt( sub_single ( extractMInt(getParentValue(R1, RSMap), 64, 96), extractMInt(getParentValue(R1, RSMap), 96, 128) ) , concatenateMInt( sub_single ( extractMInt(getParentValue(R2, RSMap), 0, 32), extractMInt(getParentValue(R2, RSMap), 32, 64) ) , concatenateMInt( sub_single ( extractMInt(getParentValue(R2, RSMap), 64, 96), extractMInt(getParentValue(R2, RSMap), 96, 128) ) , concatenateMInt( sub_single ( extractMInt(getParentValue(R1, RSMap), 128, 160), extractMInt(getParentValue(R1, RSMap), 160, 192) ) , concatenateMInt( sub_single ( extractMInt(getParentValue(R1, RSMap), 192, 224), extractMInt(getParentValue(R1, RSMap), 224, 256) ) , concatenateMInt( sub_single ( extractMInt(getParentValue(R2, RSMap), 128, 160), extractMInt(getParentValue(R2, RSMap), 160, 192) ) ,  sub_single ( extractMInt(getParentValue(R2, RSMap), 192, 224), extractMInt(getParentValue(R2, RSMap), 224, 256) ) ))))))) )


)

    </regstate>
endmodule

module VHSUBPS-YMM-YMM-YMM-SEMANTICS
  imports VHSUBPS-YMM-YMM-YMM
endmodule
/*
TargetInstr:
vhsubps %ymm3, %ymm2, %ymm1
RWSet:
maybe read:{ %ymm2 %ymm3 }
must read:{ %ymm2 %ymm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:vmovddup %ymm2, %ymm12           #  1     0     4      OPC=vmovddup_ymm_ymm
circuit:vpunpckhdq %ymm2, %ymm12, %ymm0  #  2     0x4   4      OPC=vpunpckhdq_ymm_ymm_ymm
circuit:vunpcklps %ymm3, %ymm0, %ymm6    #  3     0x8   4      OPC=vunpcklps_ymm_ymm_ymm
circuit:vpunpckhdq %ymm3, %ymm6, %ymm1   #  4     0xc   4      OPC=vpunpckhdq_ymm_ymm_ymm
circuit:vunpcklps %ymm1, %ymm6, %ymm14   #  5     0x10  4      OPC=vunpcklps_ymm_ymm_ymm
circuit:vpunpckhqdq %ymm1, %ymm0, %ymm5  #  6     0x14  4      OPC=vpunpckhqdq_ymm_ymm_ymm
circuit:vsubps %ymm5, %ymm14, %ymm1      #  7     0x18  4      OPC=vsubps_ymm_ymm_ymm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vhsubps %ymm3, %ymm2, %ymm1

  maybe read:      { %ymm2 %ymm3 }
  must read:       { %ymm2 %ymm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%ymm1  : (concat sub_single(<%ymm3|256>[223:192], <%ymm3|256>[255:224]) (concat sub_single(<%ymm3|256>[159:128], <%ymm3|256>[191:160]) (concat sub_single(<%ymm2|256>[223:192], <%ymm2|256>[255:224]) (concat sub_single(<%ymm2|256>[159:128], <%ymm2|256>[191:160]) (concat sub_single(<%ymm3|256>[95:64], <%ymm3|256>[127:96]) (concat sub_single(<%ymm3|256>[31:0], <%ymm3|256>[63:32]) (concat sub_single(<%ymm2|256>[95:64], <%ymm2|256>[127:96]) sub_single(<%ymm2|256>[31:0], <%ymm2|256>[63:32]))))))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/