// Autogenerated using stratification.
requires "x86-configuration.k"

module VPMOVSXDQ-YMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vpmovsxdq R1:Xmm, R2:Ymm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(concatenateMInt(mi(64, svalueMInt(extractMInt(getParentValue(R1, RSMap), 128, 160))), mi(64, svalueMInt(extractMInt(getParentValue(R1, RSMap), 160, 192)))), concatenateMInt(mi(64, svalueMInt(extractMInt(getParentValue(R1, RSMap), 192, 224))), mi(64, svalueMInt(extractMInt(getParentValue(R1, RSMap), 224, 256))))) )


)

    </regstate>
endmodule

module VPMOVSXDQ-YMM-XMM-SEMANTICS
  imports VPMOVSXDQ-YMM-XMM
endmodule
/*
TargetInstr:
vpmovsxdq %xmm2, %ymm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx2 }

Circuit:
circuit:callq .move_128_032_xmm2_xmm4_xmm5_xmm6_xmm7  #  1     0     5      OPC=callq_label
circuit:vpunpckldq %xmm7, %xmm6, %xmm3                #  2     0x5   4      OPC=vpunpckldq_xmm_xmm_xmm
circuit:pmovsxdq %xmm3, %xmm9                         #  3     0x9   6      OPC=pmovsxdq_xmm_xmm
circuit:pmovsxdq %xmm2, %xmm8                         #  4     0xf   6      OPC=pmovsxdq_xmm_xmm
circuit:callq .move_128_256_xmm8_xmm9_ymm1            #  5     0x15  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vpmovsxdq %xmm2, %ymm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx2 }

Circuits:

%ymm1  : (concat (concat (sign-extend-64 <%ymm2|256>[127:96]) (sign-extend-64 <%ymm2|256>[95:64])) (concat (sign-extend-64 <%ymm2|256>[63:32]) (sign-extend-64 <%ymm2|256>[31:0])))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/