-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(orq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xorq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_704:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_710:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_703:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_706:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_705:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_707:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I9_711:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _73_714:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _79_720:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _72_713:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _75_716:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _77_718:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _74_715:K@SORT-K String@STRING-SYNTAX(#""RDX"") |-> _78_719:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _71_712:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _76_717:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _80_721:K@SORT-K   ),, <regstatequeue>(_81_722:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(orq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xorq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_704:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_710:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_703:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_706:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_705:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_707:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I9_711:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(orq(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, typeoperandlist(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)),, .List{"typeoperandlist"}(.KList@BASIC-K))))))), execinstr(__(xorq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_704:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_710:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_703:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_706:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_705:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_707:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I9_711:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""OF"")), updateZeroFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))), updateSignFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)),, %rdx(.KList@BASIC-K)), execinstr(__(xorq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_704:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_710:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_703:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_706:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_705:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_707:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I9_711:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))), updateSignFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)),, %rdx(.KList@BASIC-K)), execinstr(__(xorq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_704:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_710:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_703:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_706:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_707:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I9_711:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)),, %rdx(.KList@BASIC-K)), execinstr(__(xorq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_704:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_710:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_703:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_706:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_707:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)),, %rdx(.KList@BASIC-K)), execinstr(__(xorq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_704:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_703:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_706:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_707:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)),, %rdx(.KList@BASIC-K)), execinstr(__(xorq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_704:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_706:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_707:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)),, %rdx(.KList@BASIC-K)), execinstr(__(xorq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_706:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_707:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)),, %rdx(.KList@BASIC-K)), execinstr(__(xorq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_707:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(xorq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_707:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(xorq(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, typeoperandlist(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)),, typeoperandlist(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))),, .List{"typeoperandlist"}(.KList@BASIC-K))))))), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_707:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""OF"")), updateZeroFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)))), updateSignFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)))), setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))),, %rdx(.KList@BASIC-K)), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_707:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)))), updateSignFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)))), setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))),, %rdx(.KList@BASIC-K)), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_707:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)))), setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))),, %rdx(.KList@BASIC-K)), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_707:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)))), setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))),, %rdx(.KList@BASIC-K)), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_707:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)))), setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))),, %rdx(.KList@BASIC-K)), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_707:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)))), setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))),, %rdx(.KList@BASIC-K)), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_707:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))),, %rdx(.KList@BASIC-K)), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_707:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rdx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_707:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_707:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_708:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I7_709:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for _&Int_
[Warning] Critical: missing SMTLib translation for countOnes
[Warning] Critical: missing SMTLib translation for mi
[Warning] Critical: missing SMTLib translation for svalueMInt
46.62user 1.02system 0:11.20elapsed 425%CPU (0avgtext+0avgdata 1144248maxresident)k
0inputs+3720outputs (0major+219082minor)pagefaults 0swaps
