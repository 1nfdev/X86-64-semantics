-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(saveRegister(%rbx(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), execinstr(__(setp(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(decb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(cmovzw(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_729:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> _79_738:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _73_732:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _75_734:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _78_737:K@SORT-K String@STRING-SYNTAX(#""SPAD1"") |-> _72_731:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _74_733:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _71_730:K@SORT-K String@STRING-SYNTAX(#""RAX"") |-> _76_735:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _77_736:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _80_739:K@SORT-K   ),, <regstatequeue>(_81_740:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(saveRegister(%rbx(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), execinstr(__(setp(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(decb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(cmovzw(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_729:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(setp(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(decb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(cmovzw(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_729:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(decb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(cmovzw(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_729:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(cmovzw(.KList@BASIC-K),, typeoperandlist(%cx(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"8'255")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_729:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"8'255")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_729:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_729:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))),, mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(#ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_729:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))),, mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"8'255")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_729:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_729:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))),, mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"8'255")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_729:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_729:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))),, mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"8'255")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_729:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_729:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))),, mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"8'255")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_729:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_729:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))),, mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"8'255")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_729:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, concatenateMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0"))) String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_729:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))),, mi(Int@INT-SYNTAX(#"64"),, ?I2_728:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"8'0"),, mi(Int@INT-SYNTAX(#"1"),, ?I1_727:Int@INT-SYNTAX)),, MInt@MINT(#"9'255")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for _&Int_
[Warning] Critical: missing SMTLib translation for countOnes
[Warning] Critical: missing SMTLib translation for mi
[Warning] Critical: missing SMTLib translation for svalueMInt
95.18user 1.12system 0:24.90elapsed 386%CPU (0avgtext+0avgdata 2003172maxresident)k
8inputs+3656outputs (0major+473001minor)pagefaults 0swaps
