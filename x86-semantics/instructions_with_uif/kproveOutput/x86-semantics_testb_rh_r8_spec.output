-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(xorl(.KList@BASIC-K),, typeoperandlist(%edx(.KList@BASIC-K),, typeoperandlist(%edx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), execinstr(__(setg(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(adcw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%dx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(testb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_733:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_738:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_732:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_734:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_739:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _73_742:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _79_748:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _72_741:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _75_744:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _74_743:K@SORT-K String@STRING-SYNTAX(#""RDX"") |-> _78_747:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _71_740:K@SORT-K String@STRING-SYNTAX(#""RAX"") |-> _76_745:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _77_746:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _80_749:K@SORT-K   ),, <regstatequeue>(_81_750:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(xorl(.KList@BASIC-K),, typeoperandlist(%edx(.KList@BASIC-K),, typeoperandlist(%edx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), execinstr(__(setg(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(adcw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%dx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(testb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_733:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_738:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_732:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_734:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_739:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), execinstr(__(setg(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(adcw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%dx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(testb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(setg(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(adcw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%dx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(testb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(adcw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%dx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(testb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(adcw(.KList@BASIC-K),, typeoperandlist(%dx(.KList@BASIC-K),, typeoperandlist(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, typeoperandlist(MInt@MINT(#"16'0"),, typeoperandlist(MInt@MINT(#"16'0"),, typeoperandlist(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, .List{"typeoperandlist"}(.KList@BASIC-K)))))))), execinstr(__(testb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateOverflowAdd(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"16'0"),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))), updateZeroFlag(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))), updateSignFlag(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))), updateAuxCarryFlag(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"16'0"),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))), updateCarryFlagAdd(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"16'0"),, MInt@MINT(#"16'0")), updateParityFlag(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))), setRegisterValue(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, %dx(.KList@BASIC-K)), execinstr(__(testb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))), updateSignFlag(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))), updateAuxCarryFlag(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"16'0"),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))), updateCarryFlagAdd(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"16'0"),, MInt@MINT(#"16'0")), updateParityFlag(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))), setRegisterValue(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, %dx(.KList@BASIC-K)), execinstr(__(testb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))), updateAuxCarryFlag(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"16'0"),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))), updateCarryFlagAdd(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"16'0"),, MInt@MINT(#"16'0")), updateParityFlag(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))), setRegisterValue(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, %dx(.KList@BASIC-K)), execinstr(__(testb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateAuxCarryFlag(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"16'0"),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))), updateCarryFlagAdd(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"16'0"),, MInt@MINT(#"16'0")), updateParityFlag(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))), setRegisterValue(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, %dx(.KList@BASIC-K)), execinstr(__(testb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateCarryFlagAdd(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"16'0"),, MInt@MINT(#"16'0")), updateParityFlag(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))), setRegisterValue(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, %dx(.KList@BASIC-K)), execinstr(__(testb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"16'0")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"16'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))), setRegisterValue(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, %dx(.KList@BASIC-K)), execinstr(__(testb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"16'0")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"16'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, %dx(.KList@BASIC-K)), execinstr(__(testb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"16'0")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"16'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(testb(.KList@BASIC-K),, typeoperandlist(%ah(.KList@BASIC-K),, typeoperandlist(%dl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"16'0")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"16'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33"))))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33"))))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33"))))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33"))))) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))))),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, orMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_737:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_736:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for _&Int_
[Warning] Critical: missing SMTLib translation for countOnes
[Warning] Critical: missing SMTLib translation for mi
[Warning] Critical: missing SMTLib translation for svalueMInt
100.18user 1.23system 0:24.97elapsed 406%CPU (0avgtext+0avgdata 2357100maxresident)k
0inputs+3784outputs (0major+547959minor)pagefaults 0swaps
