-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(vmovd(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), split2NToN(%xmm1(.KList@BASIC-K),, %r8(.KList@BASIC-K),, %r9(.KList@BASIC-K),, Int@INT-SYNTAX(#"64")), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"25"),, %ymm1(.KList@BASIC-K)), execinstr(__(vcvtdq2pd(.KList@BASIC-K),, typeoperandlist(%ymm1(.KList@BASIC-K),, typeoperandlist(%ymm3(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vmovsd(.KList@BASIC-K),, typeoperandlist(%xmm3(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_726:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_725:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> _76_732:K@SORT-K String@STRING-SYNTAX(#""YMM1"") |-> _75_731:K@SORT-K String@STRING-SYNTAX(#""YMM3"") |-> _77_733:K@SORT-K String@STRING-SYNTAX(#""R8"") |-> _72_728:K@SORT-K String@STRING-SYNTAX(#""R9"") |-> _73_729:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _71_727:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _74_730:K@SORT-K   ),, <regstatequeue>(_78_734:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vmovd(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), split2NToN(%xmm1(.KList@BASIC-K),, %r8(.KList@BASIC-K),, %r9(.KList@BASIC-K),, Int@INT-SYNTAX(#"64")), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"25"),, %ymm1(.KList@BASIC-K)), execinstr(__(vcvtdq2pd(.KList@BASIC-K),, typeoperandlist(%ymm1(.KList@BASIC-K),, typeoperandlist(%ymm3(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vmovsd(.KList@BASIC-K),, typeoperandlist(%xmm3(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_726:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_725:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%xmm1(.KList@BASIC-K),, %r8(.KList@BASIC-K),, %r9(.KList@BASIC-K),, Int@INT-SYNTAX(#"64")), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"25"),, %ymm1(.KList@BASIC-K)), execinstr(__(vcvtdq2pd(.KList@BASIC-K),, typeoperandlist(%ymm1(.KList@BASIC-K),, typeoperandlist(%ymm3(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vmovsd(.KList@BASIC-K),, typeoperandlist(%xmm3(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_726:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, %r8(.KList@BASIC-K)), setRegisterValue(MInt@MINT(#"64'0"),, %r9(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"25"),, %ymm1(.KList@BASIC-K)), execinstr(__(vcvtdq2pd(.KList@BASIC-K),, typeoperandlist(%ymm1(.KList@BASIC-K),, typeoperandlist(%ymm3(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vmovsd(.KList@BASIC-K),, typeoperandlist(%xmm3(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_726:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(MInt@MINT(#"64'0"),, %r9(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"25"),, %ymm1(.KList@BASIC-K)), execinstr(__(vcvtdq2pd(.KList@BASIC-K),, typeoperandlist(%ymm1(.KList@BASIC-K),, typeoperandlist(%ymm3(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vmovsd(.KList@BASIC-K),, typeoperandlist(%xmm3(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_726:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"25"),, %ymm1(.KList@BASIC-K)), execinstr(__(vcvtdq2pd(.KList@BASIC-K),, typeoperandlist(%ymm1(.KList@BASIC-K),, typeoperandlist(%ymm3(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vmovsd(.KList@BASIC-K),, typeoperandlist(%xmm3(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_726:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterBitsAtPositon(MInt@MINT(#"8'0"),, %ymm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"200")), execinstr(__(vcvtdq2pd(.KList@BASIC-K),, typeoperandlist(%ymm1(.KList@BASIC-K),, typeoperandlist(%ymm3(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vmovsd(.KList@BASIC-K),, typeoperandlist(%xmm3(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_726:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vcvtdq2pd(.KList@BASIC-K),, typeoperandlist(%ymm1(.KList@BASIC-K),, typeoperandlist(%ymm3(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vmovsd(.KList@BASIC-K),, typeoperandlist(%xmm3(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_726:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, _(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))))))),, %ymm3(.KList@BASIC-K)), execinstr(__(vmovsd(.KList@BASIC-K),, typeoperandlist(%xmm3(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_726:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vmovsd(.KList@BASIC-K),, typeoperandlist(%xmm3(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_726:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM3"") |-> concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, _(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))))))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_726:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_726:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, _(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")))) String@STRING-SYNTAX(#""YMM3"") |-> concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, _(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))))))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_726:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_726:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, _(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")))) String@STRING-SYNTAX(#""YMM3"") |-> concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, _(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))))))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_726:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_726:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, _(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")))) String@STRING-SYNTAX(#""YMM3"") |-> concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, _(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))))))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_726:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_726:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, _(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")))) String@STRING-SYNTAX(#""YMM3"") |-> concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, concatenateMInt(_(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, MInt@MINT(#"32'0")),, _(_)(UIFUOperation@MINT-WRAPPER-SYNTAX(#"cvt_int32_to_double"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))))))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_724:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for _(_)
[Warning] Critical: missing SMTLib translation for mi
72.00user 0.91system 0:18.97elapsed 384%CPU (0avgtext+0avgdata 1810344maxresident)k
0inputs+3744outputs (0major+418095minor)pagefaults 0swaps
