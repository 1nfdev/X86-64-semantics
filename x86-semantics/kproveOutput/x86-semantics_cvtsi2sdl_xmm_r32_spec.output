-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(saveRegister(%ymm1(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), execinstr(__(vcvtsi2sdl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%xmm12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(movsd(.KList@BASIC-K),, typeoperandlist(%xmm12(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> _76_638:K@SORT-K String@STRING-SYNTAX(#""YMM1"") |-> _75_637:K@SORT-K String@STRING-SYNTAX(#""SPAD1"") |-> _73_635:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _72_634:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _74_636:K@SORT-K   ),, <regstatequeue>(_77_639:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(saveRegister(%ymm1(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), execinstr(__(vcvtsi2sdl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%xmm12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(movsd(.KList@BASIC-K),, typeoperandlist(%xmm12(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vcvtsi2sdl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%xmm12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(movsd(.KList@BASIC-K),, typeoperandlist(%xmm12(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movsd(.KList@BASIC-K),, typeoperandlist(%xmm12(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Float2MInt(Int2Float(svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Float2MInt(Int2Float(svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"192")),, Float2MInt(Int2Float(svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"192")),, Float2MInt(Int2Float(svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, Int@INT-SYNTAX(#"64"))),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Float2MInt(Int2Float(svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"192")),, Float2MInt(Int2Float(svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Float2MInt(Int2Float(svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"192")),, Float2MInt(Int2Float(svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Float2MInt(Int2Float(svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"192")),, Float2MInt(Int2Float(svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Float2MInt(Int2Float(svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"192")),, Float2MInt(Int2Float(svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Float2MInt(Int2Float(svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"192")),, Float2MInt(Int2Float(svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_633:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
70.02user 0.93system 0:19.02elapsed 372%CPU (0avgtext+0avgdata 1706848maxresident)k
0inputs+3680outputs (0major+368007minor)pagefaults 0swaps
