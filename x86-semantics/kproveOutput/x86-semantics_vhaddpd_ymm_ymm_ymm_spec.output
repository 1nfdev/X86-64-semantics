-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(split2NToN(%ymm3(.KList@BASIC-K),, %xmm12(.KList@BASIC-K),, %xmm13(.KList@BASIC-K),, Int@INT-SYNTAX(#"128")), execinstr(__(vmovdqa(.KList@BASIC-K),, typeoperandlist(%xmm13(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), split2NToN(%ymm2(.KList@BASIC-K),, %xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, Int@INT-SYNTAX(#"128")), execinstr(__(haddpd(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, typeoperandlist(%xmm9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vhaddpd(.KList@BASIC-K),, typeoperandlist(%xmm3(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm8(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), combineNTo2N(%xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, %ymm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"),, Int@INT-SYNTAX(#"128")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> _75_643:K@SORT-K String@STRING-SYNTAX(#""YMM2"") |-> _77_645:K@SORT-K String@STRING-SYNTAX(#""YMM1"") |-> _74_642:K@SORT-K String@STRING-SYNTAX(#""YMM13"") |-> _76_644:K@SORT-K String@STRING-SYNTAX(#""YMM3"") |-> _78_646:K@SORT-K String@STRING-SYNTAX(#""YMM8"") |-> _79_647:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _72_640:K@SORT-K String@STRING-SYNTAX(#""YMM9"") |-> _80_648:K@SORT-K String@STRING-SYNTAX(#""YMM0"") |-> _73_641:K@SORT-K   ),, <regstatequeue>(_81_649:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%ymm3(.KList@BASIC-K),, %xmm12(.KList@BASIC-K),, %xmm13(.KList@BASIC-K),, Int@INT-SYNTAX(#"128")), execinstr(__(vmovdqa(.KList@BASIC-K),, typeoperandlist(%xmm13(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), split2NToN(%ymm2(.KList@BASIC-K),, %xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, Int@INT-SYNTAX(#"128")), execinstr(__(haddpd(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, typeoperandlist(%xmm9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vhaddpd(.KList@BASIC-K),, typeoperandlist(%xmm3(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm8(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), combineNTo2N(%xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, %ymm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"),, Int@INT-SYNTAX(#"128")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, %xmm12(.KList@BASIC-K)), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, %xmm13(.KList@BASIC-K)), execinstr(__(vmovdqa(.KList@BASIC-K),, typeoperandlist(%xmm13(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), split2NToN(%ymm2(.KList@BASIC-K),, %xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, Int@INT-SYNTAX(#"128")), execinstr(__(haddpd(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, typeoperandlist(%xmm9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vhaddpd(.KList@BASIC-K),, typeoperandlist(%xmm3(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm8(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), combineNTo2N(%xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, %ymm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"),, Int@INT-SYNTAX(#"128")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, %xmm13(.KList@BASIC-K)), execinstr(__(vmovdqa(.KList@BASIC-K),, typeoperandlist(%xmm13(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), split2NToN(%ymm2(.KList@BASIC-K),, %xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, Int@INT-SYNTAX(#"128")), execinstr(__(haddpd(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, typeoperandlist(%xmm9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vhaddpd(.KList@BASIC-K),, typeoperandlist(%xmm3(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm8(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), combineNTo2N(%xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, %ymm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"),, Int@INT-SYNTAX(#"128")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vmovdqa(.KList@BASIC-K),, typeoperandlist(%xmm13(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), split2NToN(%ymm2(.KList@BASIC-K),, %xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, Int@INT-SYNTAX(#"128")), execinstr(__(haddpd(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, typeoperandlist(%xmm9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vhaddpd(.KList@BASIC-K),, typeoperandlist(%xmm3(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm8(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), combineNTo2N(%xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, %ymm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"),, Int@INT-SYNTAX(#"128")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"))) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%ymm2(.KList@BASIC-K),, %xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, Int@INT-SYNTAX(#"128")), execinstr(__(haddpd(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, typeoperandlist(%xmm9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vhaddpd(.KList@BASIC-K),, typeoperandlist(%xmm3(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm8(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), combineNTo2N(%xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, %ymm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"),, Int@INT-SYNTAX(#"128")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"))) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, %xmm8(.KList@BASIC-K)), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, %xmm9(.KList@BASIC-K)), execinstr(__(haddpd(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, typeoperandlist(%xmm9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vhaddpd(.KList@BASIC-K),, typeoperandlist(%xmm3(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm8(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), combineNTo2N(%xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, %ymm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"),, Int@INT-SYNTAX(#"128")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"))) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, %xmm9(.KList@BASIC-K)), execinstr(__(haddpd(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, typeoperandlist(%xmm9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vhaddpd(.KList@BASIC-K),, typeoperandlist(%xmm3(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm8(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), combineNTo2N(%xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, %ymm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"),, Int@INT-SYNTAX(#"128")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"))) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(haddpd(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, typeoperandlist(%xmm9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vhaddpd(.KList@BASIC-K),, typeoperandlist(%xmm3(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm8(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), combineNTo2N(%xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, %ymm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"),, Int@INT-SYNTAX(#"128")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"))) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"))) String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vhaddpd(.KList@BASIC-K),, typeoperandlist(%xmm3(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm8(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), combineNTo2N(%xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, %ymm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"),, Int@INT-SYNTAX(#"128")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"))) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineNTo2N(%xmm8(.KList@BASIC-K),, %xmm9(.KList@BASIC-K),, %ymm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"),, Int@INT-SYNTAX(#"128")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"))) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"))) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_637:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM13"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"))) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM13"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"))) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM13"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"))) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM12"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM13"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"))) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM8"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")),, Float2MInt(_+Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_638:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I3_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for Float2MInt
[Warning] Critical: missing SMTLib translation for mi
65.12user 0.88system 0:17.13elapsed 385%CPU (0avgtext+0avgdata 1647080maxresident)k
0inputs+3744outputs (0major+346491minor)pagefaults 0swaps
