-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(vzeroall(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), split2NToN(%bx(.KList@BASIC-K),, %r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8")), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"0"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"1"),, %ymm1(.KList@BASIC-K)), execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%r8b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), split2NToN(%ebx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), movPosOfRegToByte(Int@INT-SYNTAX(#"3"),, %rbx(.KList@BASIC-K),, %r8b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> _73_650:K@SORT-K String@STRING-SYNTAX(#""R9"") |-> _74_651:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _75_652:K@SORT-K String@STRING-SYNTAX(#""YMM9"") |-> _91_668:K@SORT-K String@STRING-SYNTAX(#""YMM12"") |-> _80_657:K@SORT-K String@STRING-SYNTAX(#""YMM2"") |-> _84_661:K@SORT-K String@STRING-SYNTAX(#""YMM1"") |-> _77_654:K@SORT-K String@STRING-SYNTAX(#""YMM13"") |-> _81_658:K@SORT-K String@STRING-SYNTAX(#""YMM10"") |-> _78_655:K@SORT-K String@STRING-SYNTAX(#""YMM4"") |-> _86_663:K@SORT-K String@STRING-SYNTAX(#""YMM11"") |-> _79_656:K@SORT-K String@STRING-SYNTAX(#""YMM3"") |-> _85_662:K@SORT-K String@STRING-SYNTAX(#""YMM6"") |-> _88_665:K@SORT-K String@STRING-SYNTAX(#""YMM5"") |-> _87_664:K@SORT-K String@STRING-SYNTAX(#""YMM14"") |-> _82_659:K@SORT-K String@STRING-SYNTAX(#""YMM8"") |-> _90_667:K@SORT-K String@STRING-SYNTAX(#""YMM15"") |-> _83_660:K@SORT-K String@STRING-SYNTAX(#""YMM7"") |-> _89_666:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _72_649:K@SORT-K String@STRING-SYNTAX(#""YMM0"") |-> _76_653:K@SORT-K   ),, <regstatequeue>(_92_669:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vzeroall(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), split2NToN(%bx(.KList@BASIC-K),, %r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8")), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"0"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"1"),, %ymm1(.KList@BASIC-K)), execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%r8b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), split2NToN(%ebx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), movPosOfRegToByte(Int@INT-SYNTAX(#"3"),, %rbx(.KList@BASIC-K),, %r8b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_648:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%bx(.KList@BASIC-K),, %r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"8")), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"0"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"1"),, %ymm1(.KList@BASIC-K)), execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%r8b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), split2NToN(%ebx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), movPosOfRegToByte(Int@INT-SYNTAX(#"3"),, %rbx(.KList@BASIC-K),, %r8b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, %r8b(.KList@BASIC-K)), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, %r9b(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"0"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"1"),, %ymm1(.KList@BASIC-K)), execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%r8b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), split2NToN(%ebx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), movPosOfRegToByte(Int@INT-SYNTAX(#"3"),, %rbx(.KList@BASIC-K),, %r8b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, %r9b(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"0"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"1"),, %ymm1(.KList@BASIC-K)), execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%r8b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), split2NToN(%ebx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), movPosOfRegToByte(Int@INT-SYNTAX(#"3"),, %rbx(.KList@BASIC-K),, %r8b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"0"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"1"),, %ymm1(.KList@BASIC-K)), execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%r8b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), split2NToN(%ebx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), movPosOfRegToByte(Int@INT-SYNTAX(#"3"),, %rbx(.KList@BASIC-K),, %r8b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterBitsAtPositon(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, %ymm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"0")), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"1"),, %ymm1(.KList@BASIC-K)), execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%r8b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), split2NToN(%ebx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), movPosOfRegToByte(Int@INT-SYNTAX(#"3"),, %rbx(.KList@BASIC-K),, %r8b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"1"),, %ymm1(.KList@BASIC-K)), execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%r8b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), split2NToN(%ebx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), movPosOfRegToByte(Int@INT-SYNTAX(#"3"),, %rbx(.KList@BASIC-K),, %r8b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"248'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterBitsAtPositon(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, %ymm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"8")), execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%r8b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), split2NToN(%ebx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), movPosOfRegToByte(Int@INT-SYNTAX(#"3"),, %rbx(.KList@BASIC-K),, %r8b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"248'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(xchgb(.KList@BASIC-K),, typeoperandlist(%r8b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), split2NToN(%ebx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), movPosOfRegToByte(Int@INT-SYNTAX(#"3"),, %rbx(.KList@BASIC-K),, %r8b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"240'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), split2NToN(%ebx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), movPosOfRegToByte(Int@INT-SYNTAX(#"3"),, %rbx(.KList@BASIC-K),, %r8b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"240'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterBitsAtPositon(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, %ymm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"24")), split2NToN(%ebx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), movPosOfRegToByte(Int@INT-SYNTAX(#"3"),, %rbx(.KList@BASIC-K),, %r8b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"240'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%ebx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), movPosOfRegToByte(Int@INT-SYNTAX(#"3"),, %rbx(.KList@BASIC-K),, %r8b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"224'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, %r8w(.KList@BASIC-K)), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48")),, %r9w(.KList@BASIC-K)), movPosOfRegToByte(Int@INT-SYNTAX(#"3"),, %rbx(.KList@BASIC-K),, %r8b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"224'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48")),, %r9w(.KList@BASIC-K)), movPosOfRegToByte(Int@INT-SYNTAX(#"3"),, %rbx(.KList@BASIC-K),, %r8b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"224'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(movPosOfRegToByte(Int@INT-SYNTAX(#"3"),, %rbx(.KList@BASIC-K),, %r8b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"224'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40")),, %r8b(.KList@BASIC-K)), movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"224'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(movByteToPosOfReg(%r9b(.KList@BASIC-K),, Int@INT-SYNTAX(#"2"),, %ymm1(.KList@BASIC-K)), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"224'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterBitsAtPositon(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"40"),, Int@INT-SYNTAX(#"48")),, %ymm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"224'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56")),, concatenateMInt(MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(movByteToPosOfReg(%r8b(.KList@BASIC-K),, Int@INT-SYNTAX(#"3"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"40"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterBitsAtPositon(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40")),, %ymm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"24")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"40"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"56"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"40"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_647:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
97.89user 1.41system 0:22.52elapsed 440%CPU (0avgtext+0avgdata 2556748maxresident)k
0inputs+3848outputs (0major+575997minor)pagefaults 0swaps
