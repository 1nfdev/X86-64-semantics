-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(splitXmmToR32(%xmm2(.KList@BASIC-K),, %eax(.KList@BASIC-K),, %edx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%edx(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vzeroall(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> _75_655:K@SORT-K String@STRING-SYNTAX(#""R9"") |-> _76_656:K@SORT-K String@STRING-SYNTAX(#""RDX"") |-> _78_658:K@SORT-K String@STRING-SYNTAX(#""RAX"") |-> _77_657:K@SORT-K String@STRING-SYNTAX(#""YMM9"") |-> _94_674:K@SORT-K String@STRING-SYNTAX(#""R10"") |-> _73_653:K@SORT-K String@STRING-SYNTAX(#""YMM12"") |-> _83_663:K@SORT-K String@STRING-SYNTAX(#""YMM2"") |-> _87_667:K@SORT-K String@STRING-SYNTAX(#""YMM1"") |-> _80_660:K@SORT-K String@STRING-SYNTAX(#""YMM13"") |-> _84_664:K@SORT-K String@STRING-SYNTAX(#""YMM10"") |-> _81_661:K@SORT-K String@STRING-SYNTAX(#""YMM4"") |-> _89_669:K@SORT-K String@STRING-SYNTAX(#""R11"") |-> _74_654:K@SORT-K String@STRING-SYNTAX(#""YMM11"") |-> _82_662:K@SORT-K String@STRING-SYNTAX(#""YMM3"") |-> _88_668:K@SORT-K String@STRING-SYNTAX(#""YMM6"") |-> _91_671:K@SORT-K String@STRING-SYNTAX(#""YMM5"") |-> _90_670:K@SORT-K String@STRING-SYNTAX(#""YMM14"") |-> _85_665:K@SORT-K String@STRING-SYNTAX(#""YMM8"") |-> _93_673:K@SORT-K String@STRING-SYNTAX(#""YMM15"") |-> _86_666:K@SORT-K String@STRING-SYNTAX(#""YMM7"") |-> _92_672:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _72_652:K@SORT-K String@STRING-SYNTAX(#""YMM0"") |-> _79_659:K@SORT-K   ),, <regstatequeue>(_95_675:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(splitXmmToR32(%xmm2(.KList@BASIC-K),, %eax(.KList@BASIC-K),, %edx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%edx(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vzeroall(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))),, %rax(.KList@BASIC-K)), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))),, %rdx(.KList@BASIC-K)), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))),, %r8(.KList@BASIC-K)), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))),, %r9(.KList@BASIC-K)), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%edx(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vzeroall(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))),, %rdx(.KList@BASIC-K)), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))),, %r8(.KList@BASIC-K)), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))),, %r9(.KList@BASIC-K)), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%edx(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vzeroall(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))),, %r8(.KList@BASIC-K)), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))),, %r9(.KList@BASIC-K)), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%edx(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vzeroall(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))),, %r9(.KList@BASIC-K)), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%edx(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vzeroall(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%edx(.KList@BASIC-K),, typeoperandlist(%r11(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vzeroall(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))),, %r11(.KList@BASIC-K)), execinstr(__(vzeroall(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vzeroall(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_650:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))) String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))) String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))),, %r10(.KList@BASIC-K)), combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))) String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineNTo2N(%r10(.KList@BASIC-K),, %r11(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))) String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))))),, %xmm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))) String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))) String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))) String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))) String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM9"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""YMM12"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))))) String@STRING-SYNTAX(#""YMM13"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_651:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))) String@STRING-SYNTAX(#""YMM11"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM3"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM14"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM8"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM15"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
69.52user 0.68system 0:15.58elapsed 450%CPU (0avgtext+0avgdata 1373312maxresident)k
0inputs+3744outputs (0major+322990minor)pagefaults 0swaps
