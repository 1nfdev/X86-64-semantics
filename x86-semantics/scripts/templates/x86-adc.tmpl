// Autogenerated from templates.
requires "x86-semantic-utils.k"

/*@ This file defines the semantics of following 51 base instructions.
  - adcw_r16_r16, adcl_r32_r32, adcq_r64_r64, adcb_r8_r8,
*/

module ADC-R8-R8
  imports X86-SEMANTIC-UTILS

  // Unroll START
Unroll START PATTERN-9
  rule <k> 
    execinstr ( adcb , (%REG8 ,  (%REG8 , .Typedoperands)) ) =>
      execinstr(adcb, (%REG64, extractMask(MI, 8, 0), extractMask(MI, 8, 0), zeroExtend(MIc,8), .Typedoperands)) 
  ...</k>
  <cf> MIc </cf>
  <REG64> MI </REG64>
Unroll END
  // Unroll END

  // Unroll START
Unroll START PATTERN-2
  rule <k> 
    execinstr ( adcb , (%REG8_1 ,  (%REG8_2 , .Typedoperands)) ) =>
      execinstr(adcb, (%REG64_2, extractMask(MI1, 8, 0), extractMask(MI2, 8, 0), zeroExtend(MI3,8), .Typedoperands)) 
  ...</k>
  <REG64_1> MI1 </REG64_1>
  <REG64_2> MI2 </REG64_2>
  <cf> MI3 </cf>
Unroll END
  // Unroll END

  rule
    execinstr(adcb, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, .Typedoperands )) => 
      execinstr(adcb, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry, addMInt(MIsrc1, MIsrc2), .Typedoperands )) 
  
  rule
    execinstr(adcb, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, MIsum:MInt, .Typedoperands )) => 
      execinstr(adcb, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry, MIsum, addMInt(MIsum, MIcarry), .Typedoperands ))

  // Unroll START
Unroll START PATTERN-1
  rule
  <k>
    execinstr(adcb, ( %REG64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, MIsum:MInt, MIresult:MInt, .Typedoperands )) 
    => 
      updateOverflowAdd(MIsrc1, MIsrc2, MIresult) ~> 
      updateZeroFlag(MIresult) ~> 
      updateSignFlag(MIresult) ~> 
      updateAuxCarryFlag(MIsrc1, MIsrc2, MIresult) ~> 
      updateCarryFlagAdd(MIsrc1, MIsrc2, MIsum, MIcarry, MIresult) ~> 
      updateParityFlag(MIresult) ~> 
      updateReg(plugInMask(MI, MIresult, 0), %REG64) 
  ...</k>
  <REG64> MI </REG64>
Unroll END
  // Unroll END


endmodule

module ADC-R16-R16
  imports X86-SEMANTIC-UTILS

  // Unroll START
Unroll START PATTERN-10
  rule <k> 
    execinstr ( adcw , (%REG16 ,  (%REG16 , .Typedoperands)) ) =>
      execinstr(adcw, (%REG64, extractMask(MI, 16, 0), extractMask(MI, 16, 0), zeroExtend(MIc,16), .Typedoperands)) 
  ...</k>
  <cf> MIc </cf>
  <REG64> MI </REG64>
Unroll END
  // Unroll END

  // Unroll START
Unroll START PATTERN-3
  rule <k> 
    execinstr ( adcw , (%REG16_1 ,  (%REG16_2 , .Typedoperands)) ) =>
      execinstr(adcw, (%REG64_2, extractMask(MI1, 16, 0), extractMask(MI2, 16, 0), zeroExtend(MI3,16), .Typedoperands)) 
  ...</k>
  <REG64_1> MI1 </REG64_1>
  <REG64_2> MI2 </REG64_2>
  <cf> MI3 </cf>
Unroll END
  // Unroll END

  rule
    execinstr(adcw, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, .Typedoperands )) => 
      execinstr(adcw, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry, addMInt(MIsrc1, MIsrc2), .Typedoperands )) 
  
  rule
    execinstr(adcw, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, MIsum:MInt, .Typedoperands )) => 
      execinstr(adcw, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry, MIsum, addMInt(MIsum, MIcarry), .Typedoperands ))

  // Unroll START
Unroll START PATTERN-1
  rule
  <k>
    execinstr(adcw, ( %REG64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, MIsum:MInt, MIresult:MInt, .Typedoperands )) 
    => 
      updateOverflowAdd(MIsrc1, MIsrc2, MIresult) ~> 
      updateZeroFlag(MIresult) ~> 
      updateSignFlag(MIresult) ~> 
      updateAuxCarryFlag(MIsrc1, MIsrc2, MIresult) ~> 
      updateCarryFlagAdd(MIsrc1, MIsrc2, MIsum, MIcarry, MIresult) ~> 
      updateParityFlag(MIresult) ~> 
      updateReg(plugInMask(MI, MIresult, 0), %REG64)
  ...</k>
    <REG64> MI </REG64>
Unroll END
  // Unroll END

endmodule

module ADC-R32-R32
  imports X86-SEMANTIC-UTILS

  // Unroll START
Unroll START PATTERN-11
  rule <k> 
    execinstr ( adcl , (%REG32 ,  (%REG32 , .Typedoperands)) ) =>
      execinstr(adcl, (%REG64, extractMask(MI, 32, 0), extractMask(MI, 32, 0), zeroExtend(MIc,32), .Typedoperands)) 
  ...</k>
  <cf> MIc </cf>
  <REG64> MI </REG64>
Unroll END
  // Unroll END

  // Unroll START
Unroll START PATTERN-4
  rule <k> 
    execinstr ( adcl , (%REG32_1 ,  (%REG32_2 , .Typedoperands)) ) =>
      execinstr(adcl, (%REG64_2, extractMask(MI1, 32, 0), extractMask(MI2, 32, 0), zeroExtend(MI3,32), .Typedoperands)) 
  ...</k>
  <REG64_1> MI1 </REG64_1>
  <REG64_2> MI2 </REG64_2>
  <cf> MI3 </cf>
Unroll END
  // Unroll END

  rule
    execinstr(adcl, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, .Typedoperands )) => 
      execinstr(adcl, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry, addMInt(MIsrc1, MIsrc2), .Typedoperands )) 
  
  rule
    execinstr(adcl, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, MIsum:MInt, .Typedoperands )) => 
      execinstr(adcl, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry, MIsum, addMInt(MIsum, MIcarry), .Typedoperands ))

  // Unroll START
Unroll START PATTERN-1
  rule
  <k>
    execinstr(adcl, ( %REG64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, MIsum:MInt, MIresult:MInt, .Typedoperands )) 
    => 
      updateOverflowAdd(MIsrc1, MIsrc2, MIresult) ~> 
      updateZeroFlag(MIresult) ~> 
      updateSignFlag(MIresult) ~> 
      updateAuxCarryFlag(MIsrc1, MIsrc2, MIresult) ~> 
      updateCarryFlagAdd(MIsrc1, MIsrc2, MIsum, MIcarry, MIresult) ~> 
      updateParityFlag(MIresult) ~> 
      updateReg(plugInMask(MI, MIresult, 0), %REG64)
  ...</k>
    <REG64> MI </REG64>
Unroll END
  // Unroll END

endmodule

module ADC-R64-R64
  imports X86-SEMANTIC-UTILS

  // Unroll START
Unroll START PATTERN-1
  rule <k> 
    execinstr ( adcq , (%REG64 ,  (%REG64 , .Typedoperands)) ) =>
      execinstr(adcq, (%REG64, MIsrc, MIsrc, zeroExtend(MIc,64), .Typedoperands)) 
  ...</k>
  <cf> MIc </cf>
  <REG64> MIsrc </REG64>
Unroll END

Unroll START PATTERN-5
  rule <k> 
    execinstr ( adcq , (%REG64_1 ,  (%REG64_2 , .Typedoperands)) ) =>
      execinstr(adcq, (%REG64_2, MIsrc1, MIsrc2, zeroExtend(MI3,64), .Typedoperands)) 
  ...</k>
  <cf> MI3 </cf>
  <REG64_1> MIsrc1 </REG64_1>
  <REG64_2> MIsrc2 </REG64_2>
Unroll END
  // Unroll END

  rule
    execinstr(adcq, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, .Typedoperands )) => 
      execinstr(adcq, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry, addMInt(MIsrc1, MIsrc2), .Typedoperands )) 
  
  rule
    execinstr(adcq, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, MIsum:MInt, .Typedoperands )) => 
      execinstr(adcq, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry, MIsum, addMInt(MIsum, MIcarry), .Typedoperands ))

  rule
    execinstr(adcq, ( DestR:R64, MIsrc1:MInt, MIsrc2:MInt, MIcarry:MInt, MIsum:MInt, MIresult:MInt, .Typedoperands )) 
    => 
      updateOverflowAdd(MIsrc1, MIsrc2, MIresult) ~> 
      updateZeroFlag(MIresult) ~> 
      updateSignFlag(MIresult) ~> 
      updateAuxCarryFlag(MIsrc1, MIsrc2, MIresult) ~> 
      updateCarryFlagAdd(MIsrc1, MIsrc2, MIsum, MIcarry, MIresult) ~> 
      updateParityFlag(MIresult) ~> 
      updateReg(MIresult, DestR) 

endmodule

module ADC-SEMANTICS
  imports ADC-R8-R8
  imports ADC-R16-R16
  imports ADC-R32-R32
  imports ADC-R64-R64
endmodule
