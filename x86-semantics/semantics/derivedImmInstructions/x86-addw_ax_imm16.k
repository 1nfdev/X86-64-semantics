// Autogenerated using stratification.
requires "x86-configuration.k"

module ADDW-AX-IMM16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (addw I1_16:Imm, %ax:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), handleImmediateWithSignExtend(I1_16, 16, 16 )), concatenateMInt(mi(1, 0), extractMInt(getParentValue(%ax, RSMap), 48, 64))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(handleImmediateWithSignExtend(I1_16, 16, 16 ), extractMInt(getParentValue(%ax, RSMap), 48, 64)), 0, 1) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(handleImmediateWithSignExtend(I1_16, 16, 16 ), extractMInt(getParentValue(%ax, RSMap), 48, 64)), addMInt(handleImmediateWithSignExtend(I1_16, 16, 16 ), extractMInt(getParentValue(%ax, RSMap), 48, 64))), 4), mi(16, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(handleImmediateWithSignExtend(I1_16, 16, 16 ), extractMInt(getParentValue(%ax, RSMap), 48, 64)), 8, 16), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(handleImmediateWithSignExtend(I1_16, 16, 16 ), extractMInt(getParentValue(%ax, RSMap), 48, 49))  andBool   notBool  ( eqMInt(handleImmediateWithSignExtend(I1_16, 16, 16 ), extractMInt(addMInt(handleImmediateWithSignExtend(I1_16, 16, 16 ), extractMInt(getParentValue(%ax, RSMap), 48, 64)), 0, 1)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(%ax) |-> (concatenateMInt(extractMInt(getParentValue(%ax, RSMap), 0, 48), addMInt(handleImmediateWithSignExtend(I1_16, 16, 16 ), extractMInt(getParentValue(%ax, RSMap), 48, 64))) )

 "ZF" |-> ((#ifMInt (eqMInt(addMInt(handleImmediateWithSignExtend(I1_16, 16, 16 ), extractMInt(getParentValue(%ax, RSMap), 48, 64)), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule
