// Autogenerated using stratification.
requires "x86-configuration.k"

module BSWAP-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (bswap R1:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 56, 64)), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 40, 48), extractMInt(getParentValue(R1, RSMap), 32, 40)))) )


)

    </regstate>
endmodule

module BSWAP-R32-SEMANTICS
  imports BSWAP-R32
endmodule
/*
TargetInstr:
bswap %ebx
RWSet:
maybe read:{ %ebx }
must read:{ %ebx }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .move_032_016_ebx_r8w_r9w   #  1     0     5      OPC=callq_label
circuit:callq .move_016_032_r8w_r9w_ecx   #  2     0x5   5      OPC=callq_label
circuit:callq .move_byte_3_of_rbx_to_r8b  #  3     0xa   5      OPC=callq_label
circuit:notl %ebx                         #  4     0xf   2      OPC=notl_r32
circuit:callq .move_008_016_r8b_r9b_bx    #  5     0x11  5      OPC=callq_label
circuit:callq .move_016_008_cx_r8b_r9b    #  6     0x16  5      OPC=callq_label
circuit:callq .move_r8b_to_byte_3_of_rbx  #  7     0x1b  5      OPC=callq_label
circuit:callq .move_r9b_to_byte_2_of_rbx  #  8     0x20  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

bswap %ebx

  maybe read:      { %ebx }
  must read:       { %ebx }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : 0x0₃₂ ∘ %rbx[7:0] ∘ %rbx[15:8] ∘ (%rbx[23:16] ∘ %rbx[31:24])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/