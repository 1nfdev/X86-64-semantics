// Autogenerated using stratification.
requires "x86-configuration.k"

module BTQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (btq R1:R64, R2:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> ((#ifMInt (ultMInt(andMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( extractMInt(ashrMInt(mi(64, svalueMInt(getParentValue(R2, RSMap))), uvalueMInt(andMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), mi(8, 63)))), 63, 64) ) #else ( (#ifMInt (eqMInt(extractMInt(getParentValue(R2, RSMap), 0, 1), mi(1, 0)) ) #then ( mi(1, 0) ) #else ( mi(1, 1) ) #fi)  ) #fi)  )

 "SF" |-> (undef)

 "AF" |-> (undef)

 "PF" |-> (undef)

 "OF" |-> (undef)


)

    </regstate>
endmodule

module BTQ-R64-R64-SEMANTICS
  imports BTQ-R64-R64
endmodule
/*
TargetInstr:
btq %rcx, %rbx
RWSet:
maybe read:{ %rcx %rbx }
must read:{ %rcx %rbx }
maybe write:{ %cf }
must write:{ %cf }
maybe undef:{ %pf %af %sf %of }
must undef:{ %pf %af %sf %of }
required flags:{ }

Circuit:
circuit:sarq %cl, %rbx   #  1     0    3      OPC=sarq_r64_cl
circuit:sarq $0x1, %rbx  #  2     0x3  3      OPC=sarq_r64_one
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

btq %rcx, %rbx

  maybe read:      { %rcx %rbx }
  must read:       { %rcx %rbx }
  maybe write:     { %cf }
  must write:      { %cf }
  maybe undef:     { %pf %af %sf %of }
  must undef:      { %pf %af %sf %of }
  required flags:  { }

Circuits:

%cf    : true ∧ ((%rbx ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ (%rcx[7:0] & 0x3f₈))[64:1] ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/