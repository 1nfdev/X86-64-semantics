// Autogenerated using stratification.
requires "x86-configuration.k"

module CBTW
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cbtw  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "RAX" |-> (concatenateMInt(extractMInt(getParentValue(%rax, RSMap), 0, 48), extractMInt(mi(64, svalueMInt(extractMInt(getParentValue(%rax, RSMap), 56, 64))), 48, 64)) )


)

    </regstate>
endmodule

module CBTW-SEMANTICS
  imports CBTW
endmodule
/*
TargetInstr:
cbtw
RWSet:
maybe read:{ %al }
must read:{ %al }
maybe write:{ %ax }
must write:{ %ax }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movsbq %al, %r8                           #  1     0     4      OPC=movsbq_r64_r8
circuit:movq $0x10, %r9                           #  2     0x4   10     OPC=movq_r64_imm64
circuit:callq .move_064_128_r8_r9_xmm1            #  3     0xe   5      OPC=callq_label
circuit:callq .move_128_032_xmm1_eax_edx_r8d_r9d  #  4     0x13  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cbtw 

  maybe read:      { %al }
  must read:       { %al }
  maybe write:     { %ax }
  must write:      { %ax }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : %rax[63:16] âˆ˜ sign-extend-64(%rax[7:0])[15:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/