// Autogenerated using stratification.
requires "x86-configuration.k"

module CMC
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmc  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), getFlag("CF", RSMap)), mi(17, 65535)), 9, 17))), 0, 1) )


)

    </regstate>
endmodule

module CMC-SEMANTICS
  imports CMC
endmodule
/*
TargetInstr:
cmc
RWSet:
maybe read:{ %cf }
must read:{ %cf }
maybe write:{ %cf }
must write:{ %cf }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .read_cf_into_rbx           #  1     0     5      OPC=callq_label
circuit:callq .move_064_032_rbx_r8d_r9d   #  2     0x5   5      OPC=callq_label
circuit:callq .move_r8b_to_byte_5_of_rbx  #  3     0xa   5      OPC=callq_label
circuit:decw %bx                          #  4     0xf   3      OPC=decw_r16
circuit:xorb %bh, %bh                     #  5     0x12  2      OPC=xorb_rh_rh
circuit:adcb %bl, %bl                     #  6     0x14  2      OPC=adcb_r8_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmc 

  maybe read:      { %cf }
  must read:       { %cf }
  maybe write:     { %cf }
  must write:      { %cf }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%cf    : ((%cf ? 0x0₉ : 0xff₉) + (%cf ? 0x0₉ : 0xff₉))[8:8] = 0x1₁

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/