// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVNZW-R16-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovnzw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ((#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), extractMInt(getParentValue(R1, RSMap), 48, 64)) ) #else ( getParentValue(R2, RSMap) ) #fi)  )


)

    </regstate>
endmodule

module CMOVNZW-R16-R16-SEMANTICS
  imports CMOVNZW-R16-R16
endmodule
/*
TargetInstr:
cmovnzw %cx, %bx
RWSet:
maybe read:{ %cx %zf }
must read:{ %cx %zf }
maybe write:{ %bx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:movzbl %ch, %ebp                #  1     0     3      OPC=movzbl_r32_rh
circuit:movw %bx, %bp                   #  2     0x3   3      OPC=movw_r16_r16
circuit:callq .move_016_008_cx_r8b_r9b  #  3     0x6   5      OPC=callq_label
circuit:callq .move_008_016_r8b_r9b_bx  #  4     0xb   5      OPC=callq_label
circuit:cmoveq %rbp, %rbx               #  5     0x10  4      OPC=cmoveq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovnzw %cx, %bx

  maybe read:      { %cx %zf }
  must read:       { %cx %zf }
  maybe write:     { %bx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

Circuits:

%rbx   : %rbx[63:16] âˆ˜ (%zf ? %rbx[15:0] : %rcx[15:0])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/