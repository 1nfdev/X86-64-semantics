// Autogenerated using stratification.
requires "x86-configuration.k"

module CMPXCHGQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmpxchgq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R2, RSMap))), concatenateMInt(mi(1, 0), getParentValue(%rax, RSMap))), mi(65, 1)), 0, 1)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R2, RSMap))), concatenateMInt(mi(1, 0), getParentValue(%rax, RSMap))), mi(65, 1)), 0, 1)), mi(17, 65535)), 9, 17))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R2, RSMap))), concatenateMInt(mi(1, 0), getParentValue(%rax, RSMap))), mi(65, 1)), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(64, 18446744073709551615), getParentValue(R2, RSMap)), getParentValue(%rax, RSMap)), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R2, RSMap))), concatenateMInt(mi(1, 0), getParentValue(%rax, RSMap))), mi(65, 1)), 1, 65)), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R2, RSMap))), concatenateMInt(mi(1, 0), getParentValue(%rax, RSMap))), mi(65, 1)), 57, 65), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(getParentValue(R2, RSMap), 0, 1)), extractMInt(getParentValue(%rax, RSMap), 0, 1))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(getParentValue(R2, RSMap), 0, 1)), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R2, RSMap))), concatenateMInt(mi(1, 0), getParentValue(%rax, RSMap))), mi(65, 1)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "RAX" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R2, RSMap))), concatenateMInt(mi(1, 0), getParentValue(%rax, RSMap))), mi(65, 1)), 1, 65), mi(64, 0)) ) #then ( getParentValue(%rax, RSMap) ) #else ( getParentValue(R2, RSMap) ) #fi)  )

convToRegKeys(R2) |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R2, RSMap))), concatenateMInt(mi(1, 0), getParentValue(%rax, RSMap))), mi(65, 1)), 1, 65), mi(64, 0)) ) #then ( getParentValue(R1, RSMap) ) #else ( getParentValue(R2, RSMap) ) #fi)  )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R2, RSMap))), concatenateMInt(mi(1, 0), getParentValue(%rax, RSMap))), mi(65, 1)), 1, 65), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
      requires notBool sameRegisters(R2, "RAX")

  rule <k>
    execinstr (cmpxchgq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R2, RSMap))), concatenateMInt(mi(1, 0), getParentValue(%rax, RSMap))), mi(65, 1)), 0, 1)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R2, RSMap))), concatenateMInt(mi(1, 0), getParentValue(%rax, RSMap))), mi(65, 1)), 0, 1)), mi(17, 65535)), 9, 17))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R2, RSMap))), concatenateMInt(mi(1, 0), getParentValue(%rax, RSMap))), mi(65, 1)), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(64, 18446744073709551615), getParentValue(R2, RSMap)), getParentValue(%rax, RSMap)), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R2, RSMap))), concatenateMInt(mi(1, 0), getParentValue(%rax, RSMap))), mi(65, 1)), 1, 65)), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R2, RSMap))), concatenateMInt(mi(1, 0), getParentValue(%rax, RSMap))), mi(65, 1)), 57, 65), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(getParentValue(R2, RSMap), 0, 1)), extractMInt(getParentValue(%rax, RSMap), 0, 1))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(getParentValue(R2, RSMap), 0, 1)), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R2, RSMap))), concatenateMInt(mi(1, 0), getParentValue(%rax, RSMap))), mi(65, 1)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R2, RSMap))), concatenateMInt(mi(1, 0), getParentValue(%rax, RSMap))), mi(65, 1)), 1, 65), mi(64, 0)) ) #then ( getParentValue(R1, RSMap) ) #else ( getParentValue(R2, RSMap) ) #fi)  )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(64, 18446744073709551615), getParentValue(R2, RSMap))), concatenateMInt(mi(1, 0), getParentValue(%rax, RSMap))), mi(65, 1)), 1, 65), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
      requires sameRegisters(R2, "RAX")
      

endmodule

module CMPXCHGQ-R64-R64-SEMANTICS
  imports CMPXCHGQ-R64-R64
endmodule
/*
TargetInstr:
cmpxchgq %rcx, %rbx
RWSet:
maybe read:{ %rax %rcx %rbx }
must read:{ %rax %rcx %rbx }
maybe write:{ %rax %rbx %cf %pf %af %zf %sf %of }
must write:{ %rax %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:cmpq %rbx, %rax     #  1     0    3      OPC=cmpq_r64_r64
circuit:cmovneq %rbx, %rax  #  2     0x3  4      OPC=cmovneq_r64_r64
circuit:cmoveq %rcx, %rbx   #  3     0x7  4      OPC=cmoveq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmpxchgq %rcx, %rbx

  maybe read:      { %rax %rcx %rbx }
  must read:       { %rax %rcx %rbx }
  maybe write:     { %rax %rbx %cf %pf %af %zf %sf %of }
  must write:      { %rax %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : (((0x0₁ ∘ (%rbx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[63:0] = 0x0₆₄ ? 0x1₉ : 0x0₉) + ((0x0₁ ∘ (%rbx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[63:0] = 0x0₆₄ ? 0x1₉ : 0x0₉))[7:0] = 0x0₈ ? %rbx : %rax
%rbx   : (0x0₁ ∘ (%rbx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[63:0] = 0x0₆₄ ? %rcx : %rbx

%cf    : (((0x0₁ ∘ (%rbx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[64:64] = 0x1₁ ? 0x0₉ : 0xff₉) + ((0x0₁ ∘ (%rbx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[64:64] = 0x1₁ ? 0x0₉ : 0xff₉))[8:8] = 0x1₁
%pf    : !((0x0₁ ∘ (%rbx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ (%rbx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ (%rbx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ (%rbx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ (%rbx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ (%rbx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ (%rbx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ (%rbx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[7:7] = 0x1₁)
%af    : (0x0₁ ∘ (%rbx[3:0] ⊕ 0xf₄) + 0x0₁ ∘ %rax[3:0])[4:4] = 0x1₁
%zf    : (0x0₁ ∘ (%rbx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[63:0] = 0x0₆₄
%sf    : (0x0₁ ∘ (%rbx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[63:63] = 0x1₁
%of    : ((%rbx[63:63] ⊕ 0x1₁) = 0x1₁ ↔ %rax[63:63] = 0x1₁) ∧ !((%rbx[63:63] ⊕ 0x1₁) = 0x1₁ ↔ (0x0₁ ∘ (%rbx ⊕ 0xffffffffffffffff₆₄) + 0x1₆₅ + 0x0₁ ∘ %rax)[63:63] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/
