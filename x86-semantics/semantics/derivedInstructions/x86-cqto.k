// Autogenerated using stratification.
requires "x86-configuration.k"

module CQTO
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cqto  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "RDX" |-> (ashrMInt(mi(64, svalueMInt(getParentValue(%rax, RSMap))), 63)   )


)

    </regstate>
endmodule

module CQTO-SEMANTICS
  imports CQTO
endmodule
/*
TargetInstr:
cqto
RWSet:
maybe read:{ %rax }
must read:{ %rax }
maybe write:{ %rdx }
must write:{ %rdx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movq $0xffffffffffffffff, %r8  #  1     0    10     OPC=movq_r64_imm64
circuit:sarxq %r8, %rax, %rdx          #  2     0xa  5      OPC=sarxq_r64_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cqto 

  maybe read:      { %rax }
  must read:       { %rax }
  maybe write:     { %rdx }
  must write:      { %rdx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rdx   : (%rax ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x3f₈)[64:1]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/