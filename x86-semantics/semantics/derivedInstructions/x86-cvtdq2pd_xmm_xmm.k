// Autogenerated using stratification.
requires "x86-configuration.k"

module CVTDQ2PD-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cvtdq2pd R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(Float2MInt(Int2Float(svalueMInt(extractMInt(getParentValue(R1, RSMap), 192, 224)), 53, 11), 64), Float2MInt(Int2Float(svalueMInt(extractMInt(getParentValue(R1, RSMap), 224, 256)), 53, 11), 64))) )


)

    </regstate>
endmodule

module CVTDQ2PD-XMM-XMM-SEMANTICS
  imports CVTDQ2PD-XMM-XMM
endmodule
/*
TargetInstr:
cvtdq2pd %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse2 }

Circuit:
circuit:vpmovzxdq %xmm2, %xmm0                #  1     0     5      OPC=vpmovzxdq_xmm_xmm
circuit:vmovaps %ymm0, %ymm2                  #  2     0x5   4      OPC=vmovaps_ymm_ymm
circuit:vcvtdq2pd %ymm2, %ymm3                #  3     0x9   4      OPC=vcvtdq2pd_ymm_ymm
circuit:callq .move_256_128_ymm3_xmm12_xmm13  #  4     0xd   5      OPC=callq_label
circuit:callq .move_64_128_xmm12_xmm13_xmm1   #  5     0x12  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cvtdq2pd %xmm2, %xmm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse2 }

Circuits:

%ymm1  : %ymm1[255:128] ∘ (cvt_int32_to_double(%ymm2[63:32]) ∘ cvt_int32_to_double(%ymm2[31:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/