// Autogenerated using stratification.
requires "x86-configuration.k"

module CVTSI2SSL-XMM-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cvtsi2ssl R1:R32, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 224), Float2MInt(Int2Float(svalueMInt(extractMInt(getParentValue(R1, RSMap), 32, 64)), 24, 8), 32)) )


)

    </regstate>
endmodule

module CVTSI2SSL-XMM-R32-SEMANTICS
  imports CVTSI2SSL-XMM-R32
endmodule
/*
TargetInstr:
cvtsi2ssl %ebx, %xmm1
RWSet:
maybe read:{ %ebx %xmm1 %mxcsr::rc[0] }
must read:{ %ebx %xmm1 %mxcsr::rc[0] }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse }

Circuit:
circuit:vmovd %ebx, %xmm13       #  1     0    4      OPC=vmovd_xmm_r32
circuit:vcvtdq2ps %xmm13, %xmm0  #  2     0x4  5      OPC=vcvtdq2ps_xmm_xmm
circuit:movss %xmm0, %xmm1       #  3     0x9  4      OPC=movss_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cvtsi2ssl %ebx, %xmm1

  maybe read:      { %ebx %xmm1 %mxcsr::rc[0] }
  must read:       { %ebx %xmm1 %mxcsr::rc[0] }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse }

Circuits:

%ymm1  : %ymm1[255:128] ∘ (%ymm1[127:32] ∘ cvt_int32_to_single(%rbx[31:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/