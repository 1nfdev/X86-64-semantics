// Autogenerated using stratification.
requires "x86-configuration.k"

module CWTL
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cwtl  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "RAX" |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(getParentValue(%rax, RSMap), 48, 64))), 32, 64)) )


)

    </regstate>
endmodule

module CWTL-SEMANTICS
  imports CWTL
endmodule
/*
TargetInstr:
cwtl
RWSet:
maybe read:{ %ax }
must read:{ %ax }
maybe write:{ %rax }
must write:{ %rax }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movswl %ax, %edi  #  1     0    3      OPC=movswl_r32_r16
circuit:movswl %di, %eax  #  2     0x3  3      OPC=movswl_r32_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cwtl 

  maybe read:      { %ax }
  must read:       { %ax }
  maybe write:     { %rax }
  must write:      { %rax }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : 0x0₃₂ ∘ sign-extend-64(%rax[15:0])[31:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/