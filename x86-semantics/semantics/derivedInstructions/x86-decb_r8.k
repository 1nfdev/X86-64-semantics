// Autogenerated using stratification.
requires "x86-configuration.k"

module DECB-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (decb R1:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "SF" |-> (extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 255), extractMInt(getParentValue(R1, RSMap), 56, 64)), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 1), extractMInt(getParentValue(R1, RSMap), 56, 57))  andBool   notBool  ( eqMInt(mi(1, 1), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 9)) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module DECB-R8-SEMANTICS
  imports DECB-R8
endmodule
/*
TargetInstr:
decb %bl
RWSet:
maybe read:{ %bl }
must read:{ %bl }
maybe write:{ %bl %pf %af %zf %sf %of }
must write:{ %bl %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movq $0xffffffffffffffff, %r9  #  1     0     10     OPC=movq_r64_imm64
circuit:xorq %rcx, %rcx                #  2     0xa   3      OPC=xorq_r64_r64
circuit:adcb %r9b, %bl                 #  3     0xd   3      OPC=adcb_r8_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

decb %bl

  maybe read:      { %bl }
  must read:       { %bl }
  maybe write:     { %bl %pf %af %zf %sf %of }
  must write:      { %bl %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : %rbx[63:8] ∘ (0xff₉ + 0x0₁ ∘ %rbx[7:0])[7:0]

%pf    : !((0xff₉ + 0x0₁ ∘ %rbx[7:0])[0:0] = 0x1₁ ⊕ (0xff₉ + 0x0₁ ∘ %rbx[7:0])[1:1] = 0x1₁ ⊕ (0xff₉ + 0x0₁ ∘ %rbx[7:0])[2:2] = 0x1₁ ⊕ (0xff₉ + 0x0₁ ∘ %rbx[7:0])[3:3] = 0x1₁ ⊕ (0xff₉ + 0x0₁ ∘ %rbx[7:0])[4:4] = 0x1₁ ⊕ (0xff₉ + 0x0₁ ∘ %rbx[7:0])[5:5] = 0x1₁ ⊕ (0xff₉ + 0x0₁ ∘ %rbx[7:0])[6:6] = 0x1₁ ⊕ (0xff₉ + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁)
%af    : (0xf₅ + 0x0₁ ∘ %rbx[3:0])[4:4] = 0x1₁
%zf    : (0xff₉ + 0x0₁ ∘ %rbx[7:0])[7:0] = 0x0₈
%sf    : (0xff₉ + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁
%of    : (true ↔ %rbx[7:7] = 0x1₁) ∧ !(true ↔ (0xff₉ + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/