// Autogenerated using stratification.
requires "x86-configuration.k"

module INCB-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (incb R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "SF" |-> (extractMInt(addMInt(mi(9, 1), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 1), extractMInt(getParentValue(R1, RSMap), 56, 64)), extractMInt(addMInt(mi(9, 1), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(mi(9, 1), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 57))  andBool   notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt(mi(9, 1), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), extractMInt(addMInt(mi(9, 1), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 9)) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 1), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module INCB-R8-SEMANTICS
  imports INCB-R8
endmodule
/*
TargetInstr:
incb %bl
RWSet:
maybe read:{ %bl }
must read:{ %bl }
maybe write:{ %bl %pf %af %zf %sf %of }
must write:{ %bl %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:xorq %rax, %rax          #  1     0    3      OPC=xorq_r64_r64
circuit:clc                      #  2     0x3  1      OPC=clc
circuit:callq .read_zf_into_rcx  #  3     0x4  5      OPC=callq_label
circuit:adcb %cl, %bl            #  4     0x9  2      OPC=adcb_r8_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

incb %bl

  maybe read:      { %bl }
  must read:       { %bl }
  maybe write:     { %bl %pf %af %zf %sf %of }
  must write:      { %bl %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : %rbx[63:8] ∘ (0x1₉ + 0x0₁ ∘ %rbx[7:0])[7:0]

%pf    : !((0x1₉ + 0x0₁ ∘ %rbx[7:0])[0:0] = 0x1₁ ⊕ (0x1₉ + 0x0₁ ∘ %rbx[7:0])[1:1] = 0x1₁ ⊕ (0x1₉ + 0x0₁ ∘ %rbx[7:0])[2:2] = 0x1₁ ⊕ (0x1₉ + 0x0₁ ∘ %rbx[7:0])[3:3] = 0x1₁ ⊕ (0x1₉ + 0x0₁ ∘ %rbx[7:0])[4:4] = 0x1₁ ⊕ (0x1₉ + 0x0₁ ∘ %rbx[7:0])[5:5] = 0x1₁ ⊕ (0x1₉ + 0x0₁ ∘ %rbx[7:0])[6:6] = 0x1₁ ⊕ (0x1₉ + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁)
%af    : (0x1₅ + 0x0₁ ∘ %rbx[3:0])[4:4] = 0x1₁
%zf    : (0x1₉ + 0x0₁ ∘ %rbx[7:0])[7:0] = 0x0₈
%sf    : (0x1₉ + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁
%of    : (false ↔ %rbx[7:7] = 0x1₁) ∧ !(false ↔ (0x1₉ + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/