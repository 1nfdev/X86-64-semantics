// Autogenerated using stratification.
requires "x86-configuration.k"

module INCB-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (incb R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56)), mi(9, 1)), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), mi(8, 0)), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56)), mi(9, 1)), 1, 9)), 4), mi(8, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56)), mi(9, 1)), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R1, RSMap), 48, 49), mi(1, 0))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R1, RSMap), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56)), mi(9, 1)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56)), mi(9, 1)), 1, 9), extractMInt(getParentValue(R1, RSMap), 56, 64))) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 56)), mi(9, 1)), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module INCB-RH-SEMANTICS
  imports INCB-RH
endmodule
/*
TargetInstr:
incb %ah
RWSet:
maybe read:{ %ah }
must read:{ %ah }
maybe write:{ %ah %pf %af %zf %sf %of }
must write:{ %ah %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:xorb %al, %al  #  1     0    2      OPC=xorb_r8_r8
circuit:callq .set_cf  #  2     0x2  5      OPC=callq_label
circuit:adcb %al, %ah  #  3     0x7  2      OPC=adcb_rh_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

incb %ah

  maybe read:      { %ah }
  must read:       { %ah }
  maybe write:     { %ah %pf %af %zf %sf %of }
  must write:      { %ah %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : %rax[63:16] ∘ (0x0₁ ∘ %rax[15:8] + 0x1₉)[7:0] ∘ %rax[7:0]

%pf    : !((0x0₁ ∘ %rax[15:8] + 0x1₉)[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x1₉)[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x1₉)[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x1₉)[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x1₉)[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x1₉)[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x1₉)[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rax[15:8] + 0x1₉)[7:7] = 0x1₁)
%af    : false
%zf    : (0x0₁ ∘ %rax[15:8] + 0x1₉)[7:0] = 0x0₈
%sf    : (0x0₁ ∘ %rax[15:8] + 0x1₉)[7:7] = 0x1₁
%of    : (%rax[15:15] = 0x1₁ ↔ false) ∧ !(%rax[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rax[15:8] + 0x1₉)[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/