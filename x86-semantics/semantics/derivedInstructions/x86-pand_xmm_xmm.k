// Autogenerated using stratification.
requires "x86-configuration.k"

module PAND-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (pand R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 128, 192), extractMInt(getParentValue(R1, RSMap), 128, 192)), extractMInt(getParentValue(R1, RSMap), 128, 192)), xorMInt(extractMInt(getParentValue(R2, RSMap), 128, 192), extractMInt(getParentValue(R1, RSMap), 128, 192))), xorMInt(orMInt(xorMInt(extractMInt(getParentValue(R2, RSMap), 192, 256), extractMInt(getParentValue(R1, RSMap), 192, 256)), extractMInt(getParentValue(R1, RSMap), 192, 256)), xorMInt(extractMInt(getParentValue(R2, RSMap), 192, 256), extractMInt(getParentValue(R1, RSMap), 192, 256))))) )


)

    </regstate>
endmodule

module PAND-XMM-XMM-SEMANTICS
  imports PAND-XMM-XMM
endmodule
/*
TargetInstr:
pand %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 }
must read:{ %xmm1 %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse2 }

Circuit:
circuit:vpxor %xmm1, %xmm2, %xmm0  #  1     0     4      OPC=vpxor_xmm_xmm_xmm
circuit:pandn %xmm2, %xmm0         #  2     0x4   4      OPC=pandn_xmm_xmm
circuit:vmovapd %xmm0, %xmm2       #  3     0x8   4      OPC=vmovapd_xmm_xmm
circuit:movdqa %xmm2, %xmm1        #  4     0xc   4      OPC=movdqa_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

pand %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 }
  must read:       { %xmm1 %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse2 }

Circuits:

%ymm1  : %ymm1[255:128] ∘ ((%ymm2[127:64] ⊕ %ymm1[127:64] ⊕ (%ymm2[127:64] | %ymm2[127:64] ⊕ %ymm1[127:64])) ∘ (%ymm2[63:0] ⊕ %ymm1[63:0] ⊕ (%ymm2[63:0] | %ymm2[63:0] ⊕ %ymm1[63:0])))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/