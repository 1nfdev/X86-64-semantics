// Autogenerated using stratification.
requires "x86-configuration.k"

module PMOVSXBD-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (pmovsxbd R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(xorMInt(mi(64, 18446743528248704896), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(57, 0), extractMInt(getParentValue(R1, RSMap), 224, 232)), mi(65, 4294967168)), 33, 65), extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(concatenateMInt(mi(24, 0), extractMInt(getParentValue(R1, RSMap), 232, 240)), mi(32, -128))), concatenateMInt(mi(57, 0), extractMInt(getParentValue(R1, RSMap), 232, 240))), 33, 65))), xorMInt(mi(64, 18446743528248704896), concatenateMInt(extractMInt(addMInt(mi(65, 18446743528248704896), concatenateMInt(mi(1, 0), concatenateMInt(mi(32, -128), concatenateMInt(mi(24, 0), extractMInt(getParentValue(R1, RSMap), 240, 248))))), 33, 65), extractMInt(addMInt(mi(65, 18446743528248704896), concatenateMInt(mi(1, 0), concatenateMInt(mi(32, -128), concatenateMInt(mi(24, 0), extractMInt(getParentValue(R1, RSMap), 248, 256))))), 33, 65))))) )


)

    </regstate>
endmodule

module PMOVSXBD-XMM-XMM-SEMANTICS
  imports PMOVSXBD-XMM-XMM
endmodule
/*
TargetInstr:
pmovsxbd %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse4_1 }

Circuit:
circuit:movq $0xffffffffffffff80, %rdx  #  1     0     10     OPC=movq_r64_imm64
circuit:movq %rdx, %xmm3                #  2     0xa   5      OPC=movq_xmm_r64
circuit:vpbroadcastd %xmm3, %ymm5       #  3     0xf   5      OPC=vpbroadcastd_ymm_xmm
circuit:movups %xmm5, %xmm14            #  4     0x14  4      OPC=movups_xmm_xmm
circuit:pmovzxbd %xmm2, %xmm2           #  5     0x18  5      OPC=pmovzxbd_xmm_xmm
circuit:vpaddd %xmm14, %xmm2, %xmm6     #  6     0x1d  5      OPC=vpaddd_xmm_xmm_xmm
circuit:xorps %xmm14, %xmm6             #  7     0x22  4      OPC=xorps_xmm_xmm
circuit:movaps %xmm6, %xmm1             #  8     0x26  3      OPC=movaps_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

pmovsxbd %xmm2, %xmm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse4_1 }

Circuits:

%ymm1  : %ymm1[255:128] ∘ (((0x0₁ ∘ (0x0₃₂ ∘ (0x0₂₄ ∘ %ymm2[31:24])) + 0x0₁ ∘ 0xffffff80₆₄)[31:0] ∘ (0x0₁ ∘ (0x0₂₄ ∘ %ymm2[23:16] ∘ 0xffffff80₃₂) + 0x0₁ ∘ (0x0₃₂ ∘ (0x0₂₄ ∘ %ymm2[23:16])))[31:0] ⊕ 0xffffff80ffffff80₆₄) ∘ ((0x0₁ ∘ 0xffffff80ffffff80₆₄ + 0x0₁ ∘ (0xffffff80₃₂ ∘ (0x0₂₄ ∘ %ymm2[15:8])))[31:0] ⊕ 0xffffff80₃₂) ∘ ((0x0₁ ∘ 0xffffff80ffffff80₆₄ + 0x0₁ ∘ (0xffffff80₃₂ ∘ (0x0₂₄ ∘ %ymm2[7:0])))[31:0] ⊕ 0xffffff80₃₂))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/