// Autogenerated using stratification.
requires "x86-configuration.k"

module POPCNTL-R32-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (popcntl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )

 "SF" |-> (mi(1, 0) )

 "AF" |-> (mi(1, 0) )

 "PF" |-> (mi(1, 0) )

 "OF" |-> (mi(1, 0) )

convToRegKeys(R2) |-> (mi(64, countOnes(extractMInt(getParentValue(R1, RSMap), 32, 64), 0)) )

 "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module POPCNTL-R32-R32-SEMANTICS
  imports POPCNTL-R32-R32
endmodule
/*
TargetInstr:
popcntl %ecx, %ebx
RWSet:
maybe read:{ %ecx }
must read:{ %ecx }
maybe write:{ %rbx %cf %pf %af %zf %sf %of }
must write:{ %rbx %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ popcnt }

Circuit:
circuit:movl %ecx, %r8d    #  1     0    3      OPC=movl_r32_r32
circuit:popcntq %r8, %rbx  #  2     0x3  5      OPC=popcntq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

popcntl %ecx, %ebx

  maybe read:      { %ecx }
  must read:       { %ecx }
  maybe write:     { %rbx %cf %pf %af %zf %sf %of }
  must write:      { %rbx %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { popcnt }

Circuits:

%rbx   : 0x0₃₂ ∘ (0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ %rcx[31:31] + 0x0₁ ∘ %rcx[30:30]) + 0x0₂ ∘ (0x0₁ ∘ %rcx[29:29] + 0x0₁ ∘ %rcx[28:28])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ %rcx[27:27] + 0x0₁ ∘ %rcx[26:26]) + 0x0₂ ∘ (0x0₁ ∘ %rcx[25:25] + 0x0₁ ∘ %rcx[24:24]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ %rcx[23:23] + 0x0₁ ∘ %rcx[22:22]) + 0x0₂ ∘ (0x0₁ ∘ %rcx[21:21] + 0x0₁ ∘ %rcx[20:20])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ %rcx[19:19] + 0x0₁ ∘ %rcx[18:18]) + 0x0₂ ∘ (0x0₁ ∘ %rcx[17:17] + 0x0₁ ∘ %rcx[16:16])))) + 0x0₁₆ ∘ (0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ %rcx[15:15] + 0x0₁ ∘ %rcx[14:14]) + 0x0₂ ∘ (0x0₁ ∘ %rcx[13:13] + 0x0₁ ∘ %rcx[12:12])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ %rcx[11:11] + 0x0₁ ∘ %rcx[10:10]) + 0x0₂ ∘ (0x0₁ ∘ %rcx[9:9] + 0x0₁ ∘ %rcx[8:8]))) + 0x0₈ ∘ (0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ %rcx[7:7] + 0x0₁ ∘ %rcx[6:6]) + 0x0₂ ∘ (0x0₁ ∘ %rcx[5:5] + 0x0₁ ∘ %rcx[4:4])) + 0x0₄ ∘ (0x0₂ ∘ (0x0₁ ∘ %rcx[3:3] + 0x0₁ ∘ %rcx[2:2]) + 0x0₂ ∘ (0x0₁ ∘ %rcx[1:1] + 0x0₁ ∘ %rcx[0:0])))))

%cf    : false
%pf    : false
%af    : false
%zf    : 0x0₃₂ ∘ %rcx[31:0] = 0x0₆₄
%sf    : false
%of    : false

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/