// Autogenerated using stratification.
requires "x86-configuration.k"

module PUNPCKHWD-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (punpckhwd R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(xorMInt(xorMInt(orMInt(concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 144, 160)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 144, 160))), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 128, 160), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 144, 160), extractMInt(getParentValue(R1, RSMap), 144, 160)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 144, 160)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 144, 160)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 128, 144)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 144, 160)))), xorMInt(xorMInt(orMInt(concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 176, 192)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 176, 192))), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 160, 192), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 176, 192), extractMInt(getParentValue(R1, RSMap), 176, 192)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 176, 192)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 176, 192)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 160, 176)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 176, 192)))))) )


)

    </regstate>
endmodule

module PUNPCKHWD-XMM-XMM-SEMANTICS
  imports PUNPCKHWD-XMM-XMM
endmodule
/*
TargetInstr:
punpckhwd %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 }
must read:{ %xmm1 %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse2 }

Circuit:
circuit:unpckhpd %xmm2, %xmm1                         #  1     0     4      OPC=unpckhpd_xmm_xmm
circuit:callq .move_128_032_xmm1_xmm4_xmm5_xmm6_xmm7  #  2     0x4   5      OPC=callq_label
circuit:punpckhqdq %xmm4, %xmm2                       #  3     0x9   4      OPC=punpckhqdq_xmm_xmm
circuit:punpcklwd %xmm2, %xmm1                        #  4     0xd   4      OPC=punpcklwd_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

punpckhwd %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 }
  must read:       { %xmm1 %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse2 }

Circuits:

%ymm1  : %ymm1[255:128] ∘ ((0x0₁₆ ∘ %ymm1[127:112] ∘ (0x0₁₆ ∘ %ymm1[111:96]) ⊕ (0x0₁₆ ∘ %ymm2[111:96] ∘ (0x0₁₆ ∘ %ymm2[111:96]) ⊕ (%ymm2[127:96] ∘ (%ymm2[111:96] ∘ %ymm2[111:96]) | 0x0₁₆ ∘ %ymm2[111:96] ∘ (0x0₁₆ ∘ %ymm2[111:96])))) ∘ (0x0₁₆ ∘ %ymm1[95:80] ∘ (0x0₁₆ ∘ %ymm1[79:64]) ⊕ (0x0₁₆ ∘ %ymm2[79:64] ∘ (0x0₁₆ ∘ %ymm2[79:64]) ⊕ (%ymm2[95:64] ∘ (%ymm2[79:64] ∘ %ymm2[79:64]) | 0x0₁₆ ∘ %ymm2[79:64] ∘ (0x0₁₆ ∘ %ymm2[79:64])))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/