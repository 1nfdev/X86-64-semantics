// Autogenerated using stratification.
requires "x86-configuration.k"

module ROLB-R8-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (rolb $0x1, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64))), concatenateMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64))), 0, 1))), 0, 1) )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 56, 57), extractMInt(getParentValue(R2, RSMap), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 56, 57), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64))), concatenateMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64))), 0, 1))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 56), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64))), concatenateMInt(mi(8, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64))), 0, 1))), 1, 9)) )


)

    </regstate>
endmodule

module ROLB-R8-ONE-SEMANTICS
  imports ROLB-R8-ONE
endmodule
/*
TargetInstr:
rolb $0x1, %bl
RWSet:
maybe read:{ %bl }
must read:{ %bl }
maybe write:{ %bl %cf %of }
must write:{ %bl %cf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:xorq %rax, %rax  #  1     0     3      OPC=xorq_r64_r64
circuit:setnp %ah        #  2     0x3   3      OPC=setnp_rh
circuit:setnz %bh        #  3     0x6   3      OPC=setnz_rh
circuit:addw %bx, %ax    #  4     0x9   3      OPC=addw_r16_r16
circuit:adcb %al, %al    #  5     0xc   2      OPC=adcb_r8_r8
circuit:adcb %bl, %bl    #  6     0xe   2      OPC=adcb_r8_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

rolb $0x1, %bl

  maybe read:      { %bl }
  must read:       { %bl }
  maybe write:     { %bl %cf %of }
  must write:      { %bl %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : %rbx[63:8] ∘ (((0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx[7:0] + 0x1₉ : 0x0₁ ∘ %rbx[7:0]) + 0x0₁ ∘ %rbx[7:0])[7:0]

%cf    : (((0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx[7:0] + 0x1₉ : 0x0₁ ∘ %rbx[7:0]) + 0x0₁ ∘ %rbx[7:0])[8:8] = 0x1₁
%of    : (%rbx[7:7] = 0x1₁ ↔ %rbx[7:7] = 0x1₁) ∧ !(%rbx[7:7] = 0x1₁ ↔ (((0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[8:8] = 0x1₁ ? 0x0₁ ∘ %rbx[7:0] + 0x1₉ : 0x0₁ ∘ %rbx[7:0]) + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/