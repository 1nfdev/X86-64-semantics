// Autogenerated using stratification.
requires "x86-configuration.k"

module ROLB-RH-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (rolb $0x1, R2:Rh,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56))), concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56)))), 0, 1) )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), extractMInt(getParentValue(R2, RSMap), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56))), concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56)))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56))), concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56)))), 1, 9), extractMInt(getParentValue(R2, RSMap), 56, 64))) )


)

    </regstate>
endmodule

module ROLB-RH-ONE-SEMANTICS
  imports ROLB-RH-ONE
endmodule
/*
TargetInstr:
rolb $0x1, %ah
RWSet:
maybe read:{ %ah }
must read:{ %ah }
maybe write:{ %ah %cf %of }
must write:{ %ah %cf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .set_sf   #  1     0     5      OPC=callq_label
circuit:setns %al       #  2     0x5   3      OPC=setns_r8
circuit:xaddb %ah, %al  #  3     0x8   3      OPC=xaddb_r8_rh
circuit:xaddb %ah, %al  #  4     0xb   3      OPC=xaddb_r8_rh
circuit:addw %ax, %ax   #  5     0xe   3      OPC=addw_r16_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

rolb $0x1, %ah

  maybe read:      { %ah }
  must read:       { %ah }
  maybe write:     { %ah %cf %of }
  must write:      { %ah %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : %rax[63:16] ∘ (0x0₁ ∘ (%rax[15:8] ∘ %rax[15:8]) + 0x0₁ ∘ (%rax[15:8] ∘ %rax[15:8]))[15:8] ∘ %rax[7:0]

%cf    : (0x0₁ ∘ (%rax[15:8] ∘ %rax[15:8]) + 0x0₁ ∘ (%rax[15:8] ∘ %rax[15:8]))[16:16] = 0x1₁
%of    : (%rax[15:15] = 0x1₁ ↔ %rax[15:15] = 0x1₁) ∧ !(%rax[15:15] = 0x1₁ ↔ (0x0₁ ∘ (%rax[15:8] ∘ %rax[15:8]) + 0x0₁ ∘ (%rax[15:8] ∘ %rax[15:8]))[15:15] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/