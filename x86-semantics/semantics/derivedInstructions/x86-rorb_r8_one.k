// Autogenerated using stratification.
requires "x86-configuration.k"

module RORB-R8-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (rorb $0x1, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))))), 1), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))))), 1), 56, 64))), 0, 1) )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))))), 1), 56, 57), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))))), 1), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))))), 1), 56, 57), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))))), 1), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))))), 1), 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 56), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64)))))), 1), 56, 64)) )


)

    </regstate>
endmodule

module RORB-R8-ONE-SEMANTICS
  imports RORB-R8-ONE
endmodule
/*
TargetInstr:
rorb $0x1, %bl
RWSet:
maybe read:{ %bl }
must read:{ %bl }
maybe write:{ %bl %cf %of }
must write:{ %bl %cf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movb %bl, %bh     #  1     0    2      OPC=movb_rh_r8
circuit:sarw $0x1, %bx    #  2     0x2  3      OPC=sarw_r16_one
circuit:movsbl %bl, %eax  #  3     0x5  3      OPC=movsbl_r32_r8
circuit:salb $0x1, %al    #  4     0x8  2      OPC=salb_r8_one
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

rorb $0x1, %bl

  maybe read:      { %bl }
  must read:       { %bl }
  maybe write:     { %bl %cf %of }
  must write:      { %bl %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : %rbx[63:8] ∘ (sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1]

%cf    : (0x0₁ ∘ (sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[8:8] = 0x1₁
%of    : ((sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁) ∧ !((sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (0x0₁ ∘ (sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rbx[7:0] ∘ %rbx[7:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/