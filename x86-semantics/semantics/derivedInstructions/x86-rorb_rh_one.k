// Autogenerated using stratification.
requires "x86-configuration.k"

module RORB-RH-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (rorb $0x1, R2:Rh,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56)))))), 1), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56)))))), 1), 56, 64))), 0, 1) )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56)))))), 1), 56, 57), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56)))))), 1), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56)))))), 1), 56, 57), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56)))))), 1), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56)))))), 1), 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(getParentValue(R2, RSMap), 48, 56), extractMInt(getParentValue(R2, RSMap), 48, 56)))))), 1), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64))) )


)

    </regstate>
endmodule

module RORB-RH-ONE-SEMANTICS
  imports RORB-RH-ONE
endmodule
/*
TargetInstr:
rorb $0x1, %ah
RWSet:
maybe read:{ %ah }
must read:{ %ah }
maybe write:{ %ah %cf %of }
must write:{ %ah %cf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movb %ah, %dh     #  1     0    2      OPC=movb_rh_rh
circuit:movb %dh, %al     #  2     0x2  2      OPC=movb_r8_rh
circuit:rorb $0x1, %al    #  3     0x4  2      OPC=rorb_r8_one
circuit:movswq %ax, %rbx  #  4     0x6  4      OPC=movswq_r64_r16
circuit:xchgb %ah, %bl    #  5     0xa  2      OPC=xchgb_r8_rh
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

rorb $0x1, %ah

  maybe read:      { %ah }
  must read:       { %ah }
  maybe write:     { %ah %cf %of }
  must write:      { %ah %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : %rax[63:16] ∘ (sign-extend-64(%rax[15:8] ∘ %rax[15:8]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] ∘ %rax[7:0]

%cf    : (0x0₁ ∘ (sign-extend-64(%rax[15:8] ∘ %rax[15:8]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rax[15:8] ∘ %rax[15:8]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[8:8] = 0x1₁
%of    : ((sign-extend-64(%rax[15:8] ∘ %rax[15:8]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (sign-extend-64(%rax[15:8] ∘ %rax[15:8]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁) ∧ !((sign-extend-64(%rax[15:8] ∘ %rax[15:8]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁ ↔ (0x0₁ ∘ (sign-extend-64(%rax[15:8] ∘ %rax[15:8]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] + 0x0₁ ∘ (sign-extend-64(%rax[15:8] ∘ %rax[15:8]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1])[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/