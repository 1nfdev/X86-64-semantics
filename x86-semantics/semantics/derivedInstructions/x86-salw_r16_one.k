// Autogenerated using stratification.
requires "x86-configuration.k"

module SALW-R16-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (salw $0x1, R2:R16,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 1, 2) )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 9, 17), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), extractMInt(getParentValue(R2, RSMap), 48, 49))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 48, 49), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 1, 17)) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))), 1, 17), mi(16, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module SALW-R16-ONE-SEMANTICS
  imports SALW-R16-ONE
endmodule
/*
TargetInstr:
salw $0x1, %bx
RWSet:
maybe read:{ %bx }
must read:{ %bx }
maybe write:{ %bx %cf %pf %zf %sf %of }
must write:{ %bx %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:shlw $0x1, %bx  #  1     0    3      OPC=shlw_r16_one
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

salw $0x1, %bx

  maybe read:      { %bx }
  must read:       { %bx }
  maybe write:     { %bx %cf %pf %zf %sf %of }
  must write:      { %bx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Circuits:

%rbx   : %rbx[63:16] ∘ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[15:0]

%cf    : (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[16:16] = 0x1₁
%pf    : !((0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[7:7] = 0x1₁)
%zf    : (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[15:0] = 0x0₁₆
%sf    : (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[15:15] = 0x1₁
%of    : (%rbx[15:15] = 0x1₁ ↔ %rbx[15:15] = 0x1₁) ∧ !(%rbx[15:15] = 0x1₁ ↔ (0x0₁ ∘ %rbx[15:0] + 0x0₁ ∘ %rbx[15:0])[15:15] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/