// Autogenerated using stratification.
requires "x86-configuration.k"

module SARB-RH-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (sarb $0x1, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(getParentValue(R2, RSMap), 55, 56) )

 "SF" |-> (extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 56))), 48, 64))))), 1), 0, 1) )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 56))), 48, 64))))), 1), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> (mi(1, 0) )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 56))), 48, 64))))), 1), 56, 64), extractMInt(getParentValue(R2, RSMap), 56, 64))) )

 "ZF" |-> ((#ifMInt (eqMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 56))), 48, 64))))), 1), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module SARB-RH-ONE-SEMANTICS
  imports SARB-RH-ONE
endmodule
/*
TargetInstr:
sarb $0x1, %ah
RWSet:
maybe read:{ %ah }
must read:{ %ah }
maybe write:{ %ah %cf %pf %zf %sf %of }
must write:{ %ah %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:movsbl %ah, %edx  #  1     0    3      OPC=movsbl_r32_rh
circuit:sarw $0x1, %dx    #  2     0x3  3      OPC=sarw_r16_one
circuit:xchgb %dl, %ah    #  3     0x6  2      OPC=xchgb_rh_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

sarb $0x1, %ah

  maybe read:      { %ah }
  must read:       { %ah }
  maybe write:     { %ah %cf %pf %zf %sf %of }
  must write:      { %ah %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Circuits:

%rax   : %rax[63:16] ∘ (sign-extend-64(sign-extend-64(%rax[15:8])[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:1] ∘ %rax[7:0]

%cf    : true ∧ (sign-extend-64(sign-extend-64(%rax[15:8])[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[0:0] = 0x1₁ ∨ false
%pf    : !((sign-extend-64(sign-extend-64(%rax[15:8])[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[1:1] = 0x1₁ ⊕ (sign-extend-64(sign-extend-64(%rax[15:8])[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[2:2] = 0x1₁ ⊕ (sign-extend-64(sign-extend-64(%rax[15:8])[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[3:3] = 0x1₁ ⊕ (sign-extend-64(sign-extend-64(%rax[15:8])[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[4:4] = 0x1₁ ⊕ (sign-extend-64(sign-extend-64(%rax[15:8])[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[5:5] = 0x1₁ ⊕ (sign-extend-64(sign-extend-64(%rax[15:8])[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[6:6] = 0x1₁ ⊕ (sign-extend-64(sign-extend-64(%rax[15:8])[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[7:7] = 0x1₁ ⊕ (sign-extend-64(sign-extend-64(%rax[15:8])[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[8:8] = 0x1₁)
%zf    : (sign-extend-64(sign-extend-64(%rax[15:8])[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:1] = 0x0₆₄
%sf    : (sign-extend-64(sign-extend-64(%rax[15:8])[15:0]) ∘ 0x0₁ sign_shift_right 0x0₅₇ ∘ 0x1₈)[64:64] = 0x1₁
%of    : false

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/