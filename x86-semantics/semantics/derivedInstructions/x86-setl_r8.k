// Autogenerated using stratification.
requires "x86-configuration.k"

module SETL-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setl R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), xorMInt(concatenateMInt(mi(7, 0), getFlag("SF", RSMap)), concatenateMInt(mi(7, 0), getFlag("OF", RSMap)))) )


)

    </regstate>
endmodule

module SETL-R8-SEMANTICS
  imports SETL-R8
endmodule
/*
TargetInstr:
setl %bl
RWSet:
maybe read:{ %sf %of }
must read:{ %sf %of }
maybe write:{ %bl }
must write:{ %bl }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:setl %bh       #  1     0    3      OPC=setl_rh
circuit:movb %bh, %bl  #  2     0x3  2      OPC=movb_r8_rh
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setl %bl

  maybe read:      { %sf %of }
  must read:       { %sf %of }
  maybe write:     { %bl }
  must write:      { %bl }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : %rbx[63:8] ∘ ((%of ? 0x1₈ : 0x0₈) ⊕ (%sf ? 0x1₈ : 0x0₈))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/