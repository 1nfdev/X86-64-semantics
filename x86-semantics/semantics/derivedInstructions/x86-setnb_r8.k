// Autogenerated using stratification.
requires "x86-configuration.k"

module SETNB-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setnb R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), xorMInt(mi(8, 1), concatenateMInt(mi(7, 0), getFlag("CF", RSMap)))) )


)

    </regstate>
endmodule

module SETNB-R8-SEMANTICS
  imports SETNB-R8
endmodule
/*
TargetInstr:
setnb %bl
RWSet:
maybe read:{ %cf }
must read:{ %cf }
maybe write:{ %bl }
must write:{ %bl }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:setnc %bl        #  1     0    3      OPC=setnc_r8
circuit:xorq %rcx, %rcx  #  2     0x3  3      OPC=xorq_r64_r64
circuit:xaddb %ch, %bl   #  3     0x6  3      OPC=xaddb_r8_rh
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setnb %bl

  maybe read:      { %cf }
  must read:       { %cf }
  maybe write:     { %bl }
  must write:      { %bl }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : %rbx[63:8] ∘ (%cf ? 0x0₈ : 0x1₈)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/