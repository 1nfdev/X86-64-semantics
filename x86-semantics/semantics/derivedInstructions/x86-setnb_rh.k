// Autogenerated using stratification.
requires "x86-configuration.k"

module SETNB-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setnb R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> ((#ifMInt (eqMInt(getFlag("CF", RSMap), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(mi(8, 1), extractMInt(getParentValue(R1, RSMap), 56, 64))) ) #else ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))) ) #fi)  )


)

    </regstate>
endmodule

module SETNB-RH-SEMANTICS
  imports SETNB-RH
endmodule
/*
TargetInstr:
setnb %ah
RWSet:
maybe read:{ %cf }
must read:{ %cf }
maybe write:{ %ah }
must write:{ %ah }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .read_cf_into_rcx  #  1     0    5      OPC=callq_label
circuit:callq .write_cl_to_zf    #  2     0x5  5      OPC=callq_label
circuit:setnz %ah                #  3     0xa  3      OPC=setnz_rh
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setnb %ah

  maybe read:      { %cf }
  must read:       { %cf }
  maybe write:     { %ah }
  must write:      { %ah }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : %rax[63:16] ∘ ((%cf ? 0x1₁ : 0x0₁) = 0x1₁ ? 0x0₈ : 0x1₈) ∘ %rax[7:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/