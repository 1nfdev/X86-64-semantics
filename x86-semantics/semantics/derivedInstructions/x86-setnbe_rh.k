// Autogenerated using stratification.
requires "x86-configuration.k"

module SETNBE-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setnbe R1:Rh,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), getFlag("ZF", RSMap))), 1, 9), mi(8, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R1, RSMap), 56, 64))) ) #else ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(mi(9, 255), concatenateMInt(mi(8, 0), getFlag("CF", RSMap))), 1, 9)), mi(17, 4)), 1, 9), extractMInt(getParentValue(R1, RSMap), 56, 64))) ) #fi)  )


)

    </regstate>
endmodule

module SETNBE-RH-SEMANTICS
  imports SETNBE-RH
endmodule
/*
TargetInstr:
setnbe %ah
RWSet:
maybe read:{ %cf %zf }
must read:{ %cf %zf }
maybe write:{ %ah }
must write:{ %ah }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:seta %dl          #  1     0     3      OPC=seta_r8
circuit:movq $0x20, %rax  #  2     0x3   10     OPC=movq_r64_imm64
circuit:xaddb %dl, %ah    #  3     0xd   3      OPC=xaddb_rh_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setnbe %ah

  maybe read:      { %cf %zf }
  must read:       { %cf %zf }
  maybe write:     { %ah }
  must write:      { %ah }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : %rax[63:16] ∘ ((%zf ? 0x0₈ : 0xff₈) = 0x0₈ ? 0x0₈ : %cf ? 0x0₈ : 0x1₈) ∘ %rax[7:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/