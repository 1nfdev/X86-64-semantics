// Autogenerated using stratification.
requires "x86-configuration.k"

module SHLB-R8-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (shlb $0x1, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64))), 1, 2) )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64))), 1, 9), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 56, 57), extractMInt(getParentValue(R2, RSMap), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 56, 57), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 56), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64))), 1, 9)) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module SHLB-R8-ONE-SEMANTICS
  imports SHLB-R8-ONE
endmodule
/*
TargetInstr:
shlb $0x1, %bl
RWSet:
maybe read:{ %bl }
must read:{ %bl }
maybe write:{ %bl %cf %pf %zf %sf %of }
must write:{ %bl %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:xorq %rax, %rax        #  1     0    3      OPC=xorq_r64_r64
circuit:clc                    #  2     0x3  1      OPC=clc
circuit:adcb %al, %al          #  3     0x4  2      OPC=adcb_r8_r8
circuit:adcb %bl, %bl          #  4     0x6  2      OPC=adcb_r8_r8
circuit:callq .set_szp_for_bl  #  5     0x8  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

shlb $0x1, %bl

  maybe read:      { %bl }
  must read:       { %bl }
  maybe write:     { %bl %cf %pf %zf %sf %of }
  must write:      { %bl %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Circuits:

%rbx   : %rbx[63:8] ∘ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[7:0]

%cf    : (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[8:8] = 0x1₁
%pf    : !((0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁)
%zf    : (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[7:0] = 0x0₈
%sf    : (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁
%of    : (%rbx[7:7] = 0x1₁ ↔ %rbx[7:7] = 0x1₁) ∧ !(%rbx[7:7] = 0x1₁ ↔ (0x0₁ ∘ %rbx[7:0] + 0x0₁ ∘ %rbx[7:0])[7:7] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/