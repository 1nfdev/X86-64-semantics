// Autogenerated using stratification.
requires "x86-configuration.k"

module VFMADDSUB213PD-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vfmaddsub213pd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( (  ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 128, 192), 53, 11)  *Float  MInt2Float(extractMInt(getParentValue(R3, RSMap), 128, 192), 53, 11) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 128, 192), 53, 11) )  ) , 64), Float2MInt( (  ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 192, 256), 53, 11)  *Float  MInt2Float(extractMInt(getParentValue(R3, RSMap), 192, 256), 53, 11) )  -Float  ( negateFloat( (  ( -0e+00  -Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 192, 256), 53, 11) )  *Float  MInt2Float(concatenateMInt(mi(32, 0), extractMInt(Float2MInt( ( -0e+00  -Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 128, 192), 53, 11) ) , 64), 0, 32)), 53, 11) ) )  -Float  ( -0e+00  -Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 192, 256), 53, 11) )  )  ) , 64))) )


)

    </regstate>
endmodule

module VFMADDSUB213PD-XMM-XMM-XMM-SEMANTICS
  imports VFMADDSUB213PD-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vfmaddsub213pd %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 %xmm3 }
must read:{ %xmm1 %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ fma }

Circuit:
circuit:vfmaddsub231pd %xmm1, %xmm2, %xmm3  #  1     0     5      OPC=vfmaddsub231pd_xmm_xmm_xmm
circuit:callq .move_128_064_xmm3_r12_r13    #  2     0x5   5      OPC=callq_label
circuit:vaddps %xmm2, %xmm3, %xmm1          #  3     0xa   4      OPC=vaddps_xmm_xmm_xmm
circuit:callq .move_064_128_r12_r13_xmm1    #  4     0xe   5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vfmaddsub213pd %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 %xmm3 }
  must read:       { %xmm1 %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { fma }

Circuits:

%ymm1  : 0x0₁₂₈ ∘ (vfmsub132_double(%ymm2[127:64], vnfmsub132_double((maxcmp_single(0x0₃₂, 0x0₃₂ ⊕ (%ymm3[127:96] | 0x0₃₂) ⊕ (%ymm3[127:96] | 0x0₃₂ ⊕ (%ymm3[127:96] | 0x0₃₂))) = 0x1₁ ? 0x0₃₂ : 0x0₃₂ ⊕ (%ymm3[127:96] | 0x0₃₂) ⊕ (%ymm3[127:96] | 0x0₃₂ ⊕ (%ymm3[127:96] | 0x0₃₂))) ∘ (maxcmp_single(0x0₃₂, 0x0₃₂ ⊕ (%ymm3[95:64] | 0x0₃₂) ⊕ (%ymm3[95:64] | 0x0₃₂ ⊕ (%ymm3[95:64] | 0x0₃₂))) = 0x1₁ ? 0x0₃₂ : 0x0₃₂ ⊕ (%ymm3[95:64] | 0x0₃₂) ⊕ (%ymm3[95:64] | 0x0₃₂ ⊕ (%ymm3[95:64] | 0x0₃₂))), %ymm3[127:64], 0x0₆₄), %ymm1[127:64]) ∘ vfmsub132_double(%ymm2[63:0], vnfmsub132_double(vnfmsub132_double((maxcmp_single(%ymm1[63:32], 0x0₃₂ ⊕ (%ymm3[63:32] | 0x0₃₂) ⊕ (%ymm3[63:32] | 0x0₃₂ ⊕ (%ymm3[63:32] | 0x0₃₂))) = 0x1₁ ? %ymm1[63:32] : 0x0₃₂ ⊕ (%ymm3[63:32] | 0x0₃₂) ⊕ (%ymm3[63:32] | 0x0₃₂ ⊕ (%ymm3[63:32] | 0x0₃₂))) ∘ (maxcmp_single(%ymm1[31:0], 0x0₃₂ ⊕ (%ymm3[31:0] | 0x0₃₂) ⊕ (%ymm3[31:0] | 0x0₃₂ ⊕ (%ymm3[31:0] | 0x0₃₂))) = 0x1₁ ? %ymm1[31:0] : 0x0₃₂ ⊕ (%ymm3[31:0] | 0x0₃₂) ⊕ (%ymm3[31:0] | 0x0₃₂ ⊕ (%ymm3[31:0] | 0x0₃₂))), %ymm3[63:0], 0x0₆₄), vnfmsub132_double((maxcmp_single(%ymm1[63:32], 0x0₃₂ ⊕ (%ymm3[63:32] | 0x0₃₂) ⊕ (%ymm3[63:32] | 0x0₃₂ ⊕ (%ymm3[63:32] | 0x0₃₂))) = 0x1₁ ? %ymm1[63:32] : 0x0₃₂ ⊕ (%ymm3[63:32] | 0x0₃₂) ⊕ (%ymm3[63:32] | 0x0₃₂ ⊕ (%ymm3[63:32] | 0x0₃₂))) ∘ (maxcmp_single(%ymm1[31:0], 0x0₃₂ ⊕ (%ymm3[31:0] | 0x0₃₂) ⊕ (%ymm3[31:0] | 0x0₃₂ ⊕ (%ymm3[31:0] | 0x0₃₂))) = 0x1₁ ? %ymm1[31:0] : 0x0₃₂ ⊕ (%ymm3[31:0] | 0x0₃₂) ⊕ (%ymm3[31:0] | 0x0₃₂ ⊕ (%ymm3[31:0] | 0x0₃₂))), %ymm3[63:0], 0x0₆₄), 0x0₃₂ ∘ vnfmsub132_double((maxcmp_single(0x0₃₂, 0x0₃₂ ⊕ (%ymm3[127:96] | 0x0₃₂) ⊕ (%ymm3[127:96] | 0x0₃₂ ⊕ (%ymm3[127:96] | 0x0₃₂))) = 0x1₁ ? 0x0₃₂ : 0x0₃₂ ⊕ (%ymm3[127:96] | 0x0₃₂) ⊕ (%ymm3[127:96] | 0x0₃₂ ⊕ (%ymm3[127:96] | 0x0₃₂))) ∘ (maxcmp_single(0x0₃₂, 0x0₃₂ ⊕ (%ymm3[95:64] | 0x0₃₂) ⊕ (%ymm3[95:64] | 0x0₃₂ ⊕ (%ymm3[95:64] | 0x0₃₂))) = 0x1₁ ? 0x0₃₂ : 0x0₃₂ ⊕ (%ymm3[95:64] | 0x0₃₂) ⊕ (%ymm3[95:64] | 0x0₃₂ ⊕ (%ymm3[95:64] | 0x0₃₂))), %ymm3[127:64], 0x0₆₄)[63:32]), %ymm1[63:0]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/