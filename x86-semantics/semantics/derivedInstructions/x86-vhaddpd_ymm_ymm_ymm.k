// Autogenerated using stratification.
requires "x86-configuration.k"

module VHADDPD-YMM-YMM-YMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vhaddpd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 0, 64), 53, 11)  +Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 64, 128), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 0, 64), 53, 11)  +Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 64, 128), 53, 11) ) , 64)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 192, 256), 53, 11) ) , 64), Float2MInt( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 128, 192), 53, 11)  +Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 192, 256), 53, 11) ) , 64))) )


)

    </regstate>
endmodule

module VHADDPD-YMM-YMM-YMM-SEMANTICS
  imports VHADDPD-YMM-YMM-YMM
endmodule
/*
TargetInstr:
vhaddpd %ymm3, %ymm2, %ymm1
RWSet:
maybe read:{ %ymm2 %ymm3 }
must read:{ %ymm2 %ymm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:callq .move_256_128_ymm3_xmm12_xmm13  #  1     0     5      OPC=callq_label
circuit:vmovdqa %xmm13, %xmm0                 #  2     0x5   5      OPC=vmovdqa_xmm_xmm
circuit:callq .move_256_128_ymm2_xmm8_xmm9    #  3     0xa   5      OPC=callq_label
circuit:haddpd %xmm0, %xmm9                   #  4     0xf   5      OPC=haddpd_xmm_xmm
circuit:vhaddpd %xmm3, %xmm2, %xmm8           #  5     0x14  4      OPC=vhaddpd_xmm_xmm_xmm
circuit:callq .move_128_256_xmm8_xmm9_ymm1    #  6     0x18  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vhaddpd %ymm3, %ymm2, %ymm1

  maybe read:      { %ymm2 %ymm3 }
  must read:       { %ymm2 %ymm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%ymm1  : add_double(%ymm3[191:128], %ymm3[255:192]) ∘ add_double(%ymm2[191:128], %ymm2[255:192]) ∘ (add_double(%ymm3[63:0], %ymm3[127:64]) ∘ add_double(%ymm2[63:0], %ymm2[127:64]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/