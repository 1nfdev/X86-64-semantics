// Autogenerated using stratification.
requires "x86-configuration.k"

module VHADDPS-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vhaddps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 224, 256), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 224, 256), 24, 8) ) , 32)))) )


)

    </regstate>
endmodule

module VHADDPS-XMM-XMM-XMM-SEMANTICS
  imports VHADDPS-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vhaddps %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 %xmm3 }
must read:{ %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:vpbroadcastq %xmm3, %xmm14           #  1     0     5      OPC=vpbroadcastq_xmm_xmm
circuit:callq .move_128_64_xmm2_xmm12_xmm13  #  2     0x5   5      OPC=callq_label
circuit:vunpckhps %xmm3, %xmm14, %xmm12      #  3     0xa   4      OPC=vunpckhps_xmm_xmm_xmm
circuit:vpunpckldq %xmm13, %xmm2, %xmm1      #  4     0xe   5      OPC=vpunpckldq_xmm_xmm_xmm
circuit:vpunpckhqdq %ymm12, %ymm1, %ymm11    #  5     0x13  5      OPC=vpunpckhqdq_ymm_ymm_ymm
circuit:movlhps %xmm12, %xmm1                #  6     0x18  4      OPC=movlhps_xmm_xmm
circuit:addps %xmm11, %xmm1                  #  7     0x1c  4      OPC=addps_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vhaddps %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm2 %xmm3 }
  must read:       { %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%ymm1  : 0x0₁₂₈ ∘ (add_single(%ymm3[95:64], %ymm3[127:96]) ∘ add_single(%ymm3[31:0], %ymm3[63:32]) ∘ add_single(%ymm2[95:64], %ymm2[127:96]) ∘ add_single(%ymm2[31:0], %ymm2[63:32]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/