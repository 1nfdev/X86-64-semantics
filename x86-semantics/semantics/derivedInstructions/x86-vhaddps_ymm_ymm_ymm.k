// Autogenerated using stratification.
requires "x86-configuration.k"

module VHADDPS-YMM-YMM-YMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vhaddps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 0, 32), 24, 8)  +Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 32, 64), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 64, 96), 24, 8)  +Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 96, 128), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 0, 32), 24, 8)  +Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 32, 64), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 64, 96), 24, 8)  +Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 96, 128), 24, 8) ) , 32))), concatenateMInt(concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 224, 256), 24, 8) ) , 32)), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 128, 160), 24, 8)  +Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 160, 192), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 192, 224), 24, 8)  +Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 224, 256), 24, 8) ) , 32)))) )


)

    </regstate>
endmodule

module VHADDPS-YMM-YMM-YMM-SEMANTICS
  imports VHADDPS-YMM-YMM-YMM
endmodule
/*
TargetInstr:
vhaddps %ymm3, %ymm2, %ymm1
RWSet:
maybe read:{ %ymm2 %ymm3 }
must read:{ %ymm2 %ymm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:callq .move_256_128_ymm2_xmm10_xmm11  #  1     0     5      OPC=callq_label
circuit:haddps %xmm3, %xmm10                  #  2     0x5   5      OPC=haddps_xmm_xmm
circuit:callq .move_256_128_ymm3_xmm8_xmm9    #  3     0xa   5      OPC=callq_label
circuit:haddps %xmm9, %xmm11                  #  4     0xf   5      OPC=haddps_xmm_xmm
circuit:callq .move_128_256_xmm10_xmm11_ymm1  #  5     0x14  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vhaddps %ymm3, %ymm2, %ymm1

  maybe read:      { %ymm2 %ymm3 }
  must read:       { %ymm2 %ymm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%ymm1  : add_single(%ymm3[223:192], %ymm3[255:224]) ∘ add_single(%ymm3[159:128], %ymm3[191:160]) ∘ add_single(%ymm2[223:192], %ymm2[255:224]) ∘ add_single(%ymm2[159:128], %ymm2[191:160]) ∘ (add_single(%ymm3[95:64], %ymm3[127:96]) ∘ add_single(%ymm3[31:0], %ymm3[63:32]) ∘ add_single(%ymm2[95:64], %ymm2[127:96]) ∘ add_single(%ymm2[31:0], %ymm2[63:32]))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/