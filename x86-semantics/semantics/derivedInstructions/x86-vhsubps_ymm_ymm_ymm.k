// Autogenerated using stratification.
requires "x86-configuration.k"

module VHSUBPS-YMM-YMM-YMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vhsubps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 32, 64), 24, 8)  -Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 96, 128), 24, 8)  -Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 64, 96), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 32, 64), 24, 8)  -Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 0, 32), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 96, 128), 24, 8)  -Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 64, 96), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(getParentValue(R1, RSMap), 192, 224), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 160, 192), 24, 8)  -Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 128, 160), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(getParentValue(R2, RSMap), 224, 256), 24, 8)  -Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 192, 224), 24, 8) ) , 32)))))))) )


)

    </regstate>
endmodule

module VHSUBPS-YMM-YMM-YMM-SEMANTICS
  imports VHSUBPS-YMM-YMM-YMM
endmodule
/*
TargetInstr:
vhsubps %ymm3, %ymm2, %ymm1
RWSet:
maybe read:{ %ymm2 %ymm3 }
must read:{ %ymm2 %ymm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:vmovddup %ymm2, %ymm12           #  1     0     4      OPC=vmovddup_ymm_ymm
circuit:vpunpckhdq %ymm2, %ymm12, %ymm0  #  2     0x4   4      OPC=vpunpckhdq_ymm_ymm_ymm
circuit:vunpcklps %ymm3, %ymm0, %ymm6    #  3     0x8   4      OPC=vunpcklps_ymm_ymm_ymm
circuit:vpunpckhdq %ymm3, %ymm6, %ymm1   #  4     0xc   4      OPC=vpunpckhdq_ymm_ymm_ymm
circuit:vunpcklps %ymm1, %ymm6, %ymm14   #  5     0x10  4      OPC=vunpcklps_ymm_ymm_ymm
circuit:vpunpckhqdq %ymm1, %ymm0, %ymm5  #  6     0x14  4      OPC=vpunpckhqdq_ymm_ymm_ymm
circuit:vsubps %ymm5, %ymm14, %ymm1      #  7     0x18  4      OPC=vsubps_ymm_ymm_ymm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vhsubps %ymm3, %ymm2, %ymm1

  maybe read:      { %ymm2 %ymm3 }
  must read:       { %ymm2 %ymm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%ymm1  : sub_single(%ymm3[223:192], %ymm3[255:224]) ∘ (sub_single(%ymm3[159:128], %ymm3[191:160]) ∘ (sub_single(%ymm2[223:192], %ymm2[255:224]) ∘ (sub_single(%ymm2[159:128], %ymm2[191:160]) ∘ (sub_single(%ymm3[95:64], %ymm3[127:96]) ∘ (sub_single(%ymm3[31:0], %ymm3[63:32]) ∘ (sub_single(%ymm2[95:64], %ymm2[127:96]) ∘ sub_single(%ymm2[31:0], %ymm2[63:32])))))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/