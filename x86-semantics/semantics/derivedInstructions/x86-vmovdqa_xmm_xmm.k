// Autogenerated using stratification.
requires "x86-configuration.k"

module VMOVDQA-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vmovdqa R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(128, 0), extractMInt(getParentValue(R1, RSMap), 128, 256)) )


)

    </regstate>
endmodule

module VMOVDQA-XMM-XMM-SEMANTICS
  imports VMOVDQA-XMM-XMM
endmodule
/*
TargetInstr:
vmovdqa %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:callq .move_128_064_xmm2_r12_r13  #  1     0    5      OPC=callq_label
circuit:vzeroall                          #  2     0x5  3      OPC=vzeroall
circuit:callq .move_064_128_r12_r13_xmm1  #  3     0x8  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vmovdqa %xmm2, %xmm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%ymm1  : 0x0₁₂₈ ∘ %ymm2[127:0]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/