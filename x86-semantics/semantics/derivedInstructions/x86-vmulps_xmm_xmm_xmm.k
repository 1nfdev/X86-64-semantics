// Autogenerated using stratification.
requires "x86-configuration.k"

module VMULPS-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vmulps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 128, 160), 24, 8)  *Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 128, 160), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 160, 192), 24, 8)  *Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 160, 192), 24, 8) ) , 32), concatenateMInt(Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 192, 224), 24, 8)  *Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 192, 224), 24, 8) ) , 32), Float2MInt( ( MInt2Float(extractMInt(getParentValue(R1, RSMap), 224, 256), 24, 8)  *Float  MInt2Float(extractMInt(getParentValue(R2, RSMap), 224, 256), 24, 8) ) , 32))))) )


)

    </regstate>
endmodule

module VMULPS-XMM-XMM-XMM-SEMANTICS
  imports VMULPS-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vmulps %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 %xmm3 }
must read:{ %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:callq .move_128_064_xmm3_r10_r11  #  1     0     5      OPC=callq_label
circuit:callq .move_128_064_xmm2_r8_r9    #  2     0x5   5      OPC=callq_label
circuit:vzeroall                          #  3     0xa   3      OPC=vzeroall
circuit:callq .move_064_128_r10_r11_xmm1  #  4     0xd   5      OPC=callq_label
circuit:callq .move_064_128_r8_r9_xmm2    #  5     0x12  5      OPC=callq_label
circuit:vmulps %ymm1, %ymm2, %ymm1        #  6     0x17  4      OPC=vmulps_ymm_ymm_ymm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vmulps %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm2 %xmm3 }
  must read:       { %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%ymm1  : 0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (0x0₃₂ ∘ (mul_single(%ymm2[127:96], %ymm3[127:96]) ∘ (mul_single(%ymm2[95:64], %ymm3[95:64]) ∘ (mul_single(%ymm2[63:32], %ymm3[63:32]) ∘ mul_single(%ymm2[31:0], %ymm3[31:0])))))))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/