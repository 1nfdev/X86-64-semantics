// Autogenerated using stratification.
requires "x86-configuration.k"

module VPHADDD-YMM-YMM-YMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vphaddd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(concatenateMInt(concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(33, 0), extractMInt(getParentValue(R1, RSMap), 0, 32)), concatenateMInt(mi(33, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 33, 65), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 64, 128)), concatenateMInt(mi(33, 0), extractMInt(getParentValue(R1, RSMap), 64, 96))), 33, 65)), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 32), extractMInt(getParentValue(R2, RSMap), 0, 32))), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 0, 64))), 33, 65), extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(getParentValue(R2, RSMap), 64, 96), extractMInt(getParentValue(R2, RSMap), 64, 96))), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 64, 128))), 33, 65))), concatenateMInt(concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(33, 0), extractMInt(getParentValue(R1, RSMap), 128, 160)), concatenateMInt(mi(33, 0), extractMInt(getParentValue(R1, RSMap), 160, 192))), 33, 65), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 192, 256)), concatenateMInt(mi(33, 0), extractMInt(getParentValue(R1, RSMap), 192, 224))), 33, 65)), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(getParentValue(R2, RSMap), 128, 160), extractMInt(getParentValue(R2, RSMap), 128, 160))), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 128, 192))), 33, 65), extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(extractMInt(getParentValue(R2, RSMap), 192, 224), extractMInt(getParentValue(R2, RSMap), 192, 224))), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 192, 256))), 33, 65)))) )


)

    </regstate>
endmodule

module VPHADDD-YMM-YMM-YMM-SEMANTICS
  imports VPHADDD-YMM-YMM-YMM
endmodule
/*
TargetInstr:
vphaddd %ymm3, %ymm2, %ymm1
RWSet:
maybe read:{ %ymm2 %ymm3 }
must read:{ %ymm2 %ymm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx2 }

Circuit:
circuit:callq .move_256_128_ymm3_xmm12_xmm13  #  1     0     5      OPC=callq_label
circuit:phaddd %xmm12, %xmm2                  #  2     0x5   6      OPC=phaddd_xmm_xmm
circuit:callq .move_256_128_ymm2_xmm10_xmm11  #  3     0xb   5      OPC=callq_label
circuit:phaddd %xmm13, %xmm11                 #  4     0x10  6      OPC=phaddd_xmm_xmm
circuit:callq .move_128_256_xmm10_xmm11_ymm1  #  5     0x16  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vphaddd %ymm3, %ymm2, %ymm1

  maybe read:      { %ymm2 %ymm3 }
  must read:       { %ymm2 %ymm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx2 }

Circuits:

%ymm1  : (0x0₁ ∘ (0x0₃₂ ∘ %ymm3[255:224]) + 0x0₁ ∘ (0x0₃₂ ∘ %ymm3[223:192]))[31:0] ∘ (0x0₁ ∘ %ymm3[191:128] + 0x0₁ ∘ (0x0₃₂ ∘ %ymm3[191:160]))[31:0] ∘ (0x0₁ ∘ (%ymm2[255:224] ∘ %ymm2[255:224]) + 0x0₁ ∘ %ymm2[255:192])[31:0] ∘ (0x0₁ ∘ (%ymm2[191:160] ∘ %ymm2[191:160]) + 0x0₁ ∘ %ymm2[191:128])[31:0] ∘ ((0x0₁ ∘ (0x0₃₂ ∘ %ymm3[127:96]) + 0x0₁ ∘ (0x0₃₂ ∘ %ymm3[95:64]))[31:0] ∘ (0x0₁ ∘ %ymm3[63:0] + 0x0₁ ∘ (0x0₃₂ ∘ %ymm3[63:32]))[31:0] ∘ (0x0₁ ∘ (%ymm2[127:96] ∘ %ymm2[127:96]) + 0x0₁ ∘ %ymm2[127:64])[31:0] ∘ (0x0₁ ∘ (%ymm2[63:32] ∘ %ymm2[63:32]) + 0x0₁ ∘ %ymm2[63:0])[31:0])

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/