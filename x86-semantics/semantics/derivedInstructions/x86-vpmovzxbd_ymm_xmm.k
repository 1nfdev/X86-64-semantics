// Autogenerated using stratification.
requires "x86-configuration.k"

module VPMOVZXBD-YMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vpmovzxbd R1:Xmm, R2:Ymm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(concatenateMInt(concatenateMInt(concatenateMInt(mi(24, 0), extractMInt(getParentValue(R1, RSMap), 192, 200)), concatenateMInt(mi(24, 0), extractMInt(getParentValue(R1, RSMap), 200, 208))), concatenateMInt(concatenateMInt(mi(24, 0), extractMInt(getParentValue(R1, RSMap), 208, 216)), concatenateMInt(mi(24, 0), extractMInt(getParentValue(R1, RSMap), 216, 224)))), concatenateMInt(concatenateMInt(concatenateMInt(mi(24, 0), extractMInt(getParentValue(R1, RSMap), 224, 232)), concatenateMInt(mi(24, 0), extractMInt(getParentValue(R1, RSMap), 232, 240))), concatenateMInt(concatenateMInt(mi(24, 0), extractMInt(getParentValue(R1, RSMap), 240, 248)), concatenateMInt(mi(24, 0), extractMInt(getParentValue(R1, RSMap), 248, 256))))) )


)

    </regstate>
endmodule

module VPMOVZXBD-YMM-XMM-SEMANTICS
  imports VPMOVZXBD-YMM-XMM
endmodule
/*
TargetInstr:
vpmovzxbd %xmm2, %ymm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx2 }

Circuit:
circuit:callq .move_128_032_xmm2_xmm4_xmm5_xmm6_xmm7    #  1     0     5      OPC=callq_label
circuit:callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11  #  2     0x5   5      OPC=callq_label
circuit:vmaxss %xmm5, %xmm5, %xmm4                      #  3     0xa   4      OPC=vmaxss_xmm_xmm_xmm
circuit:vpmovzxbd %xmm8, %xmm10                         #  4     0xe   5      OPC=vpmovzxbd_xmm_xmm
circuit:vpmovzxbd %xmm4, %xmm11                         #  5     0x13  5      OPC=vpmovzxbd_xmm_xmm
circuit:callq .move_128_256_xmm10_xmm11_ymm1            #  6     0x18  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vpmovzxbd %xmm2, %ymm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx2 }

Circuits:

%ymm1  : 0x0₂₄ ∘ %ymm2[63:56] ∘ (0x0₂₄ ∘ %ymm2[55:48]) ∘ (0x0₂₄ ∘ %ymm2[47:40] ∘ (0x0₂₄ ∘ %ymm2[39:32])) ∘ (0x0₂₄ ∘ %ymm2[31:24] ∘ (0x0₂₄ ∘ %ymm2[23:16]) ∘ (0x0₂₄ ∘ %ymm2[15:8] ∘ (0x0₂₄ ∘ %ymm2[7:0])))

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/