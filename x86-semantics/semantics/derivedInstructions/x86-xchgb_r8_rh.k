// Autogenerated using stratification.
requires "x86-configuration.k"

module XCHGB-R8-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (xchgb R1:Rh, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R1, RSMap), 56, 64))) )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 56), extractMInt(getParentValue(R1, RSMap), 48, 56)) )


)

    </regstate>
      requires notBool sameRegisters(R1, R2)

     rule <k>
    execinstr (xchgb R1:Rh, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R1, RSMap), 48, 56))) )

)

    </regstate>
      requires sameRegisters(R1, R2)

endmodule

module XCHGB-R8-RH-SEMANTICS
  imports XCHGB-R8-RH
endmodule
/*
TargetInstr:
xchgb %ah, %bl
RWSet:
maybe read:{ %ah %bl }
must read:{ %ah %bl }
maybe write:{ %ah %bl }
must write:{ %ah %bl }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movb %bl, %ch     #  1     0    2      OPC=movb_rh_r8
circuit:movb %ch, %cl     #  2     0x2  2      OPC=movb_r8_rh
circuit:movzbl %ah, %edx  #  3     0x4  3      OPC=movzbl_r32_rh
circuit:xaddb %bl, %dl    #  4     0x7  3      OPC=xaddb_r8_r8
circuit:movb %cl, %ah     #  5     0xa  2      OPC=movb_rh_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

xchgb %ah, %bl

  maybe read:      { %ah %bl }
  must read:       { %ah %bl }
  maybe write:     { %ah %bl }
  must write:      { %ah %bl }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : %rax[63:16] ∘ %rbx[7:0] ∘ %rax[7:0]
%rbx   : %rbx[63:8] ∘ %rax[15:8]

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/
