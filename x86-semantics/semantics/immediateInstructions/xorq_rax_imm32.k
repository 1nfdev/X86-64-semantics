// Autogenerated using stratification.
requires "x86-configuration.k"

module XORQ-RAX-IMM32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (xorq Imm32:Imm, %rax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( getParentValue(%rax, RSMap), 63, 64), mi(1, 1)) xorBool eqMInt( extractMInt( getParentValue(%rax, RSMap), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( getParentValue(%rax, RSMap), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( getParentValue(%rax, RSMap), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( getParentValue(%rax, RSMap), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( getParentValue(%rax, RSMap), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( getParentValue(%rax, RSMap), 57, 58), mi(1, 1))) xorBool eqMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( getParentValue(%rax, RSMap), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( getParentValue(%rax, RSMap), 0, 1)

"OF" |-> mi(1, 0)
)

    </regstate>
    
endmodule

module XORQ-RAX-IMM32-SEMANTICS
  imports XORQ-RAX-IMM32
endmodule
