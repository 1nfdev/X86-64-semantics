-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(movq(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"8")),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), split2NToN(%ebx(.KList@BASIC-K),, %r10w(.KList@BASIC-K),, %r11w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), execinstr(__(addw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r10w(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), readFlagToRegister(String@STRING-SYNTAX(#""PF""),, %rbx(.KList@BASIC-K)), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> _77_645:K@SORT-K String@STRING-SYNTAX(#""CF"") |-> _74_642:K@SORT-K String@STRING-SYNTAX(#""R11"") |-> _78_646:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _81_649:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _73_641:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _76_644:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _80_648:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _75_643:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _72_640:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _79_647:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _82_650:K@SORT-K   ),, <regstatequeue>(_83_651:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movq(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"8")),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), split2NToN(%ebx(.KList@BASIC-K),, %r10w(.KList@BASIC-K),, %r11w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), execinstr(__(addw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r10w(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), readFlagToRegister(String@STRING-SYNTAX(#""PF""),, %rbx(.KList@BASIC-K)), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(MInt@MINT(#"64'8"),, %rbx(.KList@BASIC-K)), split2NToN(%ebx(.KList@BASIC-K),, %r10w(.KList@BASIC-K),, %r11w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), execinstr(__(addw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r10w(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), readFlagToRegister(String@STRING-SYNTAX(#""PF""),, %rbx(.KList@BASIC-K)), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%ebx(.KList@BASIC-K),, %r10w(.KList@BASIC-K),, %r11w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), execinstr(__(addw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r10w(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), readFlagToRegister(String@STRING-SYNTAX(#""PF""),, %rbx(.KList@BASIC-K)), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'8") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(MInt@MINT(#"16'8"),, %r10w(.KList@BASIC-K)), setRegisterValue(MInt@MINT(#"16'0"),, %r11w(.KList@BASIC-K)), execinstr(__(addw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r10w(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), readFlagToRegister(String@STRING-SYNTAX(#""PF""),, %rbx(.KList@BASIC-K)), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'8") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(MInt@MINT(#"16'0"),, %r11w(.KList@BASIC-K)), execinstr(__(addw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r10w(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), readFlagToRegister(String@STRING-SYNTAX(#""PF""),, %rbx(.KList@BASIC-K)), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'8") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'8") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(addw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r10w(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), readFlagToRegister(String@STRING-SYNTAX(#""PF""),, %rbx(.KList@BASIC-K)), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'8") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'8") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(readFlagToRegister(String@STRING-SYNTAX(#""PF""),, %rbx(.KList@BASIC-K)), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'8") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(MInt@MINT(#"64'0"),, %rbx(.KList@BASIC-K)), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'8") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, typeoperandlist(MInt@MINT(#"8'0"),, typeoperandlist(MInt@MINT(#"8'0"),, typeoperandlist(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, .List{"typeoperandlist"}(.KList@BASIC-K)))))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateOverflowAdd(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))), updateZeroFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))), updateSignFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))), updateAuxCarryFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))), updateCarryFlagAdd(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0"),, MInt@MINT(#"8'0")), updateParityFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, %bl(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))), updateSignFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))), updateAuxCarryFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))), updateCarryFlagAdd(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0"),, MInt@MINT(#"8'0")), updateParityFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, %bl(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, MInt@MINT(#"1'0")),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))), updateAuxCarryFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))), updateCarryFlagAdd(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0"),, MInt@MINT(#"8'0")), updateParityFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, %bl(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, MInt@MINT(#"1'0")),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateAuxCarryFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))), updateCarryFlagAdd(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0"),, MInt@MINT(#"8'0")), updateParityFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, %bl(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")) String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, MInt@MINT(#"1'0")),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateCarryFlagAdd(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0"),, MInt@MINT(#"8'0")), updateParityFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, %bl(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, MInt@MINT(#"1'0")),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, %bl(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, MInt@MINT(#"1'0")),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, %bl(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, MInt@MINT(#"1'0")),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, MInt@MINT(#"1'0")),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, MInt@MINT(#"1'0")),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, MInt@MINT(#"1'0")),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'16") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, MInt@MINT(#"1'0")),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"56'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_639:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for _&Int_
[Warning] Critical: missing SMTLib translation for countOnes
[Warning] Critical: missing SMTLib translation for mi
[Warning] Critical: missing SMTLib translation for svalueMInt
55.40user 0.75system 0:13.77elapsed 407%CPU (0avgtext+0avgdata 1506784maxresident)k
0inputs+3688outputs (0major+324452minor)pagefaults 0swaps
