-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(saveRegister(%rbx(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), execinstr(__(movb(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(sarw(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movsbl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(salb(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _75_644:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _80_649:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _74_643:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _77_646:K@SORT-K String@STRING-SYNTAX(#""SPAD1"") |-> _73_642:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _76_645:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _72_641:K@SORT-K String@STRING-SYNTAX(#""RAX"") |-> _78_647:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _79_648:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _81_650:K@SORT-K   ),, <regstatequeue>(_82_651:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(saveRegister(%rbx(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), execinstr(__(movb(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(sarw(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movsbl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(salb(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movb(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%bh(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(sarw(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movsbl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(salb(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, %bh(.KList@BASIC-K)), execinstr(__(sarw(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movsbl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(salb(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(sarw(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movsbl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(salb(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_638:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_639:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movsbl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(salb(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(salb(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"),, Int@INT-SYNTAX(#"64")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))),, notBool_(eqMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"56"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))),, notBool_(eqMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"56"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))),, notBool_(eqMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"56"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))),, notBool_(eqMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"56"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))),, notBool_(eqMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"56"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))),, notBool_(eqMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"56"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(ashrMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_640:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))))))),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for _&Int_
[Warning] Critical: missing SMTLib translation for ashrMInt
[Warning] Critical: missing SMTLib translation for countOnes
[Warning] Critical: missing SMTLib translation for mi
77.49user 1.06system 0:22.21elapsed 353%CPU (0avgtext+0avgdata 2066976maxresident)k
0inputs+3840outputs (0major+447208minor)pagefaults 0swaps
