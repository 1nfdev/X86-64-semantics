// Autogenerated using stratification.
requires "x86-configuration.k"

module ANDQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (andq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> xorMInt( xorMInt( xorMInt( mi(64, 0), getParentValue(R1, RSMap)), xorMInt( mi(64, 0), getParentValue(R2, RSMap))), orMInt( xorMInt( mi(64, 0), getParentValue(R1, RSMap)), xorMInt( xorMInt( mi(64, 0), getParentValue(R1, RSMap)), xorMInt( mi(64, 0), getParentValue(R2, RSMap)))))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( xorMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 63, 64)), xorMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 63, 64))), orMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 63, 64)), xorMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 63, 64)), xorMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 63, 64))))), mi(1, 1)) xorBool eqMInt( xorMInt( xorMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 62, 63)), xorMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 62, 63))), orMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 62, 63)), xorMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 62, 63)), xorMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 62, 63))))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 61, 62)), xorMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 61, 62))), orMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 61, 62)), xorMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 61, 62)), xorMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 61, 62))))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 60, 61)), xorMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 60, 61))), orMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 60, 61)), xorMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 60, 61)), xorMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 60, 61))))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 59, 60)), xorMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 59, 60))), orMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 59, 60)), xorMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 59, 60)), xorMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 59, 60))))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 58, 59)), xorMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 58, 59))), orMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 58, 59)), xorMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 58, 59)), xorMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 58, 59))))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 57, 58)), xorMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 57, 58))), orMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 57, 58)), xorMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 57, 58)), xorMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 57, 58))))), mi(1, 1))) xorBool eqMInt( xorMInt( xorMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 57)), xorMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 57))), orMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 57)), xorMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 57)), xorMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 57))))), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undef)

"ZF" |-> (#ifMInt eqMInt( xorMInt( xorMInt( xorMInt( mi(64, 0), getParentValue(R1, RSMap)), xorMInt( mi(64, 0), getParentValue(R2, RSMap))), orMInt( xorMInt( mi(64, 0), getParentValue(R1, RSMap)), xorMInt( xorMInt( mi(64, 0), getParentValue(R1, RSMap)), xorMInt( mi(64, 0), getParentValue(R2, RSMap))))), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( xorMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 0, 1)), xorMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 0, 1))), orMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 0, 1)), xorMInt( xorMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 0, 1)), xorMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 0, 1)))))

"OF" |-> mi(1, 0)
)

    </regstate>
endmodule

module ANDQ-R64-R64-SEMANTICS
  imports ANDQ-R64-R64
endmodule
