// Autogenerated using stratification.
requires "x86-configuration.k"

module ANDQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (andq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> xorMInt( orMInt( xorMInt( xorMInt( getParentValue(R2, RSMap), mi(64, 0)), xorMInt( getParentValue(R1, RSMap), mi(64, 0))), xorMInt( getParentValue(R1, RSMap), mi(64, 0))), xorMInt( xorMInt( getParentValue(R2, RSMap), mi(64, 0)), xorMInt( getParentValue(R1, RSMap), mi(64, 0))))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt ((countOnes(xorMInt( orMInt( xorMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(8, 0)), xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 0))), xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 0))), xorMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(8, 0)), xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 0)))), 0) &Int 1) ==K 0) #then mi(1,1) #else mi(1,0) #fi)

"AF" |-> (undef)

"ZF" |-> (#ifMInt eqMInt( xorMInt( orMInt( xorMInt( xorMInt( getParentValue(R2, RSMap), mi(64, 0)), xorMInt( getParentValue(R1, RSMap), mi(64, 0))), xorMInt( getParentValue(R1, RSMap), mi(64, 0))), xorMInt( xorMInt( getParentValue(R2, RSMap), mi(64, 0)), xorMInt( getParentValue(R1, RSMap), mi(64, 0)))), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( orMInt( xorMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 0)), xorMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 0))), xorMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 0))), xorMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 0)), xorMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 0))))

"OF" |-> mi(1, 0)
)

    </regstate>
endmodule

module ANDQ-R64-R64-SEMANTICS
  imports ANDQ-R64-R64
endmodule
