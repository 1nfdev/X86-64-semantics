// Autogenerated using stratification.
requires "x86-configuration.k"

module BLSRL-R32-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (blsrl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), xorMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( getParentValue(R1, RSMap), 32, 64))), 33, 65), orMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( getParentValue(R1, RSMap), 32, 64))), 33, 65), extractMInt( getParentValue(R1, RSMap), 32, 64)))))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( getParentValue(R1, RSMap), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( getParentValue(R1, RSMap), 32, 64))), 17, 25))), 0, 1)

"PF" |-> (undef)

"AF" |-> (undef)

"ZF" |-> (#ifMInt eqMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), xorMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( getParentValue(R1, RSMap), 32, 64))), 33, 65), orMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( getParentValue(R1, RSMap), 32, 64))), 33, 65), extractMInt( getParentValue(R1, RSMap), 32, 64)))), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), xorMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( getParentValue(R1, RSMap), 32, 64))), 33, 34), orMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( getParentValue(R1, RSMap), 32, 64))), 33, 34), extractMInt( getParentValue(R1, RSMap), 32, 33))))

"OF" |-> (#ifMInt ((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( getParentValue(R1, RSMap), 32, 64))), 17, 18), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( getParentValue(R1, RSMap), 32, 64))), 17, 18), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( getParentValue(R1, RSMap), 32, 64))), 17, 18), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( getParentValue(R1, RSMap), 32, 64))), 17, 25)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(33, 0), extractMInt( getParentValue(R1, RSMap), 32, 64))), 17, 25))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
endmodule

module BLSRL-R32-R32-SEMANTICS
  imports BLSRL-R32-R32
endmodule
