// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVPEQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovpeq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt eqMInt( (#ifMInt eqMInt( concatenateMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( (#ifMInt eqMInt(getFlag("PF", RSMap), mi(1,1)) #then mi(8, 1) #else mi(8, 0) #fi), concatenateMInt( mi(7, 0), getParity(mi(8, 0))))), concatenateMInt( mi(8, 0), getParity(mi(8, 16)))), 1, 9)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( (#ifMInt eqMInt(getFlag("PF", RSMap), mi(1,1)) #then mi(8, 1) #else mi(8, 0) #fi), concatenateMInt( mi(7, 0), getParity(mi(8, 0))))), concatenateMInt( mi(8, 0), getParity(mi(8, 16)))), 1, 9))), 0, 1), (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( (#ifMInt eqMInt(getFlag("PF", RSMap), mi(1,1)) #then mi(8, 1) #else mi(8, 0) #fi), concatenateMInt( mi(7, 0), getParity(mi(8, 0))))), concatenateMInt( mi(8, 0), getParity(mi(8, 16)))), 1, 9)), concatenateMInt( mi(1, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( (#ifMInt eqMInt(getFlag("PF", RSMap), mi(1,1)) #then mi(8, 1) #else mi(8, 0) #fi), concatenateMInt( mi(7, 0), getParity(mi(8, 0))))), concatenateMInt( mi(8, 0), getParity(mi(8, 16)))), 1, 9))), 1, 9), mi(8, 0)) #then mi(8, 1) #else mi(8, 0) #fi)), mi(32, 0)) #then mi(8, 2) #else mi(8, 0) #fi), mi(8, 0)) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
endmodule

module CMOVPEQ-R64-R64-SEMANTICS
  imports CMOVPEQ-R64-R64
endmodule
