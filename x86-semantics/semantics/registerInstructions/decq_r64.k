// Autogenerated using stratification.
requires "x86-configuration.k"

module DECQ-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (decq R1:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(1, 0), getParentValue(R1, RSMap))), 1, 65)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(1, 0), getParentValue(R1, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(1, 0), getParentValue(R1, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(1, 0), getParentValue(R1, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(1, 0), getParentValue(R1, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(1, 0), getParentValue(R1, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(1, 0), getParentValue(R1, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(1, 0), getParentValue(R1, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(1, 0), getParentValue(R1, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> extractMInt( addMInt( mi(5, 15), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 60, 64))), 0, 1)

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(1, 0), getParentValue(R1, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(1, 0), getParentValue(R1, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((true ==Bool eqMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 1))) andBool (notBool (true ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, 18446744073709551615)), concatenateMInt( mi(1, 0), getParentValue(R1, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
endmodule

module DECQ-R64-SEMANTICS
  imports DECQ-R64
endmodule
