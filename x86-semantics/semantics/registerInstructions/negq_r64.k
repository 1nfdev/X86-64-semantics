// Autogenerated using stratification.
requires "x86-configuration.k"

module NEGQ-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (negq R1:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( getParentValue(R1, RSMap), mi(64, 18446744073709551615))), mi(65, 1)), concatenateMInt( mi(1, 0), mi(64, 0))), 1, 65)

"CF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( getParentValue(R1, RSMap), mi(64, 18446744073709551615))), mi(65, 1)), concatenateMInt( mi(1, 0), mi(64, 0))), 0, 1), mi(1, 1)) #then mi(1, 0) #else mi(1, 1) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( getParentValue(R1, RSMap), mi(64, 18446744073709551615))), mi(65, 1)), concatenateMInt( mi(1, 0), mi(64, 0))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( getParentValue(R1, RSMap), mi(64, 18446744073709551615))), mi(65, 1)), concatenateMInt( mi(1, 0), mi(64, 0))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( getParentValue(R1, RSMap), mi(64, 18446744073709551615))), mi(65, 1)), concatenateMInt( mi(1, 0), mi(64, 0))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( getParentValue(R1, RSMap), mi(64, 18446744073709551615))), mi(65, 1)), concatenateMInt( mi(1, 0), mi(64, 0))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( getParentValue(R1, RSMap), mi(64, 18446744073709551615))), mi(65, 1)), concatenateMInt( mi(1, 0), mi(64, 0))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( getParentValue(R1, RSMap), mi(64, 18446744073709551615))), mi(65, 1)), concatenateMInt( mi(1, 0), mi(64, 0))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( getParentValue(R1, RSMap), mi(64, 18446744073709551615))), mi(65, 1)), concatenateMInt( mi(1, 0), mi(64, 0))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( getParentValue(R1, RSMap), mi(64, 18446744073709551615))), mi(65, 1)), concatenateMInt( mi(1, 0), mi(64, 0))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( getParentValue(R1, RSMap), mi(64, 18446744073709551615))), mi(65, 1)), concatenateMInt( mi(1, 0), mi(64, 0))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( getParentValue(R1, RSMap), mi(64, 18446744073709551615))), mi(65, 1)), concatenateMInt( mi(1, 0), mi(64, 0))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 1)), mi(1, 1)) ==Bool false) andBool (notBool (eqMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( getParentValue(R1, RSMap), mi(64, 18446744073709551615))), mi(65, 1)), concatenateMInt( mi(1, 0), mi(64, 0))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
endmodule

module NEGQ-R64-SEMANTICS
  imports NEGQ-R64
endmodule
