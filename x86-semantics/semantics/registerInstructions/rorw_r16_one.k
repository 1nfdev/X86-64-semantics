// Autogenerated using stratification.
requires "x86-configuration.k"

module RORW-R16-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (rorw $0x1, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), concatenateMInt( extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(concatenateMInt( extractMInt( addMInt( (#ifMInt ((true andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 64, 65), mi(1, 1))) orBool false) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56))), 1, 9), extractMInt( addMInt( (#ifMInt ((true andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 64, 65), mi(1, 1))) orBool false) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56))), 1, 9)))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 56, 64), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 56, 64)))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(concatenateMInt( extractMInt( addMInt( (#ifMInt ((true andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 64, 65), mi(1, 1))) orBool false) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56))), 1, 9), extractMInt( addMInt( (#ifMInt ((true andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 64, 65), mi(1, 1))) orBool false) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56))), 1, 9)))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(concatenateMInt( extractMInt( addMInt( (#ifMInt ((true andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 64, 65), mi(1, 1))) orBool false) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56))), 1, 9), extractMInt( addMInt( (#ifMInt ((true andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 64, 65), mi(1, 1))) orBool false) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56))), 1, 9)))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 56, 64))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(concatenateMInt( extractMInt( addMInt( (#ifMInt ((true andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 64, 65), mi(1, 1))) orBool false) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56))), 1, 9), extractMInt( addMInt( (#ifMInt ((true andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 64, 65), mi(1, 1))) orBool false) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56))), 1, 9)))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(concatenateMInt( extractMInt( addMInt( (#ifMInt ((true andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 64, 65), mi(1, 1))) orBool false) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56))), 1, 9), extractMInt( addMInt( (#ifMInt ((true andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 64, 65), mi(1, 1))) orBool false) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56))), 1, 9)))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(concatenateMInt( extractMInt( addMInt( (#ifMInt ((true andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 64, 65), mi(1, 1))) orBool false) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56))), 1, 9), extractMInt( addMInt( (#ifMInt ((true andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 64, 65), mi(1, 1))) orBool false) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56))), 1, 9)))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(concatenateMInt( extractMInt( addMInt( (#ifMInt ((true andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 64, 65), mi(1, 1))) orBool false) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56))), 1, 9), extractMInt( addMInt( (#ifMInt ((true andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 64, 65), mi(1, 1))) orBool false) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56))), 1, 9)))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(concatenateMInt( extractMInt( addMInt( (#ifMInt ((true andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 64, 65), mi(1, 1))) orBool false) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56))), 1, 9), extractMInt( addMInt( (#ifMInt ((true andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 64, 65), mi(1, 1))) orBool false) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( ashrMInt( concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 48, 56))), 1, 9)))), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
endmodule

module RORW-R16-ONE-SEMANTICS
  imports RORW-R16-ONE
endmodule
