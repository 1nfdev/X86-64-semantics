// Autogenerated using stratification.
requires "x86-configuration.k"

module SUBB-R8-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (subb R1:R8, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), mi(9, 1)), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 255)))), 1, 9))

"CF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), mi(9, 1)), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 255)))), 0, 1), mi(1, 1)) #then mi(1, 0) #else mi(1, 1) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), mi(9, 1)), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 255)))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), mi(9, 1)), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 255)))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), mi(9, 1)), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 255)))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), mi(9, 1)), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 255)))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), mi(9, 1)), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 255)))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), mi(9, 1)), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 255)))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), mi(9, 1)), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 255)))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), mi(9, 1)), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 255)))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 60, 64)), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 15)))), 0, 1)

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), mi(9, 1)), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 255)))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), mi(9, 1)), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 255)))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1)) ==Bool eqMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), mi(9, 1)), concatenateMInt( mi(1, 0), xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 255)))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
endmodule

module SUBB-R8-R8-SEMANTICS
  imports SUBB-R8-R8
endmodule
