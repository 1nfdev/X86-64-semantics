// Autogenerated using stratification.
requires "x86-configuration.k"

module TESTB-R8-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (testb R1:Rh, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt ((countOnes(xorMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), orMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 48, 56)))), 0) &Int 1) ==K 0) #then mi(1,1) #else mi(1,0) #fi)

"AF" |-> (undef)

"ZF" |-> (#ifMInt eqMInt( xorMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56))), 32, 64), xorMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 56, 64))), 32, 64), orMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 56, 64))), 32, 64), extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56))), 32, 64)))), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56))), 32, 33), xorMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 56, 64))), 32, 33), orMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 56, 64))), 32, 33), extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56))), 32, 33))))

"OF" |-> mi(1, 0)
)

    </regstate>
endmodule

module TESTB-R8-RH-SEMANTICS
  imports TESTB-R8-RH
endmodule
