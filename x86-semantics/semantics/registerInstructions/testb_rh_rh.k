// Autogenerated using stratification.
requires "x86-configuration.k"

module TESTB-RH-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (testb R1:Rh, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 55, 56), xorMInt( extractMInt( getParentValue(R2, RSMap), 55, 56), orMInt( extractMInt( getParentValue(R2, RSMap), 55, 56), extractMInt( getParentValue(R1, RSMap), 55, 56)))), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 54, 55), xorMInt( extractMInt( getParentValue(R2, RSMap), 54, 55), orMInt( extractMInt( getParentValue(R2, RSMap), 54, 55), extractMInt( getParentValue(R1, RSMap), 54, 55)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 53, 54), xorMInt( extractMInt( getParentValue(R2, RSMap), 53, 54), orMInt( extractMInt( getParentValue(R2, RSMap), 53, 54), extractMInt( getParentValue(R1, RSMap), 53, 54)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 52, 53), xorMInt( extractMInt( getParentValue(R2, RSMap), 52, 53), orMInt( extractMInt( getParentValue(R2, RSMap), 52, 53), extractMInt( getParentValue(R1, RSMap), 52, 53)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), xorMInt( extractMInt( getParentValue(R2, RSMap), 51, 52), orMInt( extractMInt( getParentValue(R2, RSMap), 51, 52), extractMInt( getParentValue(R1, RSMap), 51, 52)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 50, 51), xorMInt( extractMInt( getParentValue(R2, RSMap), 50, 51), orMInt( extractMInt( getParentValue(R2, RSMap), 50, 51), extractMInt( getParentValue(R1, RSMap), 50, 51)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 49, 50), xorMInt( extractMInt( getParentValue(R2, RSMap), 49, 50), orMInt( extractMInt( getParentValue(R2, RSMap), 49, 50), extractMInt( getParentValue(R1, RSMap), 49, 50)))), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), orMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( getParentValue(R1, RSMap), 48, 49)))), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undef)

"ZF" |-> (#ifMInt eqMInt( xorMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56))), 32, 64), xorMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 56))), 32, 64), orMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 56))), 32, 64), extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56))), 32, 64)))), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56))), 32, 33), xorMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 56))), 32, 33), orMInt( extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 56))), 32, 33), extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56))), 32, 33))))

"OF" |-> mi(1, 0)
)

    </regstate>
endmodule

module TESTB-RH-RH-SEMANTICS
  imports TESTB-RH-RH
endmodule
