// Autogenerated using stratification.
requires "x86-configuration.k"

module TESTQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (testq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(64, 18446744073709551615), xorMInt( getParentValue(R1, RSMap), orMInt( getParentValue(R1, RSMap), getParentValue(R2, RSMap))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 0, 1), mi(1, 1)) #then mi(1, 0) #else mi(1, 1) #fi)

"PF" |-> (#ifMInt ((countOnes(extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(64, 18446744073709551615), xorMInt( getParentValue(R1, RSMap), orMInt( getParentValue(R1, RSMap), getParentValue(R2, RSMap))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 57, 65), 0) &Int 1) ==K 0) #then mi(1,1) #else mi(1,0) #fi)

"AF" |-> (undef)

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(64, 18446744073709551615), xorMInt( getParentValue(R1, RSMap), orMInt( getParentValue(R1, RSMap), getParentValue(R2, RSMap))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(64, 18446744073709551615), xorMInt( getParentValue(R1, RSMap), orMInt( getParentValue(R1, RSMap), getParentValue(R2, RSMap))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( xorMInt( mi(1, 1), xorMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), orMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), extractMInt( getParentValue(R2, RSMap), 0, 1)))), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( xorMInt( mi(1, 1), xorMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), orMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), extractMInt( getParentValue(R2, RSMap), 0, 1)))), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), xorMInt( mi(64, 18446744073709551615), xorMInt( getParentValue(R1, RSMap), orMInt( getParentValue(R1, RSMap), getParentValue(R2, RSMap))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
endmodule

module TESTQ-R64-R64-SEMANTICS
  imports TESTQ-R64-R64
endmodule
