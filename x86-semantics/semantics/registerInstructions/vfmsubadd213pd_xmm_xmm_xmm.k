// Autogenerated using stratification.
requires "x86-configuration.k"

module VFMSUBADD213PD-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vfmsubadd213pd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( concatenateMInt( mi(128, 0), extractMInt( vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 128, 192), xorMInt( extractMInt( getParentValue(R1, RSMap), 128, 192), mi(64, 0)), extractMInt( getParentValue(R3, RSMap), 128, 192)), 0, 56)), extractMInt( vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 128, 192), xorMInt( extractMInt( getParentValue(R1, RSMap), 128, 192), mi(64, 0)), extractMInt( getParentValue(R3, RSMap), 128, 192)), 56, 64)), vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 192, 256), vfmsub132_double(vfnmsub132_double((#ifMInt eqMInt( mincmp_double(mi(64, 0), concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 128, 160))), mi(1, 1)) #then mi(64, 0) #else concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 128, 160)) #fi), concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 128, 160)), (#ifMInt eqMInt( mincmp_double(mi(64, 0), concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 128, 160))), mi(1, 1)) #then mi(64, 0) #else concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 128, 160)) #fi)), extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), extractMInt( getParentValue(R3, RSMap), 192, 256)))
)

    </regstate>
endmodule

module VFMSUBADD213PD-XMM-XMM-XMM-SEMANTICS
  imports VFMSUBADD213PD-XMM-XMM-XMM
endmodule
