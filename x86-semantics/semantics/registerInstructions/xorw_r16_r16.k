// Autogenerated using stratification.
requires "x86-configuration.k"

module XORW-R16-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (xorw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), xorMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), extractMInt( getParentValue(R2, RSMap), 48, 64)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt ((countOnes(xorMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), extractMInt( getParentValue(R2, RSMap), 56, 64)), 0) &Int 1) ==K 0) #then mi(1,1) #else mi(1,0) #fi)

"AF" |-> (undef)

"ZF" |-> (#ifMInt eqMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), extractMInt( getParentValue(R2, RSMap), 48, 64)), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), extractMInt( getParentValue(R2, RSMap), 48, 49))

"OF" |-> mi(1, 0)
)

    </regstate>
endmodule

module XORW-R16-R16-SEMANTICS
  imports XORW-R16-R16
endmodule
