requires "x86-configuration.k"
requires "x86-flag-checks-syntax.k"

module X86-INSTRUCTIONS-SEMANTICS
  imports X86-CONFIGURATION
  imports X86-FLAG-CHECKS-SYNTAX

// pmaxsb-xmm-xmm

  rule <k>
    execinstr (pmaxsb R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else extractMInt( getParentValue(R1, RSMap), 128, 136) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else extractMInt( getParentValue(R1, RSMap), 136, 144) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else extractMInt( getParentValue(R1, RSMap), 144, 152) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else extractMInt( getParentValue(R1, RSMap), 152, 160) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else extractMInt( getParentValue(R1, RSMap), 160, 168) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else extractMInt( getParentValue(R1, RSMap), 168, 176) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else extractMInt( getParentValue(R1, RSMap), 176, 184) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else extractMInt( getParentValue(R1, RSMap), 184, 192) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else extractMInt( getParentValue(R1, RSMap), 192, 200) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else extractMInt( getParentValue(R1, RSMap), 200, 208) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else extractMInt( getParentValue(R1, RSMap), 208, 216) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else extractMInt( getParentValue(R1, RSMap), 216, 224) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else extractMInt( getParentValue(R1, RSMap), 224, 232) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else extractMInt( getParentValue(R1, RSMap), 232, 240) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R1, RSMap), 240, 248) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #then extractMInt( getParentValue(R2, RSMap), 248, 256) #else extractMInt( getParentValue(R1, RSMap), 248, 256) #fi)))))))))))))))))
)

    </regstate>
    


// pmaxsb-xmm-xmm-semantics


// vpandn-ymm-ymm-ymm

  rule <k>
    execinstr (vpandn R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> andMInt( negMInt( getParentValue(R2, RSMap)), getParentValue(R1, RSMap))
)

    </regstate>
    


// vpandn-ymm-ymm-ymm-semantics


// vpcmpgtw-xmm-xmm-xmm

  rule <k>
    execinstr (vpcmpgtw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)) #then mi(16, 65535) #else mi(16, 0) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then mi(16, 65535) #else mi(16, 0) #fi)))))))))
)

    </regstate>
    


// vpcmpgtw-xmm-xmm-xmm-semantics


// vpsrlw-ymm-ymm-xmm

  rule <k>
    execinstr (vpsrlw R1:Xmm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(256, 0) #else concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 0, 16), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 16, 32), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 32, 48), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 64, 80), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 80, 96), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 96, 112), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 112, 128), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))))))))))))))))) #fi)
)

    </regstate>
    


// vpsrlw-ymm-ymm-xmm-semantics


// vcvttps2dq-xmm-xmm

  rule <k>
    execinstr (vcvttps2dq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( cvt_single_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( cvt_single_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( cvt_single_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 192, 224)), cvt_single_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vcvttps2dq-xmm-xmm-semantics


// vpminub-ymm-ymm-ymm

  rule <k>
    execinstr (vpminub R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 0, 8), extractMInt( getParentValue(R1, RSMap), 0, 8)) #then extractMInt( getParentValue(R2, RSMap), 0, 8) #else extractMInt( getParentValue(R1, RSMap), 0, 8) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 8, 16), extractMInt( getParentValue(R1, RSMap), 8, 16)) #then extractMInt( getParentValue(R2, RSMap), 8, 16) #else extractMInt( getParentValue(R1, RSMap), 8, 16) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 16, 24), extractMInt( getParentValue(R1, RSMap), 16, 24)) #then extractMInt( getParentValue(R2, RSMap), 16, 24) #else extractMInt( getParentValue(R1, RSMap), 16, 24) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 24, 32), extractMInt( getParentValue(R1, RSMap), 24, 32)) #then extractMInt( getParentValue(R2, RSMap), 24, 32) #else extractMInt( getParentValue(R1, RSMap), 24, 32) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 32, 40), extractMInt( getParentValue(R1, RSMap), 32, 40)) #then extractMInt( getParentValue(R2, RSMap), 32, 40) #else extractMInt( getParentValue(R1, RSMap), 32, 40) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 40, 48), extractMInt( getParentValue(R1, RSMap), 40, 48)) #then extractMInt( getParentValue(R2, RSMap), 40, 48) #else extractMInt( getParentValue(R1, RSMap), 40, 48) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 48, 56)) #then extractMInt( getParentValue(R2, RSMap), 48, 56) #else extractMInt( getParentValue(R1, RSMap), 48, 56) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 56, 64)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else extractMInt( getParentValue(R1, RSMap), 56, 64) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 64, 72), extractMInt( getParentValue(R1, RSMap), 64, 72)) #then extractMInt( getParentValue(R2, RSMap), 64, 72) #else extractMInt( getParentValue(R1, RSMap), 64, 72) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 72, 80), extractMInt( getParentValue(R1, RSMap), 72, 80)) #then extractMInt( getParentValue(R2, RSMap), 72, 80) #else extractMInt( getParentValue(R1, RSMap), 72, 80) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 80, 88), extractMInt( getParentValue(R1, RSMap), 80, 88)) #then extractMInt( getParentValue(R2, RSMap), 80, 88) #else extractMInt( getParentValue(R1, RSMap), 80, 88) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 88, 96), extractMInt( getParentValue(R1, RSMap), 88, 96)) #then extractMInt( getParentValue(R2, RSMap), 88, 96) #else extractMInt( getParentValue(R1, RSMap), 88, 96) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 96, 104), extractMInt( getParentValue(R1, RSMap), 96, 104)) #then extractMInt( getParentValue(R2, RSMap), 96, 104) #else extractMInt( getParentValue(R1, RSMap), 96, 104) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 104, 112), extractMInt( getParentValue(R1, RSMap), 104, 112)) #then extractMInt( getParentValue(R2, RSMap), 104, 112) #else extractMInt( getParentValue(R1, RSMap), 104, 112) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 112, 120), extractMInt( getParentValue(R1, RSMap), 112, 120)) #then extractMInt( getParentValue(R2, RSMap), 112, 120) #else extractMInt( getParentValue(R1, RSMap), 112, 120) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 120, 128), extractMInt( getParentValue(R1, RSMap), 120, 128)) #then extractMInt( getParentValue(R2, RSMap), 120, 128) #else extractMInt( getParentValue(R1, RSMap), 120, 128) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else extractMInt( getParentValue(R1, RSMap), 128, 136) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else extractMInt( getParentValue(R1, RSMap), 136, 144) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else extractMInt( getParentValue(R1, RSMap), 144, 152) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else extractMInt( getParentValue(R1, RSMap), 152, 160) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else extractMInt( getParentValue(R1, RSMap), 160, 168) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else extractMInt( getParentValue(R1, RSMap), 168, 176) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else extractMInt( getParentValue(R1, RSMap), 176, 184) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else extractMInt( getParentValue(R1, RSMap), 184, 192) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else extractMInt( getParentValue(R1, RSMap), 192, 200) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else extractMInt( getParentValue(R1, RSMap), 200, 208) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else extractMInt( getParentValue(R1, RSMap), 208, 216) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else extractMInt( getParentValue(R1, RSMap), 216, 224) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else extractMInt( getParentValue(R1, RSMap), 224, 232) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else extractMInt( getParentValue(R1, RSMap), 232, 240) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R1, RSMap), 240, 248) #fi), (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #then extractMInt( getParentValue(R2, RSMap), 248, 256) #else extractMInt( getParentValue(R1, RSMap), 248, 256) #fi))))))))))))))))))))))))))))))))
)

    </regstate>
    


// vpminub-ymm-ymm-ymm-semantics


// vcvtps2dq-xmm-xmm

  rule <k>
    execinstr (vcvtps2dq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( cvt_single_to_int32(extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( cvt_single_to_int32(extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( cvt_single_to_int32(extractMInt( getParentValue(R1, RSMap), 192, 224)), cvt_single_to_int32(extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vcvtps2dq-xmm-xmm-semantics


// vandnpd-xmm-xmm-xmm

  rule <k>
    execinstr (vandnpd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 128, 256)), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// vandnpd-xmm-xmm-xmm-semantics


// addq-r64-r64

  rule <k>
    execinstr (addq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65)

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// addq-r64-r64-semantics


// sarb-rh-one

  rule <k>
    execinstr (sarb $0x1, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 0, 8)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 8, 9)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 0, 1), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 0, 8), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 0, 1)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// sarb-rh-one-semantics


// setnae-rh

  rule <k>
    execinstr (setnae R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setnae-rh-semantics


// pcmpgtw-xmm-xmm

  rule <k>
    execinstr (pcmpgtw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)) #then mi(16, 65535) #else mi(16, 0) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then mi(16, 65535) #else mi(16, 0) #fi)))))))))
)

    </regstate>
    


// pcmpgtw-xmm-xmm-semantics


// testb-r8-r8

  rule <k>
    execinstr (testb R1:R8, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( getParentValue(R1, RSMap), 63, 64)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( getParentValue(R1, RSMap), 62, 63)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( getParentValue(R1, RSMap), 61, 62)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( getParentValue(R1, RSMap), 60, 61)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(R1, RSMap), 59, 60)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( getParentValue(R1, RSMap), 58, 59)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( getParentValue(R1, RSMap), 57, 58)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 56, 57))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// testb-r8-r8-semantics


// haddps-xmm-xmm

  rule <k>
    execinstr (haddps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( concatenateMInt( add_single(extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 128, 160)), add_single(extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 192, 224))), add_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 128, 160))), add_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 192, 224))))
)

    </regstate>
    


// haddps-xmm-xmm-semantics


// pavgb-xmm-xmm

  rule <k>
    execinstr (pavgb R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 128, 136))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 136, 144))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 144, 152))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 152, 160))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 160, 168))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 168, 176))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 176, 184))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 184, 192))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 192, 200))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 200, 208))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 208, 216))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 216, 224))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 224, 232))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 232, 240))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 240, 248))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9)))))))))))))))))
)

    </regstate>
    


// pavgb-xmm-xmm-semantics


// rcpps-xmm-xmm

  rule <k>
    execinstr (rcpps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( approx_reciprocal_single(extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( approx_reciprocal_single(extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( approx_reciprocal_single(extractMInt( getParentValue(R1, RSMap), 192, 224)), approx_reciprocal_single(extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// rcpps-xmm-xmm-semantics


// setge-r8

  rule <k>
    execinstr (setge R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setge-r8-semantics


// vpavgw-xmm-xmm-xmm

  rule <k>
    execinstr (vpavgw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17)))))))))
)

    </regstate>
    


// vpavgw-xmm-xmm-xmm-semantics


// rclb-r8-one

  rule <k>
    execinstr (rclb $0x1, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), mi(9, 1)), 1, 9))

"CF" |-> extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), mi(9, 1)), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), mi(9, 1)), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), mi(9, 1)), 1, 2), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rclb-r8-one-semantics


// sqrtss-xmm-xmm

  rule <k>
    execinstr (sqrtss R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 224), sqrt_single(extractMInt( getParentValue(R1, RSMap), 224, 256)))
)

    </regstate>
    


// sqrtss-xmm-xmm-semantics


// pminuw-xmm-xmm

  rule <k>
    execinstr (pminuw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)) #then extractMInt( getParentValue(R2, RSMap), 128, 144) #else extractMInt( getParentValue(R1, RSMap), 128, 144) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)) #then extractMInt( getParentValue(R2, RSMap), 144, 160) #else extractMInt( getParentValue(R1, RSMap), 144, 160) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)) #then extractMInt( getParentValue(R2, RSMap), 160, 176) #else extractMInt( getParentValue(R1, RSMap), 160, 176) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)) #then extractMInt( getParentValue(R2, RSMap), 176, 192) #else extractMInt( getParentValue(R1, RSMap), 176, 192) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)) #then extractMInt( getParentValue(R2, RSMap), 192, 208) #else extractMInt( getParentValue(R1, RSMap), 192, 208) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)) #then extractMInt( getParentValue(R2, RSMap), 208, 224) #else extractMInt( getParentValue(R1, RSMap), 208, 224) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)) #then extractMInt( getParentValue(R2, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 224, 240) #fi), (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R2, RSMap), 240, 256) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)))))))))
)

    </regstate>
    


// pminuw-xmm-xmm-semantics


// cvtss2sil-r32-xmm

  rule <k>
    execinstr (cvtss2sil R1:Xmm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), cvt_single_to_int32(extractMInt( getParentValue(R1, RSMap), 224, 256)))
)

    </regstate>
    


// cvtss2sil-r32-xmm-semantics


// setnle-rh

  rule <k>
    execinstr (setnle R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt ((notBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) andBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1)))) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setnle-rh-semantics


// sbbw-r16-r16

  rule <k>
    execinstr (sbbw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sbbw-r16-r16-semantics


// vfmadd132sd-xmm-xmm-xmm

  rule <k>
    execinstr (vfmadd132sd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 192), vfmadd132_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfmadd132sd-xmm-xmm-xmm-semantics


// btrw-r16-r16

  rule <k>
    execinstr (btrw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), andMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), negMInt( shlMInt( mi(16, 1), uvalueMInt(mi(16, svalueMInt(andMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 15)))))))))

"CF" |-> extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), uvalueMInt(mi(16, svalueMInt(andMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 15)))))), 15, 16)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btrw-r16-r16-semantics


// adcb-r8-rh

  rule <k>
    execinstr (adcb R1:Rh, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9))

"CF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// adcb-r8-rh-semantics


// rcrw-r16-one

  rule <k>
    execinstr (rcrw $0x1, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), mi(17, 1)), 1, 17))

"CF" |-> extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), mi(17, 1)), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), mi(17, 1)), 1, 2), mi(1, 1)) xorBool eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), mi(17, 1)), 2, 3), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rcrw-r16-one-semantics


// vpsrlq-xmm-xmm-xmm

  rule <k>
    execinstr (vpsrlq R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 63)) #then concatenateMInt( mi(128, 0), mi(128, 0)) #else concatenateMInt( mi(128, 0), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 256))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 256))))) #fi)
)

    </regstate>
    


// vpsrlq-xmm-xmm-xmm-semantics


// xaddq-r64-r64

  rule <k>
    execinstr (xaddq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> getParentValue(R2, RSMap)

convToRegKeys(R2) |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65)

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (xaddq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
        convToRegKeys(R2) |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65)

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61)

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
      requires sameRegisters(R1, R2)
  


// xaddq-r64-r64-semantics


// vptest-ymm-ymm

  rule <k>
    execinstr (vptest R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt eqMInt( andMInt( negMInt( getParentValue(R2, RSMap)), getParentValue(R1, RSMap)), mi(256, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> mi(1, 0)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt eqMInt( andMInt( getParentValue(R2, RSMap), getParentValue(R1, RSMap)), mi(256, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// vptest-ymm-ymm-semantics


// subb-r8-rh

  rule <k>
    execinstr (subb R1:Rh, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// subb-r8-rh-semantics


// seto-rh

  rule <k>
    execinstr (seto R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt eqMInt(getFlag("OF", RSMap), mi(1,1)) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// seto-rh-semantics


// addb-r8-r8

  rule <k>
    execinstr (addb R1:R8, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// addb-r8-r8-semantics


// sarl-r32-one

  rule <k>
    execinstr (sarl $0x1, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 0, 32))

"CF" |-> extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 32, 33)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 31, 32), mi(1, 1)) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 25, 26), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 24, 25), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 0, 32), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 0, 1)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// sarl-r32-one-semantics


// incb-rh

  rule <k>
    execinstr (incb R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), addMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 1))), extractMInt( getParentValue(R1, RSMap), 56, 64))

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 1)), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 1)), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 1)), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 1)), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 1)), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 1)), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 1)), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 1)), 0, 1), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 56), mi(4, 15)) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt eqMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 1)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 1)), 0, 1)

"OF" |-> (#ifMInt ((notBool eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1))) andBool eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 56), mi(7, 18446744073709551615))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// incb-rh-semantics


// cvtsd2siq-r64-xmm

  rule <k>
    execinstr (cvtsd2siq R1:Xmm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> cvt_double_to_int64(extractMInt( getParentValue(R1, RSMap), 192, 256))
)

    </regstate>
    


// cvtsd2siq-r64-xmm-semantics


// vpackusdw-ymm-ymm-ymm

  rule <k>
    execinstr (vpackusdw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 0, 32), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 0, 32), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R1, RSMap), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R1, RSMap), 48, 64) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 64, 96), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 64, 96), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R1, RSMap), 80, 96) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 96, 128), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 96, 128), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R1, RSMap), 112, 128) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 80, 96) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 112, 128) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R1, RSMap), 144, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R1, RSMap), 176, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R1, RSMap), 208, 224) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 144, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 176, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 208, 224) #fi) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 240, 256) #fi) #fi))))))))))))))))
)

    </regstate>
    


// vpackusdw-ymm-ymm-ymm-semantics


// cmovpoq-r64-r64

  rule <k>
    execinstr (cmovpoq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt (notBool eqMInt(getFlag("PF", RSMap), mi(1,1))) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovpoq-r64-r64-semantics


// setz-rh

  rule <k>
    execinstr (setz R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt eqMInt(getFlag("ZF", RSMap), mi(1,1)) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setz-rh-semantics


// pcmpgtd-xmm-xmm

  rule <k>
    execinstr (pcmpgtd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)) #then mi(32, 4294967295) #else mi(32, 0) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)) #then mi(32, 4294967295) #else mi(32, 0) #fi)))))
)

    </regstate>
    


// pcmpgtd-xmm-xmm-semantics


// blsmskl-r32-r32

  rule <k>
    execinstr (blsmskl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), xorMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), extractMInt( getParentValue(R1, RSMap), 32, 64)))

"CF" |-> (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> mi(1, 0)

"SF" |-> xorMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 0, 1), extractMInt( getParentValue(R1, RSMap), 32, 33))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// blsmskl-r32-r32-semantics


// cmovol-r32-r32

  rule <k>
    execinstr (cmovol R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt eqMInt(getFlag("OF", RSMap), mi(1,1)) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovol-r32-r32-semantics


// shll-r32-one

  rule <k>
    execinstr (shll $0x1, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 1, 33))

"CF" |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 1, 2)

"OF" |-> (#ifMInt (eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 1, 2), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shll-r32-one-semantics


// orq-r64-r64

  rule <k>
    execinstr (orq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> orMInt( getParentValue(R2, RSMap), getParentValue(R1, RSMap))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( getParentValue(R1, RSMap), 63, 64)), mi(1, 1)) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( getParentValue(R1, RSMap), 62, 63)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( getParentValue(R1, RSMap), 61, 62)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( getParentValue(R1, RSMap), 60, 61)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(R1, RSMap), 59, 60)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( getParentValue(R1, RSMap), 58, 59)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( getParentValue(R1, RSMap), 57, 58)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( orMInt( getParentValue(R2, RSMap), getParentValue(R1, RSMap)), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> orMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), extractMInt( getParentValue(R1, RSMap), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// orq-r64-r64-semantics


// incb-r8

  rule <k>
    execinstr (incb R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), addMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)))

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)), 0, 1), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 15)) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt eqMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)), 0, 1)

"OF" |-> (#ifMInt ((notBool eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1))) andBool eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 64), mi(7, 18446744073709551615))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// incb-r8-semantics


// vrsqrtps-xmm-xmm

  rule <k>
    execinstr (vrsqrtps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( approx_reciprocal_sqrt_single(extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( approx_reciprocal_sqrt_single(extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( approx_reciprocal_sqrt_single(extractMInt( getParentValue(R1, RSMap), 192, 224)), approx_reciprocal_sqrt_single(extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vrsqrtps-xmm-xmm-semantics


// vfnmadd213ps-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmadd213ps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfnmadd132_single(mi(32, 0), mi(32, 0), mi(32, 0)), concatenateMInt( vfnmadd132_single(mi(32, 0), mi(32, 0), mi(32, 0)), concatenateMInt( vfnmadd132_single(mi(32, 0), mi(32, 0), mi(32, 0)), vfnmadd132_single(mi(32, 0), mi(32, 0), mi(32, 0))))), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160), extractMInt( getParentValue(R3, RSMap), 128, 160)), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R3, RSMap), 160, 192)), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224), extractMInt( getParentValue(R3, RSMap), 192, 224)), vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R3, RSMap), 224, 256))))))
)

    </regstate>
    


// vfnmadd213ps-xmm-xmm-xmm-semantics


// movmskpd-r32-xmm

  rule <k>
    execinstr (movmskpd R1:Xmm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(62, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 128, 129), extractMInt(getParentValue(R1, RSMap), 192, 193))) )


)

    </regstate>


// movmskpd-r32-xmm-semantics

/*
TargetInstr:
movmskpd %xmm1, %ebx
RWSet:
maybe read:{ %xmm1 }
must read:{ %xmm1 }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ sse2 }

Circuit:
circuit:movmskpd %xmm1, %r8  #  1     0    5      OPC=movmskpd_r64_xmm
circuit:movslq %r8d, %rbx    #  2     0x5  3      OPC=movslq_r64_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movmskpd %xmm1, %ebx

  maybe read:      { %xmm1 }
  must read:       { %xmm1 }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse2 }

Circuits:

%rbx   : (sign-extend-64 (plus (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[63:32]) (concat <0x0|1> <%ymm1|256>[63:32]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[63:32]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[63:32])) (concat <0x0|1> <%ymm1|256>[63:32]))[32:32] <0x1|1>) then (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x2|33> else <0x1|33>) else (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>)) (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>))[31:0])

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/
// cmpq-r64-r64

  rule <k>
    execinstr (cmpq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// cmpq-r64-r64-semantics


// divl-r32

  rule <k>
    execinstr (divl R1:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( mi(32, 0), div_quotient_int32(concatenateMInt( extractMInt( getParentValue(%rdx, RSMap), 32, 64), extractMInt( getParentValue(%rax, RSMap), 32, 64)), extractMInt( getParentValue(R1, RSMap), 32, 64)))

"RDX" |-> concatenateMInt( mi(32, 0), div_remainder_int32(concatenateMInt( extractMInt( getParentValue(%rdx, RSMap), 32, 64), extractMInt( getParentValue(%rax, RSMap), 32, 64)), extractMInt( getParentValue(R1, RSMap), 32, 64)))

"CF" |-> (undefMInt)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// divl-r32-semantics


// xorb-rh-rh

  rule <k>
    execinstr (xorb R1:Rh, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 48, 56))), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 55, 56), extractMInt( getParentValue(R1, RSMap), 55, 56)), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 54, 55), extractMInt( getParentValue(R1, RSMap), 54, 55)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 53, 54), extractMInt( getParentValue(R1, RSMap), 53, 54)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 52, 53), extractMInt( getParentValue(R1, RSMap), 52, 53)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 51, 52), extractMInt( getParentValue(R1, RSMap), 51, 52)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 50, 51), extractMInt( getParentValue(R1, RSMap), 50, 51)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 49, 50), extractMInt( getParentValue(R1, RSMap), 49, 50)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( getParentValue(R1, RSMap), 48, 49))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// xorb-rh-rh-semantics


// vcvtph2ps-ymm-xmm

  rule <k>
    execinstr (vcvtph2ps R1:Xmm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( cvt_half_to_single(extractMInt( getParentValue(R1, RSMap), 128, 144)), concatenateMInt( cvt_half_to_single(extractMInt( getParentValue(R1, RSMap), 144, 160)), concatenateMInt( cvt_half_to_single(extractMInt( getParentValue(R1, RSMap), 160, 176)), concatenateMInt( cvt_half_to_single(extractMInt( getParentValue(R1, RSMap), 176, 192)), concatenateMInt( cvt_half_to_single(extractMInt( getParentValue(R1, RSMap), 192, 208)), concatenateMInt( cvt_half_to_single(extractMInt( getParentValue(R1, RSMap), 208, 224)), concatenateMInt( cvt_half_to_single(extractMInt( getParentValue(R1, RSMap), 224, 240)), cvt_half_to_single(extractMInt( getParentValue(R1, RSMap), 240, 256)))))))))
)

    </regstate>
    


// vcvtph2ps-ymm-xmm-semantics


// idivb-r8

  rule <k>
    execinstr (idivb R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), idiv_remainder_int8(extractMInt( getParentValue(%rax, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 56, 64))), idiv_quotient_int8(extractMInt( getParentValue(%rax, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 56, 64)))

"CF" |-> (undefMInt)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// idivb-r8-semantics


// vpmaxsd-ymm-ymm-ymm

  rule <k>
    execinstr (vpmaxsd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)) #then extractMInt( getParentValue(R2, RSMap), 0, 32) #else extractMInt( getParentValue(R1, RSMap), 0, 32) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)) #then extractMInt( getParentValue(R2, RSMap), 32, 64) #else extractMInt( getParentValue(R1, RSMap), 32, 64) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)) #then extractMInt( getParentValue(R2, RSMap), 64, 96) #else extractMInt( getParentValue(R1, RSMap), 64, 96) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128)) #then extractMInt( getParentValue(R2, RSMap), 96, 128) #else extractMInt( getParentValue(R1, RSMap), 96, 128) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R1, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R1, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else extractMInt( getParentValue(R1, RSMap), 192, 224) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))))))))
)

    </regstate>
    


// vpmaxsd-ymm-ymm-ymm-semantics


// sqrtpd-xmm-xmm

  rule <k>
    execinstr (sqrtpd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( sqrt_double(extractMInt( getParentValue(R1, RSMap), 128, 192)), sqrt_double(extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// sqrtpd-xmm-xmm-semantics


// cmovoq-r64-r64

  rule <k>
    execinstr (cmovoq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt eqMInt(getFlag("OF", RSMap), mi(1,1)) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovoq-r64-r64-semantics


// vpmuludq-xmm-xmm-xmm

  rule <k>
    execinstr (vpmuludq R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( mulMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(R2, RSMap), 160, 192)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 160, 192))), mulMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(R2, RSMap), 224, 256)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 224, 256)))))
)

    </regstate>
    


// vpmuludq-xmm-xmm-xmm-semantics


// shlw-r16-cl

  rule <k>
    execinstr (shlw %cl, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 17))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 16)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 16))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 9, 10), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 17), mi(16, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool (((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 16)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 16))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shlw-r16-cl-semantics


// cvtsi2ssq-xmm-r64

  rule <k>
    execinstr (cvtsi2ssq R1:R64, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 224), cvt_int64_to_single(getParentValue(R1, RSMap)))
)

    </regstate>
    


// cvtsi2ssq-xmm-r64-semantics


// notb-rh

  rule <k>
    execinstr (notb R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// notb-rh-semantics


// pminsd-xmm-xmm

  rule <k>
    execinstr (pminsd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R1, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R1, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else extractMInt( getParentValue(R1, RSMap), 192, 224) #fi), (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi)))))
)

    </regstate>
    


// pminsd-xmm-xmm-semantics


// vpmovzxbd-ymm-xmm

  rule <k>
    execinstr (vpmovzxbd R1:Xmm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( mi(24, 0), extractMInt( getParentValue(R1, RSMap), 192, 200)), concatenateMInt( concatenateMInt( mi(24, 0), extractMInt( getParentValue(R1, RSMap), 200, 208)), concatenateMInt( concatenateMInt( mi(24, 0), extractMInt( getParentValue(R1, RSMap), 208, 216)), concatenateMInt( concatenateMInt( mi(24, 0), extractMInt( getParentValue(R1, RSMap), 216, 224)), concatenateMInt( concatenateMInt( mi(24, 0), extractMInt( getParentValue(R1, RSMap), 224, 232)), concatenateMInt( concatenateMInt( mi(24, 0), extractMInt( getParentValue(R1, RSMap), 232, 240)), concatenateMInt( concatenateMInt( mi(24, 0), extractMInt( getParentValue(R1, RSMap), 240, 248)), concatenateMInt( mi(24, 0), extractMInt( getParentValue(R1, RSMap), 248, 256)))))))))
)

    </regstate>
    


// vpmovzxbd-ymm-xmm-semantics


// paddd-xmm-xmm

  rule <k>
    execinstr (paddd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), addMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// paddd-xmm-xmm-semantics


// vfmadd213ss-xmm-xmm-xmm

  rule <k>
    execinstr (vfmadd213ss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 224), vfmadd132_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R3, RSMap), 224, 256))))
)

    </regstate>
    


// vfmadd213ss-xmm-xmm-xmm-semantics


// vpsravd-xmm-xmm-xmm

  rule <k>
    execinstr (vpsravd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 160))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 192))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 224))), ashrMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256)))))))
)

    </regstate>
    


// vpsravd-xmm-xmm-xmm-semantics


// movups-xmm-xmm

  rule <k>
    execinstr (movups R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), extractMInt( getParentValue(R1, RSMap), 128, 256))
)

    </regstate>
    


// movups-xmm-xmm-semantics


// vrcpps-xmm-xmm

  rule <k>
    execinstr (vrcpps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( approx_reciprocal_single(extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( approx_reciprocal_single(extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( approx_reciprocal_single(extractMInt( getParentValue(R1, RSMap), 192, 224)), approx_reciprocal_single(extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vrcpps-xmm-xmm-semantics


// vpmovsxdq-ymm-xmm

  rule <k>
    execinstr (vpmovsxdq R1:Xmm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 160))), concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 192))), concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 224))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vpmovsxdq-ymm-xmm-semantics


// shrb-r8-one

  rule <k>
    execinstr (shrb $0x1, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 0, 8))

"CF" |-> extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 8, 9)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 0, 1), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 0, 8), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 0, 1)

"OF" |-> extractMInt( getParentValue(R2, RSMap), 56, 57)
)

    </regstate>
    


// shrb-r8-one-semantics


// rclb-rh-one

  rule <k>
    execinstr (rclb $0x1, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), mi(9, 1)), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), mi(9, 1)), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), mi(9, 1)), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), mi(9, 1)), 1, 2), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rclb-rh-one-semantics


// vdivpd-ymm-ymm-ymm

  rule <k>
    execinstr (vdivpd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( div_double(extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), concatenateMInt( div_double(extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128)), concatenateMInt( div_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), div_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)))))
)

    </regstate>
    


// vdivpd-ymm-ymm-ymm-semantics


// vpsubusw-xmm-xmm-xmm

  rule <k>
    execinstr (vpsubusw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), 2, 18) #fi) #fi), (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), 2, 18) #fi) #fi)))))))))
)

    </regstate>
    


// vpsubusw-xmm-xmm-xmm-semantics


// vpermilps-xmm-xmm-xmm

  rule <k>
    execinstr (vpermilps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 158, 160), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 158, 160), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 158, 160), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 190, 192), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 190, 192), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 190, 192), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 222, 224), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 222, 224), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 222, 224), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 254, 256), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 254, 256), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 254, 256), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi)))))
)

    </regstate>
    


// vpermilps-xmm-xmm-xmm-semantics


// vmovupd-xmm-xmm

  rule <k>
    execinstr (vmovupd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), extractMInt( getParentValue(R1, RSMap), 128, 256))
)

    </regstate>
    


// vmovupd-xmm-xmm-semantics


// pmulld-xmm-xmm

  rule <k>
    execinstr (pmulld R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 160))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 160)))), 32, 64), concatenateMInt( extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 192))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 192)))), 32, 64), concatenateMInt( extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 224))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 224)))), 32, 64), extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 256))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256)))), 32, 64)))))
)

    </regstate>
    


// pmulld-xmm-xmm-semantics


// vpcmpeqq-ymm-ymm-ymm

  rule <k>
    execinstr (vpcmpeqq R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi))))
)

    </regstate>
    


// vpcmpeqq-ymm-ymm-ymm-semantics


// btcq-r64-r64

  rule <k>
    execinstr (btcq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> xorMInt( getParentValue(R2, RSMap), shlMInt( mi(64, 1), uvalueMInt(mi(64, svalueMInt(andMInt( getParentValue(R1, RSMap), mi(64, 63)))))))

"CF" |-> extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(mi(64, svalueMInt(andMInt( getParentValue(R1, RSMap), mi(64, 63)))))), 63, 64)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btcq-r64-r64-semantics


// vpxor-ymm-ymm-ymm

  rule <k>
    execinstr (vpxor R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> xorMInt( getParentValue(R2, RSMap), getParentValue(R1, RSMap))
)

    </regstate>
    


// vpxor-ymm-ymm-ymm-semantics


// rclw-r16-one

  rule <k>
    execinstr (rclw $0x1, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), mi(17, 1)), 1, 17))

"CF" |-> extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), mi(17, 1)), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), mi(17, 1)), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), mi(17, 1)), 1, 2), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rclw-r16-one-semantics


// vhaddps-xmm-xmm-xmm

  rule <k>
    execinstr (vhaddps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( concatenateMInt( add_single(extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 128, 160)), add_single(extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 192, 224))), add_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 128, 160))), add_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 192, 224))))
)

    </regstate>
    


// vhaddps-xmm-xmm-xmm-semantics


// vfmaddsub213ps-ymm-ymm-ymm

  rule <k>
    execinstr (vfmaddsub213ps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfmadd213_single(extractMInt( getParentValue(R3, RSMap), 0, 32), extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), vfmsub213_single(extractMInt( getParentValue(R3, RSMap), 32, 64), extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64))), concatenateMInt( concatenateMInt( vfmadd213_single(extractMInt( getParentValue(R3, RSMap), 64, 96), extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), vfmsub213_single(extractMInt( getParentValue(R3, RSMap), 96, 128), extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128))), concatenateMInt( concatenateMInt( vfmadd213_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), vfmsub213_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192))), concatenateMInt( vfmadd213_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfmsub213_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vfmaddsub213ps-ymm-ymm-ymm-semantics


// psignb-xmm-xmm

  rule <k>
    execinstr (psignb R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 128, 136), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 128, 136), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 128, 136))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 136, 144), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 136, 144), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 136, 144))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 144, 152), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 144, 152), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 144, 152))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 152, 160), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 152, 160), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 152, 160))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 160, 168), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 160, 168), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 160, 168))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 168, 176), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 168, 176), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 168, 176))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 176, 184), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 176, 184), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 176, 184))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 184, 192), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 184, 192), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 184, 192))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 192, 200), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 192, 200), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 192, 200))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 200, 208), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 200, 208), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 200, 208))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 208, 216), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 208, 216), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 208, 216))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 216, 224), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 216, 224), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 216, 224))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 224, 232), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 224, 232), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 224, 232))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 232, 240), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 232, 240), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 232, 240))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 240, 248), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 240, 248), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 240, 248))) #fi) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 248, 256) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 248, 256))) #fi) #fi)))))))))))))))))
)

    </regstate>
    


// psignb-xmm-xmm-semantics


// vpbroadcastd-ymm-xmm

  rule <k>
    execinstr (vpbroadcastd R1:Xmm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), extractMInt( getParentValue(R1, RSMap), 224, 256)), extractMInt( getParentValue(R1, RSMap), 224, 256)), concatenateMInt( concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), extractMInt( getParentValue(R1, RSMap), 224, 256)), extractMInt( getParentValue(R1, RSMap), 224, 256)))
)

    </regstate>
    


// vpbroadcastd-ymm-xmm-semantics


// vcvttsd2siq-r64-xmm

  rule <k>
    execinstr (vcvttsd2siq R1:Xmm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> cvt_double_to_int64_truncate(extractMInt( getParentValue(R1, RSMap), 192, 256))
)

    </regstate>
    


// vcvttsd2siq-r64-xmm-semantics


// testb-rh-r8

  rule <k>
    execinstr (testb R1:R8, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 55, 56), extractMInt( getParentValue(R1, RSMap), 63, 64)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 54, 55), extractMInt( getParentValue(R1, RSMap), 62, 63)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 53, 54), extractMInt( getParentValue(R1, RSMap), 61, 62)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 52, 53), extractMInt( getParentValue(R1, RSMap), 60, 61)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 51, 52), extractMInt( getParentValue(R1, RSMap), 59, 60)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 50, 51), extractMInt( getParentValue(R1, RSMap), 58, 59)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 49, 50), extractMInt( getParentValue(R1, RSMap), 57, 58)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( getParentValue(R1, RSMap), 56, 57))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// testb-rh-r8-semantics


// blsrl-r32-r32

  rule <k>
    execinstr (blsrl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), andMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), extractMInt( getParentValue(R1, RSMap), 32, 64)))

"CF" |-> (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 0, 1), extractMInt( getParentValue(R1, RSMap), 32, 33))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// blsrl-r32-r32-semantics


// btcw-r16-r16

  rule <k>
    execinstr (btcw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), shlMInt( mi(16, 1), uvalueMInt(mi(16, svalueMInt(andMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 15))))))))

"CF" |-> extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), uvalueMInt(mi(16, svalueMInt(andMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 15)))))), 15, 16)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btcw-r16-r16-semantics


// phaddsw-xmm-xmm

  rule <k>
    execinstr (phaddsw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224)))), 16, 32) #fi) #fi), (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))), 16, 32) #fi) #fi)))))))))
)

    </regstate>
    


// phaddsw-xmm-xmm-semantics


// vpmullw-xmm-xmm-xmm

  rule <k>
    execinstr (vpmullw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), 16, 32), extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), 16, 32)))))))))
)

    </regstate>
    


// vpmullw-xmm-xmm-xmm-semantics


// mulxq-r64-r64-r64

  rule <k>
    execinstr (mulxq R1:R64, R2:R64, R3:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> extractMInt( mulMInt( concatenateMInt( mi(64, 0), getParentValue(%rdx, RSMap)), concatenateMInt( mi(64, 0), getParentValue(R1, RSMap))), 0, 64)

convToRegKeys(R2) |-> extractMInt( mulMInt( concatenateMInt( mi(64, 0), getParentValue(%rdx, RSMap)), concatenateMInt( mi(64, 0), getParentValue(R1, RSMap))), 64, 128)
)

    </regstate>
    


// mulxq-r64-r64-r64-semantics


// cmovnbw-r16-r16

  rule <k>
    execinstr (cmovnbw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt (notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovnbw-r16-r16-semantics


// vpshufb-ymm-ymm-ymm

  rule <k>
    execinstr (vpshufb R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 4, 8), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 0, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 4, 8), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 8, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 4, 8), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 16, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 4, 8), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 24, 32) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 4, 8), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 32, 40) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 4, 8), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 40, 48) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 4, 8), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 48, 56) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 4, 8), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 4, 8), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 64, 72) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 4, 8), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 72, 80) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 4, 8), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 80, 88) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 4, 8), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 88, 96) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 4, 8), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 96, 104) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 4, 8), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 104, 112) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 4, 8), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 112, 120) #else extractMInt( getParentValue(R2, RSMap), 120, 128) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 8, 9), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 12, 16), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 0, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 12, 16), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 8, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 12, 16), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 16, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 12, 16), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 24, 32) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 12, 16), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 32, 40) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 12, 16), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 40, 48) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 12, 16), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 48, 56) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 12, 16), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 12, 16), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 64, 72) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 12, 16), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 72, 80) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 12, 16), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 80, 88) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 12, 16), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 88, 96) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 12, 16), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 96, 104) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 12, 16), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 104, 112) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 12, 16), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 112, 120) #else extractMInt( getParentValue(R2, RSMap), 120, 128) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 16, 17), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 20, 24), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 0, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 20, 24), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 8, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 20, 24), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 16, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 20, 24), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 24, 32) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 20, 24), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 32, 40) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 20, 24), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 40, 48) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 20, 24), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 48, 56) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 20, 24), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 20, 24), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 64, 72) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 20, 24), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 72, 80) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 20, 24), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 80, 88) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 20, 24), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 88, 96) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 20, 24), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 96, 104) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 20, 24), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 104, 112) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 20, 24), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 112, 120) #else extractMInt( getParentValue(R2, RSMap), 120, 128) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 24, 25), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 28, 32), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 0, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 28, 32), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 8, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 28, 32), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 16, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 28, 32), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 24, 32) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 28, 32), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 32, 40) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 28, 32), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 40, 48) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 28, 32), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 48, 56) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 28, 32), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 28, 32), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 64, 72) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 28, 32), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 72, 80) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 28, 32), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 80, 88) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 28, 32), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 88, 96) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 28, 32), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 96, 104) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 28, 32), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 104, 112) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 28, 32), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 112, 120) #else extractMInt( getParentValue(R2, RSMap), 120, 128) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 40), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 0, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 40), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 8, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 40), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 16, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 40), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 24, 32) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 40), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 32, 40) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 40), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 40, 48) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 40), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 48, 56) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 40), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 40), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 64, 72) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 40), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 72, 80) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 40), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 80, 88) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 40), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 88, 96) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 40), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 96, 104) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 40), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 104, 112) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 40), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 112, 120) #else extractMInt( getParentValue(R2, RSMap), 120, 128) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 40, 41), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 48), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 0, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 48), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 8, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 48), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 16, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 48), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 24, 32) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 48), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 32, 40) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 48), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 40, 48) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 48), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 48, 56) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 48), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 48), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 64, 72) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 48), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 72, 80) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 48), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 80, 88) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 48), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 88, 96) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 48), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 96, 104) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 48), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 104, 112) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 48), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 112, 120) #else extractMInt( getParentValue(R2, RSMap), 120, 128) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 56), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 0, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 56), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 8, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 56), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 16, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 56), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 24, 32) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 56), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 32, 40) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 56), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 40, 48) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 56), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 48, 56) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 56), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 56), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 64, 72) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 56), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 72, 80) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 56), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 80, 88) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 56), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 88, 96) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 56), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 96, 104) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 56), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 104, 112) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 56), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 112, 120) #else extractMInt( getParentValue(R2, RSMap), 120, 128) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 0, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 8, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 16, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 24, 32) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 32, 40) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 40, 48) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 48, 56) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 64, 72) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 72, 80) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 80, 88) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 88, 96) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 96, 104) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 104, 112) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 112, 120) #else extractMInt( getParentValue(R2, RSMap), 120, 128) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 64, 65), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 68, 72), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 0, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 68, 72), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 8, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 68, 72), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 16, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 68, 72), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 24, 32) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 68, 72), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 32, 40) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 68, 72), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 40, 48) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 68, 72), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 48, 56) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 68, 72), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 68, 72), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 64, 72) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 68, 72), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 72, 80) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 68, 72), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 80, 88) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 68, 72), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 88, 96) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 68, 72), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 96, 104) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 68, 72), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 104, 112) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 68, 72), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 112, 120) #else extractMInt( getParentValue(R2, RSMap), 120, 128) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 72, 73), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 76, 80), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 0, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 76, 80), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 8, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 76, 80), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 16, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 76, 80), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 24, 32) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 76, 80), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 32, 40) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 76, 80), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 40, 48) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 76, 80), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 48, 56) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 76, 80), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 76, 80), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 64, 72) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 76, 80), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 72, 80) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 76, 80), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 80, 88) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 76, 80), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 88, 96) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 76, 80), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 96, 104) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 76, 80), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 104, 112) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 76, 80), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 112, 120) #else extractMInt( getParentValue(R2, RSMap), 120, 128) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 80, 81), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 84, 88), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 0, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 84, 88), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 8, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 84, 88), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 16, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 84, 88), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 24, 32) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 84, 88), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 32, 40) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 84, 88), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 40, 48) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 84, 88), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 48, 56) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 84, 88), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 84, 88), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 64, 72) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 84, 88), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 72, 80) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 84, 88), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 80, 88) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 84, 88), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 88, 96) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 84, 88), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 96, 104) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 84, 88), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 104, 112) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 84, 88), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 112, 120) #else extractMInt( getParentValue(R2, RSMap), 120, 128) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 88, 89), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 92, 96), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 0, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 92, 96), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 8, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 92, 96), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 16, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 92, 96), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 24, 32) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 92, 96), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 32, 40) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 92, 96), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 40, 48) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 92, 96), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 48, 56) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 92, 96), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 92, 96), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 64, 72) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 92, 96), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 72, 80) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 92, 96), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 80, 88) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 92, 96), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 88, 96) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 92, 96), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 96, 104) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 92, 96), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 104, 112) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 92, 96), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 112, 120) #else extractMInt( getParentValue(R2, RSMap), 120, 128) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 96, 97), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 100, 104), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 0, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 100, 104), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 8, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 100, 104), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 16, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 100, 104), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 24, 32) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 100, 104), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 32, 40) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 100, 104), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 40, 48) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 100, 104), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 48, 56) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 100, 104), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 100, 104), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 64, 72) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 100, 104), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 72, 80) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 100, 104), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 80, 88) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 100, 104), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 88, 96) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 100, 104), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 96, 104) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 100, 104), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 104, 112) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 100, 104), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 112, 120) #else extractMInt( getParentValue(R2, RSMap), 120, 128) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 104, 105), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 108, 112), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 0, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 108, 112), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 8, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 108, 112), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 16, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 108, 112), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 24, 32) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 108, 112), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 32, 40) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 108, 112), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 40, 48) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 108, 112), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 48, 56) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 108, 112), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 108, 112), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 64, 72) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 108, 112), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 72, 80) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 108, 112), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 80, 88) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 108, 112), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 88, 96) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 108, 112), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 96, 104) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 108, 112), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 104, 112) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 108, 112), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 112, 120) #else extractMInt( getParentValue(R2, RSMap), 120, 128) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 112, 113), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 116, 120), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 0, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 116, 120), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 8, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 116, 120), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 16, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 116, 120), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 24, 32) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 116, 120), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 32, 40) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 116, 120), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 40, 48) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 116, 120), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 48, 56) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 116, 120), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 116, 120), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 64, 72) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 116, 120), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 72, 80) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 116, 120), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 80, 88) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 116, 120), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 88, 96) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 116, 120), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 96, 104) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 116, 120), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 104, 112) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 116, 120), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 112, 120) #else extractMInt( getParentValue(R2, RSMap), 120, 128) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 120, 121), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 124, 128), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 0, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 124, 128), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 8, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 124, 128), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 16, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 124, 128), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 24, 32) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 124, 128), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 32, 40) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 124, 128), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 40, 48) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 124, 128), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 48, 56) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 124, 128), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 124, 128), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 64, 72) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 124, 128), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 72, 80) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 124, 128), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 80, 88) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 124, 128), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 88, 96) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 124, 128), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 96, 104) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 124, 128), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 104, 112) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 124, 128), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 112, 120) #else extractMInt( getParentValue(R2, RSMap), 120, 128) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 128, 129), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 136, 137), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 144, 145), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 152, 153), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 160, 161), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 168, 169), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 176, 177), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 184, 185), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 192, 193), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 200, 201), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 208, 209), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 216, 217), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 224, 225), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 232, 233), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 240, 241), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 248, 249), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi))))))))))))))))))))))))))))))))
)

    </regstate>
    


// vpshufb-ymm-ymm-ymm-semantics


// vmaxps-xmm-xmm-xmm

  rule <k>
    execinstr (vmaxps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( maxcmp_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R1, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt eqMInt( maxcmp_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R1, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt eqMInt( maxcmp_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else extractMInt( getParentValue(R1, RSMap), 192, 224) #fi), (#ifMInt eqMInt( maxcmp_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi)))))
)

    </regstate>
    


// vmaxps-xmm-xmm-xmm-semantics


// vfmadd213ps-xmm-xmm-xmm

  rule <k>
    execinstr (vfmadd213ps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( mi(64, 0), mi(64, 0)), concatenateMInt( concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 128, 160), vfnmsub132_single(mi(32, 0), extractMInt( getParentValue(R1, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), extractMInt( getParentValue(R3, RSMap), 128, 160)), vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 160, 192), vfnmsub132_single(mi(32, 0), extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), extractMInt( getParentValue(R3, RSMap), 160, 192))), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 192, 224), vfnmsub132_single(mi(32, 0), extractMInt( getParentValue(R1, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), extractMInt( getParentValue(R3, RSMap), 192, 224)), vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 224, 256), vfnmsub132_single(mi(32, 0), extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), extractMInt( getParentValue(R3, RSMap), 224, 256)))))
)

    </regstate>
    


// vfmadd213ps-xmm-xmm-xmm-semantics


// salq-r64-one

  rule <k>
    execinstr (salq $0x1, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 1, 65)

"CF" |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 1, 2)

"OF" |-> (#ifMInt (eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 1, 2), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// salq-r64-one-semantics


// cvtss2sd-xmm-xmm

  rule <k>
    execinstr (cvtss2sd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 192), cvt_single_to_double(extractMInt( getParentValue(R1, RSMap), 224, 256)))
)

    </regstate>
    


// cvtss2sd-xmm-xmm-semantics


// vmovmskps-r64-ymm

  rule <k>
    execinstr (vmovmskps R1:Ymm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(56, 0), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 64, 65), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 96, 97), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 129), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 161), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 193), extractMInt( getParentValue(R1, RSMap), 224, 225)))))))))
)

    </regstate>
    


// vmovmskps-r64-ymm-semantics


// vpsubd-xmm-xmm-xmm

  rule <k>
    execinstr (vpsubd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), subMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vpsubd-xmm-xmm-xmm-semantics


// vpsignd-xmm-xmm-xmm

  rule <k>
    execinstr (vpsignd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), mi(32, 0)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), mi(32, 0)) #then mi(32, 0) #else addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 128, 160))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), mi(32, 0)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), mi(32, 0)) #then mi(32, 0) #else addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 160, 192))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), mi(32, 0)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), mi(32, 0)) #then mi(32, 0) #else addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 192, 224))) #fi) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), mi(32, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), mi(32, 0)) #then mi(32, 0) #else addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 224, 256))) #fi) #fi)))))
)

    </regstate>
    


// vpsignd-xmm-xmm-xmm-semantics


// vpmulld-xmm-xmm-xmm

  rule <k>
    execinstr (vpmulld R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 160))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 160)))), 32, 64), concatenateMInt( extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 192))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 192)))), 32, 64), concatenateMInt( extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 224))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 224)))), 32, 64), extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 256))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256)))), 32, 64)))))
)

    </regstate>
    


// vpmulld-xmm-xmm-xmm-semantics


// pabsb-xmm-xmm

  rule <k>
    execinstr (pabsb R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 128, 136), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 128, 136))) #else extractMInt( getParentValue(R1, RSMap), 128, 136) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 136, 144), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 136, 144))) #else extractMInt( getParentValue(R1, RSMap), 136, 144) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 144, 152), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 144, 152))) #else extractMInt( getParentValue(R1, RSMap), 144, 152) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 152, 160), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 152, 160))) #else extractMInt( getParentValue(R1, RSMap), 152, 160) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 160, 168), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 160, 168))) #else extractMInt( getParentValue(R1, RSMap), 160, 168) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 168, 176), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 168, 176))) #else extractMInt( getParentValue(R1, RSMap), 168, 176) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 176, 184), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 176, 184))) #else extractMInt( getParentValue(R1, RSMap), 176, 184) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 184, 192), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 184, 192))) #else extractMInt( getParentValue(R1, RSMap), 184, 192) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 200), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 192, 200))) #else extractMInt( getParentValue(R1, RSMap), 192, 200) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 200, 208), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 200, 208))) #else extractMInt( getParentValue(R1, RSMap), 200, 208) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 208, 216), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 208, 216))) #else extractMInt( getParentValue(R1, RSMap), 208, 216) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 216, 224), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 216, 224))) #else extractMInt( getParentValue(R1, RSMap), 216, 224) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 224, 232), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 224, 232))) #else extractMInt( getParentValue(R1, RSMap), 224, 232) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 232, 240), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 232, 240))) #else extractMInt( getParentValue(R1, RSMap), 232, 240) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 240, 248), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 240, 248))) #else extractMInt( getParentValue(R1, RSMap), 240, 248) #fi), (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 248, 256))) #else extractMInt( getParentValue(R1, RSMap), 248, 256) #fi)))))))))))))))))
)

    </regstate>
    


// pabsb-xmm-xmm-semantics


// vpsadbw-ymm-ymm-ymm

  rule <k>
    execinstr (vpsadbw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( mi(48, 0), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 0, 8), extractMInt( getParentValue(R1, RSMap), 0, 8)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 0, 8), extractMInt( getParentValue(R1, RSMap), 0, 8)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 0, 8), extractMInt( getParentValue(R2, RSMap), 0, 8)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 8, 16), extractMInt( getParentValue(R1, RSMap), 8, 16)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 8, 16), extractMInt( getParentValue(R1, RSMap), 8, 16)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 8, 16), extractMInt( getParentValue(R2, RSMap), 8, 16)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 16, 24), extractMInt( getParentValue(R1, RSMap), 16, 24)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 16, 24), extractMInt( getParentValue(R1, RSMap), 16, 24)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 16, 24), extractMInt( getParentValue(R2, RSMap), 16, 24)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 24, 32), extractMInt( getParentValue(R1, RSMap), 24, 32)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 24, 32), extractMInt( getParentValue(R1, RSMap), 24, 32)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 24, 32), extractMInt( getParentValue(R2, RSMap), 24, 32)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 32, 40), extractMInt( getParentValue(R1, RSMap), 32, 40)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 32, 40), extractMInt( getParentValue(R1, RSMap), 32, 40)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 32, 40), extractMInt( getParentValue(R2, RSMap), 32, 40)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 40, 48), extractMInt( getParentValue(R1, RSMap), 40, 48)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 40, 48), extractMInt( getParentValue(R1, RSMap), 40, 48)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 40, 48), extractMInt( getParentValue(R2, RSMap), 40, 48)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 48, 56)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 48, 56)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), extractMInt( getParentValue(R2, RSMap), 48, 56)) #fi)), concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 56, 64)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 56, 64)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), extractMInt( getParentValue(R2, RSMap), 56, 64)) #fi)))))))))), concatenateMInt( concatenateMInt( mi(48, 0), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 64, 72), extractMInt( getParentValue(R1, RSMap), 64, 72)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 64, 72), extractMInt( getParentValue(R1, RSMap), 64, 72)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 64, 72), extractMInt( getParentValue(R2, RSMap), 64, 72)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 72, 80), extractMInt( getParentValue(R1, RSMap), 72, 80)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 72, 80), extractMInt( getParentValue(R1, RSMap), 72, 80)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 72, 80), extractMInt( getParentValue(R2, RSMap), 72, 80)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 80, 88), extractMInt( getParentValue(R1, RSMap), 80, 88)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 80, 88), extractMInt( getParentValue(R1, RSMap), 80, 88)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 80, 88), extractMInt( getParentValue(R2, RSMap), 80, 88)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 88, 96), extractMInt( getParentValue(R1, RSMap), 88, 96)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 88, 96), extractMInt( getParentValue(R1, RSMap), 88, 96)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 88, 96), extractMInt( getParentValue(R2, RSMap), 88, 96)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 96, 104), extractMInt( getParentValue(R1, RSMap), 96, 104)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 96, 104), extractMInt( getParentValue(R1, RSMap), 96, 104)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 96, 104), extractMInt( getParentValue(R2, RSMap), 96, 104)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 104, 112), extractMInt( getParentValue(R1, RSMap), 104, 112)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 104, 112), extractMInt( getParentValue(R1, RSMap), 104, 112)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 104, 112), extractMInt( getParentValue(R2, RSMap), 104, 112)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 112, 120), extractMInt( getParentValue(R1, RSMap), 112, 120)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 112, 120), extractMInt( getParentValue(R1, RSMap), 112, 120)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 112, 120), extractMInt( getParentValue(R2, RSMap), 112, 120)) #fi)), concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 120, 128), extractMInt( getParentValue(R1, RSMap), 120, 128)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 120, 128), extractMInt( getParentValue(R1, RSMap), 120, 128)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 120, 128), extractMInt( getParentValue(R2, RSMap), 120, 128)) #fi)))))))))), concatenateMInt( concatenateMInt( mi(48, 0), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 128, 136), extractMInt( getParentValue(R2, RSMap), 128, 136)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 136, 144), extractMInt( getParentValue(R2, RSMap), 136, 144)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 144, 152), extractMInt( getParentValue(R2, RSMap), 144, 152)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 152, 160), extractMInt( getParentValue(R2, RSMap), 152, 160)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 160, 168), extractMInt( getParentValue(R2, RSMap), 160, 168)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 168, 176), extractMInt( getParentValue(R2, RSMap), 168, 176)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 176, 184), extractMInt( getParentValue(R2, RSMap), 176, 184)) #fi)), concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 184, 192), extractMInt( getParentValue(R2, RSMap), 184, 192)) #fi)))))))))), concatenateMInt( mi(48, 0), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 192, 200), extractMInt( getParentValue(R2, RSMap), 192, 200)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 200, 208), extractMInt( getParentValue(R2, RSMap), 200, 208)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 208, 216), extractMInt( getParentValue(R2, RSMap), 208, 216)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 216, 224), extractMInt( getParentValue(R2, RSMap), 216, 224)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 224, 232), extractMInt( getParentValue(R2, RSMap), 224, 232)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 232, 240), extractMInt( getParentValue(R2, RSMap), 232, 240)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 240, 248), extractMInt( getParentValue(R2, RSMap), 240, 248)) #fi)), concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), extractMInt( getParentValue(R2, RSMap), 248, 256)) #fi)))))))))))))
)

    </regstate>
    


// vpsadbw-ymm-ymm-ymm-semantics


// vfmadd132ss-xmm-xmm-xmm

  rule <k>
    execinstr (vfmadd132ss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 224), vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vfmadd132ss-xmm-xmm-xmm-semantics


// vunpckhps-ymm-ymm-ymm

  rule <k>
    execinstr (vunpckhps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 32), extractMInt( getParentValue(R2, RSMap), 0, 32)), extractMInt( getParentValue(R1, RSMap), 32, 64)), extractMInt( getParentValue(R2, RSMap), 32, 64)), concatenateMInt( concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160)), extractMInt( getParentValue(R1, RSMap), 160, 192)), extractMInt( getParentValue(R2, RSMap), 160, 192)))
)

    </regstate>
    


// vunpckhps-ymm-ymm-ymm-semantics


// vfnmsub231pd-ymm-ymm-ymm

  rule <k>
    execinstr (vfnmsub231pd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( vfnmsub132_double(extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R3, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), concatenateMInt( vfnmsub132_double(extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R3, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128)), concatenateMInt( vfnmsub132_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfnmsub132_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)))))
)

    </regstate>
    


// vfnmsub231pd-ymm-ymm-ymm-semantics


// cmovaq-r64-r64

  rule <k>
    execinstr (cmovaq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt ((notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) andBool (notBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovaq-r64-r64-semantics


// vpcmpgtb-ymm-ymm-ymm

  rule <k>
    execinstr (vpcmpgtb R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 0, 8), extractMInt( getParentValue(R1, RSMap), 0, 8)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 8, 16), extractMInt( getParentValue(R1, RSMap), 8, 16)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 16, 24), extractMInt( getParentValue(R1, RSMap), 16, 24)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 24, 32), extractMInt( getParentValue(R1, RSMap), 24, 32)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 32, 40), extractMInt( getParentValue(R1, RSMap), 32, 40)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 40, 48), extractMInt( getParentValue(R1, RSMap), 40, 48)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 48, 56)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 56, 64)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 64, 72), extractMInt( getParentValue(R1, RSMap), 64, 72)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 72, 80), extractMInt( getParentValue(R1, RSMap), 72, 80)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 80, 88), extractMInt( getParentValue(R1, RSMap), 80, 88)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 88, 96), extractMInt( getParentValue(R1, RSMap), 88, 96)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 96, 104), extractMInt( getParentValue(R1, RSMap), 96, 104)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 104, 112), extractMInt( getParentValue(R1, RSMap), 104, 112)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 112, 120), extractMInt( getParentValue(R1, RSMap), 112, 120)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 120, 128), extractMInt( getParentValue(R1, RSMap), 120, 128)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #then mi(8, 255) #else mi(8, 0) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #then mi(8, 255) #else mi(8, 0) #fi))))))))))))))))))))))))))))))))
)

    </regstate>
    


// vpcmpgtb-ymm-ymm-ymm-semantics


// vpmaxsb-xmm-xmm-xmm

  rule <k>
    execinstr (vpmaxsb R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else extractMInt( getParentValue(R1, RSMap), 128, 136) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else extractMInt( getParentValue(R1, RSMap), 136, 144) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else extractMInt( getParentValue(R1, RSMap), 144, 152) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else extractMInt( getParentValue(R1, RSMap), 152, 160) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else extractMInt( getParentValue(R1, RSMap), 160, 168) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else extractMInt( getParentValue(R1, RSMap), 168, 176) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else extractMInt( getParentValue(R1, RSMap), 176, 184) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else extractMInt( getParentValue(R1, RSMap), 184, 192) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else extractMInt( getParentValue(R1, RSMap), 192, 200) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else extractMInt( getParentValue(R1, RSMap), 200, 208) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else extractMInt( getParentValue(R1, RSMap), 208, 216) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else extractMInt( getParentValue(R1, RSMap), 216, 224) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else extractMInt( getParentValue(R1, RSMap), 224, 232) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else extractMInt( getParentValue(R1, RSMap), 232, 240) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R1, RSMap), 240, 248) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #then extractMInt( getParentValue(R2, RSMap), 248, 256) #else extractMInt( getParentValue(R1, RSMap), 248, 256) #fi)))))))))))))))))
)

    </regstate>
    


// vpmaxsb-xmm-xmm-xmm-semantics


// setle-r8

  rule <k>
    execinstr (setle R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1,1)) orBool (notBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1))))) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setle-r8-semantics


// vpsubw-xmm-xmm-xmm

  rule <k>
    execinstr (vpsubw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)), subMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256))))))))))
)

    </regstate>
    


// vpsubw-xmm-xmm-xmm-semantics


// vbroadcastss-ymm-xmm

  rule <k>
    execinstr (vbroadcastss R1:Xmm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), extractMInt( getParentValue(R1, RSMap), 224, 256)), extractMInt( getParentValue(R1, RSMap), 224, 256)), extractMInt( getParentValue(R1, RSMap), 224, 256)), extractMInt( getParentValue(R1, RSMap), 224, 256)), extractMInt( getParentValue(R1, RSMap), 224, 256)), extractMInt( getParentValue(R1, RSMap), 224, 256))
)

    </regstate>
    


// vbroadcastss-ymm-xmm-semantics


// vfnmadd231ps-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmadd231ps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vfnmadd231ps-xmm-xmm-xmm-semantics


// lzcntq-r64-r64

  rule <k>
    execinstr (lzcntq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 1)) #then mi(64, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 1, 2), mi(1, 1)) #then mi(64, 1) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 2, 3), mi(1, 1)) #then mi(64, 2) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 3, 4), mi(1, 1)) #then mi(64, 3) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 4, 5), mi(1, 1)) #then mi(64, 4) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 5, 6), mi(1, 1)) #then mi(64, 5) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 6, 7), mi(1, 1)) #then mi(64, 6) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 7, 8), mi(1, 1)) #then mi(64, 7) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 8, 9), mi(1, 1)) #then mi(64, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 9, 10), mi(1, 1)) #then mi(64, 9) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 10, 11), mi(1, 1)) #then mi(64, 10) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 11, 12), mi(1, 1)) #then mi(64, 11) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 12, 13), mi(1, 1)) #then mi(64, 12) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 13, 14), mi(1, 1)) #then mi(64, 13) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 14, 15), mi(1, 1)) #then mi(64, 14) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 15, 16), mi(1, 1)) #then mi(64, 15) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 16, 17), mi(1, 1)) #then mi(64, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 17, 18), mi(1, 1)) #then mi(64, 17) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 18, 19), mi(1, 1)) #then mi(64, 18) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 19, 20), mi(1, 1)) #then mi(64, 19) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 20, 21), mi(1, 1)) #then mi(64, 20) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 21, 22), mi(1, 1)) #then mi(64, 21) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 22, 23), mi(1, 1)) #then mi(64, 22) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 23, 24), mi(1, 1)) #then mi(64, 23) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 24, 25), mi(1, 1)) #then mi(64, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 25, 26), mi(1, 1)) #then mi(64, 25) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 26, 27), mi(1, 1)) #then mi(64, 26) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 27, 28), mi(1, 1)) #then mi(64, 27) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 28, 29), mi(1, 1)) #then mi(64, 28) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 29, 30), mi(1, 1)) #then mi(64, 29) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 30, 31), mi(1, 1)) #then mi(64, 30) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 31, 32), mi(1, 1)) #then mi(64, 31) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) #then mi(64, 32) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 33, 34), mi(1, 1)) #then mi(64, 33) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 34, 35), mi(1, 1)) #then mi(64, 34) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 35, 36), mi(1, 1)) #then mi(64, 35) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 37), mi(1, 1)) #then mi(64, 36) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 37, 38), mi(1, 1)) #then mi(64, 37) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 38, 39), mi(1, 1)) #then mi(64, 38) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 39, 40), mi(1, 1)) #then mi(64, 39) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 40, 41), mi(1, 1)) #then mi(64, 40) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 41, 42), mi(1, 1)) #then mi(64, 41) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 42, 43), mi(1, 1)) #then mi(64, 42) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 43, 44), mi(1, 1)) #then mi(64, 43) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 45), mi(1, 1)) #then mi(64, 44) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 45, 46), mi(1, 1)) #then mi(64, 45) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 46, 47), mi(1, 1)) #then mi(64, 46) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 47, 48), mi(1, 1)) #then mi(64, 47) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then mi(64, 48) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 50), mi(1, 1)) #then mi(64, 49) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 50, 51), mi(1, 1)) #then mi(64, 50) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) #then mi(64, 51) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 53), mi(1, 1)) #then mi(64, 52) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 53, 54), mi(1, 1)) #then mi(64, 53) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 54, 55), mi(1, 1)) #then mi(64, 54) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 55, 56), mi(1, 1)) #then mi(64, 55) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then mi(64, 56) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)) #then mi(64, 57) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)) #then mi(64, 58) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) #then mi(64, 59) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)) #then mi(64, 60) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)) #then mi(64, 61) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)) #then mi(64, 62) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)) #then mi(64, 63) #else mi(64, 64) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi)

"CF" |-> (#ifMInt eqMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 1)) #then mi(64, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 1, 2), mi(1, 1)) #then mi(64, 1) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 2, 3), mi(1, 1)) #then mi(64, 2) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 3, 4), mi(1, 1)) #then mi(64, 3) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 4, 5), mi(1, 1)) #then mi(64, 4) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 5, 6), mi(1, 1)) #then mi(64, 5) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 6, 7), mi(1, 1)) #then mi(64, 6) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 7, 8), mi(1, 1)) #then mi(64, 7) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 8, 9), mi(1, 1)) #then mi(64, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 9, 10), mi(1, 1)) #then mi(64, 9) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 10, 11), mi(1, 1)) #then mi(64, 10) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 11, 12), mi(1, 1)) #then mi(64, 11) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 12, 13), mi(1, 1)) #then mi(64, 12) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 13, 14), mi(1, 1)) #then mi(64, 13) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 14, 15), mi(1, 1)) #then mi(64, 14) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 15, 16), mi(1, 1)) #then mi(64, 15) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 16, 17), mi(1, 1)) #then mi(64, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 17, 18), mi(1, 1)) #then mi(64, 17) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 18, 19), mi(1, 1)) #then mi(64, 18) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 19, 20), mi(1, 1)) #then mi(64, 19) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 20, 21), mi(1, 1)) #then mi(64, 20) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 21, 22), mi(1, 1)) #then mi(64, 21) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 22, 23), mi(1, 1)) #then mi(64, 22) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 23, 24), mi(1, 1)) #then mi(64, 23) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 24, 25), mi(1, 1)) #then mi(64, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 25, 26), mi(1, 1)) #then mi(64, 25) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 26, 27), mi(1, 1)) #then mi(64, 26) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 27, 28), mi(1, 1)) #then mi(64, 27) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 28, 29), mi(1, 1)) #then mi(64, 28) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 29, 30), mi(1, 1)) #then mi(64, 29) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 30, 31), mi(1, 1)) #then mi(64, 30) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 31, 32), mi(1, 1)) #then mi(64, 31) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) #then mi(64, 32) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 33, 34), mi(1, 1)) #then mi(64, 33) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 34, 35), mi(1, 1)) #then mi(64, 34) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 35, 36), mi(1, 1)) #then mi(64, 35) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 37), mi(1, 1)) #then mi(64, 36) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 37, 38), mi(1, 1)) #then mi(64, 37) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 38, 39), mi(1, 1)) #then mi(64, 38) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 39, 40), mi(1, 1)) #then mi(64, 39) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 40, 41), mi(1, 1)) #then mi(64, 40) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 41, 42), mi(1, 1)) #then mi(64, 41) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 42, 43), mi(1, 1)) #then mi(64, 42) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 43, 44), mi(1, 1)) #then mi(64, 43) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 45), mi(1, 1)) #then mi(64, 44) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 45, 46), mi(1, 1)) #then mi(64, 45) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 46, 47), mi(1, 1)) #then mi(64, 46) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 47, 48), mi(1, 1)) #then mi(64, 47) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then mi(64, 48) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 50), mi(1, 1)) #then mi(64, 49) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 50, 51), mi(1, 1)) #then mi(64, 50) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) #then mi(64, 51) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 53), mi(1, 1)) #then mi(64, 52) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 53, 54), mi(1, 1)) #then mi(64, 53) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 54, 55), mi(1, 1)) #then mi(64, 54) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 55, 56), mi(1, 1)) #then mi(64, 55) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then mi(64, 56) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)) #then mi(64, 57) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)) #then mi(64, 58) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) #then mi(64, 59) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)) #then mi(64, 60) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)) #then mi(64, 61) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)) #then mi(64, 62) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)) #then mi(64, 63) #else mi(64, 64) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), mi(64, 64)) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 1)) #then mi(64, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 1, 2), mi(1, 1)) #then mi(64, 1) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 2, 3), mi(1, 1)) #then mi(64, 2) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 3, 4), mi(1, 1)) #then mi(64, 3) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 4, 5), mi(1, 1)) #then mi(64, 4) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 5, 6), mi(1, 1)) #then mi(64, 5) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 6, 7), mi(1, 1)) #then mi(64, 6) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 7, 8), mi(1, 1)) #then mi(64, 7) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 8, 9), mi(1, 1)) #then mi(64, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 9, 10), mi(1, 1)) #then mi(64, 9) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 10, 11), mi(1, 1)) #then mi(64, 10) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 11, 12), mi(1, 1)) #then mi(64, 11) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 12, 13), mi(1, 1)) #then mi(64, 12) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 13, 14), mi(1, 1)) #then mi(64, 13) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 14, 15), mi(1, 1)) #then mi(64, 14) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 15, 16), mi(1, 1)) #then mi(64, 15) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 16, 17), mi(1, 1)) #then mi(64, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 17, 18), mi(1, 1)) #then mi(64, 17) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 18, 19), mi(1, 1)) #then mi(64, 18) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 19, 20), mi(1, 1)) #then mi(64, 19) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 20, 21), mi(1, 1)) #then mi(64, 20) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 21, 22), mi(1, 1)) #then mi(64, 21) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 22, 23), mi(1, 1)) #then mi(64, 22) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 23, 24), mi(1, 1)) #then mi(64, 23) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 24, 25), mi(1, 1)) #then mi(64, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 25, 26), mi(1, 1)) #then mi(64, 25) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 26, 27), mi(1, 1)) #then mi(64, 26) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 27, 28), mi(1, 1)) #then mi(64, 27) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 28, 29), mi(1, 1)) #then mi(64, 28) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 29, 30), mi(1, 1)) #then mi(64, 29) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 30, 31), mi(1, 1)) #then mi(64, 30) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 31, 32), mi(1, 1)) #then mi(64, 31) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) #then mi(64, 32) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 33, 34), mi(1, 1)) #then mi(64, 33) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 34, 35), mi(1, 1)) #then mi(64, 34) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 35, 36), mi(1, 1)) #then mi(64, 35) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 37), mi(1, 1)) #then mi(64, 36) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 37, 38), mi(1, 1)) #then mi(64, 37) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 38, 39), mi(1, 1)) #then mi(64, 38) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 39, 40), mi(1, 1)) #then mi(64, 39) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 40, 41), mi(1, 1)) #then mi(64, 40) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 41, 42), mi(1, 1)) #then mi(64, 41) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 42, 43), mi(1, 1)) #then mi(64, 42) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 43, 44), mi(1, 1)) #then mi(64, 43) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 45), mi(1, 1)) #then mi(64, 44) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 45, 46), mi(1, 1)) #then mi(64, 45) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 46, 47), mi(1, 1)) #then mi(64, 46) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 47, 48), mi(1, 1)) #then mi(64, 47) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then mi(64, 48) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 50), mi(1, 1)) #then mi(64, 49) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 50, 51), mi(1, 1)) #then mi(64, 50) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) #then mi(64, 51) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 53), mi(1, 1)) #then mi(64, 52) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 53, 54), mi(1, 1)) #then mi(64, 53) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 54, 55), mi(1, 1)) #then mi(64, 54) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 55, 56), mi(1, 1)) #then mi(64, 55) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then mi(64, 56) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)) #then mi(64, 57) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)) #then mi(64, 58) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) #then mi(64, 59) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)) #then mi(64, 60) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)) #then mi(64, 61) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)) #then mi(64, 62) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)) #then mi(64, 63) #else mi(64, 64) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// lzcntq-r64-r64-semantics


// testq-r64-r64

  rule <k>
    execinstr (testq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( getParentValue(R1, RSMap), 63, 64)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( getParentValue(R1, RSMap), 62, 63)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( getParentValue(R1, RSMap), 61, 62)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( getParentValue(R1, RSMap), 60, 61)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(R1, RSMap), 59, 60)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( getParentValue(R1, RSMap), 58, 59)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( getParentValue(R1, RSMap), 57, 58)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( getParentValue(R2, RSMap), getParentValue(R1, RSMap)), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), extractMInt( getParentValue(R1, RSMap), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// testq-r64-r64-semantics


// vcvtdq2ps-ymm-ymm

  rule <k>
    execinstr (vcvtdq2ps R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( cvt_int32_to_single(extractMInt( getParentValue(R1, RSMap), 0, 32)), concatenateMInt( cvt_int32_to_single(extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( cvt_int32_to_single(extractMInt( getParentValue(R1, RSMap), 64, 96)), concatenateMInt( cvt_int32_to_single(extractMInt( getParentValue(R1, RSMap), 96, 128)), concatenateMInt( cvt_int32_to_single(extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( cvt_int32_to_single(extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( cvt_int32_to_single(extractMInt( getParentValue(R1, RSMap), 192, 224)), cvt_int32_to_single(extractMInt( getParentValue(R1, RSMap), 224, 256)))))))))
)

    </regstate>
    


// vcvtdq2ps-ymm-ymm-semantics


// xorl-r32-r32

  rule <k>
    execinstr (xorl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), xorMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( getParentValue(R1, RSMap), 63, 64)), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( getParentValue(R1, RSMap), 62, 63)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( getParentValue(R1, RSMap), 61, 62)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( getParentValue(R1, RSMap), 60, 61)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(R1, RSMap), 59, 60)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( getParentValue(R1, RSMap), 58, 59)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( getParentValue(R1, RSMap), 57, 58)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), extractMInt( getParentValue(R1, RSMap), 32, 33))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// xorl-r32-r32-semantics


// vpunpckhdq-xmm-xmm-xmm

  rule <k>
    execinstr (vpunpckhdq R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192))))
)

    </regstate>
    


// vpunpckhdq-xmm-xmm-xmm-semantics


// imulw-r16

  rule <k>
    execinstr (imulw R1:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 48, 64)))), 16, 32))

"RDX" |-> concatenateMInt( extractMInt( getParentValue(%rdx, RSMap), 0, 48), extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 48, 64)))), 0, 16))

"CF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 48, 64)))), mi(32, svalueMInt(extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 48, 64)))), 16, 32))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 48, 64)))), mi(32, svalueMInt(extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 48, 64)))), 16, 32))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// imulw-r16-semantics


// vfnmsub132ps-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmsub132ps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfnmsub132_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vfnmsub132ps-xmm-xmm-xmm-semantics


// vfmsubadd213pd-ymm-ymm-ymm

  rule <k>
    execinstr (vfmsubadd213pd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfmsub213_double(extractMInt( getParentValue(R3, RSMap), 0, 64), extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), vfmadd213_double(extractMInt( getParentValue(R3, RSMap), 64, 128), extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128))), concatenateMInt( vfmsub213_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfmadd213_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfmsubadd213pd-ymm-ymm-ymm-semantics


// vhaddps-ymm-ymm-ymm

  rule <k>
    execinstr (vhaddps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( add_single(extractMInt( getParentValue(R1, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 0, 32)), add_single(extractMInt( getParentValue(R1, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 64, 96))), add_single(extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R2, RSMap), 0, 32))), add_single(extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R2, RSMap), 64, 96))), concatenateMInt( concatenateMInt( concatenateMInt( add_single(extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 128, 160)), add_single(extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 192, 224))), add_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 128, 160))), add_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 192, 224))))
)

    </regstate>
    


// vhaddps-ymm-ymm-ymm-semantics


// vpunpckldq-xmm-xmm-xmm

  rule <k>
    execinstr (vpunpckldq R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256))))
)

    </regstate>
    


// vpunpckldq-xmm-xmm-xmm-semantics


// unpckhpd-xmm-xmm

  rule <k>
    execinstr (unpckhpd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192)))
)

    </regstate>
    


// unpckhpd-xmm-xmm-semantics


// setnz-rh

  rule <k>
    execinstr (setnz R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt (notBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setnz-rh-semantics


// vcvtsd2sil-r32-xmm

  rule <k>
    execinstr (vcvtsd2sil R1:Xmm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), cvt_double_to_int32(extractMInt( getParentValue(R1, RSMap), 192, 256)))
)

    </regstate>
    


// vcvtsd2sil-r32-xmm-semantics


// vpaddw-xmm-xmm-xmm

  rule <k>
    execinstr (vpaddw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)), addMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256))))))))))
)

    </regstate>
    


// vpaddw-xmm-xmm-xmm-semantics


// xaddb-r8-rh

  rule <k>
    execinstr (xaddb R1:Rh, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), extractMInt( getParentValue(R2, RSMap), 56, 64)), extractMInt( getParentValue(R1, RSMap), 56, 64))

convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (xaddb R1:Rh, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
        convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( getParentValue(R2, RSMap), 56, 64)), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 51, 52), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
      requires sameRegisters(R1, R2)
  


// xaddb-r8-rh-semantics


// vfmaddsub132ps-ymm-ymm-ymm

  rule <k>
    execinstr (vfmaddsub132ps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 0, 32), extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 32, 64), extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64))), concatenateMInt( concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 64, 96), extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 96, 128), extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128))), concatenateMInt( concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192))), concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vfmaddsub132ps-ymm-ymm-ymm-semantics


// subsd-xmm-xmm

  rule <k>
    execinstr (subsd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 192), sub_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)))
)

    </regstate>
    


// subsd-xmm-xmm-semantics


// cvtpd2dq-xmm-xmm

  rule <k>
    execinstr (cvtpd2dq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( mi(64, 0), concatenateMInt( cvt_double_to_int32(extractMInt( getParentValue(R1, RSMap), 128, 192)), cvt_double_to_int32(extractMInt( getParentValue(R1, RSMap), 192, 256)))))
)

    </regstate>
    


// cvtpd2dq-xmm-xmm-semantics


// vpunpcklqdq-ymm-ymm-ymm

  rule <k>
    execinstr (vpunpcklqdq R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 64, 128), extractMInt( getParentValue(R2, RSMap), 64, 128)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256)))
)

    </regstate>
    


// vpunpcklqdq-ymm-ymm-ymm-semantics


// psrld-xmm-xmm

  rule <k>
    execinstr (psrld R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 31)) #then mi(128, 0) #else concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256)))))) #fi))
)

    </regstate>
    


// psrld-xmm-xmm-semantics


// vpbroadcastb-ymm-xmm

  rule <k>
    execinstr (vpbroadcastb R1:Xmm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256))))))))))))))))))))))))))))))))
)

    </regstate>
    


// vpbroadcastb-ymm-xmm-semantics


// vblendvps-ymm-ymm-ymm-ymm

  rule <k>
    execinstr (vblendvps R1:Ymm, R2:Ymm, R3:Ymm, R4:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 0, 32) #else extractMInt( getParentValue(R2, RSMap), 0, 32) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 64, 65), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 64, 96) #else extractMInt( getParentValue(R2, RSMap), 64, 96) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 96, 97), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 96, 128) #else extractMInt( getParentValue(R2, RSMap), 96, 128) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 128, 129), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 160) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 160, 161), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 192, 193), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 192, 224) #else extractMInt( getParentValue(R2, RSMap), 192, 224) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 224, 225), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 224, 256) #else extractMInt( getParentValue(R2, RSMap), 224, 256) #fi))))))))
)

    </regstate>
    


// vblendvps-ymm-ymm-ymm-ymm-semantics


// sbbl-r32-r32

  rule <k>
    execinstr (sbbl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 32, 33)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 32, 33)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sbbl-r32-r32-semantics


// vpunpcklwd-xmm-xmm-xmm

  rule <k>
    execinstr (vpunpcklwd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), extractMInt( getParentValue(R2, RSMap), 240, 256))))))
)

    </regstate>
    


// vpunpcklwd-xmm-xmm-xmm-semantics


// hsubps-xmm-xmm

  rule <k>
    execinstr (hsubps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( concatenateMInt( sub_single(extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 128, 160)), sub_single(extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 192, 224))), sub_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 128, 160))), sub_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 192, 224))))
)

    </regstate>
    


// hsubps-xmm-xmm-semantics


// vpsraw-xmm-xmm-xmm

  rule <k>
    execinstr (vpsraw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), ashrMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)))))))))))
)

    </regstate>
    


// vpsraw-xmm-xmm-xmm-semantics


// shlxq-r64-r64-r64

  rule <k>
    execinstr (shlxq R1:R64, R2:R64, R3:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> shlMInt( getParentValue(R2, RSMap), uvalueMInt(andMInt( getParentValue(R1, RSMap), mi(64, 63))))
)

    </regstate>
    


// shlxq-r64-r64-r64-semantics


// testw-r16-r16

  rule <k>
    execinstr (testw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( getParentValue(R1, RSMap), 63, 64)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( getParentValue(R1, RSMap), 62, 63)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( getParentValue(R1, RSMap), 61, 62)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( getParentValue(R1, RSMap), 60, 61)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(R1, RSMap), 59, 60)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( getParentValue(R1, RSMap), 58, 59)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( getParentValue(R1, RSMap), 57, 58)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 48, 64)), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( getParentValue(R1, RSMap), 48, 49))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// testw-r16-r16-semantics


// cmovgel-r32-r32

  rule <k>
    execinstr (cmovgel R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovgel-r32-r32-semantics


// rorq-r64-cl

  rule <k>
    execinstr (rorq %cl, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ror( getParentValue(R2, RSMap), concatenateMInt( mi(56, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( ror( getParentValue(R2, RSMap), concatenateMInt( mi(56, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 1)) andBool (eqMInt( extractMInt( ror( getParentValue(R2, RSMap), concatenateMInt( mi(56, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( ror( getParentValue(R2, RSMap), concatenateMInt( mi(56, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rorq-r64-cl-semantics


// vpunpckhbw-ymm-ymm-ymm

  rule <k>
    execinstr (vpunpckhbw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 8), extractMInt( getParentValue(R2, RSMap), 0, 8)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 8, 16), extractMInt( getParentValue(R2, RSMap), 8, 16)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 16, 24), extractMInt( getParentValue(R2, RSMap), 16, 24)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 24, 32), extractMInt( getParentValue(R2, RSMap), 24, 32)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 32, 40), extractMInt( getParentValue(R2, RSMap), 32, 40)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 40, 48), extractMInt( getParentValue(R2, RSMap), 40, 48)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 136), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 136, 144), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 144, 152), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 152, 160), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 168), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 168, 176), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 176, 184), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 184, 192), extractMInt( getParentValue(R2, RSMap), 184, 192)))))))))))))))))
)

    </regstate>
    


// vpunpckhbw-ymm-ymm-ymm-semantics


// movq-r64-r64

  rule <k>
    execinstr (movq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> getParentValue(R1, RSMap)
)

    </regstate>
    


// movq-r64-r64-semantics


// vpsllvd-xmm-xmm-xmm

  rule <k>
    execinstr (vpsllvd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 160))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 192))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 224))), shlMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256)))))))
)

    </regstate>
    


// vpsllvd-xmm-xmm-xmm-semantics


// setnbe-r8

  rule <k>
    execinstr (setnbe R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt ((notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) andBool (notBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setnbe-r8-semantics


// cvtsi2sdq-xmm-r64

  rule <k>
    execinstr (cvtsi2sdq R1:R64, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 192), cvt_int64_to_double(getParentValue(R1, RSMap)))
)

    </regstate>
    


// cvtsi2sdq-xmm-r64-semantics


// vpmaddwd-ymm-ymm-ymm

  rule <k>
    execinstr (vpmaddwd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( addMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 32))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 32)))), mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 16))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 16))))), concatenateMInt( addMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64)))), mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 48))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 48))))), concatenateMInt( addMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 96))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 96)))), mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 80))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 80))))), concatenateMInt( addMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 128))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 128)))), mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 112))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 112))))), concatenateMInt( addMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160)))), mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))))), concatenateMInt( addMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192)))), mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))))), concatenateMInt( addMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224)))), mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))))), addMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256)))), mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))))))))))))
)

    </regstate>
    


// vpmaddwd-ymm-ymm-ymm-semantics


// vtestps-ymm-ymm

  rule <k>
    execinstr (vtestps R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (((((((eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 224, 225)), extractMInt( getParentValue(R1, RSMap), 224, 225)), mi(1, 0)) andBool eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 192, 193)), extractMInt( getParentValue(R1, RSMap), 192, 193)), mi(1, 0))) andBool eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 160, 161)), extractMInt( getParentValue(R1, RSMap), 160, 161)), mi(1, 0))) andBool eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 128, 129)), extractMInt( getParentValue(R1, RSMap), 128, 129)), mi(1, 0))) andBool eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 96, 97)), extractMInt( getParentValue(R1, RSMap), 96, 97)), mi(1, 0))) andBool eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 64, 65)), extractMInt( getParentValue(R1, RSMap), 64, 65)), mi(1, 0))) andBool eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 32, 33)), extractMInt( getParentValue(R1, RSMap), 32, 33)), mi(1, 0))) andBool eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 0, 1)), extractMInt( getParentValue(R1, RSMap), 0, 1)), mi(1, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> mi(1, 0)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 224, 225), extractMInt( getParentValue(R1, RSMap), 224, 225)), mi(1, 0)) andBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 192, 193), extractMInt( getParentValue(R1, RSMap), 192, 193)), mi(1, 0))) andBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 160, 161), extractMInt( getParentValue(R1, RSMap), 160, 161)), mi(1, 0))) andBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 128, 129), extractMInt( getParentValue(R1, RSMap), 128, 129)), mi(1, 0))) andBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 96, 97), extractMInt( getParentValue(R1, RSMap), 96, 97)), mi(1, 0))) andBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 64, 65), extractMInt( getParentValue(R1, RSMap), 64, 65)), mi(1, 0))) andBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), extractMInt( getParentValue(R1, RSMap), 32, 33)), mi(1, 0))) andBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), extractMInt( getParentValue(R1, RSMap), 0, 1)), mi(1, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// vtestps-ymm-ymm-semantics


// movzbl-r32-rh

  rule <k>
    execinstr (movzbl R1:Rh, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(56, 0), extractMInt( getParentValue(R1, RSMap), 48, 56))
)

    </regstate>
    


// movzbl-r32-rh-semantics


// pminud-xmm-xmm

  rule <k>
    execinstr (pminud R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R1, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R1, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else extractMInt( getParentValue(R1, RSMap), 192, 224) #fi), (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi)))))
)

    </regstate>
    


// pminud-xmm-xmm-semantics


// vzeroall

  rule <k>
    execinstr (vzeroall  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"YMM0" |-> mi(256, 0)

"YMM1" |-> mi(256, 0)

"YMM2" |-> mi(256, 0)

"YMM3" |-> mi(256, 0)

"YMM4" |-> mi(256, 0)

"YMM5" |-> mi(256, 0)

"YMM6" |-> mi(256, 0)

"YMM7" |-> mi(256, 0)

"YMM8" |-> mi(256, 0)

"YMM9" |-> mi(256, 0)

"YMM10" |-> mi(256, 0)

"YMM11" |-> mi(256, 0)

"YMM12" |-> mi(256, 0)

"YMM13" |-> mi(256, 0)

"YMM14" |-> mi(256, 0)

"YMM15" |-> mi(256, 0)
)

    </regstate>
    


// vzeroall-semantics


// vrcpps-ymm-ymm

  rule <k>
    execinstr (vrcpps R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( approx_reciprocal_single(extractMInt( getParentValue(R1, RSMap), 0, 32)), concatenateMInt( approx_reciprocal_single(extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( approx_reciprocal_single(extractMInt( getParentValue(R1, RSMap), 64, 96)), concatenateMInt( approx_reciprocal_single(extractMInt( getParentValue(R1, RSMap), 96, 128)), concatenateMInt( approx_reciprocal_single(extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( approx_reciprocal_single(extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( approx_reciprocal_single(extractMInt( getParentValue(R1, RSMap), 192, 224)), approx_reciprocal_single(extractMInt( getParentValue(R1, RSMap), 224, 256)))))))))
)

    </regstate>
    


// vrcpps-ymm-ymm-semantics


// psubw-xmm-xmm

  rule <k>
    execinstr (psubw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)), subMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256))))))))))
)

    </regstate>
    


// psubw-xmm-xmm-semantics


// vfnmadd213ss-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmadd213ss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 224), vfnmadd213_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vfnmadd213ss-xmm-xmm-xmm-semantics


// mulb-r8

  rule <k>
    execinstr (mulb R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), mulMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(8, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( mulMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(8, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 0, 8), mi(8, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( extractMInt( mulMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(8, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 0, 8), mi(8, 0))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// mulb-r8-semantics


// subps-xmm-xmm

  rule <k>
    execinstr (subps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( sub_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( sub_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( sub_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), sub_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// subps-xmm-xmm-semantics


// sbbb-rh-rh

  rule <k>
    execinstr (sbbb R1:Rh, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), extractMInt( getParentValue(R2, RSMap), 51, 52)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sbbb-rh-rh-semantics


// movmskps-r64-xmm

  rule <k>
    execinstr (movmskps R1:Xmm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(60, 0), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 129), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 161), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 193), extractMInt( getParentValue(R1, RSMap), 224, 225)))))
)

    </regstate>
    


// movmskps-r64-xmm-semantics


// vpabsw-xmm-xmm

  rule <k>
    execinstr (vpabsw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 128, 144))) #else extractMInt( getParentValue(R1, RSMap), 128, 144) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 144, 160))) #else extractMInt( getParentValue(R1, RSMap), 144, 160) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 160, 176))) #else extractMInt( getParentValue(R1, RSMap), 160, 176) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 176, 192))) #else extractMInt( getParentValue(R1, RSMap), 176, 192) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 192, 208))) #else extractMInt( getParentValue(R1, RSMap), 192, 208) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 208, 224))) #else extractMInt( getParentValue(R1, RSMap), 208, 224) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 224, 240))) #else extractMInt( getParentValue(R1, RSMap), 224, 240) #fi), (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 240, 256))) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)))))))))
)

    </regstate>
    


// vpabsw-xmm-xmm-semantics


// vmovdqa-ymm-ymm

  rule <k>
    execinstr (vmovdqa R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> getParentValue(R1, RSMap)
)

    </regstate>
    


// vmovdqa-ymm-ymm-semantics


// vmovss-xmm-xmm-xmm

  rule <k>
    execinstr (vmovss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 224), extractMInt( getParentValue(R1, RSMap), 224, 256)))
)

    </regstate>
    


// vmovss-xmm-xmm-xmm-semantics


// vfmsubadd231pd-ymm-ymm-ymm

  rule <k>
    execinstr (vfmsubadd231pd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfmsub231_double(extractMInt( getParentValue(R3, RSMap), 0, 64), extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), vfmadd231_double(extractMInt( getParentValue(R3, RSMap), 64, 128), extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128))), concatenateMInt( vfmsub231_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfmadd231_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfmsubadd231pd-ymm-ymm-ymm-semantics


// cmovnbq-r64-r64

  rule <k>
    execinstr (cmovnbq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt (notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovnbq-r64-r64-semantics


// andq-r64-r64

  rule <k>
    execinstr (andq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> andMInt( getParentValue(R2, RSMap), getParentValue(R1, RSMap))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( getParentValue(R1, RSMap), 63, 64)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( getParentValue(R1, RSMap), 62, 63)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( getParentValue(R1, RSMap), 61, 62)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( getParentValue(R1, RSMap), 60, 61)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(R1, RSMap), 59, 60)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( getParentValue(R1, RSMap), 58, 59)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( getParentValue(R1, RSMap), 57, 58)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( getParentValue(R2, RSMap), getParentValue(R1, RSMap)), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), extractMInt( getParentValue(R1, RSMap), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// andq-r64-r64-semantics


// cmovow-r16-r16

  rule <k>
    execinstr (cmovow R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt eqMInt(getFlag("OF", RSMap), mi(1,1)) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovow-r16-r16-semantics


// cmovlw-r16-r16

  rule <k>
    execinstr (cmovlw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt (notBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1)))) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovlw-r16-r16-semantics


// vfmaddsub231pd-ymm-ymm-ymm

  rule <k>
    execinstr (vfmaddsub231pd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfmadd231_double(extractMInt( getParentValue(R3, RSMap), 0, 64), extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), vfmsub231_double(extractMInt( getParentValue(R3, RSMap), 64, 128), extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128))), concatenateMInt( vfmadd231_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfmsub231_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfmaddsub231pd-ymm-ymm-ymm-semantics


// vpsubsb-ymm-ymm-ymm

  rule <k>
    execinstr (vpsubsb R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 8))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 8)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 8))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 8)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 8))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 8)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 8, 16))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 8, 16)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 8, 16))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 8, 16)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 8, 16))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 8, 16)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 24))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 24)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 24))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 24)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 24))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 24)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 24, 32))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 24, 32)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 24, 32))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 24, 32)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 24, 32))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 24, 32)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 40))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 40)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 40))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 40)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 40))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 40)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 40, 48))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 40, 48)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 40, 48))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 40, 48)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 40, 48))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 40, 48)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 56, 64)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 56, 64)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 56, 64)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 72))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 72)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 72))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 72)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 72))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 72)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 72, 80))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 72, 80)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 72, 80))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 72, 80)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 72, 80))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 72, 80)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 88))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 88)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 88))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 88)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 88))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 88)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 88, 96))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 88, 96)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 88, 96))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 88, 96)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 88, 96))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 88, 96)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 104))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 104)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 104))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 104)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 104))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 104)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 104, 112))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 104, 112)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 104, 112))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 104, 112)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 104, 112))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 104, 112)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 120))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 120)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 120))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 120)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 120))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 120)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 120, 128))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 120, 128)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 120, 128))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 120, 128)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 120, 128))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 120, 128)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 136))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 136))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 136))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 136, 144))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 136, 144))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 136, 144))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 152))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 152))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 152))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 152, 160))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 152, 160))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 152, 160))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 168))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 168))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 168))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 168, 176))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 168, 176))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 168, 176))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 184))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 184))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 184))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 184, 192))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 184, 192))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 184, 192))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 200))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 200))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 200))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 200, 208))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 200, 208))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 200, 208))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 216))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 216))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 216))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 216, 224))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 216, 224))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 216, 224))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 232))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 232))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 232))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 232, 240))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 232, 240))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 232, 240))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 248))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 248))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 248))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248)))), 2, 10) #fi) #fi), (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 248, 256))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 248, 256))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 248, 256))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))), 2, 10) #fi) #fi))))))))))))))))))))))))))))))))
)

    </regstate>
    


// vpsubsb-ymm-ymm-ymm-semantics


// cmpw-r16-r16

  rule <k>
    execinstr (cmpw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// cmpw-r16-r16-semantics


// rclw-r16-cl

  rule <k>
    execinstr (rclw %cl, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(17, 17))), 1, 17))

"CF" |-> extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(17, 17))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(17, 17)), 9, 17), mi(8, 1)) andBool (eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(17, 17))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(17, 17))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(17, 17)), 9, 17), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(17, 17)), 9, 17), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(17, 17)), 9, 17), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rclw-r16-cl-semantics


// vorpd-ymm-ymm-ymm

  rule <k>
    execinstr (vorpd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> orMInt( getParentValue(R2, RSMap), getParentValue(R1, RSMap))
)

    </regstate>
    


// vorpd-ymm-ymm-ymm-semantics


// pmaxuw-xmm-xmm

  rule <k>
    execinstr (pmaxuw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)) #then extractMInt( getParentValue(R2, RSMap), 128, 144) #else extractMInt( getParentValue(R1, RSMap), 128, 144) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)) #then extractMInt( getParentValue(R2, RSMap), 144, 160) #else extractMInt( getParentValue(R1, RSMap), 144, 160) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)) #then extractMInt( getParentValue(R2, RSMap), 160, 176) #else extractMInt( getParentValue(R1, RSMap), 160, 176) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)) #then extractMInt( getParentValue(R2, RSMap), 176, 192) #else extractMInt( getParentValue(R1, RSMap), 176, 192) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)) #then extractMInt( getParentValue(R2, RSMap), 192, 208) #else extractMInt( getParentValue(R1, RSMap), 192, 208) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)) #then extractMInt( getParentValue(R2, RSMap), 208, 224) #else extractMInt( getParentValue(R1, RSMap), 208, 224) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)) #then extractMInt( getParentValue(R2, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 224, 240) #fi), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R2, RSMap), 240, 256) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)))))))))
)

    </regstate>
    


// pmaxuw-xmm-xmm-semantics


// vfnmadd213pd-ymm-ymm-ymm

  rule <k>
    execinstr (vfnmadd213pd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( vfnmadd132_double(extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64), extractMInt( getParentValue(R3, RSMap), 0, 64)), concatenateMInt( vfnmadd132_double(extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128), extractMInt( getParentValue(R3, RSMap), 64, 128)), concatenateMInt( vfnmadd132_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192), extractMInt( getParentValue(R3, RSMap), 128, 192)), vfnmadd132_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R3, RSMap), 192, 256)))))
)

    </regstate>
    


// vfnmadd213pd-ymm-ymm-ymm-semantics


// xorb-rh-r8

  rule <k>
    execinstr (xorb R1:R8, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 56, 64))), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 55, 56), extractMInt( getParentValue(R1, RSMap), 63, 64)), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 54, 55), extractMInt( getParentValue(R1, RSMap), 62, 63)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 53, 54), extractMInt( getParentValue(R1, RSMap), 61, 62)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 52, 53), extractMInt( getParentValue(R1, RSMap), 60, 61)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 51, 52), extractMInt( getParentValue(R1, RSMap), 59, 60)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 50, 51), extractMInt( getParentValue(R1, RSMap), 58, 59)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 49, 50), extractMInt( getParentValue(R1, RSMap), 57, 58)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( getParentValue(R1, RSMap), 56, 57))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// xorb-rh-r8-semantics


// vpackusdw-xmm-xmm-xmm

  rule <k>
    execinstr (vpackusdw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R1, RSMap), 144, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R1, RSMap), 176, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R1, RSMap), 208, 224) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 144, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 176, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 208, 224) #fi) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 240, 256) #fi) #fi)))))))))
)

    </regstate>
    


// vpackusdw-xmm-xmm-xmm-semantics


// vorps-ymm-ymm-ymm

  rule <k>
    execinstr (vorps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> orMInt( getParentValue(R2, RSMap), getParentValue(R1, RSMap))
)

    </regstate>
    


// vorps-ymm-ymm-ymm-semantics


// cmovnol-r32-r32

  rule <k>
    execinstr (cmovnol R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt (notBool eqMInt(getFlag("OF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovnol-r32-r32-semantics


// vpmovsxwq-ymm-xmm

  rule <k>
    execinstr (vpmovsxwq R1:Xmm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208))), concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224))), concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))))))
)

    </regstate>
    


// vpmovsxwq-ymm-xmm-semantics


// cmovnoq-r64-r64

  rule <k>
    execinstr (cmovnoq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt (notBool eqMInt(getFlag("OF", RSMap), mi(1,1))) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovnoq-r64-r64-semantics


// vpsrld-ymm-ymm-xmm

  rule <k>
    execinstr (vpsrld R1:Xmm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 31)) #then mi(256, 0) #else concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256)))))))))) #fi)
)

    </regstate>
    


// vpsrld-ymm-ymm-xmm-semantics


// xorpd-xmm-xmm

  rule <k>
    execinstr (xorpd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), xorMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// xorpd-xmm-xmm-semantics


// subw-r16-r16

  rule <k>
    execinstr (subw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// subw-r16-r16-semantics


// vpaddusw-ymm-ymm-ymm

  rule <k>
    execinstr (vpaddusw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 0, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 0, 16))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 0, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 0, 16))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 16, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 16, 32))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 16, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 16, 32))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 48)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 48))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 48)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 48))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 64, 80)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 64, 80))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 64, 80)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 64, 80))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 80, 96)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 80, 96))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 80, 96)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 80, 96))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 96, 112)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 96, 112))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 96, 112)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 96, 112))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 112, 128)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 112, 128))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 112, 128)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 112, 128))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), 1, 17) #fi), (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), 1, 17) #fi))))))))))))))))
)

    </regstate>
    


// vpaddusw-ymm-ymm-ymm-semantics


// setpe-rh

  rule <k>
    execinstr (setpe R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt eqMInt(getFlag("PF", RSMap), mi(1,1)) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setpe-rh-semantics


// vpcmpgtd-ymm-ymm-ymm

  rule <k>
    execinstr (vpcmpgtd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)) #then mi(32, 4294967295) #else mi(32, 0) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)) #then mi(32, 4294967295) #else mi(32, 0) #fi))))))))
)

    </regstate>
    


// vpcmpgtd-ymm-ymm-ymm-semantics


// mulss-xmm-xmm

  rule <k>
    execinstr (mulss R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 224), mul_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))
)

    </regstate>
    


// mulss-xmm-xmm-semantics


// vandps-xmm-xmm-xmm

  rule <k>
    execinstr (vandps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), andMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// vandps-xmm-xmm-xmm-semantics


// vpmulhuw-ymm-ymm-ymm

  rule <k>
    execinstr (vpmulhuw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 0, 16)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 0, 16))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 16, 32)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 16, 32))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 32, 48)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 32, 48))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 48, 64))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 64, 80)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 64, 80))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 80, 96)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 80, 96))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 96, 112)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 96, 112))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 112, 128)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 112, 128))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), 0, 16), extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), 0, 16))))))))))))))))
)

    </regstate>
    


// vpmulhuw-ymm-ymm-ymm-semantics


// mulpd-xmm-xmm

  rule <k>
    execinstr (mulpd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( mul_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), mul_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// mulpd-xmm-xmm-semantics


// pmovzxdq-xmm-xmm

  rule <k>
    execinstr (pmovzxdq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 192, 224)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// pmovzxdq-xmm-xmm-semantics


// bzhiq-r64-r64-r64

  rule <k>
    execinstr (bzhiq R1:R64, R2:R64, R3:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 64)) #then (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 63)) #then concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 1, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 62)) #then concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 2, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 61)) #then concatenateMInt( mi(3, 0), extractMInt( getParentValue(R2, RSMap), 3, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 60)) #then concatenateMInt( mi(4, 0), extractMInt( getParentValue(R2, RSMap), 4, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 59)) #then concatenateMInt( mi(5, 0), extractMInt( getParentValue(R2, RSMap), 5, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 58)) #then concatenateMInt( mi(6, 0), extractMInt( getParentValue(R2, RSMap), 6, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 57)) #then concatenateMInt( mi(7, 0), extractMInt( getParentValue(R2, RSMap), 7, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 56)) #then concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 8, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 55)) #then concatenateMInt( mi(9, 0), extractMInt( getParentValue(R2, RSMap), 9, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 54)) #then concatenateMInt( mi(10, 0), extractMInt( getParentValue(R2, RSMap), 10, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 53)) #then concatenateMInt( mi(11, 0), extractMInt( getParentValue(R2, RSMap), 11, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 52)) #then concatenateMInt( mi(12, 0), extractMInt( getParentValue(R2, RSMap), 12, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 51)) #then concatenateMInt( mi(13, 0), extractMInt( getParentValue(R2, RSMap), 13, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 50)) #then concatenateMInt( mi(14, 0), extractMInt( getParentValue(R2, RSMap), 14, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 49)) #then concatenateMInt( mi(15, 0), extractMInt( getParentValue(R2, RSMap), 15, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 48)) #then concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 16, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 47)) #then concatenateMInt( mi(17, 0), extractMInt( getParentValue(R2, RSMap), 17, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 46)) #then concatenateMInt( mi(18, 0), extractMInt( getParentValue(R2, RSMap), 18, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 45)) #then concatenateMInt( mi(19, 0), extractMInt( getParentValue(R2, RSMap), 19, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 44)) #then concatenateMInt( mi(20, 0), extractMInt( getParentValue(R2, RSMap), 20, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 43)) #then concatenateMInt( mi(21, 0), extractMInt( getParentValue(R2, RSMap), 21, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 42)) #then concatenateMInt( mi(22, 0), extractMInt( getParentValue(R2, RSMap), 22, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 41)) #then concatenateMInt( mi(23, 0), extractMInt( getParentValue(R2, RSMap), 23, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 40)) #then concatenateMInt( mi(24, 0), extractMInt( getParentValue(R2, RSMap), 24, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 39)) #then concatenateMInt( mi(25, 0), extractMInt( getParentValue(R2, RSMap), 25, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 38)) #then concatenateMInt( mi(26, 0), extractMInt( getParentValue(R2, RSMap), 26, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 37)) #then concatenateMInt( mi(27, 0), extractMInt( getParentValue(R2, RSMap), 27, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 36)) #then concatenateMInt( mi(28, 0), extractMInt( getParentValue(R2, RSMap), 28, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 35)) #then concatenateMInt( mi(29, 0), extractMInt( getParentValue(R2, RSMap), 29, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 34)) #then concatenateMInt( mi(30, 0), extractMInt( getParentValue(R2, RSMap), 30, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 33)) #then concatenateMInt( mi(31, 0), extractMInt( getParentValue(R2, RSMap), 31, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 32)) #then concatenateMInt( mi(32, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 31)) #then concatenateMInt( mi(33, 0), extractMInt( getParentValue(R2, RSMap), 33, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 30)) #then concatenateMInt( mi(34, 0), extractMInt( getParentValue(R2, RSMap), 34, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 29)) #then concatenateMInt( mi(35, 0), extractMInt( getParentValue(R2, RSMap), 35, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 28)) #then concatenateMInt( mi(36, 0), extractMInt( getParentValue(R2, RSMap), 36, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 27)) #then concatenateMInt( mi(37, 0), extractMInt( getParentValue(R2, RSMap), 37, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 26)) #then concatenateMInt( mi(38, 0), extractMInt( getParentValue(R2, RSMap), 38, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 25)) #then concatenateMInt( mi(39, 0), extractMInt( getParentValue(R2, RSMap), 39, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 24)) #then concatenateMInt( mi(40, 0), extractMInt( getParentValue(R2, RSMap), 40, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 23)) #then concatenateMInt( mi(41, 0), extractMInt( getParentValue(R2, RSMap), 41, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 22)) #then concatenateMInt( mi(42, 0), extractMInt( getParentValue(R2, RSMap), 42, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 21)) #then concatenateMInt( mi(43, 0), extractMInt( getParentValue(R2, RSMap), 43, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 20)) #then concatenateMInt( mi(44, 0), extractMInt( getParentValue(R2, RSMap), 44, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 19)) #then concatenateMInt( mi(45, 0), extractMInt( getParentValue(R2, RSMap), 45, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 18)) #then concatenateMInt( mi(46, 0), extractMInt( getParentValue(R2, RSMap), 46, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 17)) #then concatenateMInt( mi(47, 0), extractMInt( getParentValue(R2, RSMap), 47, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 16)) #then concatenateMInt( mi(48, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 15)) #then concatenateMInt( mi(49, 0), extractMInt( getParentValue(R2, RSMap), 49, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 14)) #then concatenateMInt( mi(50, 0), extractMInt( getParentValue(R2, RSMap), 50, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 13)) #then concatenateMInt( mi(51, 0), extractMInt( getParentValue(R2, RSMap), 51, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 12)) #then concatenateMInt( mi(52, 0), extractMInt( getParentValue(R2, RSMap), 52, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 11)) #then concatenateMInt( mi(53, 0), extractMInt( getParentValue(R2, RSMap), 53, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 10)) #then concatenateMInt( mi(54, 0), extractMInt( getParentValue(R2, RSMap), 54, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 9)) #then concatenateMInt( mi(55, 0), extractMInt( getParentValue(R2, RSMap), 55, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 8)) #then concatenateMInt( mi(56, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 7)) #then concatenateMInt( mi(57, 0), extractMInt( getParentValue(R2, RSMap), 57, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 6)) #then concatenateMInt( mi(58, 0), extractMInt( getParentValue(R2, RSMap), 58, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 5)) #then concatenateMInt( mi(59, 0), extractMInt( getParentValue(R2, RSMap), 59, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 4)) #then concatenateMInt( mi(60, 0), extractMInt( getParentValue(R2, RSMap), 60, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 3)) #then concatenateMInt( mi(61, 0), extractMInt( getParentValue(R2, RSMap), 61, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 2)) #then concatenateMInt( mi(62, 0), extractMInt( getParentValue(R2, RSMap), 62, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)) #then concatenateMInt( mi(63, 0), extractMInt( getParentValue(R2, RSMap), 63, 64)) #else mi(64, 0) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #else getParentValue(R2, RSMap) #fi)

"CF" |-> (#ifMInt ugeMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 64)) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 64)) #then (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 63)) #then concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 1, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 62)) #then concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 2, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 61)) #then concatenateMInt( mi(3, 0), extractMInt( getParentValue(R2, RSMap), 3, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 60)) #then concatenateMInt( mi(4, 0), extractMInt( getParentValue(R2, RSMap), 4, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 59)) #then concatenateMInt( mi(5, 0), extractMInt( getParentValue(R2, RSMap), 5, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 58)) #then concatenateMInt( mi(6, 0), extractMInt( getParentValue(R2, RSMap), 6, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 57)) #then concatenateMInt( mi(7, 0), extractMInt( getParentValue(R2, RSMap), 7, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 56)) #then concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 8, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 55)) #then concatenateMInt( mi(9, 0), extractMInt( getParentValue(R2, RSMap), 9, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 54)) #then concatenateMInt( mi(10, 0), extractMInt( getParentValue(R2, RSMap), 10, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 53)) #then concatenateMInt( mi(11, 0), extractMInt( getParentValue(R2, RSMap), 11, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 52)) #then concatenateMInt( mi(12, 0), extractMInt( getParentValue(R2, RSMap), 12, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 51)) #then concatenateMInt( mi(13, 0), extractMInt( getParentValue(R2, RSMap), 13, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 50)) #then concatenateMInt( mi(14, 0), extractMInt( getParentValue(R2, RSMap), 14, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 49)) #then concatenateMInt( mi(15, 0), extractMInt( getParentValue(R2, RSMap), 15, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 48)) #then concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 16, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 47)) #then concatenateMInt( mi(17, 0), extractMInt( getParentValue(R2, RSMap), 17, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 46)) #then concatenateMInt( mi(18, 0), extractMInt( getParentValue(R2, RSMap), 18, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 45)) #then concatenateMInt( mi(19, 0), extractMInt( getParentValue(R2, RSMap), 19, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 44)) #then concatenateMInt( mi(20, 0), extractMInt( getParentValue(R2, RSMap), 20, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 43)) #then concatenateMInt( mi(21, 0), extractMInt( getParentValue(R2, RSMap), 21, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 42)) #then concatenateMInt( mi(22, 0), extractMInt( getParentValue(R2, RSMap), 22, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 41)) #then concatenateMInt( mi(23, 0), extractMInt( getParentValue(R2, RSMap), 23, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 40)) #then concatenateMInt( mi(24, 0), extractMInt( getParentValue(R2, RSMap), 24, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 39)) #then concatenateMInt( mi(25, 0), extractMInt( getParentValue(R2, RSMap), 25, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 38)) #then concatenateMInt( mi(26, 0), extractMInt( getParentValue(R2, RSMap), 26, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 37)) #then concatenateMInt( mi(27, 0), extractMInt( getParentValue(R2, RSMap), 27, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 36)) #then concatenateMInt( mi(28, 0), extractMInt( getParentValue(R2, RSMap), 28, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 35)) #then concatenateMInt( mi(29, 0), extractMInt( getParentValue(R2, RSMap), 29, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 34)) #then concatenateMInt( mi(30, 0), extractMInt( getParentValue(R2, RSMap), 30, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 33)) #then concatenateMInt( mi(31, 0), extractMInt( getParentValue(R2, RSMap), 31, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 32)) #then concatenateMInt( mi(32, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 31)) #then concatenateMInt( mi(33, 0), extractMInt( getParentValue(R2, RSMap), 33, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 30)) #then concatenateMInt( mi(34, 0), extractMInt( getParentValue(R2, RSMap), 34, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 29)) #then concatenateMInt( mi(35, 0), extractMInt( getParentValue(R2, RSMap), 35, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 28)) #then concatenateMInt( mi(36, 0), extractMInt( getParentValue(R2, RSMap), 36, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 27)) #then concatenateMInt( mi(37, 0), extractMInt( getParentValue(R2, RSMap), 37, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 26)) #then concatenateMInt( mi(38, 0), extractMInt( getParentValue(R2, RSMap), 38, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 25)) #then concatenateMInt( mi(39, 0), extractMInt( getParentValue(R2, RSMap), 39, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 24)) #then concatenateMInt( mi(40, 0), extractMInt( getParentValue(R2, RSMap), 40, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 23)) #then concatenateMInt( mi(41, 0), extractMInt( getParentValue(R2, RSMap), 41, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 22)) #then concatenateMInt( mi(42, 0), extractMInt( getParentValue(R2, RSMap), 42, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 21)) #then concatenateMInt( mi(43, 0), extractMInt( getParentValue(R2, RSMap), 43, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 20)) #then concatenateMInt( mi(44, 0), extractMInt( getParentValue(R2, RSMap), 44, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 19)) #then concatenateMInt( mi(45, 0), extractMInt( getParentValue(R2, RSMap), 45, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 18)) #then concatenateMInt( mi(46, 0), extractMInt( getParentValue(R2, RSMap), 46, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 17)) #then concatenateMInt( mi(47, 0), extractMInt( getParentValue(R2, RSMap), 47, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 16)) #then concatenateMInt( mi(48, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 15)) #then concatenateMInt( mi(49, 0), extractMInt( getParentValue(R2, RSMap), 49, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 14)) #then concatenateMInt( mi(50, 0), extractMInt( getParentValue(R2, RSMap), 50, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 13)) #then concatenateMInt( mi(51, 0), extractMInt( getParentValue(R2, RSMap), 51, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 12)) #then concatenateMInt( mi(52, 0), extractMInt( getParentValue(R2, RSMap), 52, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 11)) #then concatenateMInt( mi(53, 0), extractMInt( getParentValue(R2, RSMap), 53, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 10)) #then concatenateMInt( mi(54, 0), extractMInt( getParentValue(R2, RSMap), 54, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 9)) #then concatenateMInt( mi(55, 0), extractMInt( getParentValue(R2, RSMap), 55, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 8)) #then concatenateMInt( mi(56, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 7)) #then concatenateMInt( mi(57, 0), extractMInt( getParentValue(R2, RSMap), 57, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 6)) #then concatenateMInt( mi(58, 0), extractMInt( getParentValue(R2, RSMap), 58, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 5)) #then concatenateMInt( mi(59, 0), extractMInt( getParentValue(R2, RSMap), 59, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 4)) #then concatenateMInt( mi(60, 0), extractMInt( getParentValue(R2, RSMap), 60, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 3)) #then concatenateMInt( mi(61, 0), extractMInt( getParentValue(R2, RSMap), 61, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 2)) #then concatenateMInt( mi(62, 0), extractMInt( getParentValue(R2, RSMap), 62, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)) #then concatenateMInt( mi(63, 0), extractMInt( getParentValue(R2, RSMap), 63, 64)) #else mi(64, 0) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #else getParentValue(R2, RSMap) #fi), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 64)) #then mi(1, 0) #else extractMInt( getParentValue(R2, RSMap), 0, 1) #fi)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// bzhiq-r64-r64-r64-semantics


// pabsw-xmm-xmm

  rule <k>
    execinstr (pabsw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 128, 144))) #else extractMInt( getParentValue(R1, RSMap), 128, 144) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 144, 160))) #else extractMInt( getParentValue(R1, RSMap), 144, 160) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 160, 176))) #else extractMInt( getParentValue(R1, RSMap), 160, 176) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 176, 192))) #else extractMInt( getParentValue(R1, RSMap), 176, 192) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 192, 208))) #else extractMInt( getParentValue(R1, RSMap), 192, 208) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 208, 224))) #else extractMInt( getParentValue(R1, RSMap), 208, 224) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 224, 240))) #else extractMInt( getParentValue(R1, RSMap), 224, 240) #fi), (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 240, 256))) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)))))))))
)

    </regstate>
    


// pabsw-xmm-xmm-semantics


// vpsllq-xmm-xmm-xmm

  rule <k>
    execinstr (vpsllq R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 63)) #then concatenateMInt( mi(128, 0), mi(128, 0)) #else concatenateMInt( mi(128, 0), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 256))), shlMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 256))))) #fi)
)

    </regstate>
    


// vpsllq-xmm-xmm-xmm-semantics


// vfnmadd132ps-ymm-ymm-ymm

  rule <k>
    execinstr (vfnmadd132ps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R3, RSMap), 0, 32), extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R3, RSMap), 32, 64), extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R3, RSMap), 64, 96), extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R3, RSMap), 96, 128), extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128)), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfnmadd132_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))))))))
)

    </regstate>
    


// vfnmadd132ps-ymm-ymm-ymm-semantics


// vpmaxuw-xmm-xmm-xmm

  rule <k>
    execinstr (vpmaxuw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)) #then extractMInt( getParentValue(R2, RSMap), 128, 144) #else extractMInt( getParentValue(R1, RSMap), 128, 144) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)) #then extractMInt( getParentValue(R2, RSMap), 144, 160) #else extractMInt( getParentValue(R1, RSMap), 144, 160) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)) #then extractMInt( getParentValue(R2, RSMap), 160, 176) #else extractMInt( getParentValue(R1, RSMap), 160, 176) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)) #then extractMInt( getParentValue(R2, RSMap), 176, 192) #else extractMInt( getParentValue(R1, RSMap), 176, 192) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)) #then extractMInt( getParentValue(R2, RSMap), 192, 208) #else extractMInt( getParentValue(R1, RSMap), 192, 208) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)) #then extractMInt( getParentValue(R2, RSMap), 208, 224) #else extractMInt( getParentValue(R1, RSMap), 208, 224) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)) #then extractMInt( getParentValue(R2, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 224, 240) #fi), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R2, RSMap), 240, 256) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)))))))))
)

    </regstate>
    


// vpmaxuw-xmm-xmm-xmm-semantics


// vpmovmskb-r64-xmm

  rule <k>
    execinstr (vpmovmskb R1:Xmm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(48, 0), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 129), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 136, 137), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 144, 145), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 152, 153), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 161), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 168, 169), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 176, 177), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 184, 185), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 193), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 200, 201), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 208, 209), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 216, 217), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 225), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 232, 233), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 241), extractMInt( getParentValue(R1, RSMap), 248, 249)))))))))))))))))
)

    </regstate>
    


// vpmovmskb-r64-xmm-semantics


// shrw-r16-cl

  rule <k>
    execinstr (shrw %cl, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 16))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 16)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 16))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 16, 17), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 15, 16), mi(1, 1)) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 9, 10), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 8, 9), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 16), mi(16, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shrw-r16-cl-semantics


// phsubw-xmm-xmm

  rule <k>
    execinstr (phsubw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 128, 144)), subMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 160, 176))), subMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 192, 208))), subMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 224, 240))), subMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R2, RSMap), 128, 144))), subMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R2, RSMap), 160, 176))), subMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R2, RSMap), 192, 208))), subMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R2, RSMap), 224, 240))))
)

    </regstate>
    


// phsubw-xmm-xmm-semantics


// movl-r32-r32

  rule <k>
    execinstr (movl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 32, 64))
)

    </regstate>
    


// movl-r32-r32-semantics


// vfmaddsub213pd-xmm-xmm-xmm

  rule <k>
    execinstr (vfmaddsub213pd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfmadd213_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfmsub213_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfmaddsub213pd-xmm-xmm-xmm-semantics


// pavgw-xmm-xmm

  rule <k>
    execinstr (pavgw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17)))))))))
)

    </regstate>
    


// pavgw-xmm-xmm-semantics


// vfmadd231sd-xmm-xmm-xmm

  rule <k>
    execinstr (vfmadd231sd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 192), vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 192, 256), vfnmsub132_double(mi(64, 0), extractMInt( getParentValue(R3, RSMap), 192, 256), mi(64, 0)), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfmadd231sd-xmm-xmm-xmm-semantics


// vaddss-xmm-xmm-xmm

  rule <k>
    execinstr (vaddss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 224), add_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vaddss-xmm-xmm-xmm-semantics


// popcntl-r32-r32

  rule <k>
    execinstr (popcntl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), addMInt( concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 33)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 33, 34)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 34, 35)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 35, 36)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 36, 37)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 37, 38)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 38, 39)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 39, 40)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 40, 41)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 41, 42)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 42, 43)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 43, 44)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 44, 45)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 45, 46)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 46, 47)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 47, 48)))))))))), concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 49)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 49, 50)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 50, 51)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 51, 52)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 52, 53)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 53, 54)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 54, 55)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 55, 56)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 57)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 57, 58)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 58, 59)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 59, 60)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 60, 61)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 61, 62)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 62, 63)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 63, 64))))))))))))

"CF" |-> mi(1, 0)

"PF" |-> mi(1, 0)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// popcntl-r32-r32-semantics


// pmullw-xmm-xmm

  rule <k>
    execinstr (pmullw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), 16, 32), extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), 16, 32)))))))))
)

    </regstate>
    


// pmullw-xmm-xmm-semantics


/*
TEMP ← SRC1;
MASK ← SRC2;
DEST ← 0 ;
m← 0, k← 0;
DO WHILE m< OperandSize
    IF MASK[ m] = 1 THEN
        DEST[ m] ← TEMP[ k];
        k ← k+ 1;
    FI
    m ← m+ 1;
OD
*/

// pdepq-r64-r64-r64

  rule <k>
    execinstr (pdepq R1:R64, R2:R64, R3:R64, .Operands) => 
      setRegisterValue(mi(64, 0), R3) ~> parallelBitDeposit(getRegisterValue(R1,
            RSMap), R2, R3, 0, 0)
  ...</k>
    <regstate> RSMap:Map </regstate>


  syntax KItem ::= parallelBitDeposit(MInt, Register, Register, Int, Int)

  // Base Condition
  rule <k>
    parallelBitDeposit(Mask:MInt, TempR:Register, DestR:Register, 63:Int, K:Int) => 
      setRegisterBitsAtPositon(getRegisterBitsAtPositon(TempR, 1, K, RSMap),
          DestR, 63)
  ...</k>  
    <regstate> RSMap:Map </regstate>
      requires eqMInt( extractMInt(Mask, 0, 1), mi(1, 1))

  rule <k>
    parallelBitDeposit(Mask:MInt, TempR:Register, DestR:Register, 63:Int, K:Int) => 
    .
  ...</k>  
    requires eqMInt( extractMInt(Mask, 0, 1), mi(1, 0))

  // General Condition
  rule <k>
    parallelBitDeposit(Mask:MInt, TempR:Register, DestR:Register, M:Int, K:Int) => 
      setRegisterBitsAtPositon(getRegisterBitsAtPositon(TempR, 1, K, RSMap), DestR, M)
  ~>  parallelBitDeposit(Mask, TempR, DestR, M +Int 1, K +Int  1)
  ...</k>  
    <regstate> RSMap:Map </regstate>
      requires eqMInt( extractMInt(Mask, 63 -Int M, 64 -Int M), mi(1, 1))
      
  rule <k>
    parallelBitDeposit(Mask:MInt, TempR:Register, DestR:Register, M:Int, K:Int) => 
        parallelBitDeposit(Mask, TempR, DestR, M +Int 1, K)
  ...</k>  
    requires eqMInt( extractMInt(Mask, 63 -Int M, 64 -Int M), mi(1, 0))




// cmpb-r8-rh

  rule <k>
    execinstr (cmpb R1:Rh, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// cmpb-r8-rh-semantics


// subq-r64-r64

  rule <k>
    execinstr (subq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65)

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// subq-r64-r64-semantics


// vfnmsub213ps-ymm-ymm-ymm

  rule <k>
    execinstr (vfnmsub213ps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32), extractMInt( getParentValue(R3, RSMap), 0, 32)), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64), extractMInt( getParentValue(R3, RSMap), 32, 64)), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96), extractMInt( getParentValue(R3, RSMap), 64, 96)), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128), extractMInt( getParentValue(R3, RSMap), 96, 128)), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160), extractMInt( getParentValue(R3, RSMap), 128, 160)), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R3, RSMap), 160, 192)), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224), extractMInt( getParentValue(R3, RSMap), 192, 224)), vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R3, RSMap), 224, 256)))))))))
)

    </regstate>
    


// vfnmsub213ps-ymm-ymm-ymm-semantics


// cmovngw-r16-r16

  rule <k>
    execinstr (cmovngw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1,1)) orBool (notBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1))))) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovngw-r16-r16-semantics


// vpunpckhbw-xmm-xmm-xmm

  rule <k>
    execinstr (vpunpckhbw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 136), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 136, 144), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 144, 152), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 152, 160), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 168), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 168, 176), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 176, 184), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 184, 192), extractMInt( getParentValue(R2, RSMap), 184, 192))))))))))
)

    </regstate>
    


// vpunpckhbw-xmm-xmm-xmm-semantics


// vpblendvb-ymm-ymm-ymm-ymm

  rule <k>
    execinstr (vpblendvb R1:Ymm, R2:Ymm, R3:Ymm, R4:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 0, 8) #else extractMInt( getParentValue(R3, RSMap), 0, 8) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 8, 9), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 8, 16) #else extractMInt( getParentValue(R3, RSMap), 8, 16) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 16, 17), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 16, 24) #else extractMInt( getParentValue(R3, RSMap), 16, 24) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 24, 25), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 24, 32) #else extractMInt( getParentValue(R3, RSMap), 24, 32) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 32, 40) #else extractMInt( getParentValue(R3, RSMap), 32, 40) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 40, 41), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 40, 48) #else extractMInt( getParentValue(R3, RSMap), 40, 48) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 48, 56) #else extractMInt( getParentValue(R3, RSMap), 48, 56) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else extractMInt( getParentValue(R3, RSMap), 56, 64) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 64, 65), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 64, 72) #else extractMInt( getParentValue(R3, RSMap), 64, 72) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 72, 73), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 72, 80) #else extractMInt( getParentValue(R3, RSMap), 72, 80) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 80, 81), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 80, 88) #else extractMInt( getParentValue(R3, RSMap), 80, 88) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 88, 89), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 88, 96) #else extractMInt( getParentValue(R3, RSMap), 88, 96) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 96, 97), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 96, 104) #else extractMInt( getParentValue(R3, RSMap), 96, 104) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 104, 105), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 104, 112) #else extractMInt( getParentValue(R3, RSMap), 104, 112) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 112, 113), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 112, 120) #else extractMInt( getParentValue(R3, RSMap), 112, 120) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 120, 121), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 120, 128) #else extractMInt( getParentValue(R3, RSMap), 120, 128) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 128, 129), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else extractMInt( getParentValue(R3, RSMap), 128, 136) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 136, 137), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else extractMInt( getParentValue(R3, RSMap), 136, 144) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 144, 145), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else extractMInt( getParentValue(R3, RSMap), 144, 152) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 152, 153), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else extractMInt( getParentValue(R3, RSMap), 152, 160) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 160, 161), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else extractMInt( getParentValue(R3, RSMap), 160, 168) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 168, 169), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else extractMInt( getParentValue(R3, RSMap), 168, 176) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 176, 177), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else extractMInt( getParentValue(R3, RSMap), 176, 184) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 184, 185), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else extractMInt( getParentValue(R3, RSMap), 184, 192) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 192, 193), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else extractMInt( getParentValue(R3, RSMap), 192, 200) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 200, 201), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else extractMInt( getParentValue(R3, RSMap), 200, 208) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 208, 209), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else extractMInt( getParentValue(R3, RSMap), 208, 216) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 216, 217), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else extractMInt( getParentValue(R3, RSMap), 216, 224) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 224, 225), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else extractMInt( getParentValue(R3, RSMap), 224, 232) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 232, 233), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else extractMInt( getParentValue(R3, RSMap), 232, 240) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 240, 241), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R3, RSMap), 240, 248) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 248, 249), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 248, 256) #else extractMInt( getParentValue(R3, RSMap), 248, 256) #fi))))))))))))))))))))))))))))))))
)

    </regstate>
    


// vpblendvb-ymm-ymm-ymm-ymm-semantics


// movzbq-r64-r8

  rule <k>
    execinstr (movzbq R1:R8, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(56, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// movzbq-r64-r8-semantics


// vpsubq-xmm-xmm-xmm

  rule <k>
    execinstr (vpsubq R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), subMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vpsubq-xmm-xmm-xmm-semantics


// vminsd-xmm-xmm-xmm

  rule <k>
    execinstr (vminsd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), (#ifMInt eqMInt( mincmp_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 256) #else extractMInt( getParentValue(R1, RSMap), 192, 256) #fi)))
)

    </regstate>
    


// vminsd-xmm-xmm-xmm-semantics


// cmovcq-r64-r64

  rule <k>
    execinstr (cmovcq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovcq-r64-r64-semantics


// sarb-r8-cl

  rule <k>
    execinstr (sarb %cl, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 8))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 8, 9), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 8), mi(8, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool false) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sarb-r8-cl-semantics


// vsqrtpd-xmm-xmm

  rule <k>
    execinstr (vsqrtpd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( sqrt_double(extractMInt( getParentValue(R1, RSMap), 128, 192)), sqrt_double(extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vsqrtpd-xmm-xmm-semantics


// vfmaddsub231ps-xmm-xmm-xmm

  rule <k>
    execinstr (vfmaddsub231ps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( vfmadd231_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), vfmsub231_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192))), concatenateMInt( vfmadd231_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfmsub231_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))))
)

    </regstate>
    


// vfmaddsub231ps-xmm-xmm-xmm-semantics


// pand-xmm-xmm

  rule <k>
    execinstr (pand R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), andMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// pand-xmm-xmm-semantics


// movzwq-r64-r16

  rule <k>
    execinstr (movzwq R1:R16, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(48, 0), extractMInt( getParentValue(R1, RSMap), 48, 64))
)

    </regstate>
    


// movzwq-r64-r16-semantics


// vcvtsi2ssq-xmm-xmm-r64

  rule <k>
    execinstr (vcvtsi2ssq R1:R64, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 224), cvt_int64_to_single(getParentValue(R1, RSMap))))
)

    </regstate>
    


// vcvtsi2ssq-xmm-xmm-r64-semantics


// punpckhbw-xmm-xmm

  rule <k>
    execinstr (punpckhbw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 136), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 136, 144), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 144, 152), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 152, 160), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 168), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 168, 176), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 176, 184), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 184, 192), extractMInt( getParentValue(R2, RSMap), 184, 192))))))))))
)

    </regstate>
    


// punpckhbw-xmm-xmm-semantics


// cmpxchgb-rh-rh

  rule <k>
    execinstr (cmpxchgb R1:Rh, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> (#ifMInt eqMInt( extractMInt( getParentValue(%rax, RSMap), 56, 64), extractMInt( getParentValue(R2, RSMap), 48, 56)) #then getParentValue(%rax, RSMap) #else concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 56), extractMInt( getParentValue(R2, RSMap), 48, 56)) #fi)

convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt eqMInt( extractMInt( getParentValue(%rax, RSMap), 56, 64), extractMInt( getParentValue(R2, RSMap), 48, 56)) #then extractMInt( getParentValue(R1, RSMap), 48, 56) #else extractMInt( getParentValue(R2, RSMap), 48, 56) #fi)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 51, 52), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (cmpxchgb R1:Rh, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
        convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R2, RSMap), 48, 56)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 56) #fi))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 51, 52), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
      requires sameRegisters(R1, R2)
  


// cmpxchgb-rh-rh-semantics


// movb-rh-r8

  rule <k>
    execinstr (movb R1:R8, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( getParentValue(R1, RSMap), 56, 64)), extractMInt( getParentValue(R2, RSMap), 56, 64))
)

    </regstate>
    


// movb-rh-r8-semantics


// popcntw-r16-r16

  rule <k>
    execinstr (popcntw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 49)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 49, 50)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 50, 51)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 51, 52)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 52, 53)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 53, 54)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 54, 55)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 55, 56)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 57)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 57, 58)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 58, 59)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 59, 60)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 60, 61)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 61, 62)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 62, 63)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 63, 64))))))))))

"CF" |-> mi(1, 0)

"PF" |-> mi(1, 0)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// popcntw-r16-r16-semantics


// lzcntl-r32-r32

  rule <k>
    execinstr (lzcntl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) #then mi(64, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 33, 34), mi(1, 1)) #then mi(64, 1) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 34, 35), mi(1, 1)) #then mi(64, 2) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 35, 36), mi(1, 1)) #then mi(64, 3) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 37), mi(1, 1)) #then mi(64, 4) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 37, 38), mi(1, 1)) #then mi(64, 5) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 38, 39), mi(1, 1)) #then mi(64, 6) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 39, 40), mi(1, 1)) #then mi(64, 7) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 40, 41), mi(1, 1)) #then mi(64, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 41, 42), mi(1, 1)) #then mi(64, 9) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 42, 43), mi(1, 1)) #then mi(64, 10) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 43, 44), mi(1, 1)) #then mi(64, 11) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 45), mi(1, 1)) #then mi(64, 12) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 45, 46), mi(1, 1)) #then mi(64, 13) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 46, 47), mi(1, 1)) #then mi(64, 14) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 47, 48), mi(1, 1)) #then mi(64, 15) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then mi(64, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 50), mi(1, 1)) #then mi(64, 17) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 50, 51), mi(1, 1)) #then mi(64, 18) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) #then mi(64, 19) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 53), mi(1, 1)) #then mi(64, 20) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 53, 54), mi(1, 1)) #then mi(64, 21) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 54, 55), mi(1, 1)) #then mi(64, 22) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 55, 56), mi(1, 1)) #then mi(64, 23) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then mi(64, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)) #then mi(64, 25) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)) #then mi(64, 26) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) #then mi(64, 27) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)) #then mi(64, 28) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)) #then mi(64, 29) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)) #then mi(64, 30) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)) #then mi(64, 31) #else mi(64, 32) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi)

"CF" |-> (#ifMInt eqMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) #then mi(32, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 33, 34), mi(1, 1)) #then mi(32, 1) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 34, 35), mi(1, 1)) #then mi(32, 2) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 35, 36), mi(1, 1)) #then mi(32, 3) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 37), mi(1, 1)) #then mi(32, 4) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 37, 38), mi(1, 1)) #then mi(32, 5) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 38, 39), mi(1, 1)) #then mi(32, 6) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 39, 40), mi(1, 1)) #then mi(32, 7) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 40, 41), mi(1, 1)) #then mi(32, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 41, 42), mi(1, 1)) #then mi(32, 9) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 42, 43), mi(1, 1)) #then mi(32, 10) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 43, 44), mi(1, 1)) #then mi(32, 11) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 45), mi(1, 1)) #then mi(32, 12) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 45, 46), mi(1, 1)) #then mi(32, 13) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 46, 47), mi(1, 1)) #then mi(32, 14) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 47, 48), mi(1, 1)) #then mi(32, 15) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then mi(32, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 50), mi(1, 1)) #then mi(32, 17) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 50, 51), mi(1, 1)) #then mi(32, 18) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) #then mi(32, 19) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 53), mi(1, 1)) #then mi(32, 20) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 53, 54), mi(1, 1)) #then mi(32, 21) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 54, 55), mi(1, 1)) #then mi(32, 22) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 55, 56), mi(1, 1)) #then mi(32, 23) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then mi(32, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)) #then mi(32, 25) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)) #then mi(32, 26) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) #then mi(32, 27) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)) #then mi(32, 28) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)) #then mi(32, 29) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)) #then mi(32, 30) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)) #then mi(32, 31) #else mi(32, 32) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), mi(32, 32)) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) #then mi(32, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 33, 34), mi(1, 1)) #then mi(32, 1) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 34, 35), mi(1, 1)) #then mi(32, 2) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 35, 36), mi(1, 1)) #then mi(32, 3) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 37), mi(1, 1)) #then mi(32, 4) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 37, 38), mi(1, 1)) #then mi(32, 5) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 38, 39), mi(1, 1)) #then mi(32, 6) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 39, 40), mi(1, 1)) #then mi(32, 7) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 40, 41), mi(1, 1)) #then mi(32, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 41, 42), mi(1, 1)) #then mi(32, 9) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 42, 43), mi(1, 1)) #then mi(32, 10) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 43, 44), mi(1, 1)) #then mi(32, 11) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 45), mi(1, 1)) #then mi(32, 12) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 45, 46), mi(1, 1)) #then mi(32, 13) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 46, 47), mi(1, 1)) #then mi(32, 14) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 47, 48), mi(1, 1)) #then mi(32, 15) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then mi(32, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 50), mi(1, 1)) #then mi(32, 17) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 50, 51), mi(1, 1)) #then mi(32, 18) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) #then mi(32, 19) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 53), mi(1, 1)) #then mi(32, 20) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 53, 54), mi(1, 1)) #then mi(32, 21) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 54, 55), mi(1, 1)) #then mi(32, 22) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 55, 56), mi(1, 1)) #then mi(32, 23) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then mi(32, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)) #then mi(32, 25) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)) #then mi(32, 26) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) #then mi(32, 27) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)) #then mi(32, 28) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)) #then mi(32, 29) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)) #then mi(32, 30) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)) #then mi(32, 31) #else mi(32, 32) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// lzcntl-r32-r32-semantics


// comisd-xmm-xmm

  rule <k>
    execinstr (comisd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 0)) orBool eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 2))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt (eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 0)) orBool eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 3))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// comisd-xmm-xmm-semantics


// movzbw-r16-r8

  rule <k>
    execinstr (movzbw R1:R8, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)))
)

    </regstate>
    


// movzbw-r16-r8-semantics


// vpcmpgtw-ymm-ymm-ymm

  rule <k>
    execinstr (vpcmpgtw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 0, 16), extractMInt( getParentValue(R1, RSMap), 0, 16)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 16, 32), extractMInt( getParentValue(R1, RSMap), 16, 32)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 32, 48), extractMInt( getParentValue(R1, RSMap), 32, 48)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 48, 64)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 64, 80), extractMInt( getParentValue(R1, RSMap), 64, 80)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 80, 96), extractMInt( getParentValue(R1, RSMap), 80, 96)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 96, 112), extractMInt( getParentValue(R1, RSMap), 96, 112)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 112, 128), extractMInt( getParentValue(R1, RSMap), 112, 128)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)) #then mi(16, 65535) #else mi(16, 0) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then mi(16, 65535) #else mi(16, 0) #fi))))))))))))))))
)

    </regstate>
    


// vpcmpgtw-ymm-ymm-ymm-semantics


// vpackssdw-ymm-ymm-ymm

  rule <k>
    execinstr (vpackssdw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 0, 32), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 0, 32), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R1, RSMap), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R1, RSMap), 48, 64) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 64, 96), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 64, 96), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R1, RSMap), 80, 96) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 96, 128), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 96, 128), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R1, RSMap), 112, 128) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R2, RSMap), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R2, RSMap), 80, 96) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R2, RSMap), 112, 128) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R1, RSMap), 144, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R1, RSMap), 176, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R1, RSMap), 208, 224) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R2, RSMap), 144, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R2, RSMap), 176, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R2, RSMap), 208, 224) #fi) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R2, RSMap), 240, 256) #fi) #fi))))))))))))))))
)

    </regstate>
    


// vpackssdw-ymm-ymm-ymm-semantics


// maxsd-xmm-xmm

  rule <k>
    execinstr (maxsd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 192), (#ifMInt eqMInt( maxcmp_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 256) #else extractMInt( getParentValue(R1, RSMap), 192, 256) #fi))
)

    </regstate>
    


// maxsd-xmm-xmm-semantics


// setae-r8

  rule <k>
    execinstr (setae R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt (notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setae-r8-semantics


// vmaxsd-xmm-xmm-xmm

  rule <k>
    execinstr (vmaxsd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), (#ifMInt eqMInt( maxcmp_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 256) #else extractMInt( getParentValue(R1, RSMap), 192, 256) #fi)))
)

    </regstate>
    


// vmaxsd-xmm-xmm-xmm-semantics


// xaddl-r32-r32

  rule <k>
    execinstr (xaddl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( mi(32, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))

convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (xaddl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
        convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29)

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
      requires sameRegisters(R1, R2)
  


// xaddl-r32-r32-semantics


// vfmsub231ss-xmm-xmm-xmm

  rule <k>
    execinstr (vfmsub231ss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 224), vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vfmsub231ss-xmm-xmm-xmm-semantics


// lzcntw-r16-r16

  rule <k>
    execinstr (lzcntw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then mi(16, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 50), mi(1, 1)) #then mi(16, 1) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 50, 51), mi(1, 1)) #then mi(16, 2) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) #then mi(16, 3) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 53), mi(1, 1)) #then mi(16, 4) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 53, 54), mi(1, 1)) #then mi(16, 5) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 54, 55), mi(1, 1)) #then mi(16, 6) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 55, 56), mi(1, 1)) #then mi(16, 7) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then mi(16, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)) #then mi(16, 9) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)) #then mi(16, 10) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) #then mi(16, 11) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)) #then mi(16, 12) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)) #then mi(16, 13) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)) #then mi(16, 14) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)) #then mi(16, 15) #else mi(16, 16) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi))

"CF" |-> (#ifMInt eqMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then mi(16, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 50), mi(1, 1)) #then mi(16, 1) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 50, 51), mi(1, 1)) #then mi(16, 2) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) #then mi(16, 3) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 53), mi(1, 1)) #then mi(16, 4) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 53, 54), mi(1, 1)) #then mi(16, 5) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 54, 55), mi(1, 1)) #then mi(16, 6) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 55, 56), mi(1, 1)) #then mi(16, 7) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then mi(16, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)) #then mi(16, 9) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)) #then mi(16, 10) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) #then mi(16, 11) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)) #then mi(16, 12) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)) #then mi(16, 13) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)) #then mi(16, 14) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)) #then mi(16, 15) #else mi(16, 16) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), mi(16, 16)) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then mi(16, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 50), mi(1, 1)) #then mi(16, 1) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 50, 51), mi(1, 1)) #then mi(16, 2) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) #then mi(16, 3) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 53), mi(1, 1)) #then mi(16, 4) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 53, 54), mi(1, 1)) #then mi(16, 5) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 54, 55), mi(1, 1)) #then mi(16, 6) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 55, 56), mi(1, 1)) #then mi(16, 7) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then mi(16, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)) #then mi(16, 9) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)) #then mi(16, 10) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) #then mi(16, 11) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)) #then mi(16, 12) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)) #then mi(16, 13) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)) #then mi(16, 14) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)) #then mi(16, 15) #else mi(16, 16) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// lzcntw-r16-r16-semantics


// vmovdqu-ymm-ymm

  rule <k>
    execinstr (vmovdqu R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> getParentValue(R1, RSMap)
)

    </regstate>
    


// vmovdqu-ymm-ymm-semantics


// andps-xmm-xmm

  rule <k>
    execinstr (andps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), andMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// andps-xmm-xmm-semantics


// subb-rh-rh

  rule <k>
    execinstr (subb R1:Rh, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), extractMInt( getParentValue(R2, RSMap), 51, 52)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// subb-rh-rh-semantics


// movswq-r64-r16

  rule <k>
    execinstr (movswq R1:R16, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64)))
)

    </regstate>
    


// movswq-r64-r16-semantics


// vbroadcastsd-ymm-xmm

  rule <k>
    execinstr (vbroadcastsd R1:Xmm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), extractMInt( getParentValue(R1, RSMap), 192, 256)), extractMInt( getParentValue(R1, RSMap), 192, 256))
)

    </regstate>
    


// vbroadcastsd-ymm-xmm-semantics


// cmpb-r8-r8

  rule <k>
    execinstr (cmpb R1:R8, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// cmpb-r8-r8-semantics


// pmovsxdq-xmm-xmm

  rule <k>
    execinstr (pmovsxdq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 224))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256)))))
)

    </regstate>
    


// pmovsxdq-xmm-xmm-semantics


// shrl-r32-cl

  rule <k>
    execinstr (shrl %cl, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 32))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 32)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 32))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 32, 33), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 31, 32), mi(1, 1)) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 25, 26), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 24, 25), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 32), mi(32, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), mi(1, 1))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shrl-r32-cl-semantics


// rclq-r64-cl

  rule <k>
    execinstr (rclq %cl, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))), mi(65, 65))), 1, 65)

"CF" |-> extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))), mi(65, 65))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))), mi(65, 65)), 57, 65), mi(8, 1)) andBool (eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))), mi(65, 65))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))), mi(65, 65))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))), mi(65, 65)), 57, 65), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))), mi(65, 65)), 57, 65), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))), mi(65, 65)), 57, 65), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rclq-r64-cl-semantics


// vfnmadd231ss-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmadd231ss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 224), vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 224, 256), vfnmsub132_single(mi(32, 0), extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R3, RSMap), 224, 256)), extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vfnmadd231ss-xmm-xmm-xmm-semantics


// setl-rh

  rule <k>
    execinstr (setl R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt (notBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1)))) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setl-rh-semantics


// vpminsd-xmm-xmm-xmm

  rule <k>
    execinstr (vpminsd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R1, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R1, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else extractMInt( getParentValue(R1, RSMap), 192, 224) #fi), (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi)))))
)

    </regstate>
    


// vpminsd-xmm-xmm-xmm-semantics


// vmulpd-xmm-xmm-xmm

  rule <k>
    execinstr (vmulpd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( mul_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), mul_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vmulpd-xmm-xmm-xmm-semantics


// movlhps-xmm-xmm

  rule <k>
    execinstr (movlhps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256)))
)

    </regstate>
    


// movlhps-xmm-xmm-semantics


// movb-r8-rh

  rule <k>
    execinstr (movb R1:Rh, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( getParentValue(R1, RSMap), 48, 56))
)

    </regstate>
    


// movb-r8-rh-semantics


// vhsubpd-ymm-ymm-ymm

  rule <k>
    execinstr (vhsubpd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( sub_double(extractMInt( getParentValue(R1, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 0, 64)), sub_double(extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R2, RSMap), 0, 64))), concatenateMInt( sub_double(extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 128, 192)), sub_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 128, 192))))
)

    </regstate>
    


// vhsubpd-ymm-ymm-ymm-semantics


// vhsubpd-xmm-xmm-xmm

  rule <k>
    execinstr (vhsubpd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( sub_double(extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 128, 192)), sub_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 128, 192))))
)

    </regstate>
    


// vhsubpd-xmm-xmm-xmm-semantics


// vtestps-xmm-xmm

  rule <k>
    execinstr (vtestps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (((eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 224, 225)), extractMInt( getParentValue(R1, RSMap), 224, 225)), mi(1, 0)) andBool eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 192, 193)), extractMInt( getParentValue(R1, RSMap), 192, 193)), mi(1, 0))) andBool eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 160, 161)), extractMInt( getParentValue(R1, RSMap), 160, 161)), mi(1, 0))) andBool eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 128, 129)), extractMInt( getParentValue(R1, RSMap), 128, 129)), mi(1, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> mi(1, 0)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt (((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 224, 225), extractMInt( getParentValue(R1, RSMap), 224, 225)), mi(1, 0)) andBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 192, 193), extractMInt( getParentValue(R1, RSMap), 192, 193)), mi(1, 0))) andBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 160, 161), extractMInt( getParentValue(R1, RSMap), 160, 161)), mi(1, 0))) andBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 128, 129), extractMInt( getParentValue(R1, RSMap), 128, 129)), mi(1, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// vtestps-xmm-xmm-semantics


// vandpd-xmm-xmm-xmm

  rule <k>
    execinstr (vandpd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), andMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// vandpd-xmm-xmm-xmm-semantics


// vmovq-xmm-xmm

  rule <k>
    execinstr (vmovq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(192, 0), extractMInt( getParentValue(R1, RSMap), 192, 256))
)

    </regstate>
    


// vmovq-xmm-xmm-semantics


// vpacksswb-ymm-ymm-ymm

  rule <k>
    execinstr (vpacksswb R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 0, 16), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 0, 16), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 16, 32), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 16, 32), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 24, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 32, 48), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 32, 48), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 40, 48) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 56, 64) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 64, 80), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 64, 80), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 72, 80) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 80, 96), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 80, 96), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 88, 96) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 96, 112), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 96, 112), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 104, 112) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 112, 128), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 112, 128), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 120, 128) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 0, 16), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 0, 16), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 16, 32), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 16, 32), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 24, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 32, 48), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 32, 48), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 40, 48) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 56, 64) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 64, 80), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 64, 80), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 72, 80) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 80, 96), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 80, 96), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 88, 96) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 96, 112), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 96, 112), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 104, 112) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 112, 128), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 112, 128), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 120, 128) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 136, 144) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 152, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 168, 176) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 184, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 200, 208) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 216, 224) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 232, 240) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 248, 256) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 136, 144) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 152, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 168, 176) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 184, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 200, 208) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 216, 224) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 232, 240) #fi) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi))))))))))))))))))))))))))))))))
)

    </regstate>
    


// vpacksswb-ymm-ymm-ymm-semantics


// vmovq-r64-xmm

  rule <k>
    execinstr (vmovq R1:Xmm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( getParentValue(R1, RSMap), 192, 256)
)

    </regstate>
    


// vmovq-r64-xmm-semantics


// cmoval-r32-r32

  rule <k>
    execinstr (cmoval R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt ((notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) andBool (notBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmoval-r32-r32-semantics


// cmovbeq-r64-r64

  rule <k>
    execinstr (cmovbeq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt (eqMInt(getFlag("CF", RSMap), mi(1,1)) orBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovbeq-r64-r64-semantics


// setb-r8

  rule <k>
    execinstr (setb R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setb-r8-semantics


// vunpcklps-xmm-xmm-xmm

  rule <k>
    execinstr (vunpcklps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224)), extractMInt( getParentValue(R1, RSMap), 224, 256)), extractMInt( getParentValue(R2, RSMap), 224, 256)))
)

    </regstate>
    


// vunpcklps-xmm-xmm-xmm-semantics


// cmovlew-r16-r16

  rule <k>
    execinstr (cmovlew R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1,1)) orBool (notBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1))))) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovlew-r16-r16-semantics


// pblendvb-xmm-xmm-xmm0

  rule <k>
    execinstr (pblendvb XMM0, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 128, 129), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else extractMInt( getParentValue(R3, RSMap), 128, 136) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 136, 137), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else extractMInt( getParentValue(R3, RSMap), 136, 144) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 144, 145), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else extractMInt( getParentValue(R3, RSMap), 144, 152) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 152, 153), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else extractMInt( getParentValue(R3, RSMap), 152, 160) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 160, 161), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else extractMInt( getParentValue(R3, RSMap), 160, 168) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 168, 169), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else extractMInt( getParentValue(R3, RSMap), 168, 176) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 176, 177), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else extractMInt( getParentValue(R3, RSMap), 176, 184) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 184, 185), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else extractMInt( getParentValue(R3, RSMap), 184, 192) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 192, 193), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else extractMInt( getParentValue(R3, RSMap), 192, 200) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 200, 201), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else extractMInt( getParentValue(R3, RSMap), 200, 208) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 208, 209), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else extractMInt( getParentValue(R3, RSMap), 208, 216) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 216, 217), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else extractMInt( getParentValue(R3, RSMap), 216, 224) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 224, 225), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else extractMInt( getParentValue(R3, RSMap), 224, 232) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 232, 233), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else extractMInt( getParentValue(R3, RSMap), 232, 240) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 240, 241), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R3, RSMap), 240, 248) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 248, 249), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 248, 256) #else extractMInt( getParentValue(R3, RSMap), 248, 256) #fi)))))))))))))))))
)

    </regstate>
    


// pblendvb-xmm-xmm-xmm0-semantics


// vpsubusb-ymm-ymm-ymm

  rule <k>
    execinstr (vpsubusb R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 0, 8)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 0, 8))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 0, 8)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 0, 8))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 0, 8)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 0, 8))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 8, 16)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 8, 16))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 8, 16)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 8, 16))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 8, 16)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 8, 16))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 16, 24)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 16, 24))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 16, 24)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 16, 24))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 16, 24)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 16, 24))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 24, 32)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 24, 32))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 24, 32)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 24, 32))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 24, 32)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 24, 32))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 32, 40)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 32, 40))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 32, 40)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 32, 40))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 32, 40)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 32, 40))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 40, 48)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 40, 48))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 40, 48)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 40, 48))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 40, 48)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 40, 48))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 48, 56))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 64, 72)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 64, 72))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 64, 72)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 64, 72))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 64, 72)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 64, 72))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 72, 80)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 72, 80))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 72, 80)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 72, 80))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 72, 80)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 72, 80))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 80, 88)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 80, 88))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 80, 88)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 80, 88))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 80, 88)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 80, 88))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 88, 96)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 88, 96))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 88, 96)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 88, 96))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 88, 96)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 88, 96))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 96, 104)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 96, 104))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 96, 104)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 96, 104))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 96, 104)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 96, 104))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 104, 112)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 104, 112))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 104, 112)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 104, 112))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 104, 112)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 104, 112))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 112, 120)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 112, 120))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 112, 120)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 112, 120))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 112, 120)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 112, 120))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 120, 128)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 120, 128))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 120, 128)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 120, 128))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 120, 128)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 120, 128))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 136))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 136))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 136))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 136, 144))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 136, 144))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 136, 144))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 152))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 152))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 152))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 152, 160))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 152, 160))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 152, 160))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 168))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 168))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 168))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 168, 176))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 168, 176))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 168, 176))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 184))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 184))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 184))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 184, 192))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 184, 192))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 184, 192))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 200))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 200))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 200))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 200, 208))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 200, 208))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 200, 208))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 216))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 216))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 216))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 216, 224))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 216, 224))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 216, 224))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 232))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 232))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 232))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 232, 240))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 232, 240))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 232, 240))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 248))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 248))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 248))), 2, 10) #fi) #fi), (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))), 2, 10) #fi) #fi))))))))))))))))))))))))))))))))
)

    </regstate>
    


// vpsubusb-ymm-ymm-ymm-semantics


// vpmovsxbw-ymm-xmm

  rule <k>
    execinstr (vpmovsxbw R1:Xmm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256))))))))))))))))))
)

    </regstate>
    


// vpmovsxbw-ymm-xmm-semantics


// vcvtpd2ps-xmm-ymm

  rule <k>
    execinstr (vcvtpd2ps R1:Ymm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( cvt_double_to_single(extractMInt( getParentValue(R2, RSMap), 0, 64)), concatenateMInt( cvt_double_to_single(extractMInt( getParentValue(R2, RSMap), 64, 128)), concatenateMInt( cvt_double_to_single(extractMInt( getParentValue(R2, RSMap), 128, 192)), cvt_double_to_single(extractMInt( getParentValue(R2, RSMap), 192, 256))))))
)

    </regstate>
    


// vcvtpd2ps-xmm-ymm-semantics


// vfmsub213sd-xmm-xmm-xmm

  rule <k>
    execinstr (vfmsub213sd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 192), vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R3, RSMap), 192, 256))))
)

    </regstate>
    


// vfmsub213sd-xmm-xmm-xmm-semantics


// cmovnlel-r32-r32

  rule <k>
    execinstr (cmovnlel R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt ((notBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) andBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1)))) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovnlel-r32-r32-semantics


// sarw-r16-cl

  rule <k>
    execinstr (sarw %cl, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 16))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 16, 17), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 15, 16), mi(1, 1)) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 9, 10), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 8, 9), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 16), mi(16, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool false) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sarw-r16-cl-semantics


// movmskps-r32-xmm

  rule <k>
    execinstr (movmskps R1:Xmm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(60, 0), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 129), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 161), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 193), extractMInt( getParentValue(R1, RSMap), 224, 225)))))
)

    </regstate>
    


// movmskps-r32-xmm-semantics


// cmovnael-r32-r32

  rule <k>
    execinstr (cmovnael R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovnael-r32-r32-semantics


// shrq-r64-cl

  rule <k>
    execinstr (shrq %cl, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 0, 64)

"CF" |-> (#ifMInt ((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 64)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 64))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 64, 65), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 63, 64), mi(1, 1)) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 57, 58), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 56, 57), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 0, 64), mi(64, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 1)) andBool eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shrq-r64-cl-semantics


// vfmsub132pd-xmm-xmm-xmm

  rule <k>
    execinstr (vfmsub132pd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfmsub132_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfmsub132_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfmsub132pd-xmm-xmm-xmm-semantics


// cmovpel-r32-r32

  rule <k>
    execinstr (cmovpel R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt eqMInt(getFlag("PF", RSMap), mi(1,1)) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovpel-r32-r32-semantics


// pmaxsw-xmm-xmm

  rule <k>
    execinstr (pmaxsw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)) #then extractMInt( getParentValue(R2, RSMap), 128, 144) #else extractMInt( getParentValue(R1, RSMap), 128, 144) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)) #then extractMInt( getParentValue(R2, RSMap), 144, 160) #else extractMInt( getParentValue(R1, RSMap), 144, 160) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)) #then extractMInt( getParentValue(R2, RSMap), 160, 176) #else extractMInt( getParentValue(R1, RSMap), 160, 176) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)) #then extractMInt( getParentValue(R2, RSMap), 176, 192) #else extractMInt( getParentValue(R1, RSMap), 176, 192) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)) #then extractMInt( getParentValue(R2, RSMap), 192, 208) #else extractMInt( getParentValue(R1, RSMap), 192, 208) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)) #then extractMInt( getParentValue(R2, RSMap), 208, 224) #else extractMInt( getParentValue(R1, RSMap), 208, 224) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)) #then extractMInt( getParentValue(R2, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 224, 240) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R2, RSMap), 240, 256) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)))))))))
)

    </regstate>
    


// pmaxsw-xmm-xmm-semantics


// cmovaeq-r64-r64

  rule <k>
    execinstr (cmovaeq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt (notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovaeq-r64-r64-semantics


// movaps-xmm-xmm

  rule <k>
    execinstr (movaps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), extractMInt( getParentValue(R1, RSMap), 128, 256))
)

    </regstate>
    


// movaps-xmm-xmm-semantics


// pcmpeqb-xmm-xmm

  rule <k>
    execinstr (pcmpeqb R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #then mi(8, 255) #else mi(8, 0) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #then mi(8, 255) #else mi(8, 0) #fi)))))))))))))))))
)

    </regstate>
    


// pcmpeqb-xmm-xmm-semantics


// psubusb-xmm-xmm

  rule <k>
    execinstr (psubusb R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 136))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 136))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 136))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 136, 144))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 136, 144))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 136, 144))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 152))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 152))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 152))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 152, 160))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 152, 160))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 152, 160))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 168))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 168))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 168))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 168, 176))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 168, 176))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 168, 176))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 184))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 184))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 184))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 184, 192))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 184, 192))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 184, 192))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 200))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 200))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 200))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 200, 208))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 200, 208))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 200, 208))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 216))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 216))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 216))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 216, 224))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 216, 224))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 216, 224))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 232))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 232))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 232))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 232, 240))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 232, 240))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 232, 240))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 248))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 248))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 248))), 2, 10) #fi) #fi), (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))), 2, 10) #fi) #fi)))))))))))))))))
)

    </regstate>
    


// psubusb-xmm-xmm-semantics


// vcvtsi2ssl-xmm-xmm-r32

  rule <k>
    execinstr (vcvtsi2ssl R1:R32, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 224), cvt_int32_to_single(extractMInt( getParentValue(R1, RSMap), 32, 64))))
)

    </regstate>
    


// vcvtsi2ssl-xmm-xmm-r32-semantics


// blendvpd-xmm-xmm-xmm0

  rule <k>
    execinstr (blendvpd XMM0, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 128, 129), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 192) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 192, 193), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 192, 256) #else extractMInt( getParentValue(R2, RSMap), 192, 256) #fi)))
)

    </regstate>
    


// blendvpd-xmm-xmm-xmm0-semantics


// vfmadd213pd-ymm-ymm-ymm

  rule <k>
    execinstr (vfmadd213pd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( vfmadd132_double(extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64), extractMInt( getParentValue(R3, RSMap), 0, 64)), concatenateMInt( vfmadd132_double(extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128), extractMInt( getParentValue(R3, RSMap), 64, 128)), concatenateMInt( vfmadd132_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192), extractMInt( getParentValue(R3, RSMap), 128, 192)), vfmadd132_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R3, RSMap), 192, 256)))))
)

    </regstate>
    


// vfmadd213pd-ymm-ymm-ymm-semantics


// negq-r64

  rule <k>
    execinstr (negq R1:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> addMInt(mi(64, 1), negMInt( getParentValue(R1, RSMap)))

"CF" |-> (#ifMInt (notBool eqMInt( getParentValue(R1, RSMap), mi(64, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt(mi(64, 1), negMInt( getParentValue(R1, RSMap))), 63, 64), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(64, 1), negMInt( getParentValue(R1, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(64, 1), negMInt( getParentValue(R1, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(64, 1), negMInt( getParentValue(R1, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(64, 1), negMInt( getParentValue(R1, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(64, 1), negMInt( getParentValue(R1, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(64, 1), negMInt( getParentValue(R1, RSMap))), 57, 58), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(64, 1), negMInt( getParentValue(R1, RSMap))), 56, 57), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(64, 1), negMInt( getParentValue(R1, RSMap))), 59, 60), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt eqMInt( addMInt(mi(64, 1), negMInt( getParentValue(R1, RSMap))), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt(mi(64, 1), negMInt( getParentValue(R1, RSMap))), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 1)) andBool eqMInt( extractMInt( addMInt(mi(64, 1), negMInt( getParentValue(R1, RSMap))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// negq-r64-semantics


// roll-r32-one

  rule <k>
    execinstr (roll $0x1, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), rol( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(32, 1)))

"CF" |-> extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(32, 1)), 31, 32)

"OF" |-> (#ifMInt (eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(32, 1)), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(32, 1)), 31, 32), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// roll-r32-one-semantics


// cmovpol-r32-r32

  rule <k>
    execinstr (cmovpol R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt (notBool eqMInt(getFlag("PF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovpol-r32-r32-semantics


// vpbroadcastd-xmm-xmm

  rule <k>
    execinstr (vpbroadcastd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), extractMInt( getParentValue(R1, RSMap), 224, 256)), extractMInt( getParentValue(R1, RSMap), 224, 256)))
)

    </regstate>
    


// vpbroadcastd-xmm-xmm-semantics


// pslld-xmm-xmm

  rule <k>
    execinstr (pslld R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 31)) #then mi(128, 0) #else concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), shlMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256)))))) #fi))
)

    </regstate>
    


// pslld-xmm-xmm-semantics


// salb-rh-cl

  rule <k>
    execinstr (salb %cl, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 8)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 8))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 9), mi(8, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool (((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 8)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 8))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// salb-rh-cl-semantics


// xchgq-r64-rax

  rule <k>
    execinstr (xchgq %rax, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> getParentValue(R2, RSMap)

convToRegKeys(R2) |-> getParentValue(%rax, RSMap)
)

    </regstate>
      requires notBool sameRegisters(%rax, R2)

    rule <k>
    execinstr (xchgq %rax, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> getParentValue(%rax, RSMap)
)

    </regstate>
      requires sameRegisters(%rax, R2)



// xchgq-r64-rax-semantics


// cmovnll-r32-r32

  rule <k>
    execinstr (cmovnll R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovnll-r32-r32-semantics


// vhaddpd-xmm-xmm-xmm

  rule <k>
    execinstr (vhaddpd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( add_double(extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 128, 192)), add_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 128, 192))))
)

    </regstate>
    


// vhaddpd-xmm-xmm-xmm-semantics


// vxorps-ymm-ymm-ymm

  rule <k>
    execinstr (vxorps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> xorMInt( getParentValue(R2, RSMap), getParentValue(R1, RSMap))
)

    </regstate>
    


// vxorps-ymm-ymm-ymm-semantics


// vpmulhw-ymm-ymm-ymm

  rule <k>
    execinstr (vpmulhw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 16))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 16)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 32))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 32)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 48))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 48)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 80))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 80)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 96))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 96)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 112))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 112)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 128))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 128)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), 0, 16), extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), 0, 16))))))))))))))))
)

    </regstate>
    


// vpmulhw-ymm-ymm-ymm-semantics


// vfnmadd132pd-ymm-ymm-ymm

  rule <k>
    execinstr (vfnmadd132pd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( vfnmadd132_double(extractMInt( getParentValue(R3, RSMap), 0, 64), extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), concatenateMInt( vfnmadd132_double(extractMInt( getParentValue(R3, RSMap), 64, 128), extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128)), concatenateMInt( vfnmadd132_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfnmadd132_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)))))
)

    </regstate>
    


// vfnmadd132pd-ymm-ymm-ymm-semantics


// sarb-rh-cl

  rule <k>
    execinstr (sarb %cl, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 8)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 8, 9), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 8), mi(8, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool false) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sarb-rh-cl-semantics


// cmovnow-r16-r16

  rule <k>
    execinstr (cmovnow R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt (notBool eqMInt(getFlag("OF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovnow-r16-r16-semantics


// imull-r32

  rule <k>
    execinstr (imull R1:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( mi(32, 0), extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(64, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 32, 64)))), 32, 64))

"RDX" |-> concatenateMInt( mi(32, 0), extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(64, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 32, 64)))), 0, 32))

"CF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(64, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 32, 64)))), mi(64, svalueMInt(extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(64, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 32, 64)))), 32, 64))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(64, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 32, 64)))), mi(64, svalueMInt(extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(64, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 32, 64)))), 32, 64))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// imull-r32-semantics


// vfmsubadd213pd-xmm-xmm-xmm

  rule <k>
    execinstr (vfmsubadd213pd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfmsub213_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfmadd213_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfmsubadd213pd-xmm-xmm-xmm-semantics


// minsd-xmm-xmm

  rule <k>
    execinstr (minsd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 192), (#ifMInt eqMInt( mincmp_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 256) #else extractMInt( getParentValue(R1, RSMap), 192, 256) #fi))
)

    </regstate>
    


// minsd-xmm-xmm-semantics


// vpand-xmm-xmm-xmm

  rule <k>
    execinstr (vpand R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), andMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// vpand-xmm-xmm-xmm-semantics


// vfmsubadd132pd-xmm-xmm-xmm

  rule <k>
    execinstr (vfmsubadd132pd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfmsub132_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfmadd132_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfmsubadd132pd-xmm-xmm-xmm-semantics


// vcvtsi2sdq-xmm-xmm-r64

  rule <k>
    execinstr (vcvtsi2sdq R1:R64, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), cvt_int64_to_double(getParentValue(R1, RSMap))))
)

    </regstate>
    


// vcvtsi2sdq-xmm-xmm-r64-semantics


// vpaddsb-xmm-xmm-xmm

  rule <k>
    execinstr (vpaddsb R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 136))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 136))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 136))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 136, 144))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 136, 144))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 136, 144))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 152))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 152))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 152))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 152, 160))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 152, 160))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 152, 160))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 168))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 168))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 168))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 168, 176))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 168, 176))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 168, 176))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 184))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 184))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 184))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 184, 192))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 184, 192))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 184, 192))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 200))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 200))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 200))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 200, 208))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 200, 208))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 200, 208))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 216))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 216))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 216))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 216, 224))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 216, 224))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 216, 224))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 232))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 232))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 232))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 232, 240))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 232, 240))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 232, 240))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 248))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 248))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 248))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248)))), 8, 16) #fi) #fi), (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 248, 256))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 248, 256))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 248, 256))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))), 8, 16) #fi) #fi)))))))))))))))))
)

    </regstate>
    


// vpaddsb-xmm-xmm-xmm-semantics


// vpminud-ymm-ymm-ymm

  rule <k>
    execinstr (vpminud R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)) #then extractMInt( getParentValue(R2, RSMap), 0, 32) #else extractMInt( getParentValue(R1, RSMap), 0, 32) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)) #then extractMInt( getParentValue(R2, RSMap), 32, 64) #else extractMInt( getParentValue(R1, RSMap), 32, 64) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)) #then extractMInt( getParentValue(R2, RSMap), 64, 96) #else extractMInt( getParentValue(R1, RSMap), 64, 96) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128)) #then extractMInt( getParentValue(R2, RSMap), 96, 128) #else extractMInt( getParentValue(R1, RSMap), 96, 128) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R1, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R1, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else extractMInt( getParentValue(R1, RSMap), 192, 224) #fi), (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))))))))
)

    </regstate>
    


// vpminud-ymm-ymm-ymm-semantics


// setg-rh

  rule <k>
    execinstr (setg R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt ((notBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) andBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1)))) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setg-rh-semantics


// sbbb-r8-r8

  rule <k>
    execinstr (sbbb R1:R8, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sbbb-r8-r8-semantics


// vpcmpeqq-xmm-xmm-xmm

  rule <k>
    execinstr (vpcmpeqq R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi)))
)

    </regstate>
    


// vpcmpeqq-xmm-xmm-xmm-semantics


// punpckhwd-xmm-xmm

  rule <k>
    execinstr (punpckhwd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), extractMInt( getParentValue(R2, RSMap), 176, 192))))))
)

    </regstate>
    


// punpckhwd-xmm-xmm-semantics


// blsmskq-r64-r64

  rule <k>
    execinstr (blsmskq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> xorMInt( subMInt( getParentValue(R1, RSMap), mi(64, 1)), getParentValue(R1, RSMap))

"CF" |-> (#ifMInt eqMInt( getParentValue(R1, RSMap), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> mi(1, 0)

"SF" |-> xorMInt( extractMInt( subMInt( getParentValue(R1, RSMap), mi(64, 1)), 0, 1), extractMInt( getParentValue(R1, RSMap), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// blsmskq-r64-r64-semantics


// setne-r8

  rule <k>
    execinstr (setne R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt (notBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setne-r8-semantics


// vmovmskpd-r64-ymm

  rule <k>
    execinstr (vmovmskpd R1:Ymm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(48, 0), extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 1), extractMInt(getParentValue(R1, RSMap), 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 1), extractMInt(getParentValue(R1, RSMap), 64, 65)))), 1, 9)), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 128, 129), extractMInt(getParentValue(R1, RSMap), 192, 193)))), 1, 9)), concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 1), extractMInt(getParentValue(R1, RSMap), 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 1), extractMInt(getParentValue(R1, RSMap), 64, 65)))), 1, 9))), 1, 17)) )


)

    </regstate>


// vmovmskpd-r64-ymm-semantics

/*
TargetInstr:
vmovmskpd %ymm1, %rbx
RWSet:
maybe read:{ %ymm1 }
must read:{ %ymm1 }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:callq .move_256_128_ymm1_xmm10_xmm11  #  1     0     5      OPC=callq_label
circuit:vmovmskpd %xmm11, %r9d                #  2     0x5   5      OPC=vmovmskpd_r32_xmm
circuit:vmovmskpd %xmm10, %ebx                #  3     0xa   5      OPC=vmovmskpd_r32_xmm
circuit:xaddb %r9b, %r9b                      #  4     0xf   4      OPC=xaddb_r8_r8
circuit:xaddb %bl, %r9b                       #  5     0x13  4      OPC=xaddb_r8_r8
circuit:addw %r9w, %bx                        #  6     0x17  4      OPC=addw_r16_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vmovmskpd %ymm1, %rbx

  maybe read:      { %ymm1 }
  must read:       { %ymm1 }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%rbx   : (concat (concat <0x0|32> (plus (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[63:32]) (concat <0x0|1> <%ymm1|256>[63:32]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[63:32]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[63:32])) (concat <0x0|1> <%ymm1|256>[63:32]))[32:32] <0x1|1>) then (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x2|33> else <0x1|33>) else (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>)) (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>))[31:16]) (plus (concat <0x0|1> (concat (plus (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[191:160]) (concat <0x0|1> <%ymm1|256>[191:160]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[191:160]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[191:160])) (concat <0x0|1> <%ymm1|256>[191:160]))[32:32] <0x1|1>) then (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x2|33> else <0x1|33>) else (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>)) (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>))[15:8] (plus (concat <0x0|1> (plus (concat <0x0|1> (plus (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[191:160]) (concat <0x0|1> <%ymm1|256>[191:160]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[191:160]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[191:160])) (concat <0x0|1> <%ymm1|256>[191:160]))[32:32] <0x1|1>) then (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x2|33> else <0x1|33>) else (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>)) (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>))[7:0]) (concat <0x0|1> (plus (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[191:160]) (concat <0x0|1> <%ymm1|256>[191:160]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[191:160]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[191:160])) (concat <0x0|1> <%ymm1|256>[191:160]))[32:32] <0x1|1>) then (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x2|33> else <0x1|33>) else (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>)) (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>))[7:0]))[7:0]) (concat <0x0|1> (plus (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[63:32]) (concat <0x0|1> <%ymm1|256>[63:32]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[63:32]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[63:32])) (concat <0x0|1> <%ymm1|256>[63:32]))[32:32] <0x1|1>) then (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x2|33> else <0x1|33>) else (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>)) (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>))[7:0]))[7:0])) (concat <0x0|1> (concat (plus (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[63:32]) (concat <0x0|1> <%ymm1|256>[63:32]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[63:32]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[63:32])) (concat <0x0|1> <%ymm1|256>[63:32]))[32:32] <0x1|1>) then (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x2|33> else <0x1|33>) else (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>)) (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>))[15:8] (plus (concat <0x0|1> (plus (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[191:160]) (concat <0x0|1> <%ymm1|256>[191:160]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[191:160]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[191:160])) (concat <0x0|1> <%ymm1|256>[191:160]))[32:32] <0x1|1>) then (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x2|33> else <0x1|33>) else (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>)) (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>))[7:0]) (concat <0x0|1> (plus (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[191:160]) (concat <0x0|1> <%ymm1|256>[191:160]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[191:160]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[191:160])) (concat <0x0|1> <%ymm1|256>[191:160]))[32:32] <0x1|1>) then (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x2|33> else <0x1|33>) else (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>)) (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>))[7:0]))[7:0])))[15:0])

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/
// movupd-xmm-xmm

  rule <k>
    execinstr (movupd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), extractMInt( getParentValue(R1, RSMap), 128, 256))
)

    </regstate>
    


// movupd-xmm-xmm-semantics


// paddq-xmm-xmm

  rule <k>
    execinstr (paddq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), addMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// paddq-xmm-xmm-semantics


// xaddw-r16-r16

  rule <k>
    execinstr (xaddw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), extractMInt( getParentValue(R2, RSMap), 48, 64))

convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (xaddw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
        convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13)

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
      requires sameRegisters(R1, R2)
  


// xaddw-r16-r16-semantics


// vpaddq-ymm-ymm-ymm

  rule <k>
    execinstr (vpaddq R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), addMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)))))
)

    </regstate>
    


// vpaddq-ymm-ymm-ymm-semantics


// vmulss-xmm-xmm-xmm

  rule <k>
    execinstr (vmulss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 224), mul_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vmulss-xmm-xmm-xmm-semantics


// cmovnal-r32-r32

  rule <k>
    execinstr (cmovnal R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt (eqMInt(getFlag("CF", RSMap), mi(1,1)) orBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovnal-r32-r32-semantics


// movd-r32-xmm

  rule <k>
    execinstr (movd R1:Xmm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 224, 256))
)

    </regstate>
    


// movd-r32-xmm-semantics


// sqrtps-xmm-xmm

  rule <k>
    execinstr (sqrtps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( sqrt_single(extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( sqrt_single(extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( sqrt_single(extractMInt( getParentValue(R1, RSMap), 192, 224)), sqrt_single(extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// sqrtps-xmm-xmm-semantics


// cmovnbeq-r64-r64

  rule <k>
    execinstr (cmovnbeq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt ((notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) andBool (notBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovnbeq-r64-r64-semantics


// rcll-r32-one

  rule <k>
    execinstr (rcll $0x1, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), mi(33, 1)), 1, 33))

"CF" |-> extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), mi(33, 1)), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), mi(33, 1)), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), mi(33, 1)), 1, 2), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rcll-r32-one-semantics


// vcvtdq2ps-xmm-xmm

  rule <k>
    execinstr (vcvtdq2ps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( cvt_int32_to_single(extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( cvt_int32_to_single(extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( cvt_int32_to_single(extractMInt( getParentValue(R1, RSMap), 192, 224)), cvt_int32_to_single(extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vcvtdq2ps-xmm-xmm-semantics


// maxss-xmm-xmm

  rule <k>
    execinstr (maxss R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 224), (#ifMInt eqMInt( maxcmp_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))
)

    </regstate>
    


// maxss-xmm-xmm-semantics


// vcvtps2dq-ymm-ymm

  rule <k>
    execinstr (vcvtps2dq R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( cvt_single_to_int32(extractMInt( getParentValue(R1, RSMap), 0, 32)), concatenateMInt( cvt_single_to_int32(extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( cvt_single_to_int32(extractMInt( getParentValue(R1, RSMap), 64, 96)), concatenateMInt( cvt_single_to_int32(extractMInt( getParentValue(R1, RSMap), 96, 128)), concatenateMInt( cvt_single_to_int32(extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( cvt_single_to_int32(extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( cvt_single_to_int32(extractMInt( getParentValue(R1, RSMap), 192, 224)), cvt_single_to_int32(extractMInt( getParentValue(R1, RSMap), 224, 256)))))))))
)

    </regstate>
    


// vcvtps2dq-ymm-ymm-semantics


// vucomiss-xmm-xmm

  rule <k>
    execinstr (vucomiss R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(2, 0)) orBool eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(2, 2))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(2, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt (eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(2, 0)) orBool eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(2, 3))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// vucomiss-xmm-xmm-semantics


// vpavgb-ymm-ymm-ymm

  rule <k>
    execinstr (vpavgb R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 0, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 0, 8))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 8, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 8, 16))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 16, 24)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 16, 24))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 24, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 24, 32))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 40)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 40))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 40, 48)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 40, 48))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 64, 72)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 64, 72))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 72, 80)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 72, 80))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 80, 88)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 80, 88))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 88, 96)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 88, 96))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 96, 104)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 96, 104))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 104, 112)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 104, 112))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 112, 120)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 112, 120))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 120, 128)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 120, 128))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 128, 136))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 136, 144))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 144, 152))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 152, 160))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 160, 168))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 168, 176))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 176, 184))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 184, 192))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 192, 200))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 200, 208))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 208, 216))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 216, 224))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 224, 232))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 232, 240))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 240, 248))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9))))))))))))))))))))))))))))))))
)

    </regstate>
    


// vpavgb-ymm-ymm-ymm-semantics


// setg-r8

  rule <k>
    execinstr (setg R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt ((notBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) andBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1)))) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setg-r8-semantics


// vpmovzxwq-ymm-xmm

  rule <k>
    execinstr (vpmovzxwq R1:Xmm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( mi(48, 0), extractMInt( getParentValue(R1, RSMap), 192, 208)), concatenateMInt( concatenateMInt( mi(48, 0), extractMInt( getParentValue(R1, RSMap), 208, 224)), concatenateMInt( concatenateMInt( mi(48, 0), extractMInt( getParentValue(R1, RSMap), 224, 240)), concatenateMInt( mi(48, 0), extractMInt( getParentValue(R1, RSMap), 240, 256)))))
)

    </regstate>
    


// vpmovzxwq-ymm-xmm-semantics


// vpcmpeqb-ymm-ymm-ymm

  rule <k>
    execinstr (vpcmpeqb R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 8), extractMInt( getParentValue(R1, RSMap), 0, 8)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 8, 16), extractMInt( getParentValue(R1, RSMap), 8, 16)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 16, 24), extractMInt( getParentValue(R1, RSMap), 16, 24)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 24, 32), extractMInt( getParentValue(R1, RSMap), 24, 32)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 40), extractMInt( getParentValue(R1, RSMap), 32, 40)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 40, 48), extractMInt( getParentValue(R1, RSMap), 40, 48)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 48, 56)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 56, 64)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 64, 72), extractMInt( getParentValue(R1, RSMap), 64, 72)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 72, 80), extractMInt( getParentValue(R1, RSMap), 72, 80)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 80, 88), extractMInt( getParentValue(R1, RSMap), 80, 88)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 88, 96), extractMInt( getParentValue(R1, RSMap), 88, 96)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 96, 104), extractMInt( getParentValue(R1, RSMap), 96, 104)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 104, 112), extractMInt( getParentValue(R1, RSMap), 104, 112)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 112, 120), extractMInt( getParentValue(R1, RSMap), 112, 120)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 120, 128), extractMInt( getParentValue(R1, RSMap), 120, 128)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #then mi(8, 255) #else mi(8, 0) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #then mi(8, 255) #else mi(8, 0) #fi))))))))))))))))))))))))))))))))
)

    </regstate>
    


// vpcmpeqb-ymm-ymm-ymm-semantics


// vpsllvq-ymm-ymm-ymm

  rule <k>
    execinstr (vpsllvq R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 0, 64), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 64))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 64, 128), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 128))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 192))), shlMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 256))))))
)

    </regstate>
    


// vpsllvq-ymm-ymm-ymm-semantics


// vpsllq-ymm-ymm-xmm

  rule <k>
    execinstr (vpsllq R1:Xmm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 63)) #then mi(256, 0) #else concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 0, 64), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 64, 128), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 256))), shlMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 256)))))) #fi)
)

    </regstate>
    


// vpsllq-ymm-ymm-xmm-semantics


// vunpcklpd-xmm-xmm-xmm

  rule <k>
    execinstr (vunpcklpd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256)))
)

    </regstate>
    


// vunpcklpd-xmm-xmm-xmm-semantics


// vcvttps2dq-ymm-ymm

  rule <k>
    execinstr (vcvttps2dq R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( cvt_single_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 0, 32)), concatenateMInt( cvt_single_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( cvt_single_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 64, 96)), concatenateMInt( cvt_single_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 96, 128)), concatenateMInt( cvt_single_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( cvt_single_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( cvt_single_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 192, 224)), cvt_single_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 224, 256)))))))))
)

    </regstate>
    


// vcvttps2dq-ymm-ymm-semantics


// vcvtps2pd-ymm-xmm

  rule <k>
    execinstr (vcvtps2pd R1:Xmm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( cvt_single_to_double(extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( cvt_single_to_double(extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( cvt_single_to_double(extractMInt( getParentValue(R1, RSMap), 192, 224)), cvt_single_to_double(extractMInt( getParentValue(R1, RSMap), 224, 256)))))
)

    </regstate>
    


// vcvtps2pd-ymm-xmm-semantics


// psignw-xmm-xmm

  rule <k>
    execinstr (psignw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), mi(16, 0)) #then extractMInt( getParentValue(R2, RSMap), 128, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), mi(16, 0)) #then mi(16, 0) #else addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 128, 144))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), mi(16, 0)) #then extractMInt( getParentValue(R2, RSMap), 144, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), mi(16, 0)) #then mi(16, 0) #else addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 144, 160))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), mi(16, 0)) #then extractMInt( getParentValue(R2, RSMap), 160, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), mi(16, 0)) #then mi(16, 0) #else addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 160, 176))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), mi(16, 0)) #then extractMInt( getParentValue(R2, RSMap), 176, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), mi(16, 0)) #then mi(16, 0) #else addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 176, 192))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), mi(16, 0)) #then extractMInt( getParentValue(R2, RSMap), 192, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), mi(16, 0)) #then mi(16, 0) #else addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 192, 208))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), mi(16, 0)) #then extractMInt( getParentValue(R2, RSMap), 208, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), mi(16, 0)) #then mi(16, 0) #else addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 208, 224))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), mi(16, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), mi(16, 0)) #then mi(16, 0) #else addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 224, 240))) #fi) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), mi(16, 0)) #then extractMInt( getParentValue(R2, RSMap), 240, 256) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), mi(16, 0)) #then mi(16, 0) #else addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 240, 256))) #fi) #fi)))))))))
)

    </regstate>
    


// psignw-xmm-xmm-semantics


// orb-r8-rh

  rule <k>
    execinstr (orb R1:Rh, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), orMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 48, 56)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( getParentValue(R1, RSMap), 55, 56)), mi(1, 1)) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( getParentValue(R1, RSMap), 54, 55)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( getParentValue(R1, RSMap), 53, 54)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( getParentValue(R1, RSMap), 52, 53)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(R1, RSMap), 51, 52)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( getParentValue(R1, RSMap), 50, 51)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( getParentValue(R1, RSMap), 49, 50)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> orMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 48, 49))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// orb-r8-rh-semantics


// addsd-xmm-xmm

  rule <k>
    execinstr (addsd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 192), add_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)))
)

    </regstate>
    


// addsd-xmm-xmm-semantics


// vmovapd-ymm-ymm

  rule <k>
    execinstr (vmovapd R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> getParentValue(R1, RSMap)
)

    </regstate>
    


// vmovapd-ymm-ymm-semantics


// setnbe-rh

  rule <k>
    execinstr (setnbe R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt ((notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) andBool (notBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setnbe-rh-semantics


// vpabsb-ymm-ymm

  rule <k>
    execinstr (vpabsb R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 0, 8), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 0, 8))) #else extractMInt( getParentValue(R1, RSMap), 0, 8) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 8, 16), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 8, 16))) #else extractMInt( getParentValue(R1, RSMap), 8, 16) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 16, 24), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 16, 24))) #else extractMInt( getParentValue(R1, RSMap), 16, 24) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 24, 32), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 24, 32))) #else extractMInt( getParentValue(R1, RSMap), 24, 32) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 32, 40), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 40))) #else extractMInt( getParentValue(R1, RSMap), 32, 40) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 40, 48), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 40, 48))) #else extractMInt( getParentValue(R1, RSMap), 40, 48) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else extractMInt( getParentValue(R1, RSMap), 48, 56) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else extractMInt( getParentValue(R1, RSMap), 56, 64) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 64, 72), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 64, 72))) #else extractMInt( getParentValue(R1, RSMap), 64, 72) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 72, 80), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 72, 80))) #else extractMInt( getParentValue(R1, RSMap), 72, 80) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 80, 88), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 80, 88))) #else extractMInt( getParentValue(R1, RSMap), 80, 88) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 88, 96), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 88, 96))) #else extractMInt( getParentValue(R1, RSMap), 88, 96) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 96, 104), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 96, 104))) #else extractMInt( getParentValue(R1, RSMap), 96, 104) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 104, 112), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 104, 112))) #else extractMInt( getParentValue(R1, RSMap), 104, 112) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 112, 120), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 112, 120))) #else extractMInt( getParentValue(R1, RSMap), 112, 120) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 120, 128), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 120, 128))) #else extractMInt( getParentValue(R1, RSMap), 120, 128) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 128, 136), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 128, 136))) #else extractMInt( getParentValue(R1, RSMap), 128, 136) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 136, 144), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 136, 144))) #else extractMInt( getParentValue(R1, RSMap), 136, 144) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 144, 152), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 144, 152))) #else extractMInt( getParentValue(R1, RSMap), 144, 152) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 152, 160), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 152, 160))) #else extractMInt( getParentValue(R1, RSMap), 152, 160) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 160, 168), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 160, 168))) #else extractMInt( getParentValue(R1, RSMap), 160, 168) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 168, 176), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 168, 176))) #else extractMInt( getParentValue(R1, RSMap), 168, 176) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 176, 184), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 176, 184))) #else extractMInt( getParentValue(R1, RSMap), 176, 184) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 184, 192), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 184, 192))) #else extractMInt( getParentValue(R1, RSMap), 184, 192) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 200), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 192, 200))) #else extractMInt( getParentValue(R1, RSMap), 192, 200) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 200, 208), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 200, 208))) #else extractMInt( getParentValue(R1, RSMap), 200, 208) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 208, 216), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 208, 216))) #else extractMInt( getParentValue(R1, RSMap), 208, 216) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 216, 224), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 216, 224))) #else extractMInt( getParentValue(R1, RSMap), 216, 224) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 224, 232), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 224, 232))) #else extractMInt( getParentValue(R1, RSMap), 224, 232) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 232, 240), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 232, 240))) #else extractMInt( getParentValue(R1, RSMap), 232, 240) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 240, 248), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 240, 248))) #else extractMInt( getParentValue(R1, RSMap), 240, 248) #fi), (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 248, 256))) #else extractMInt( getParentValue(R1, RSMap), 248, 256) #fi))))))))))))))))))))))))))))))))
)

    </regstate>
    


// vpabsb-ymm-ymm-semantics


// cmovnleq-r64-r64

  rule <k>
    execinstr (cmovnleq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt ((notBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) andBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1)))) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovnleq-r64-r64-semantics


// vpminsb-xmm-xmm-xmm

  rule <k>
    execinstr (vpminsb R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else extractMInt( getParentValue(R1, RSMap), 128, 136) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else extractMInt( getParentValue(R1, RSMap), 136, 144) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else extractMInt( getParentValue(R1, RSMap), 144, 152) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else extractMInt( getParentValue(R1, RSMap), 152, 160) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else extractMInt( getParentValue(R1, RSMap), 160, 168) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else extractMInt( getParentValue(R1, RSMap), 168, 176) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else extractMInt( getParentValue(R1, RSMap), 176, 184) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else extractMInt( getParentValue(R1, RSMap), 184, 192) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else extractMInt( getParentValue(R1, RSMap), 192, 200) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else extractMInt( getParentValue(R1, RSMap), 200, 208) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else extractMInt( getParentValue(R1, RSMap), 208, 216) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else extractMInt( getParentValue(R1, RSMap), 216, 224) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else extractMInt( getParentValue(R1, RSMap), 224, 232) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else extractMInt( getParentValue(R1, RSMap), 232, 240) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R1, RSMap), 240, 248) #fi), (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #then extractMInt( getParentValue(R2, RSMap), 248, 256) #else extractMInt( getParentValue(R1, RSMap), 248, 256) #fi)))))))))))))))))
)

    </regstate>
    


// vpminsb-xmm-xmm-xmm-semantics


// shll-r32-cl

  rule <k>
    execinstr (shll %cl, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 33))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 32)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 32))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 25, 26), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 33), mi(32, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool (((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 32)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 32))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shll-r32-cl-semantics


// vcvtpd2dq-xmm-ymm

  rule <k>
    execinstr (vcvtpd2dq R1:Ymm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( cvt_double_to_int32(extractMInt( getParentValue(R2, RSMap), 0, 64)), concatenateMInt( cvt_double_to_int32(extractMInt( getParentValue(R2, RSMap), 64, 128)), concatenateMInt( cvt_double_to_int32(extractMInt( getParentValue(R2, RSMap), 128, 192)), cvt_double_to_int32(extractMInt( getParentValue(R2, RSMap), 192, 256))))))
)

    </regstate>
    


// vcvtpd2dq-xmm-ymm-semantics


// vpmuludq-ymm-ymm-ymm

  rule <k>
    execinstr (vpmuludq R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mulMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 32, 64))), concatenateMInt( mulMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(R2, RSMap), 96, 128)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 96, 128))), concatenateMInt( mulMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(R2, RSMap), 160, 192)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 160, 192))), mulMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(R2, RSMap), 224, 256)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vpmuludq-ymm-ymm-ymm-semantics


// vfmsubadd132ps-ymm-ymm-ymm

  rule <k>
    execinstr (vfmsubadd132ps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 0, 32), extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 32, 64), extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64))), concatenateMInt( concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 64, 96), extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 96, 128), extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128))), concatenateMInt( concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192))), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vfmsubadd132ps-ymm-ymm-ymm-semantics


// pmuludq-xmm-xmm

  rule <k>
    execinstr (pmuludq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( mulMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(R2, RSMap), 160, 192)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 160, 192))), mulMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(R2, RSMap), 224, 256)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 224, 256)))))
)

    </regstate>
    


// pmuludq-xmm-xmm-semantics


// vfmaddsub213ps-xmm-xmm-xmm

  rule <k>
    execinstr (vfmaddsub213ps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( vfmadd213_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), vfmsub213_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192))), concatenateMInt( vfmadd213_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfmsub213_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))))
)

    </regstate>
    


// vfmaddsub213ps-xmm-xmm-xmm-semantics


// andnps-xmm-xmm

  rule <k>
    execinstr (andnps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 128, 256)), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// andnps-xmm-xmm-semantics


// sete-rh

  rule <k>
    execinstr (sete R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt eqMInt(getFlag("ZF", RSMap), mi(1,1)) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// sete-rh-semantics


// vfmsub231pd-ymm-ymm-ymm

  rule <k>
    execinstr (vfmsub231pd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R3, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R3, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128))), concatenateMInt( vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfmsub231pd-ymm-ymm-ymm-semantics


// movdqa-xmm-xmm

  rule <k>
    execinstr (movdqa R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), extractMInt( getParentValue(R1, RSMap), 128, 256))
)

    </regstate>
    


// movdqa-xmm-xmm-semantics


// idivb-rh

  rule <k>
    execinstr (idivb R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), idiv_remainder_int8(extractMInt( getParentValue(%rax, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 48, 56))), idiv_quotient_int8(extractMInt( getParentValue(%rax, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 48, 56)))

"CF" |-> (undefMInt)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// idivb-rh-semantics


// paddw-xmm-xmm

  rule <k>
    execinstr (paddw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)), addMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256))))))))))
)

    </regstate>
    


// paddw-xmm-xmm-semantics


// cmovnlq-r64-r64

  rule <k>
    execinstr (cmovnlq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1))) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovnlq-r64-r64-semantics


// rorw-r16-cl

  rule <k>
    execinstr (rorw %cl, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), ror( extractMInt( getParentValue(R2, RSMap), 48, 64), concatenateMInt( mi(8, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)))))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 48, 64), concatenateMInt( mi(8, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool (eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 48, 64), concatenateMInt( mi(8, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 48, 64), concatenateMInt( mi(8, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rorw-r16-cl-semantics


// sbbq-r64-r64

  rule <k>
    execinstr (sbbq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65)

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R1, RSMap))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sbbq-r64-r64-semantics


// rolb-r8-one

  rule <k>
    execinstr (rolb $0x1, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), rol( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(8, 1)))

"CF" |-> extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(8, 1)), 7, 8)

"OF" |-> (#ifMInt (eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(8, 1)), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(8, 1)), 7, 8), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rolb-r8-one-semantics


// rorl-r32-cl

  rule <k>
    execinstr (rorl %cl, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), ror( extractMInt( getParentValue(R2, RSMap), 32, 64), concatenateMInt( mi(24, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)))))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 32, 64), concatenateMInt( mi(24, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool (eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 32, 64), concatenateMInt( mi(24, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 32, 64), concatenateMInt( mi(24, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rorl-r32-cl-semantics


// vpmovzxdq-ymm-xmm

  rule <k>
    execinstr (vpmovzxdq R1:Xmm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 192, 224)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 224, 256)))))
)

    </regstate>
    


// vpmovzxdq-ymm-xmm-semantics


// vxorpd-ymm-ymm-ymm

  rule <k>
    execinstr (vxorpd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> xorMInt( getParentValue(R2, RSMap), getParentValue(R1, RSMap))
)

    </regstate>
    


// vxorpd-ymm-ymm-ymm-semantics


// vphaddsw-xmm-xmm-xmm

  rule <k>
    execinstr (vphaddsw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224)))), 16, 32) #fi) #fi), (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))), 16, 32) #fi) #fi)))))))))
)

    </regstate>
    


// vphaddsw-xmm-xmm-xmm-semantics


// vpunpckldq-ymm-ymm-ymm

  rule <k>
    execinstr (vpunpckldq R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 64, 96), extractMInt( getParentValue(R2, RSMap), 64, 96)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 96, 128), extractMInt( getParentValue(R2, RSMap), 96, 128)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256)))))
)

    </regstate>
    


// vpunpckldq-ymm-ymm-ymm-semantics


// vfmadd132ps-ymm-ymm-ymm

  rule <k>
    execinstr (vfmadd132ps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 0, 32), extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 32, 64), extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 64, 96), extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 96, 128), extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128)), concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))))))))
)

    </regstate>
    


// vfmadd132ps-ymm-ymm-ymm-semantics


// vcvtph2ps-xmm-xmm

  rule <k>
    execinstr (vcvtph2ps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( cvt_half_to_single(extractMInt( getParentValue(R1, RSMap), 192, 208)), concatenateMInt( cvt_half_to_single(extractMInt( getParentValue(R1, RSMap), 208, 224)), concatenateMInt( cvt_half_to_single(extractMInt( getParentValue(R1, RSMap), 224, 240)), cvt_half_to_single(extractMInt( getParentValue(R1, RSMap), 240, 256))))))
)

    </regstate>
    


// vcvtph2ps-xmm-xmm-semantics


// vdivpd-xmm-xmm-xmm

  rule <k>
    execinstr (vdivpd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( div_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), div_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vdivpd-xmm-xmm-xmm-semantics


// stc

  rule <k>
    execinstr (stc  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 1)
)

    </regstate>
    


// stc-semantics


// rcrl-r32-cl

  rule <k>
    execinstr (rcrl %cl, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), uremMInt( concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(33, 33))), 1, 33))

"CF" |-> extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), uremMInt( concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(33, 33))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(33, 33)), 25, 33), mi(8, 1)) andBool (eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), uremMInt( concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(33, 33))), 1, 2), mi(1, 1)) xorBool eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), uremMInt( concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(33, 33))), 2, 3), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(33, 33)), 25, 33), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(33, 33)), 25, 33), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(33, 33)), 25, 33), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rcrl-r32-cl-semantics


// por-xmm-xmm

  rule <k>
    execinstr (por R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), orMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// por-xmm-xmm-semantics


// vmovaps-xmm-xmm

  rule <k>
    execinstr (vmovaps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), extractMInt( getParentValue(R1, RSMap), 128, 256))
)

    </regstate>
    


// vmovaps-xmm-xmm-semantics


// cvtss2siq-r64-xmm

  rule <k>
    execinstr (cvtss2siq R1:Xmm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> cvt_single_to_int64(extractMInt( getParentValue(R1, RSMap), 224, 256))
)

    </regstate>
    


// cvtss2siq-r64-xmm-semantics


// vsubpd-xmm-xmm-xmm

  rule <k>
    execinstr (vsubpd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( sub_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), sub_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vsubpd-xmm-xmm-xmm-semantics


// vpmovsxwd-ymm-xmm

  rule <k>
    execinstr (vpmovsxwd R1:Xmm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144))), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160))), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176))), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192))), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208))), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224))), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))))))))))
)

    </regstate>
    


// vpmovsxwd-ymm-xmm-semantics


// xchgb-rh-r8

  rule <k>
    execinstr (xchgb R1:R8, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( getParentValue(R1, RSMap), 56, 64)), extractMInt( getParentValue(R2, RSMap), 56, 64))

convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), extractMInt( getParentValue(R2, RSMap), 48, 56))
)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (xchgb R1:R8, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
        convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( getParentValue(R2, RSMap), 56, 64)), extractMInt( getParentValue(R2, RSMap), 48, 56))
      )
    </regstate>
      requires sameRegisters(R1, R2)
  


// xchgb-rh-r8-semantics


// vphaddw-xmm-xmm-xmm

  rule <k>
    execinstr (vphaddw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 144, 160)), addMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 176, 192))), addMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 208, 224))), addMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256))), addMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R2, RSMap), 144, 160))), addMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R2, RSMap), 176, 192))), addMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R2, RSMap), 208, 224))), addMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R2, RSMap), 240, 256))))
)

    </regstate>
    


// vphaddw-xmm-xmm-xmm-semantics


// vhaddpd-ymm-ymm-ymm

  rule <k>
    execinstr (vhaddpd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( add_double(extractMInt( getParentValue(R1, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 0, 64)), add_double(extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R2, RSMap), 0, 64))), concatenateMInt( add_double(extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 128, 192)), add_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 128, 192))))
)

    </regstate>
    


// vhaddpd-ymm-ymm-ymm-semantics


// cmovpl-r32-r32

  rule <k>
    execinstr (cmovpl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt eqMInt(getFlag("PF", RSMap), mi(1,1)) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovpl-r32-r32-semantics


// setnp-r8

  rule <k>
    execinstr (setnp R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt (notBool eqMInt(getFlag("PF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setnp-r8-semantics


// vpsllw-ymm-ymm-xmm

  rule <k>
    execinstr (vpsllw R1:Xmm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(256, 0) #else concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 0, 16), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 16, 32), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 32, 48), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 64, 80), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 80, 96), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 96, 112), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 112, 128), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), shlMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))))))))))))))))) #fi)
)

    </regstate>
    


// vpsllw-ymm-ymm-xmm-semantics


// rclq-r64-one

  rule <k>
    execinstr (rclq $0x1, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), mi(8, 1)), mi(65, 65))), 1, 65)

"CF" |-> extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), mi(8, 1)), mi(65, 65))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), mi(8, 1)), mi(65, 65)), 57, 65), mi(8, 1)) andBool (eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), mi(8, 1)), mi(65, 65))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), mi(8, 1)), mi(65, 65))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), mi(8, 1)), mi(65, 65)), 57, 65), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), mi(8, 1)), mi(65, 65)), 57, 65), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), mi(8, 1)), mi(65, 65)), 57, 65), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rclq-r64-one-semantics


// movsbw-r16-rh

  rule <k>
    execinstr (movsbw R1:Rh, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56))))
)

    </regstate>
    


// movsbw-r16-rh-semantics


// vsqrtps-ymm-ymm

  rule <k>
    execinstr (vsqrtps R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( sqrt_single(extractMInt( getParentValue(R1, RSMap), 0, 32)), concatenateMInt( sqrt_single(extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( sqrt_single(extractMInt( getParentValue(R1, RSMap), 64, 96)), concatenateMInt( sqrt_single(extractMInt( getParentValue(R1, RSMap), 96, 128)), concatenateMInt( sqrt_single(extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( sqrt_single(extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( sqrt_single(extractMInt( getParentValue(R1, RSMap), 192, 224)), sqrt_single(extractMInt( getParentValue(R1, RSMap), 224, 256)))))))))
)

    </regstate>
    


// vsqrtps-ymm-ymm-semantics


// rcrb-rh-cl

  rule <k>
    execinstr (rcrb %cl, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 1)) andBool (eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9))), 1, 2), mi(1, 1)) xorBool eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9))), 2, 3), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rcrb-rh-cl-semantics


// vcvtss2sd-xmm-xmm-xmm

  rule <k>
    execinstr (vcvtss2sd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), cvt_single_to_double(extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vcvtss2sd-xmm-xmm-xmm-semantics


// idivl-r32

  rule <k>
    execinstr (idivl R1:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( mi(32, 0), idiv_quotient_int32(concatenateMInt( extractMInt( getParentValue(%rdx, RSMap), 32, 64), extractMInt( getParentValue(%rax, RSMap), 32, 64)), extractMInt( getParentValue(R1, RSMap), 32, 64)))

"RDX" |-> concatenateMInt( mi(32, 0), idiv_remainder_int32(concatenateMInt( extractMInt( getParentValue(%rdx, RSMap), 32, 64), extractMInt( getParentValue(%rax, RSMap), 32, 64)), extractMInt( getParentValue(R1, RSMap), 32, 64)))

"CF" |-> (undefMInt)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// idivl-r32-semantics


// cmovpow-r16-r16

  rule <k>
    execinstr (cmovpow R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt (notBool eqMInt(getFlag("PF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovpow-r16-r16-semantics


// vaddsubps-ymm-ymm-ymm

  rule <k>
    execinstr (vaddsubps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( add_single(extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), sub_single(extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64))), concatenateMInt( concatenateMInt( add_single(extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), sub_single(extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128))), concatenateMInt( concatenateMInt( add_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), sub_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192))), concatenateMInt( add_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), sub_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vaddsubps-ymm-ymm-ymm-semantics


// adcb-r8-r8

  rule <k>
    execinstr (adcb R1:R8, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9))

"CF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// adcb-r8-r8-semantics


// seto-r8

  rule <k>
    execinstr (seto R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt eqMInt(getFlag("OF", RSMap), mi(1,1)) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// seto-r8-semantics


/*
TEMP ← SRC1;
MASK ← SRC2;
DEST ← 0 ;
m← 0, k← 0;
DO WHILE m< OperandSize
    IF MASK[ m] = 1 THEN
        DEST[ k] ← TEMP[ m];
        k ← k+ 1;
    FI
    m ← m+ 1;
OD
*/   

// pextl-r32-r32-r32

  rule <k>
    execinstr (pextl R1:R32, R2:R32, R3:R32, .Operands) => 
      setRegisterValue(mi(32, 0), R3) ~> parallelBitExtract(getRegisterValue(R1,
            RSMap), R2, R3, 0, 0)
  ...</k>
    <regstate> RSMap:Map </regstate>


  syntax KItem ::= parallelBitExtract(MInt, Register, Register, Int, Int)

  // Base Condition
  rule <k>
    parallelBitExtract(Mask:MInt, TempR:Register, DestR:Register, 31:Int, K:Int) => 
      setRegisterBitsAtPositon(getRegisterBitsAtPositon(TempR, 1, 31, RSMap), DestR, K)
  ...</k>  
    <regstate> RSMap:Map </regstate>
      requires eqMInt( extractMInt(Mask, 0, 1), mi(1, 1))

  rule <k>
    parallelBitExtract(Mask:MInt, TempR:Register, DestR:Register, 31:Int, K:Int) => 
    .
  ...</k>  
    requires eqMInt( extractMInt(Mask, 0, 1), mi(1, 0))

  // General Condition
  rule <k>
    parallelBitExtract(Mask:MInt, TempR:Register, DestR:Register, M:Int, K:Int) => 
      setRegisterBitsAtPositon(getRegisterBitsAtPositon(TempR, 1, M, RSMap), DestR, K)
  ~>  parallelBitExtract(Mask, TempR, DestR, M +Int 1, K +Int 1)
  ...</k>  
    <regstate> RSMap:Map </regstate>
      requires eqMInt( extractMInt(Mask, 31 -Int M, 32 -Int M), mi(1, 1))
      
  rule <k>
    parallelBitExtract(Mask:MInt, TempR:Register, DestR:Register, M:Int, K:Int) => 
        parallelBitExtract(Mask, TempR, DestR, M +Int 1, K)
  ...</k>  
    requires eqMInt( extractMInt(Mask, 31 -Int M, 32 -Int M), mi(1, 0))




// vphsubd-xmm-xmm-xmm

  rule <k>
    execinstr (vphsubd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( concatenateMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 128, 160)), subMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 192, 224))), subMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 128, 160))), subMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 192, 224))))
)

    </regstate>
    


// vphsubd-xmm-xmm-xmm-semantics


// vpsrlvq-xmm-xmm-xmm

  rule <k>
    execinstr (vpsrlvq R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 192))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 256)))))
)

    </regstate>
    


// vpsrlvq-xmm-xmm-xmm-semantics


// rcrl-r32-one

  rule <k>
    execinstr (rcrl $0x1, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), mi(33, 1)), 1, 33))

"CF" |-> extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), mi(33, 1)), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), mi(33, 1)), 1, 2), mi(1, 1)) xorBool eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), mi(33, 1)), 2, 3), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rcrl-r32-one-semantics


// shlxl-r32-r32-r32

  rule <k>
    execinstr (shlxl R1:R32, R2:R32, R3:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(32, 0), shlMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), uvalueMInt(andMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 31)))))
)

    </regstate>
    


// shlxl-r32-r32-r32-semantics


// andpd-xmm-xmm

  rule <k>
    execinstr (andpd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), andMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// andpd-xmm-xmm-semantics


// sarq-r64-cl

  rule <k>
    execinstr (sarq %cl, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 0, 64)

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 64, 65), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 63, 64), mi(1, 1)) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 57, 58), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 56, 57), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 0, 64), mi(64, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 1)) andBool false) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sarq-r64-cl-semantics


// vfnmsub132ss-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmsub132ss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 224), vfnmsub132_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vfnmsub132ss-xmm-xmm-xmm-semantics


// pmaddubsw-xmm-xmm

  rule <k>
    execinstr (pmaddubsw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 136, 144))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 136, 144))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 136, 144))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 152, 160))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 152, 160))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 152, 160))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 168, 176))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 168, 176))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 168, 176))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 184, 192))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 184, 192))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 184, 192))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 200, 208))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 200, 208))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 200, 208))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 216, 224))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 216, 224))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 216, 224))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 232, 240))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 232, 240))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 232, 240))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)))))), 16, 32) #fi) #fi), (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 248, 256))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 248, 256))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 248, 256))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)))))), 16, 32) #fi) #fi)))))))))
)

    </regstate>
    


// pmaddubsw-xmm-xmm-semantics


// vunpckhps-xmm-xmm-xmm

  rule <k>
    execinstr (vunpckhps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160)), extractMInt( getParentValue(R1, RSMap), 160, 192)), extractMInt( getParentValue(R2, RSMap), 160, 192)))
)

    </regstate>
    


// vunpckhps-xmm-xmm-xmm-semantics


// vunpckhpd-ymm-ymm-ymm

  rule <k>
    execinstr (vunpckhpd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 64), extractMInt( getParentValue(R2, RSMap), 0, 64)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192)))
)

    </regstate>
    


// vunpckhpd-ymm-ymm-ymm-semantics


// vmovd-xmm-r32

  rule <k>
    execinstr (vmovd R1:R32, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( mi(224, 0), extractMInt( getParentValue(R1, RSMap), 32, 40)), extractMInt( getParentValue(R1, RSMap), 40, 64))
)

    </regstate>
    


// vmovd-xmm-r32-semantics


// vmovshdup-xmm-xmm

  rule <k>
    execinstr (vmovshdup R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224))))
)

    </regstate>
    


// vmovshdup-xmm-xmm-semantics


// movswl-r32-r16

  rule <k>
    execinstr (movswl R1:R16, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64))))
)

    </regstate>
    


// movswl-r32-r16-semantics


// setns-r8

  rule <k>
    execinstr (setns R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt (notBool eqMInt(getFlag("SF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setns-r8-semantics


// vfnmadd132sd-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmadd132sd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 192), vfnmadd132_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfnmadd132sd-xmm-xmm-xmm-semantics


// vzeroupper

  rule <k>
    execinstr (vzeroupper  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"YMM0" |-> concatenateMInt( mi(128, 0), extractMInt( getParentValue(%ymm0, RSMap), 128, 256))

"YMM1" |-> concatenateMInt( mi(128, 0), extractMInt( getParentValue(%ymm1, RSMap), 128, 256))

"YMM2" |-> concatenateMInt( mi(128, 0), extractMInt( getParentValue(%ymm2, RSMap), 128, 256))

"YMM3" |-> concatenateMInt( mi(128, 0), extractMInt( getParentValue(%ymm3, RSMap), 128, 256))

"YMM4" |-> concatenateMInt( mi(128, 0), extractMInt( getParentValue(%ymm4, RSMap), 128, 256))

"YMM5" |-> concatenateMInt( mi(128, 0), extractMInt( getParentValue(%ymm5, RSMap), 128, 256))

"YMM6" |-> concatenateMInt( mi(128, 0), extractMInt( getParentValue(%ymm6, RSMap), 128, 256))

"YMM7" |-> concatenateMInt( mi(128, 0), extractMInt( getParentValue(%ymm7, RSMap), 128, 256))

"YMM8" |-> concatenateMInt( mi(128, 0), extractMInt( getParentValue(%ymm8, RSMap), 128, 256))

"YMM9" |-> concatenateMInt( mi(128, 0), extractMInt( getParentValue(%ymm9, RSMap), 128, 256))

"YMM10" |-> concatenateMInt( mi(128, 0), extractMInt( getParentValue(%ymm10, RSMap), 128, 256))

"YMM11" |-> concatenateMInt( mi(128, 0), extractMInt( getParentValue(%ymm11, RSMap), 128, 256))

"YMM12" |-> concatenateMInt( mi(128, 0), extractMInt( getParentValue(%ymm12, RSMap), 128, 256))

"YMM13" |-> concatenateMInt( mi(128, 0), extractMInt( getParentValue(%ymm13, RSMap), 128, 256))

"YMM14" |-> concatenateMInt( mi(128, 0), extractMInt( getParentValue(%ymm14, RSMap), 128, 256))

"YMM15" |-> concatenateMInt( mi(128, 0), extractMInt( getParentValue(%ymm15, RSMap), 128, 256))
)

    </regstate>
    


// vzeroupper-semantics


// vpaddsw-ymm-ymm-ymm

  rule <k>
    execinstr (vpaddsw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 16))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 16)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 16))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 16)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 16))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 16)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 32))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 32)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 32))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 32)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 32))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 32)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 48))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 48)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 48))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 48)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 48))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 48)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 80))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 80)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 80))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 80)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 80))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 80)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 96))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 96)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 96))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 96)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 96))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 96)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 112))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 112)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 112))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 112)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 112))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 112)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 128))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 128)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 128))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 128)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 128))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 128)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), 16, 32) #fi) #fi), (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), 16, 32) #fi) #fi))))))))))))))))
)

    </regstate>
    


// vpaddsw-ymm-ymm-ymm-semantics


// cmovnzl-r32-r32

  rule <k>
    execinstr (cmovnzl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt (notBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovnzl-r32-r32-semantics


// pmaxud-xmm-xmm

  rule <k>
    execinstr (pmaxud R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R1, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R1, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else extractMInt( getParentValue(R1, RSMap), 192, 224) #fi), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi)))))
)

    </regstate>
    


// pmaxud-xmm-xmm-semantics


// vfmadd213ps-ymm-ymm-ymm

  rule <k>
    execinstr (vfmadd213ps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32), extractMInt( getParentValue(R3, RSMap), 0, 32)), vfmadd132_single(extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64), extractMInt( getParentValue(R3, RSMap), 32, 64))), concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96), extractMInt( getParentValue(R3, RSMap), 64, 96)), concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128), extractMInt( getParentValue(R3, RSMap), 96, 128)), concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160), extractMInt( getParentValue(R3, RSMap), 128, 160)), concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R3, RSMap), 160, 192)), concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224), extractMInt( getParentValue(R3, RSMap), 192, 224)), vfmadd132_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R3, RSMap), 224, 256))))))))
)

    </regstate>
    


// vfmadd213ps-ymm-ymm-ymm-semantics


// vpunpckhwd-ymm-ymm-ymm

  rule <k>
    execinstr (vpunpckhwd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 16), extractMInt( getParentValue(R2, RSMap), 0, 16)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 16, 32), extractMInt( getParentValue(R2, RSMap), 16, 32)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 32, 48), extractMInt( getParentValue(R2, RSMap), 32, 48)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), extractMInt( getParentValue(R2, RSMap), 48, 64)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), extractMInt( getParentValue(R2, RSMap), 176, 192)))))))))
)

    </regstate>
    


// vpunpckhwd-ymm-ymm-ymm-semantics


// addps-xmm-xmm

  rule <k>
    execinstr (addps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( add_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( add_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( add_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), add_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// addps-xmm-xmm-semantics


// vfmadd231ps-ymm-ymm-ymm

  rule <k>
    execinstr (vfmadd231ps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R3, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), vfmadd132_single(extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R3, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64))), concatenateMInt( concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R3, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), vfmadd132_single(extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R3, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128))), concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfmadd132_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))))))
)

    </regstate>
    


// vfmadd231ps-ymm-ymm-ymm-semantics


// vxorps-xmm-xmm-xmm

  rule <k>
    execinstr (vxorps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), xorMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// vxorps-xmm-xmm-xmm-semantics


// vptest-xmm-xmm

  rule <k>
    execinstr (vptest R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 128, 256)), extractMInt( getParentValue(R1, RSMap), 128, 256)), mi(128, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> mi(1, 0)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), extractMInt( getParentValue(R1, RSMap), 128, 256)), mi(128, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// vptest-xmm-xmm-semantics


// subss-xmm-xmm

  rule <k>
    execinstr (subss R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 224), sub_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))
)

    </regstate>
    


// subss-xmm-xmm-semantics


// notb-r8

  rule <k>
    execinstr (notb R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64)))
)

    </regstate>
    


// notb-r8-semantics


// vfmadd231ps-xmm-xmm-xmm

  rule <k>
    execinstr (vfmadd231ps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfmadd132_single(mi(32, 0), mi(32, 0), mi(32, 0)), vfmadd132_single(mi(32, 0), mi(32, 0), mi(32, 0))), concatenateMInt( vfmadd132_single(mi(32, 0), mi(32, 0), mi(32, 0)), concatenateMInt( vfmadd132_single(mi(32, 0), mi(32, 0), mi(32, 0)), concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfmadd132_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))))
)

    </regstate>
    


// vfmadd231ps-xmm-xmm-xmm-semantics


// vpsignb-xmm-xmm-xmm

  rule <k>
    execinstr (vpsignb R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 128, 136), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 128, 136), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 128, 136))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 136, 144), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 136, 144), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 136, 144))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 144, 152), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 144, 152), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 144, 152))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 152, 160), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 152, 160), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 152, 160))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 160, 168), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 160, 168), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 160, 168))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 168, 176), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 168, 176), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 168, 176))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 176, 184), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 176, 184), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 176, 184))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 184, 192), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 184, 192), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 184, 192))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 192, 200), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 192, 200), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 192, 200))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 200, 208), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 200, 208), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 200, 208))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 208, 216), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 208, 216), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 208, 216))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 216, 224), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 216, 224), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 216, 224))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 224, 232), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 224, 232), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 224, 232))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 232, 240), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 232, 240), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 232, 240))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 240, 248), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 240, 248), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 240, 248))) #fi) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), mi(8, 0)) #then extractMInt( getParentValue(R2, RSMap), 248, 256) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), mi(8, 0)) #then mi(8, 0) #else addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 248, 256))) #fi) #fi)))))))))))))))))
)

    </regstate>
    


// vpsignb-xmm-xmm-xmm-semantics


// pmulhrsw-xmm-xmm

  rule <k>
    execinstr (pmulhrsw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31)))))))))
)

    </regstate>
    


// pmulhrsw-xmm-xmm-semantics


// cvttss2siq-r64-xmm

  rule <k>
    execinstr (cvttss2siq R1:Xmm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> cvt_single_to_int64_truncate(extractMInt( getParentValue(R1, RSMap), 224, 256))
)

    </regstate>
    


// cvttss2siq-r64-xmm-semantics


// vfmsub213pd-xmm-xmm-xmm

  rule <k>
    execinstr (vfmsub213pd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( concatenateMInt( mi(128, 0), extractMInt( vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192), extractMInt( getParentValue(R3, RSMap), 128, 192)), 0, 56)), extractMInt( vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192), extractMInt( getParentValue(R3, RSMap), 128, 192)), 56, 64)), vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R3, RSMap), 192, 256)))
)

    </regstate>
    


// vfmsub213pd-xmm-xmm-xmm-semantics


// xchgl-eax-r32

  rule <k>
    execinstr (xchgl R1:R32, %eax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 32, 64))

convToRegKeys(R1) |-> concatenateMInt( mi(32, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))
)

    </regstate>
      requires notBool sameRegisters(%eax, R1)


     rule <k>
    execinstr (xchgl R1:R32, %eax,  .Operands) => execinstr(nop  .Operands)
  ...</k>
      requires sameRegisters(%eax, R1)



// xchgl-eax-r32-semantics


// cvttps2dq-xmm-xmm

  rule <k>
    execinstr (cvttps2dq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( cvt_single_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( cvt_single_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( cvt_single_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 192, 224)), cvt_single_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// cvttps2dq-xmm-xmm-semantics


// cbtw

  rule <k>
    execinstr (cbtw  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), mi(16, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 56, 64))))
)

    </regstate>
    


// cbtw-semantics


// shlb-r8-one

  rule <k>
    execinstr (shlb $0x1, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 1, 9))

"CF" |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 1, 2)

"OF" |-> (#ifMInt (eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 1, 2), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shlb-r8-one-semantics


// vpsllw-xmm-xmm-xmm

  rule <k>
    execinstr (vpsllw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then concatenateMInt( mi(128, 0), mi(128, 0)) #else concatenateMInt( mi(128, 0), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), shlMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))))))))))) #fi)
)

    </regstate>
    


// vpsllw-xmm-xmm-xmm-semantics


// vfnmadd132pd-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmadd132pd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfnmadd132_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfnmadd132_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfnmadd132pd-xmm-xmm-xmm-semantics


// cmovncw-r16-r16

  rule <k>
    execinstr (cmovncw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt (notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovncw-r16-r16-semantics


// vmovups-xmm-xmm

  rule <k>
    execinstr (vmovups R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), extractMInt( getParentValue(R1, RSMap), 128, 256))
)

    </regstate>
    


// vmovups-xmm-xmm-semantics


// psubd-xmm-xmm

  rule <k>
    execinstr (psubd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), subMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// psubd-xmm-xmm-semantics


// cmovnbl-r32-r32

  rule <k>
    execinstr (cmovnbl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt (notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovnbl-r32-r32-semantics


// vminpd-ymm-ymm-ymm

  rule <k>
    execinstr (vminpd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt eqMInt( mincmp_double(extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 0, 64) #else extractMInt( getParentValue(R1, RSMap), 0, 64) #fi), concatenateMInt( (#ifMInt eqMInt( mincmp_double(extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 64, 128) #else extractMInt( getParentValue(R1, RSMap), 64, 128) #fi), concatenateMInt( (#ifMInt eqMInt( mincmp_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 192) #else extractMInt( getParentValue(R1, RSMap), 128, 192) #fi), (#ifMInt eqMInt( mincmp_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 256) #else extractMInt( getParentValue(R1, RSMap), 192, 256) #fi))))
)

    </regstate>
    


// vminpd-ymm-ymm-ymm-semantics


// movq-r64-xmm

  rule <k>
    execinstr (movq R1:Xmm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( getParentValue(R1, RSMap), 192, 256)
)

    </regstate>
    


// movq-r64-xmm-semantics


// cmovbel-r32-r32

  rule <k>
    execinstr (cmovbel R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt (eqMInt(getFlag("CF", RSMap), mi(1,1)) orBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovbel-r32-r32-semantics


// vmaxss-xmm-xmm-xmm

  rule <k>
    execinstr (vmaxss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 224), (#ifMInt eqMInt( maxcmp_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi)))
)

    </regstate>
    


// vmaxss-xmm-xmm-xmm-semantics


// vpmovzxdq-xmm-xmm

  rule <k>
    execinstr (vpmovzxdq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 192, 224)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vpmovzxdq-xmm-xmm-semantics


// vpsubw-ymm-ymm-ymm

  rule <k>
    execinstr (vpsubw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 0, 16), extractMInt( getParentValue(R1, RSMap), 0, 16)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 16, 32), extractMInt( getParentValue(R1, RSMap), 16, 32)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 32, 48), extractMInt( getParentValue(R1, RSMap), 32, 48)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 64, 80), extractMInt( getParentValue(R1, RSMap), 64, 80)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 80, 96), extractMInt( getParentValue(R1, RSMap), 80, 96)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 96, 112), extractMInt( getParentValue(R1, RSMap), 96, 112)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 112, 128), extractMInt( getParentValue(R1, RSMap), 112, 128)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)), subMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256)))))))))))))))))
)

    </regstate>
    


// vpsubw-ymm-ymm-ymm-semantics


// setnb-rh

  rule <k>
    execinstr (setnb R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt (notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setnb-rh-semantics


// vfmadd132pd-xmm-xmm-xmm

  rule <k>
    execinstr (vfmadd132pd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfmsub132_double(extractMInt( getParentValue(R3, RSMap), 128, 192), vfnmsub132_double(mi(64, 0), extractMInt( getParentValue(R2, RSMap), 128, 192), mi(64, 0)), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfmsub132_double(extractMInt( getParentValue(R3, RSMap), 192, 256), vfnmsub132_double(mi(64, 0), extractMInt( getParentValue(R2, RSMap), 192, 256), mi(64, 0)), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfmadd132pd-xmm-xmm-xmm-semantics


// cwtd

  rule <k>
    execinstr (cwtd  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RDX" |-> concatenateMInt( extractMInt( getParentValue(%rdx, RSMap), 0, 48), extractMInt( mi(32, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 48, 64))), 0, 16))
)

    </regstate>
    


// cwtd-semantics


// vpaddsb-ymm-ymm-ymm

  rule <k>
    execinstr (vpaddsb R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 8))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 8)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 8))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 8)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 8))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 8)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 8, 16))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 8, 16)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 8, 16))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 8, 16)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 8, 16))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 8, 16)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 24))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 24)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 24))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 24)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 24))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 24)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 24, 32))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 24, 32)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 24, 32))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 24, 32)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 24, 32))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 24, 32)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 40))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 40)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 40))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 40)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 40))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 40)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 40, 48))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 40, 48)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 40, 48))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 40, 48)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 40, 48))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 40, 48)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 56, 64)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 56, 64)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 56, 64)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 72))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 72)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 72))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 72)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 72))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 72)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 72, 80))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 72, 80)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 72, 80))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 72, 80)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 72, 80))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 72, 80)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 88))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 88)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 88))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 88)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 88))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 88)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 88, 96))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 88, 96)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 88, 96))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 88, 96)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 88, 96))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 88, 96)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 104))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 104)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 104))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 104)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 104))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 104)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 104, 112))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 104, 112)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 104, 112))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 104, 112)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 104, 112))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 104, 112)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 120))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 120)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 120))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 120)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 120))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 120)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 120, 128))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 120, 128)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 120, 128))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 120, 128)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 120, 128))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 120, 128)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 136))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 136))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 136))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 136, 144))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 136, 144))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 136, 144))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 152))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 152))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 152))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 152, 160))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 152, 160))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 152, 160))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 168))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 168))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 168))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 168, 176))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 168, 176))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 168, 176))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 184))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 184))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 184))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 184, 192))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 184, 192))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 184, 192))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 200))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 200))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 200))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 200, 208))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 200, 208))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 200, 208))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 216))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 216))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 216))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 216, 224))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 216, 224))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 216, 224))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 232))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 232))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 232))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 232, 240))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 232, 240))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 232, 240))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 248))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 248))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 248))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248)))), 8, 16) #fi) #fi), (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 248, 256))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 248, 256))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 248, 256))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))), 8, 16) #fi) #fi))))))))))))))))))))))))))))))))
)

    </regstate>
    


// vpaddsb-ymm-ymm-ymm-semantics


// vcvttsd2sil-r32-xmm

  rule <k>
    execinstr (vcvttsd2sil R1:Xmm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), cvt_double_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 192, 256)))
)

    </regstate>
    


// vcvttsd2sil-r32-xmm-semantics


// pshufb-xmm-xmm

  rule <k>
    execinstr (pshufb R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 128, 129), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 136, 137), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 144, 145), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 152, 153), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 160, 161), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 168, 169), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 176, 177), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 184, 185), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 192, 193), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 200, 201), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 208, 209), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 216, 217), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 224, 225), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 232, 233), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 240, 241), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 248, 249), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi)))))))))))))))))
)

    </regstate>
    


// pshufb-xmm-xmm-semantics


// cmovgew-r16-r16

  rule <k>
    execinstr (cmovgew R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovgew-r16-r16-semantics


// shrxq-r64-r64-r64

  rule <k>
    execinstr (shrxq R1:R64, R2:R64, R3:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 63))))), 0, 64)
)

    </regstate>
    


// shrxq-r64-r64-r64-semantics


// cmovnaw-r16-r16

  rule <k>
    execinstr (cmovnaw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt (eqMInt(getFlag("CF", RSMap), mi(1,1)) orBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovnaw-r16-r16-semantics


// rcpss-xmm-xmm

  rule <k>
    execinstr (rcpss R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 224), approx_reciprocal_single(extractMInt( getParentValue(R1, RSMap), 224, 256)))
)

    </regstate>
    


// rcpss-xmm-xmm-semantics


// pmovsxbq-xmm-xmm

  rule <k>
    execinstr (pmovsxbq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))))
)

    </regstate>
    


// pmovsxbq-xmm-xmm-semantics


// sbbb-r8-rh

  rule <k>
    execinstr (sbbb R1:Rh, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sbbb-r8-rh-semantics


// vpsrlvq-ymm-ymm-ymm

  rule <k>
    execinstr (vpsrlvq R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 0, 64), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 64))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 64, 128), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 128))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 192))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 256))))))
)

    </regstate>
    


// vpsrlvq-ymm-ymm-ymm-semantics


// orb-r8-r8

  rule <k>
    execinstr (orb R1:R8, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), orMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 56, 64)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( getParentValue(R1, RSMap), 63, 64)), mi(1, 1)) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( getParentValue(R1, RSMap), 62, 63)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( getParentValue(R1, RSMap), 61, 62)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( getParentValue(R1, RSMap), 60, 61)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(R1, RSMap), 59, 60)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( getParentValue(R1, RSMap), 58, 59)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( getParentValue(R1, RSMap), 57, 58)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> orMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 56, 57))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// orb-r8-r8-semantics


// shlq-r64-one

  rule <k>
    execinstr (shlq $0x1, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 1, 65)

"CF" |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 1, 2)

"OF" |-> (#ifMInt (eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 1, 2), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shlq-r64-one-semantics


// cmovnaeq-r64-r64

  rule <k>
    execinstr (cmovnaeq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovnaeq-r64-r64-semantics


// salb-r8-one

  rule <k>
    execinstr (salb $0x1, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 1, 9))

"CF" |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 1, 2)

"OF" |-> (#ifMInt (eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(mi(9, 1))), 1, 2), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// salb-r8-one-semantics


// vpmovmskb-r32-ymm

  rule <k>
    execinstr (vpmovmskb R1:Ymm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 8, 9), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 16, 17), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 24, 25), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 40, 41), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 64, 65), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 72, 73), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 80, 81), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 88, 89), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 96, 97), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 104, 105), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 112, 113), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 120, 121), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 129), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 136, 137), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 144, 145), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 152, 153), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 161), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 168, 169), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 176, 177), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 184, 185), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 193), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 200, 201), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 208, 209), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 216, 217), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 225), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 232, 233), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 241), extractMInt( getParentValue(R1, RSMap), 248, 249)))))))))))))))))))))))))))))))))
)

    </regstate>
    


// vpmovmskb-r32-ymm-semantics


// vpmovzxbw-xmm-xmm

  rule <k>
    execinstr (vpmovzxbw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 192, 200)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 200, 208)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 208, 216)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 216, 224)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 224, 232)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 232, 240)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 240, 248)), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))))))))))
)

    </regstate>
    


// vpmovzxbw-xmm-xmm-semantics


// movb-rh-rh

  rule <k>
    execinstr (movb R1:Rh, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( getParentValue(R1, RSMap), 48, 56)), extractMInt( getParentValue(R2, RSMap), 56, 64))
)

    </regstate>
    


// movb-rh-rh-semantics


// sbbb-rh-r8

  rule <k>
    execinstr (sbbb R1:R8, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 51, 52)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sbbb-rh-r8-semantics


// decw-r16

  rule <k>
    execinstr (decw R1:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), subMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 1)))

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 1)), 15, 16), mi(1, 1)) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 1)), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 1)), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 1)), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 1)), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 1)), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 1)), 9, 10), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 1)), 8, 9), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt eqMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 1)), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 1)), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) andBool eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 64), mi(15, 0))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// decw-r16-semantics


// pminub-xmm-xmm

  rule <k>
    execinstr (pminub R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else extractMInt( getParentValue(R1, RSMap), 128, 136) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else extractMInt( getParentValue(R1, RSMap), 136, 144) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else extractMInt( getParentValue(R1, RSMap), 144, 152) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else extractMInt( getParentValue(R1, RSMap), 152, 160) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else extractMInt( getParentValue(R1, RSMap), 160, 168) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else extractMInt( getParentValue(R1, RSMap), 168, 176) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else extractMInt( getParentValue(R1, RSMap), 176, 184) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else extractMInt( getParentValue(R1, RSMap), 184, 192) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else extractMInt( getParentValue(R1, RSMap), 192, 200) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else extractMInt( getParentValue(R1, RSMap), 200, 208) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else extractMInt( getParentValue(R1, RSMap), 208, 216) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else extractMInt( getParentValue(R1, RSMap), 216, 224) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else extractMInt( getParentValue(R1, RSMap), 224, 232) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else extractMInt( getParentValue(R1, RSMap), 232, 240) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R1, RSMap), 240, 248) #fi), (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #then extractMInt( getParentValue(R2, RSMap), 248, 256) #else extractMInt( getParentValue(R1, RSMap), 248, 256) #fi)))))))))))))))))
)

    </regstate>
    


// pminub-xmm-xmm-semantics


// sete-r8

  rule <k>
    execinstr (sete R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt eqMInt(getFlag("ZF", RSMap), mi(1,1)) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// sete-r8-semantics


// movsldup-xmm-xmm

  rule <k>
    execinstr (movsldup R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// movsldup-xmm-xmm-semantics


// vfnmsub213sd-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmsub213sd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 192), vfnmsub213_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfnmsub213sd-xmm-xmm-xmm-semantics


// psrad-xmm-xmm

  rule <k>
    execinstr (psrad R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 31)) #then mi(32, 32) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 31)) #then mi(32, 32) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 31)) #then mi(32, 32) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))), ashrMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 31)) #then mi(32, 32) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi)))))))
)

    </regstate>
    


// psrad-xmm-xmm-semantics


// cmovzl-r32-r32

  rule <k>
    execinstr (cmovzl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt eqMInt(getFlag("ZF", RSMap), mi(1,1)) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovzl-r32-r32-semantics


// phsubsw-xmm-xmm

  rule <k>
    execinstr (phsubsw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208)))), 16, 32) #fi) #fi), (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))), 16, 32) #fi) #fi)))))))))
)

    </regstate>
    


// phsubsw-xmm-xmm-semantics


// cmovnpw-r16-r16

  rule <k>
    execinstr (cmovnpw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt (notBool eqMInt(getFlag("PF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovnpw-r16-r16-semantics


// vfnmadd213ps-ymm-ymm-ymm

  rule <k>
    execinstr (vfnmadd213ps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32), extractMInt( getParentValue(R3, RSMap), 0, 32)), vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64), extractMInt( getParentValue(R3, RSMap), 32, 64))), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96), extractMInt( getParentValue(R3, RSMap), 64, 96)), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128), extractMInt( getParentValue(R3, RSMap), 96, 128)), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160), extractMInt( getParentValue(R3, RSMap), 128, 160)), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R3, RSMap), 160, 192)), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224), extractMInt( getParentValue(R3, RSMap), 192, 224)), vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R3, RSMap), 224, 256))))))))
)

    </regstate>
    


// vfnmadd213ps-ymm-ymm-ymm-semantics


// cvtsd2sil-r32-xmm

  rule <k>
    execinstr (cvtsd2sil R1:Xmm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), cvt_double_to_int32(extractMInt( getParentValue(R1, RSMap), 192, 256)))
)

    </regstate>
    


// cvtsd2sil-r32-xmm-semantics


// negb-r8

  rule <k>
    execinstr (negb R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), 0, 1), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), 3, 4), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt eqMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) andBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// negb-r8-semantics


// movhlps-xmm-xmm

  rule <k>
    execinstr (movhlps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 192), extractMInt( getParentValue(R1, RSMap), 128, 192))
)

    </regstate>
    


// movhlps-xmm-xmm-semantics


// orw-r16-r16

  rule <k>
    execinstr (orw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), orMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 48, 64)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( getParentValue(R1, RSMap), 63, 64)), mi(1, 1)) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( getParentValue(R1, RSMap), 62, 63)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( getParentValue(R1, RSMap), 61, 62)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( getParentValue(R1, RSMap), 60, 61)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(R1, RSMap), 59, 60)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( getParentValue(R1, RSMap), 58, 59)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( getParentValue(R1, RSMap), 57, 58)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 48, 64)), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> orMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( getParentValue(R1, RSMap), 48, 49))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// orw-r16-r16-semantics


// vpunpckhwd-xmm-xmm-xmm

  rule <k>
    execinstr (vpunpckhwd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), extractMInt( getParentValue(R2, RSMap), 176, 192))))))
)

    </regstate>
    


// vpunpckhwd-xmm-xmm-xmm-semantics


// vpsrad-xmm-xmm-xmm

  rule <k>
    execinstr (vpsrad R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 31)) #then mi(32, 32) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 31)) #then mi(32, 32) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 31)) #then mi(32, 32) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))), ashrMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 31)) #then mi(32, 32) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi)))))))
)

    </regstate>
    


// vpsrad-xmm-xmm-xmm-semantics


// andb-rh-rh

  rule <k>
    execinstr (andb R1:Rh, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), andMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 48, 56))), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 55, 56), extractMInt( getParentValue(R1, RSMap), 55, 56)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 54, 55), extractMInt( getParentValue(R1, RSMap), 54, 55)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 53, 54), extractMInt( getParentValue(R1, RSMap), 53, 54)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 52, 53), extractMInt( getParentValue(R1, RSMap), 52, 53)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 51, 52), extractMInt( getParentValue(R1, RSMap), 51, 52)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 50, 51), extractMInt( getParentValue(R1, RSMap), 50, 51)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 49, 50), extractMInt( getParentValue(R1, RSMap), 49, 50)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( getParentValue(R1, RSMap), 48, 49))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// andb-rh-rh-semantics


// movw-r16-r16

  rule <k>
    execinstr (movw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( getParentValue(R1, RSMap), 48, 64))
)

    </regstate>
    


// movw-r16-r16-semantics


// idivw-r16

  rule <k>
    execinstr (idivw R1:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), idiv_quotient_int16(concatenateMInt( extractMInt( getParentValue(%rdx, RSMap), 48, 64), extractMInt( getParentValue(%rax, RSMap), 48, 64)), extractMInt( getParentValue(R1, RSMap), 48, 64)))

"RDX" |-> concatenateMInt( extractMInt( getParentValue(%rdx, RSMap), 0, 48), idiv_remainder_int16(concatenateMInt( extractMInt( getParentValue(%rdx, RSMap), 48, 64), extractMInt( getParentValue(%rax, RSMap), 48, 64)), extractMInt( getParentValue(R1, RSMap), 48, 64)))

"CF" |-> (undefMInt)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// idivw-r16-semantics


// vmovsd-xmm-xmm-xmm

  rule <k>
    execinstr (vmovsd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 192, 256)))
)

    </regstate>
    


// vmovsd-xmm-xmm-xmm-semantics


// maxps-xmm-xmm

  rule <k>
    execinstr (maxps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt eqMInt( maxcmp_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R1, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt eqMInt( maxcmp_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R1, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt eqMInt( maxcmp_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else extractMInt( getParentValue(R1, RSMap), 192, 224) #fi), (#ifMInt eqMInt( maxcmp_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi)))))
)

    </regstate>
    


// maxps-xmm-xmm-semantics


// vfmadd213pd-xmm-xmm-xmm

  rule <k>
    execinstr (vfmadd213pd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 128, 192), vfnmsub132_double(mi(64, 0), extractMInt( getParentValue(R1, RSMap), 128, 192), mi(64, 0)), extractMInt( getParentValue(R3, RSMap), 128, 192)), vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 192, 256), vfnmsub132_double(mi(64, 0), extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 0)), extractMInt( getParentValue(R3, RSMap), 192, 256))))
)

    </regstate>
    


// vfmadd213pd-xmm-xmm-xmm-semantics


// setng-r8

  rule <k>
    execinstr (setng R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1,1)) orBool (notBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1))))) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setng-r8-semantics


// cmpxchgb-rh-r8

  rule <k>
    execinstr (cmpxchgb R1:R8, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> (#ifMInt eqMInt( extractMInt( getParentValue(%rax, RSMap), 56, 64), extractMInt( getParentValue(R2, RSMap), 48, 56)) #then getParentValue(%rax, RSMap) #else concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 56), extractMInt( getParentValue(R2, RSMap), 48, 56)) #fi)

convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt eqMInt( extractMInt( getParentValue(%rax, RSMap), 56, 64), extractMInt( getParentValue(R2, RSMap), 48, 56)) #then extractMInt( getParentValue(R1, RSMap), 56, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 56) #fi)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 51, 52), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (cmpxchgb R1:R8, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
        convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R2, RSMap), 48, 56)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 56) #fi)), (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R2, RSMap), 48, 56)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 56) #fi))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 51, 52), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
      requires sameRegisters(R1, R2)
  


// cmpxchgb-rh-r8-semantics


// cmpb-rh-r8

  rule <k>
    execinstr (cmpb R1:R8, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 51, 52)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// cmpb-rh-r8-semantics


// rclb-rh-cl

  rule <k>
    execinstr (rclb %cl, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 1)) andBool (eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rclb-rh-cl-semantics


// vcomiss-xmm-xmm

  rule <k>
    execinstr (vcomiss R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(2, 0)) orBool eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(2, 2))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(2, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt (eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(2, 0)) orBool eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(2, 3))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// vcomiss-xmm-xmm-semantics


// negl-r32

  rule <k>
    execinstr (negl R1:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( mi(32, 0), addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), 31, 32), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), 25, 26), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), 24, 25), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), 27, 28), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt eqMInt( addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) andBool eqMInt( extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// negl-r32-semantics


// pmovzxwq-xmm-xmm

  rule <k>
    execinstr (pmovzxwq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( mi(48, 0), extractMInt( getParentValue(R1, RSMap), 224, 240)), concatenateMInt( mi(48, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))))
)

    </regstate>
    


// pmovzxwq-xmm-xmm-semantics


// vfnmsub231ps-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmsub231ps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vfnmsub231ps-xmm-xmm-xmm-semantics


// vtestpd-xmm-xmm

  rule <k>
    execinstr (vtestpd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 192, 193)), extractMInt( getParentValue(R1, RSMap), 192, 193)), mi(1, 0)) andBool eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 128, 129)), extractMInt( getParentValue(R1, RSMap), 128, 129)), mi(1, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> mi(1, 0)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt (eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 192, 193), extractMInt( getParentValue(R1, RSMap), 192, 193)), mi(1, 0)) andBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 128, 129), extractMInt( getParentValue(R1, RSMap), 128, 129)), mi(1, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// vtestpd-xmm-xmm-semantics


// vfmsub231ps-xmm-xmm-xmm

  rule <k>
    execinstr (vfmsub231ps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vfmsub231ps-xmm-xmm-xmm-semantics


// xchgb-r8-r8

  rule <k>
    execinstr (xchgb R1:R8, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), extractMInt( getParentValue(R2, RSMap), 56, 64))

convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (xchgb R1:R8, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
        convToRegKeys(R2) |-> getParentValue(R2, RSMap)
      )
    </regstate>
      requires sameRegisters(R1, R2)
  


// xchgb-r8-r8-semantics


// sarb-r8-one

  rule <k>
    execinstr (sarb $0x1, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 0, 8))

"CF" |-> extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 8, 9)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 0, 1), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 0, 8), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(mi(9, 1))), 0, 1)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// sarb-r8-one-semantics


// vfmadd132pd-ymm-ymm-ymm

  rule <k>
    execinstr (vfmadd132pd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( vfmadd132_double(extractMInt( getParentValue(R3, RSMap), 0, 64), extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), concatenateMInt( vfmadd132_double(extractMInt( getParentValue(R3, RSMap), 64, 128), extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128)), concatenateMInt( vfmadd132_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfmadd132_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)))))
)

    </regstate>
    


// vfmadd132pd-ymm-ymm-ymm-semantics


// rorb-rh-one

  rule <k>
    execinstr (rorb $0x1, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), ror( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(8, 1))), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(8, 1)), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(8, 1)), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(8, 1)), 1, 2), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rorb-rh-one-semantics


// vmaxpd-xmm-xmm-xmm

  rule <k>
    execinstr (vmaxpd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( maxcmp_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 192) #else extractMInt( getParentValue(R1, RSMap), 128, 192) #fi), (#ifMInt eqMInt( maxcmp_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 256) #else extractMInt( getParentValue(R1, RSMap), 192, 256) #fi)))
)

    </regstate>
    


// vmaxpd-xmm-xmm-xmm-semantics


// cmovnel-r32-r32

  rule <k>
    execinstr (cmovnel R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt (notBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovnel-r32-r32-semantics


// vfnmsub213pd-ymm-ymm-ymm

  rule <k>
    execinstr (vfnmsub213pd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( vfnmsub132_double(extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64), extractMInt( getParentValue(R3, RSMap), 0, 64)), concatenateMInt( vfnmsub132_double(extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128), extractMInt( getParentValue(R3, RSMap), 64, 128)), concatenateMInt( vfnmsub132_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192), extractMInt( getParentValue(R3, RSMap), 128, 192)), vfnmsub132_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R3, RSMap), 192, 256)))))
)

    </regstate>
    


// vfnmsub213pd-ymm-ymm-ymm-semantics


// vfmadd132ps-xmm-xmm-xmm

  rule <k>
    execinstr (vfmadd132ps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vfmadd132ps-xmm-xmm-xmm-semantics


// setge-rh

  rule <k>
    execinstr (setge R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setge-rh-semantics


// vpmaxuw-ymm-ymm-ymm

  rule <k>
    execinstr (vpmaxuw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 0, 16), extractMInt( getParentValue(R1, RSMap), 0, 16)) #then extractMInt( getParentValue(R2, RSMap), 0, 16) #else extractMInt( getParentValue(R1, RSMap), 0, 16) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 16, 32), extractMInt( getParentValue(R1, RSMap), 16, 32)) #then extractMInt( getParentValue(R2, RSMap), 16, 32) #else extractMInt( getParentValue(R1, RSMap), 16, 32) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 32, 48), extractMInt( getParentValue(R1, RSMap), 32, 48)) #then extractMInt( getParentValue(R2, RSMap), 32, 48) #else extractMInt( getParentValue(R1, RSMap), 32, 48) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 48, 64)) #then extractMInt( getParentValue(R2, RSMap), 48, 64) #else extractMInt( getParentValue(R1, RSMap), 48, 64) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 64, 80), extractMInt( getParentValue(R1, RSMap), 64, 80)) #then extractMInt( getParentValue(R2, RSMap), 64, 80) #else extractMInt( getParentValue(R1, RSMap), 64, 80) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 80, 96), extractMInt( getParentValue(R1, RSMap), 80, 96)) #then extractMInt( getParentValue(R2, RSMap), 80, 96) #else extractMInt( getParentValue(R1, RSMap), 80, 96) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 96, 112), extractMInt( getParentValue(R1, RSMap), 96, 112)) #then extractMInt( getParentValue(R2, RSMap), 96, 112) #else extractMInt( getParentValue(R1, RSMap), 96, 112) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 112, 128), extractMInt( getParentValue(R1, RSMap), 112, 128)) #then extractMInt( getParentValue(R2, RSMap), 112, 128) #else extractMInt( getParentValue(R1, RSMap), 112, 128) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)) #then extractMInt( getParentValue(R2, RSMap), 128, 144) #else extractMInt( getParentValue(R1, RSMap), 128, 144) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)) #then extractMInt( getParentValue(R2, RSMap), 144, 160) #else extractMInt( getParentValue(R1, RSMap), 144, 160) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)) #then extractMInt( getParentValue(R2, RSMap), 160, 176) #else extractMInt( getParentValue(R1, RSMap), 160, 176) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)) #then extractMInt( getParentValue(R2, RSMap), 176, 192) #else extractMInt( getParentValue(R1, RSMap), 176, 192) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)) #then extractMInt( getParentValue(R2, RSMap), 192, 208) #else extractMInt( getParentValue(R1, RSMap), 192, 208) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)) #then extractMInt( getParentValue(R2, RSMap), 208, 224) #else extractMInt( getParentValue(R1, RSMap), 208, 224) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)) #then extractMInt( getParentValue(R2, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 224, 240) #fi), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R2, RSMap), 240, 256) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))))))))))))))))
)

    </regstate>
    


// vpmaxuw-ymm-ymm-ymm-semantics


// vfnmadd231ps-ymm-ymm-ymm

  rule <k>
    execinstr (vfnmadd231ps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R3, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R3, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R3, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R3, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128))))), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfnmadd132_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vfnmadd231ps-ymm-ymm-ymm-semantics


// vphsubd-ymm-ymm-ymm

  rule <k>
    execinstr (vphsubd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 0, 32)), subMInt( extractMInt( getParentValue(R1, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 64, 96))), subMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R2, RSMap), 0, 32))), subMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R2, RSMap), 64, 96))), concatenateMInt( concatenateMInt( concatenateMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 128, 160)), subMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 192, 224))), subMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 128, 160))), subMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 192, 224))))
)

    </regstate>
    


// vphsubd-ymm-ymm-ymm-semantics


// vmovd-r32-xmm

  rule <k>
    execinstr (vmovd R1:Xmm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 224, 256))
)

    </regstate>
    


// vmovd-r32-xmm-semantics


// vpunpcklwd-ymm-ymm-ymm

  rule <k>
    execinstr (vpunpcklwd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 64, 80), extractMInt( getParentValue(R2, RSMap), 64, 80)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 80, 96), extractMInt( getParentValue(R2, RSMap), 80, 96)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 96, 112), extractMInt( getParentValue(R2, RSMap), 96, 112)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 112, 128), extractMInt( getParentValue(R2, RSMap), 112, 128)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), extractMInt( getParentValue(R2, RSMap), 240, 256)))))))))
)

    </regstate>
    


// vpunpcklwd-ymm-ymm-ymm-semantics


// pmovsxwd-xmm-xmm

  rule <k>
    execinstr (pmovsxwd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208))), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224))), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))))))
)

    </regstate>
    


// pmovsxwd-xmm-xmm-semantics


// vpminud-xmm-xmm-xmm

  rule <k>
    execinstr (vpminud R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R1, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R1, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else extractMInt( getParentValue(R1, RSMap), 192, 224) #fi), (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi)))))
)

    </regstate>
    


// vpminud-xmm-xmm-xmm-semantics


// setnp-rh

  rule <k>
    execinstr (setnp R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt (notBool eqMInt(getFlag("PF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setnp-rh-semantics


// vpcmpeqd-xmm-xmm-xmm

  rule <k>
    execinstr (vpcmpeqd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)) #then mi(32, 4294967295) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)) #then mi(32, 4294967295) #else mi(32, 0) #fi)))))
)

    </regstate>
    


// vpcmpeqd-xmm-xmm-xmm-semantics


// vfmaddsub213pd-ymm-ymm-ymm

  rule <k>
    execinstr (vfmaddsub213pd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfmadd213_double(extractMInt( getParentValue(R3, RSMap), 0, 64), extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), vfmsub213_double(extractMInt( getParentValue(R3, RSMap), 64, 128), extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128))), concatenateMInt( vfmadd213_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfmsub213_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfmaddsub213pd-ymm-ymm-ymm-semantics


// vpmovzxbw-ymm-xmm

  rule <k>
    execinstr (vpmovzxbw R1:Xmm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 128, 136)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 136, 144)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 144, 152)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 152, 160)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 160, 168)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 168, 176)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 176, 184)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 184, 192)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 192, 200)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 200, 208)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 208, 216)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 216, 224)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 224, 232)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 232, 240)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 240, 248)), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 248, 256)))))))))))))))))
)

    </regstate>
    


// vpmovzxbw-ymm-xmm-semantics


// cmovlel-r32-r32

  rule <k>
    execinstr (cmovlel R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1,1)) orBool (notBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1))))) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovlel-r32-r32-semantics


// setnae-r8

  rule <k>
    execinstr (setnae R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setnae-r8-semantics


// negw-r16

  rule <k>
    execinstr (negw R1:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), 15, 16), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), 9, 10), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), 8, 9), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), 11, 12), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt eqMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) andBool eqMInt( extractMInt( addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// negw-r16-semantics


// vaddsd-xmm-xmm-xmm

  rule <k>
    execinstr (vaddsd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), add_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vaddsd-xmm-xmm-xmm-semantics


// psrlq-xmm-xmm

  rule <k>
    execinstr (psrlq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 63)) #then mi(128, 0) #else concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 256))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 256)))) #fi))
)

    </regstate>
    


// psrlq-xmm-xmm-semantics


// vphsubsw-xmm-xmm-xmm

  rule <k>
    execinstr (vphsubsw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208)))), 16, 32) #fi) #fi), (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))), 16, 32) #fi) #fi)))))))))
)

    </regstate>
    


// vphsubsw-xmm-xmm-xmm-semantics


// phaddw-xmm-xmm

  rule <k>
    execinstr (phaddw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 144, 160)), addMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 176, 192))), addMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 208, 224))), addMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256))), addMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R2, RSMap), 144, 160))), addMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R2, RSMap), 176, 192))), addMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R2, RSMap), 208, 224))), addMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R2, RSMap), 240, 256))))
)

    </regstate>
    


// phaddw-xmm-xmm-semantics


// unpckhps-xmm-xmm

  rule <k>
    execinstr (unpckhps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160)), extractMInt( getParentValue(R1, RSMap), 160, 192)), extractMInt( getParentValue(R2, RSMap), 160, 192)))
)

    </regstate>
    


// unpckhps-xmm-xmm-semantics


// psrlw-xmm-xmm

  rule <k>
    execinstr (psrlw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(128, 0) #else concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))))))))) #fi))
)

    </regstate>
    


// psrlw-xmm-xmm-semantics


// setle-rh

  rule <k>
    execinstr (setle R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1,1)) orBool (notBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1))))) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setle-rh-semantics


// vcvtsd2ss-xmm-xmm-xmm

  rule <k>
    execinstr (vcvtsd2ss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 224), cvt_double_to_single(extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vcvtsd2ss-xmm-xmm-xmm-semantics


// vpunpcklbw-ymm-ymm-ymm

  rule <k>
    execinstr (vpunpcklbw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 64, 72), extractMInt( getParentValue(R2, RSMap), 64, 72)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 72, 80), extractMInt( getParentValue(R2, RSMap), 72, 80)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 80, 88), extractMInt( getParentValue(R2, RSMap), 80, 88)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 88, 96), extractMInt( getParentValue(R2, RSMap), 88, 96)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 96, 104), extractMInt( getParentValue(R2, RSMap), 96, 104)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 104, 112), extractMInt( getParentValue(R2, RSMap), 104, 112)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 112, 120), extractMInt( getParentValue(R2, RSMap), 112, 120)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 120, 128), extractMInt( getParentValue(R2, RSMap), 120, 128)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 200), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 200, 208), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 208, 216), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 216, 224), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 232), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 232, 240), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 248), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), extractMInt( getParentValue(R2, RSMap), 248, 256)))))))))))))))))
)

    </regstate>
    


// vpunpcklbw-ymm-ymm-ymm-semantics


// psadbw-xmm-xmm

  rule <k>
    execinstr (psadbw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( mi(48, 0), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 128, 136), extractMInt( getParentValue(R2, RSMap), 128, 136)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 136, 144), extractMInt( getParentValue(R2, RSMap), 136, 144)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 144, 152), extractMInt( getParentValue(R2, RSMap), 144, 152)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 152, 160), extractMInt( getParentValue(R2, RSMap), 152, 160)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 160, 168), extractMInt( getParentValue(R2, RSMap), 160, 168)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 168, 176), extractMInt( getParentValue(R2, RSMap), 168, 176)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 176, 184), extractMInt( getParentValue(R2, RSMap), 176, 184)) #fi)), concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 184, 192), extractMInt( getParentValue(R2, RSMap), 184, 192)) #fi)))))))))), concatenateMInt( mi(48, 0), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 192, 200), extractMInt( getParentValue(R2, RSMap), 192, 200)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 200, 208), extractMInt( getParentValue(R2, RSMap), 200, 208)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 208, 216), extractMInt( getParentValue(R2, RSMap), 208, 216)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 216, 224), extractMInt( getParentValue(R2, RSMap), 216, 224)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 224, 232), extractMInt( getParentValue(R2, RSMap), 224, 232)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 232, 240), extractMInt( getParentValue(R2, RSMap), 232, 240)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 240, 248), extractMInt( getParentValue(R2, RSMap), 240, 248)) #fi)), concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), extractMInt( getParentValue(R2, RSMap), 248, 256)) #fi))))))))))))
)

    </regstate>
    


// psadbw-xmm-xmm-semantics


// movslq-r64-r32

  rule <k>
    execinstr (movslq R1:R32, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 64)))
)

    </regstate>
    


// movslq-r64-r32-semantics


// movddup-xmm-xmm

  rule <k>
    execinstr (movddup R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)))
)

    </regstate>
    


// movddup-xmm-xmm-semantics


// vphaddsw-ymm-ymm-ymm

  rule <k>
    execinstr (vphaddsw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 16))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 32)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 16))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 32)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 16))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 32)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 48))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 48))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 48))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 80))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 96)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 80))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 96)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 80))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 96)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 112))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 128)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 112))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 128)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 112))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 128)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 16))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 32)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 16))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 32)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 16))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 32)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 48))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 48))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 48))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 80))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 96)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 80))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 96)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 80))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 96)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 112))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 128)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 112))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 128)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 112))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 128)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224)))), 16, 32) #fi) #fi), (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))), 16, 32) #fi) #fi))))))))))))))))
)

    </regstate>
    


// vphaddsw-ymm-ymm-ymm-semantics


// vcomisd-xmm-xmm

  rule <k>
    execinstr (vcomisd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 0)) orBool eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 2))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt (eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 0)) orBool eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 3))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// vcomisd-xmm-xmm-semantics


// vfmadd231pd-xmm-xmm-xmm

  rule <k>
    execinstr (vfmadd231pd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 128, 192), vfnmsub132_double(mi(64, 0), extractMInt( getParentValue(R3, RSMap), 128, 192), mi(64, 0)), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 192, 256), vfnmsub132_double(mi(64, 0), extractMInt( getParentValue(R3, RSMap), 192, 256), mi(64, 0)), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfmadd231pd-xmm-xmm-xmm-semantics


// vpand-ymm-ymm-ymm

  rule <k>
    execinstr (vpand R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> andMInt( getParentValue(R2, RSMap), getParentValue(R1, RSMap))
)

    </regstate>
    


// vpand-ymm-ymm-ymm-semantics


// incl-r32

  rule <k>
    execinstr (incl R1:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( mi(32, 0), addMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)))

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 31, 32), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 25, 26), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 24, 25), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 15)) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt eqMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 0, 1)

"OF" |-> (#ifMInt ((notBool eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1))) andBool eqMInt( extractMInt( getParentValue(R1, RSMap), 33, 64), mi(31, 18446744073709551615))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// incl-r32-semantics


// xorps-xmm-xmm

  rule <k>
    execinstr (xorps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), xorMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// xorps-xmm-xmm-semantics


// vpmovmskb-r32-xmm

  rule <k>
    execinstr (vpmovmskb R1:Xmm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(48, 0), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 129), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 136, 137), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 144, 145), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 152, 153), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 161), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 168, 169), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 176, 177), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 184, 185), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 193), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 200, 201), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 208, 209), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 216, 217), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 225), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 232, 233), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 241), extractMInt( getParentValue(R1, RSMap), 248, 249)))))))))))))))))
)

    </regstate>
    


// vpmovmskb-r32-xmm-semantics


// shrq-r64-one

  rule <k>
    execinstr (shrq $0x1, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 0, 64)

"CF" |-> extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 64, 65)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 63, 64), mi(1, 1)) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 57, 58), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 56, 57), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 0, 64), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 0, 1)

"OF" |-> extractMInt( getParentValue(R2, RSMap), 0, 1)
)

    </regstate>
    


// shrq-r64-one-semantics


// vpermd-ymm-ymm-ymm

  rule <k>
    execinstr (vpermd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( lshrMInt( getParentValue(R1, RSMap), uvalueMInt(mulMInt( concatenateMInt( mi(253, 0), extractMInt( getParentValue(R2, RSMap), 29, 32)), mi(256, 32)))), 224, 256), concatenateMInt( extractMInt( lshrMInt( getParentValue(R1, RSMap), uvalueMInt(mulMInt( concatenateMInt( mi(253, 0), extractMInt( getParentValue(R2, RSMap), 61, 64)), mi(256, 32)))), 224, 256), concatenateMInt( extractMInt( lshrMInt( getParentValue(R1, RSMap), uvalueMInt(mulMInt( concatenateMInt( mi(253, 0), extractMInt( getParentValue(R2, RSMap), 93, 96)), mi(256, 32)))), 224, 256), concatenateMInt( extractMInt( lshrMInt( getParentValue(R1, RSMap), uvalueMInt(mulMInt( concatenateMInt( mi(253, 0), extractMInt( getParentValue(R2, RSMap), 125, 128)), mi(256, 32)))), 224, 256), concatenateMInt( extractMInt( lshrMInt( getParentValue(R1, RSMap), uvalueMInt(mulMInt( concatenateMInt( mi(253, 0), extractMInt( getParentValue(R2, RSMap), 157, 160)), mi(256, 32)))), 224, 256), concatenateMInt( extractMInt( lshrMInt( getParentValue(R1, RSMap), uvalueMInt(mulMInt( concatenateMInt( mi(253, 0), extractMInt( getParentValue(R2, RSMap), 189, 192)), mi(256, 32)))), 224, 256), concatenateMInt( extractMInt( lshrMInt( getParentValue(R1, RSMap), uvalueMInt(mulMInt( concatenateMInt( mi(253, 0), extractMInt( getParentValue(R2, RSMap), 221, 224)), mi(256, 32)))), 224, 256), extractMInt( lshrMInt( getParentValue(R1, RSMap), uvalueMInt(mulMInt( concatenateMInt( mi(253, 0), extractMInt( getParentValue(R2, RSMap), 253, 256)), mi(256, 32)))), 224, 256))))))))
)

    </regstate>
    


// vpermd-ymm-ymm-ymm-semantics


// xchgw-r16-r16

  rule <k>
    execinstr (xchgw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), extractMInt( getParentValue(R2, RSMap), 48, 64))

convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( getParentValue(R1, RSMap), 48, 64))
)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (xchgw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
        convToRegKeys(R2) |-> getParentValue(R2, RSMap)
      )
    </regstate>
      requires sameRegisters(R1, R2)
  


// xchgw-r16-r16-semantics


// vfmsub231pd-xmm-xmm-xmm

  rule <k>
    execinstr (vfmsub231pd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfmsub231pd-xmm-xmm-xmm-semantics


// vminps-ymm-ymm-ymm

  rule <k>
    execinstr (vminps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt eqMInt( mincmp_single(extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 0, 32) #else extractMInt( getParentValue(R1, RSMap), 0, 32) #fi), concatenateMInt( (#ifMInt eqMInt( mincmp_single(extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 32, 64) #else extractMInt( getParentValue(R1, RSMap), 32, 64) #fi), concatenateMInt( (#ifMInt eqMInt( mincmp_single(extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 64, 96) #else extractMInt( getParentValue(R1, RSMap), 64, 96) #fi), concatenateMInt( (#ifMInt eqMInt( mincmp_single(extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 96, 128) #else extractMInt( getParentValue(R1, RSMap), 96, 128) #fi), concatenateMInt( (#ifMInt eqMInt( mincmp_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R1, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt eqMInt( mincmp_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R1, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt eqMInt( mincmp_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else extractMInt( getParentValue(R1, RSMap), 192, 224) #fi), (#ifMInt eqMInt( mincmp_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))))))))
)

    </regstate>
    


// vminps-ymm-ymm-ymm-semantics


// vmovups-ymm-ymm

  rule <k>
    execinstr (vmovups R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> getParentValue(R1, RSMap)
)

    </regstate>
    


// vmovups-ymm-ymm-semantics


// mulps-xmm-xmm

  rule <k>
    execinstr (mulps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( mul_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( mul_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( mul_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), mul_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// mulps-xmm-xmm-semantics


// cmovnsq-r64-r64

  rule <k>
    execinstr (cmovnsq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt (notBool eqMInt(getFlag("SF", RSMap), mi(1,1))) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovnsq-r64-r64-semantics


// psubsw-xmm-xmm

  rule <k>
    execinstr (psubsw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), 2, 18) #fi) #fi), (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), 2, 18) #fi) #fi)))))))))
)

    </regstate>
    


// psubsw-xmm-xmm-semantics


// addb-rh-r8

  rule <k>
    execinstr (addb R1:R8, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 51, 52)), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// addb-rh-r8-semantics


// vpaddd-xmm-xmm-xmm

  rule <k>
    execinstr (vpaddd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), addMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vpaddd-xmm-xmm-xmm-semantics


// psllq-xmm-xmm

  rule <k>
    execinstr (psllq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 63)) #then mi(128, 0) #else concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 256))), shlMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 256)))) #fi))
)

    </regstate>
    


// psllq-xmm-xmm-semantics


// imulb-rh

  rule <k>
    execinstr (imulb R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(16, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 56, 64)))))

"CF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(16, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 56, 64)))), mi(16, svalueMInt(extractMInt( mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(16, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 56, 64)))), 8, 16))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(16, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 56, 64)))), mi(16, svalueMInt(extractMInt( mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(16, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 56, 64)))), 8, 16))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// imulb-rh-semantics


// popcntq-r64-r64

  rule <k>
    execinstr (popcntq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> addMInt( concatenateMInt( mi(32, 0), addMInt( concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 0, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 1, 2)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 2, 3)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 3, 4)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 4, 5)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 5, 6)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 6, 7)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 7, 8)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 8, 9)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 9, 10)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 10, 11)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 11, 12)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 12, 13)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 13, 14)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 14, 15)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 15, 16)))))))))), concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 16, 17)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 17, 18)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 18, 19)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 19, 20)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 20, 21)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 21, 22)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 22, 23)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 23, 24)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 24, 25)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 25, 26)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 26, 27)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 27, 28)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 28, 29)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 29, 30)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 30, 31)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 31, 32)))))))))))), concatenateMInt( mi(32, 0), addMInt( concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 33)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 33, 34)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 34, 35)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 35, 36)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 36, 37)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 37, 38)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 38, 39)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 39, 40)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 40, 41)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 41, 42)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 42, 43)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 43, 44)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 44, 45)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 45, 46)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 46, 47)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 47, 48)))))))))), concatenateMInt( mi(16, 0), addMInt( concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 49)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 49, 50)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 50, 51)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 51, 52)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 52, 53)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 53, 54)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 54, 55)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 55, 56)))))))), concatenateMInt( mi(8, 0), addMInt( concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 57)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 57, 58)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 58, 59)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 59, 60)))))), concatenateMInt( mi(4, 0), addMInt( concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 60, 61)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 61, 62)))), concatenateMInt( mi(2, 0), addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 62, 63)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 63, 64)))))))))))))

"CF" |-> mi(1, 0)

"PF" |-> mi(1, 0)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt eqMInt( getParentValue(R1, RSMap), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// popcntq-r64-r64-semantics


// vpacksswb-xmm-xmm-xmm

  rule <k>
    execinstr (vpacksswb R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 136, 144) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 152, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 168, 176) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 184, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 200, 208) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 216, 224) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 232, 240) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 248, 256) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 136, 144) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 152, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 168, 176) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 184, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 200, 208) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 216, 224) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 232, 240) #fi) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi)))))))))))))))))
)

    </regstate>
    


// vpacksswb-xmm-xmm-xmm-semantics


// xorw-r16-r16

  rule <k>
    execinstr (xorw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 48, 64)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( getParentValue(R1, RSMap), 63, 64)), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( getParentValue(R1, RSMap), 62, 63)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( getParentValue(R1, RSMap), 61, 62)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( getParentValue(R1, RSMap), 60, 61)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(R1, RSMap), 59, 60)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( getParentValue(R1, RSMap), 58, 59)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( getParentValue(R1, RSMap), 57, 58)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 48, 64)), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( getParentValue(R1, RSMap), 48, 49))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// xorw-r16-r16-semantics


// cvtsi2sdl-xmm-r32

  rule <k>
    execinstr (cvtsi2sdl R1:R32, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 192), cvt_int32_to_double(extractMInt( getParentValue(R1, RSMap), 32, 64)))
)

    </regstate>
    


// cvtsi2sdl-xmm-r32-semantics


// vpmovsxbd-ymm-xmm

  rule <k>
    execinstr (vpmovsxbd R1:Xmm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200))), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208))), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216))), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224))), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232))), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240))), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256))))))))))
)

    </regstate>
    


// vpmovsxbd-ymm-xmm-semantics


// cmovsq-r64-r64

  rule <k>
    execinstr (cmovsq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt eqMInt(getFlag("SF", RSMap), mi(1,1)) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovsq-r64-r64-semantics


// vpmaxud-ymm-ymm-ymm

  rule <k>
    execinstr (vpmaxud R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)) #then extractMInt( getParentValue(R2, RSMap), 0, 32) #else extractMInt( getParentValue(R1, RSMap), 0, 32) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)) #then extractMInt( getParentValue(R2, RSMap), 32, 64) #else extractMInt( getParentValue(R1, RSMap), 32, 64) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)) #then extractMInt( getParentValue(R2, RSMap), 64, 96) #else extractMInt( getParentValue(R1, RSMap), 64, 96) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128)) #then extractMInt( getParentValue(R2, RSMap), 96, 128) #else extractMInt( getParentValue(R1, RSMap), 96, 128) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R1, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R1, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else extractMInt( getParentValue(R1, RSMap), 192, 224) #fi), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))))))))
)

    </regstate>
    


// vpmaxud-ymm-ymm-ymm-semantics


// vmovmskps-r64-xmm

  rule <k>
    execinstr (vmovmskps R1:Xmm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(60, 0), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 129), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 161), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 193), extractMInt( getParentValue(R1, RSMap), 224, 225)))))
)

    </regstate>
    


// vmovmskps-r64-xmm-semantics


// pmovzxbw-xmm-xmm

  rule <k>
    execinstr (pmovzxbw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 192, 200)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 200, 208)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 208, 216)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 216, 224)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 224, 232)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 232, 240)), concatenateMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 240, 248)), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))))))))))
)

    </regstate>
    


// pmovzxbw-xmm-xmm-semantics


// vpmovsxdq-xmm-xmm

  rule <k>
    execinstr (vpmovsxdq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 224))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256)))))
)

    </regstate>
    


// vpmovsxdq-xmm-xmm-semantics


// vfmsub213ss-xmm-xmm-xmm

  rule <k>
    execinstr (vfmsub213ss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 224), vfmsub213_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vfmsub213ss-xmm-xmm-xmm-semantics


// shlb-rh-cl

  rule <k>
    execinstr (shlb %cl, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 8)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 8))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 9), mi(8, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool (((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 8)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 8))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shlb-rh-cl-semantics


// movdqu-xmm-xmm

  rule <k>
    execinstr (movdqu R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), extractMInt( getParentValue(R1, RSMap), 128, 256))
)

    </regstate>
    


// movdqu-xmm-xmm-semantics


// movsbl-r32-rh

  rule <k>
    execinstr (movsbl R1:Rh, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56))))
)

    </regstate>
    


// movsbl-r32-rh-semantics


// setb-rh

  rule <k>
    execinstr (setb R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setb-rh-semantics


// vpaddsw-xmm-xmm-xmm

  rule <k>
    execinstr (vpaddsw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), 16, 32) #fi) #fi), (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), 16, 32) #fi) #fi)))))))))
)

    </regstate>
    


// vpaddsw-xmm-xmm-xmm-semantics


// mulq-r64

  rule <k>
    execinstr (mulq R1:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> extractMInt( mulMInt( concatenateMInt( mi(64, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(64, 0), getParentValue(%rax, RSMap))), 64, 128)

"RDX" |-> extractMInt( mulMInt( concatenateMInt( mi(64, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(64, 0), getParentValue(%rax, RSMap))), 0, 64)

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( mulMInt( concatenateMInt( mi(64, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(64, 0), getParentValue(%rax, RSMap))), 0, 64), mi(64, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( extractMInt( mulMInt( concatenateMInt( mi(64, 0), getParentValue(R1, RSMap)), concatenateMInt( mi(64, 0), getParentValue(%rax, RSMap))), 0, 64), mi(64, 0))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// mulq-r64-semantics


// xchgq-r64-r64

  rule <k>
    execinstr (xchgq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> getParentValue(R2, RSMap)

convToRegKeys(R2) |-> getParentValue(R1, RSMap)
)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (xchgq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
        convToRegKeys(R2) |-> getParentValue(R1, RSMap)
      )
    </regstate>
      requires sameRegisters(R1, R2)
  


// xchgq-r64-r64-semantics


// cmovnlw-r16-r16

  rule <k>
    execinstr (cmovnlw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovnlw-r16-r16-semantics


// vpcmpgtd-xmm-xmm-xmm

  rule <k>
    execinstr (vpcmpgtd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)) #then mi(32, 4294967295) #else mi(32, 0) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)) #then mi(32, 4294967295) #else mi(32, 0) #fi)))))
)

    </regstate>
    


// vpcmpgtd-xmm-xmm-xmm-semantics


// cmovngew-r16-r16

  rule <k>
    execinstr (cmovngew R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt (notBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1)))) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovngew-r16-r16-semantics


// cmovpw-r16-r16

  rule <k>
    execinstr (cmovpw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt eqMInt(getFlag("PF", RSMap), mi(1,1)) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovpw-r16-r16-semantics


// bswap-r64

  rule <k>
    execinstr (bswap R1:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 40, 48), extractMInt( getParentValue(R1, RSMap), 32, 40))), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 24, 32), extractMInt( getParentValue(R1, RSMap), 16, 24)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 8, 16), extractMInt( getParentValue(R1, RSMap), 0, 8))))
)

    </regstate>
    


// bswap-r64-semantics


// vrsqrtps-ymm-ymm

  rule <k>
    execinstr (vrsqrtps R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( approx_reciprocal_sqrt_single(extractMInt( getParentValue(R1, RSMap), 0, 32)), concatenateMInt( approx_reciprocal_sqrt_single(extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( approx_reciprocal_sqrt_single(extractMInt( getParentValue(R1, RSMap), 64, 96)), concatenateMInt( approx_reciprocal_sqrt_single(extractMInt( getParentValue(R1, RSMap), 96, 128)), concatenateMInt( approx_reciprocal_sqrt_single(extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( approx_reciprocal_sqrt_single(extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( approx_reciprocal_sqrt_single(extractMInt( getParentValue(R1, RSMap), 192, 224)), approx_reciprocal_sqrt_single(extractMInt( getParentValue(R1, RSMap), 224, 256)))))))))
)

    </regstate>
    


// vrsqrtps-ymm-ymm-semantics


// psraw-xmm-xmm

  rule <k>
    execinstr (psraw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), ashrMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)))))))))))
)

    </regstate>
    


// psraw-xmm-xmm-semantics


// vucomisd-xmm-xmm

  rule <k>
    execinstr (vucomisd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 0)) orBool eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 2))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt (eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 0)) orBool eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 3))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// vucomisd-xmm-xmm-semantics


// cmpxchgb-r8-r8

  rule <k>
    execinstr (cmpxchgb R1:R8, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> (#ifMInt eqMInt( extractMInt( getParentValue(%rax, RSMap), 56, 64), extractMInt( getParentValue(R2, RSMap), 56, 64)) #then getParentValue(%rax, RSMap) #else concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 56), extractMInt( getParentValue(R2, RSMap), 56, 64)) #fi)

convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), (#ifMInt eqMInt( extractMInt( getParentValue(%rax, RSMap), 56, 64), extractMInt( getParentValue(R2, RSMap), 56, 64)) #then extractMInt( getParentValue(R1, RSMap), 56, 64) #else extractMInt( getParentValue(R2, RSMap), 56, 64) #fi))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 56, 57)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 56, 57)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (cmpxchgb R1:R8, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
        convToRegKeys(R2) |-> getParentValue(R2, RSMap)

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5)

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 56, 57)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 56, 57)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
      requires sameRegisters(R1, R2)
  


// cmpxchgb-r8-r8-semantics


// vfmadd231ss-xmm-xmm-xmm

  rule <k>
    execinstr (vfmadd231ss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 224), vfmadd132_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vfmadd231ss-xmm-xmm-xmm-semantics


// vpmaddubsw-ymm-ymm-ymm

  rule <k>
    execinstr (vpmaddubsw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 8, 16))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 8, 16))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 8))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 0, 8)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 8, 16))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 8, 16))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 8))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 0, 8)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 8, 16))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 8, 16))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 8))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 0, 8)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 24, 32))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 24, 32))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 24))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 16, 24)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 24, 32))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 24, 32))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 24))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 16, 24)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 24, 32))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 24, 32))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 24))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 16, 24)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 40, 48))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 40, 48))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 40))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 32, 40)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 40, 48))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 40, 48))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 40))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 32, 40)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 40, 48))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 40, 48))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 40))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 32, 40)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 56, 64))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 56, 64))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 56, 64))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 56))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 72, 80))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 72, 80))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 72))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 64, 72)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 72, 80))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 72, 80))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 72))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 64, 72)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 72, 80))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 72, 80))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 72))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 64, 72)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 88, 96))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 88, 96))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 88))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 80, 88)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 88, 96))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 88, 96))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 88))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 80, 88)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 88, 96))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 88, 96))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 88))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 80, 88)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 104, 112))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 104, 112))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 104))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 96, 104)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 104, 112))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 104, 112))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 104))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 96, 104)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 104, 112))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 104, 112))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 104))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 96, 104)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 120, 128))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 120, 128))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 120))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 112, 120)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 120, 128))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 120, 128))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 120))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 112, 120)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 120, 128))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 120, 128))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 120))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 112, 120)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 136, 144))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 136, 144))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 136, 144))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 152, 160))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 152, 160))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 152, 160))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 168, 176))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 168, 176))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 168, 176))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 184, 192))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 184, 192))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 184, 192))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 200, 208))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 200, 208))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 200, 208))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 216, 224))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 216, 224))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 216, 224))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 232, 240))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 232, 240))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 232, 240))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)))))), 16, 32) #fi) #fi), (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 248, 256))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 248, 256))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 248, 256))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)))))), 16, 32) #fi) #fi))))))))))))))))
)

    </regstate>
    


// vpmaddubsw-ymm-ymm-ymm-semantics


/*
TEMP ← SRC1;
MASK ← SRC2;
DEST ← 0 ;
m← 0, k← 0;
DO WHILE m< OperandSize
    IF MASK[ m] = 1 THEN
        DEST[ m] ← TEMP[ k];
        k ← k+ 1;
    FI
    m ← m+ 1;
OD
*/

// pdepl-r32-r32-r32

  rule <k>
    execinstr (pdepl R1:R32, R2:R32, R3:R32, .Operands) => 
      setRegisterValue(mi(32, 0), R3) ~> parallelBitDeposit(getRegisterValue(R1,
            RSMap), R2, R3, 0, 0)
  ...</k>
    <regstate> RSMap:Map </regstate>


  syntax KItem ::= parallelBitDeposit(MInt, Register, Register, Int, Int)

  // Base Condition
  rule <k>
    parallelBitDeposit(Mask:MInt, TempR:Register, DestR:Register, 31:Int, K:Int) => 
      setRegisterBitsAtPositon(getRegisterBitsAtPositon(TempR, 1, K, RSMap),
          DestR, 31)
  ...</k>  
    <regstate> RSMap:Map </regstate>
      requires eqMInt( extractMInt(Mask, 0, 1), mi(1, 1))

  rule <k>
    parallelBitDeposit(Mask:MInt, TempR:Register, DestR:Register, 31:Int, K:Int) => 
    .
  ...</k>  
    requires eqMInt( extractMInt(Mask, 0, 1), mi(1, 0))

  // General Condition
  rule <k>
    parallelBitDeposit(Mask:MInt, TempR:Register, DestR:Register, M:Int, K:Int) => 
      setRegisterBitsAtPositon(getRegisterBitsAtPositon(TempR, 1, K, RSMap), DestR, M)
  ~>  parallelBitDeposit(Mask, TempR, DestR, M +Int 1, K +Int 1)
  ...</k>  
    <regstate> RSMap:Map </regstate>
      requires eqMInt( extractMInt(Mask, 31 -Int M, 32 -Int M), mi(1, 1))
      
  rule <k>
    parallelBitDeposit(Mask:MInt, TempR:Register, DestR:Register, M:Int, K:Int) => 
        parallelBitDeposit(Mask, TempR, DestR, M +Int 1, K)
  ...</k>  
    requires eqMInt( extractMInt(Mask, 31 -Int M, 32 -Int M), mi(1, 0))




// vfnmsub132pd-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmsub132pd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfnmsub132_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfnmsub132_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfnmsub132pd-xmm-xmm-xmm-semantics


// bswap-r32

  rule <k>
    execinstr (bswap R1:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 40, 48), extractMInt( getParentValue(R1, RSMap), 32, 40)))
)

    </regstate>
    


// bswap-r32-semantics


// decb-rh

  rule <k>
    execinstr (decb R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), subMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 1))), extractMInt( getParentValue(R1, RSMap), 56, 64))

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 1)), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 1)), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 1)), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 1)), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 1)), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 1)), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 1)), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 1)), 0, 1), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 56), mi(4, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt eqMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 1)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 1)), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) andBool eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 56), mi(7, 0))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// decb-rh-semantics


// vfmaddsub132pd-ymm-ymm-ymm

  rule <k>
    execinstr (vfmaddsub132pd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfmadd132_double(extractMInt( getParentValue(R3, RSMap), 0, 64), extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), vfmsub132_double(extractMInt( getParentValue(R3, RSMap), 64, 128), extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128))), concatenateMInt( vfmadd132_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfmsub132_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfmaddsub132pd-ymm-ymm-ymm-semantics


// vfmsubadd231ps-xmm-xmm-xmm

  rule <k>
    execinstr (vfmsubadd231ps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( vfmsub231_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), vfmadd231_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192))), concatenateMInt( vfmsub231_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfmadd231_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))))
)

    </regstate>
    


// vfmsubadd231ps-xmm-xmm-xmm-semantics


// cmovbl-r32-r32

  rule <k>
    execinstr (cmovbl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovbl-r32-r32-semantics


// cmovleq-r64-r64

  rule <k>
    execinstr (cmovleq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1,1)) orBool (notBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1))))) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovleq-r64-r64-semantics


// vfnmsub213ps-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmsub213ps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160), extractMInt( getParentValue(R3, RSMap), 128, 160)), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R3, RSMap), 160, 192)), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224), extractMInt( getParentValue(R3, RSMap), 192, 224)), vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R3, RSMap), 224, 256))))))
)

    </regstate>
    


// vfnmsub213ps-xmm-xmm-xmm-semantics


// vmulpd-ymm-ymm-ymm

  rule <k>
    execinstr (vmulpd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mul_double(extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), concatenateMInt( mul_double(extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128)), concatenateMInt( mul_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), mul_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)))))
)

    </regstate>
    


// vmulpd-ymm-ymm-ymm-semantics


// rolw-r16-one

  rule <k>
    execinstr (rolw $0x1, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), rol( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(16, 1)))

"CF" |-> extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(16, 1)), 15, 16)

"OF" |-> (#ifMInt (eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(16, 1)), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(16, 1)), 15, 16), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rolw-r16-one-semantics


// cmovgq-r64-r64

  rule <k>
    execinstr (cmovgq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt ((notBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) andBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1)))) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovgq-r64-r64-semantics


// cmovnbel-r32-r32

  rule <k>
    execinstr (cmovnbel R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt ((notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) andBool (notBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovnbel-r32-r32-semantics


// andl-r32-r32

  rule <k>
    execinstr (andl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), andMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( getParentValue(R1, RSMap), 63, 64)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( getParentValue(R1, RSMap), 62, 63)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( getParentValue(R1, RSMap), 61, 62)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( getParentValue(R1, RSMap), 60, 61)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(R1, RSMap), 59, 60)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( getParentValue(R1, RSMap), 58, 59)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( getParentValue(R1, RSMap), 57, 58)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), extractMInt( getParentValue(R1, RSMap), 32, 33))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// andl-r32-r32-semantics


// pxor-xmm-xmm

  rule <k>
    execinstr (pxor R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), xorMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// pxor-xmm-xmm-semantics


// vpcmpgtq-xmm-xmm-xmm

  rule <k>
    execinstr (vpcmpgtq R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi)))
)

    </regstate>
    


// vpcmpgtq-xmm-xmm-xmm-semantics


// vmulps-xmm-xmm-xmm

  rule <k>
    execinstr (vmulps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( mul_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( mul_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( mul_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), mul_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vmulps-xmm-xmm-xmm-semantics


// idivq-r64

  rule <k>
    execinstr (idivq R1:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> idiv_quotient_int64(concatenateMInt( getParentValue(%rdx, RSMap), getParentValue(%rax, RSMap)), getParentValue(R1, RSMap))

"RDX" |-> idiv_remainder_int64(concatenateMInt( getParentValue(%rdx, RSMap), getParentValue(%rax, RSMap)), getParentValue(R1, RSMap))

"CF" |-> (undefMInt)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// idivq-r64-semantics


// vmovddup-ymm-ymm

  rule <k>
    execinstr (vmovddup R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)))
)

    </regstate>
    


// vmovddup-ymm-ymm-semantics


// vpaddb-ymm-ymm-ymm

  rule <k>
    execinstr (vpaddb R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 0, 8), extractMInt( getParentValue(R1, RSMap), 0, 8)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 8, 16), extractMInt( getParentValue(R1, RSMap), 8, 16)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 16, 24), extractMInt( getParentValue(R1, RSMap), 16, 24)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 24, 32), extractMInt( getParentValue(R1, RSMap), 24, 32)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 32, 40), extractMInt( getParentValue(R1, RSMap), 32, 40)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 40, 48), extractMInt( getParentValue(R1, RSMap), 40, 48)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 64, 72), extractMInt( getParentValue(R1, RSMap), 64, 72)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 72, 80), extractMInt( getParentValue(R1, RSMap), 72, 80)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 80, 88), extractMInt( getParentValue(R1, RSMap), 80, 88)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 88, 96), extractMInt( getParentValue(R1, RSMap), 88, 96)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 96, 104), extractMInt( getParentValue(R1, RSMap), 96, 104)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 104, 112), extractMInt( getParentValue(R1, RSMap), 104, 112)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 112, 120), extractMInt( getParentValue(R1, RSMap), 112, 120)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 120, 128), extractMInt( getParentValue(R1, RSMap), 120, 128)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)), addMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)))))))))))))))))))))))))))))))))
)

    </regstate>
    


// vpaddb-ymm-ymm-ymm-semantics


// addb-r8-rh

  rule <k>
    execinstr (addb R1:Rh, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// addb-r8-rh-semantics


// addw-r16-r16

  rule <k>
    execinstr (addw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// addw-r16-r16-semantics


// punpcklbw-xmm-xmm

  rule <k>
    execinstr (punpcklbw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 200), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 200, 208), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 208, 216), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 216, 224), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 232), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 232, 240), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 248), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), extractMInt( getParentValue(R2, RSMap), 248, 256))))))))))
)

    </regstate>
    


// punpcklbw-xmm-xmm-semantics


// vpmovzxbd-xmm-xmm

  rule <k>
    execinstr (vpmovzxbd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( mi(24, 0), extractMInt( getParentValue(R1, RSMap), 224, 232)), concatenateMInt( concatenateMInt( mi(24, 0), extractMInt( getParentValue(R1, RSMap), 232, 240)), concatenateMInt( concatenateMInt( mi(24, 0), extractMInt( getParentValue(R1, RSMap), 240, 248)), concatenateMInt( mi(24, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))))))
)

    </regstate>
    


// vpmovzxbd-xmm-xmm-semantics


// cltd

  rule <k>
    execinstr (cltd  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RDX" |-> concatenateMInt( mi(32, 0), extractMInt( mi(64, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 32, 64))), 0, 32))
)

    </regstate>
    


// cltd-semantics


// vpsrlvd-ymm-ymm-ymm

  rule <k>
    execinstr (vpsrlvd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 32))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 64))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 96))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 128))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 160))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 192))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 224))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))))))))))
)

    </regstate>
    


// vpsrlvd-ymm-ymm-ymm-semantics


// xchgb-rh-rh

  rule <k>
    execinstr (xchgb R1:Rh, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( getParentValue(R1, RSMap), 48, 56)), extractMInt( getParentValue(R2, RSMap), 56, 64))

convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), extractMInt( getParentValue(R2, RSMap), 48, 56)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (xchgb R1:Rh, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
        convToRegKeys(R2) |-> getParentValue(R2, RSMap)
      )
    </regstate>
      requires sameRegisters(R1, R2)
  


// xchgb-rh-rh-semantics


// vblendvpd-ymm-ymm-ymm-ymm

  rule <k>
    execinstr (vblendvpd R1:Ymm, R2:Ymm, R3:Ymm, R4:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 0, 64) #else extractMInt( getParentValue(R2, RSMap), 0, 64) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 64, 65), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 64, 128) #else extractMInt( getParentValue(R2, RSMap), 64, 128) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 128, 129), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 192) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 192, 193), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 192, 256) #else extractMInt( getParentValue(R2, RSMap), 192, 256) #fi))))
)

    </regstate>
    


// vblendvpd-ymm-ymm-ymm-ymm-semantics


// vpsrlvd-xmm-xmm-xmm

  rule <k>
    execinstr (vpsrlvd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 160))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 192))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 224))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256)))))))
)

    </regstate>
    


// vpsrlvd-xmm-xmm-xmm-semantics


// mulw-r16

  rule <k>
    execinstr (mulw R1:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 16, 32))

"RDX" |-> concatenateMInt( extractMInt( getParentValue(%rdx, RSMap), 0, 48), extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 0, 16))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 0, 16), mi(16, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 0, 16), mi(16, 0))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// mulw-r16-semantics

// Manually generated using stratification.

// vmovmskpd-r32-xmm

  rule <k>
    execinstr (vmovmskpd R1:Xmm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |->   
    concatenateMInt(mi(62, 0), 
      concatenateMInt(
        extractMInt(getParentValue(R1, RSMap), 128, 129), 
        extractMInt(getParentValue(R1, RSMap), 192, 193) 
      ))
)

    </regstate>


// vmovmskpd-r32-xmm-semantics

/*
TargetInstr:
vmovmskpd %xmm1, %ebx
RWSet:
maybe read:{ %xmm1 }
must read:{ %xmm1 }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:callq .move_128_032_xmm1_eax_edx_r8d_r9d  #  1     0     5      OPC=callq_label
circuit:roll $0x1, %r9d                           #  2     0x5   3      OPC=roll_r32_one
circuit:callq .read_cf_into_rbx                   #  3     0x8   5      OPC=callq_label
circuit:roll $0x1, %edx                           #  4     0xd   2      OPC=roll_r32_one
circuit:rcll $0x1, %ebx                           #  5     0xf   2      OPC=rcll_r32_one
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vmovmskpd %xmm1, %ebx

  maybe read:      { %xmm1 }
  must read:       { %xmm1 }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%rbx   : (concat <0x0|32> (plus (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[63:32]) (concat <0x0|1> <%ymm1|256>[63:32]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[63:32]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[63:32])) (concat <0x0|1> <%ymm1|256>[63:32]))[32:32] <0x1|1>) then (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x2|33> else <0x1|33>) else (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>)) (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>))[31:0])

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>
*/

// vpunpcklqdq-xmm-xmm-xmm

  rule <k>
    execinstr (vpunpcklqdq R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256)))
)

    </regstate>
    


// vpunpcklqdq-xmm-xmm-xmm-semantics


// vmaxpd-ymm-ymm-ymm

  rule <k>
    execinstr (vmaxpd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt eqMInt( maxcmp_double(extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 0, 64) #else extractMInt( getParentValue(R1, RSMap), 0, 64) #fi), concatenateMInt( (#ifMInt eqMInt( maxcmp_double(extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 64, 128) #else extractMInt( getParentValue(R1, RSMap), 64, 128) #fi), concatenateMInt( (#ifMInt eqMInt( maxcmp_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 192) #else extractMInt( getParentValue(R1, RSMap), 128, 192) #fi), (#ifMInt eqMInt( maxcmp_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 256) #else extractMInt( getParentValue(R1, RSMap), 192, 256) #fi))))
)

    </regstate>
    


// vmaxpd-ymm-ymm-ymm-semantics


// vaddsubpd-ymm-ymm-ymm

  rule <k>
    execinstr (vaddsubpd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( add_double(extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), sub_double(extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128))), concatenateMInt( add_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), sub_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vaddsubpd-ymm-ymm-ymm-semantics


// cmovnpq-r64-r64

  rule <k>
    execinstr (cmovnpq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt (notBool eqMInt(getFlag("PF", RSMap), mi(1,1))) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovnpq-r64-r64-semantics


// rclb-r8-cl

  rule <k>
    execinstr (rclb %cl, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9))), 1, 9))

"CF" |-> extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 1)) andBool (eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rclb-r8-cl-semantics


// cvtpd2ps-xmm-xmm

  rule <k>
    execinstr (cvtpd2ps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( mi(64, 0), concatenateMInt( cvt_double_to_single(extractMInt( getParentValue(R1, RSMap), 128, 192)), cvt_double_to_single(extractMInt( getParentValue(R1, RSMap), 192, 256)))))
)

    </regstate>
    


// cvtpd2ps-xmm-xmm-semantics


// shrb-rh-one

  rule <k>
    execinstr (shrb $0x1, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 0, 8)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 8, 9)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 0, 1), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 0, 8), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(mi(9, 1))), 0, 1)

"OF" |-> extractMInt( getParentValue(R2, RSMap), 48, 49)
)

    </regstate>
    


// shrb-rh-one-semantics


// vmovhlps-xmm-xmm-xmm

  rule <k>
    execinstr (vmovhlps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)))
)

    </regstate>
    


// vmovhlps-xmm-xmm-xmm-semantics


// nop

  rule <k>
    execinstr (nop  .Operands) => .
  ...</k>


// nop-semantics


// imulq-r64

  rule <k>
    execinstr (imulq R1:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> extractMInt( mulMInt( mi(128, svalueMInt(getParentValue(R1, RSMap))), mi(128, svalueMInt(getParentValue(%rax, RSMap)))), 64, 128)

"RDX" |-> extractMInt( mulMInt( mi(128, svalueMInt(getParentValue(R1, RSMap))), mi(128, svalueMInt(getParentValue(%rax, RSMap)))), 0, 64)

"CF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(128, svalueMInt(getParentValue(R1, RSMap))), mi(128, svalueMInt(getParentValue(%rax, RSMap)))), mi(128, svalueMInt(extractMInt( mulMInt( mi(128, svalueMInt(getParentValue(R1, RSMap))), mi(128, svalueMInt(getParentValue(%rax, RSMap)))), 64, 128))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(128, svalueMInt(getParentValue(R1, RSMap))), mi(128, svalueMInt(getParentValue(%rax, RSMap)))), mi(128, svalueMInt(extractMInt( mulMInt( mi(128, svalueMInt(getParentValue(R1, RSMap))), mi(128, svalueMInt(getParentValue(%rax, RSMap)))), 64, 128))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// imulq-r64-semantics


// salb-rh-one

  rule <k>
    execinstr (salb $0x1, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 1, 2)

"OF" |-> (#ifMInt (eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 1, 2), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// salb-rh-one-semantics


// cmpxchgb-r8-rh

  rule <k>
    execinstr (cmpxchgb R1:Rh, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> (#ifMInt eqMInt( extractMInt( getParentValue(%rax, RSMap), 56, 64), extractMInt( getParentValue(R2, RSMap), 56, 64)) #then getParentValue(%rax, RSMap) #else concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 56), extractMInt( getParentValue(R2, RSMap), 56, 64)) #fi)

convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), (#ifMInt eqMInt( extractMInt( getParentValue(%rax, RSMap), 56, 64), extractMInt( getParentValue(R2, RSMap), 56, 64)) #then extractMInt( getParentValue(R1, RSMap), 48, 56) #else extractMInt( getParentValue(R2, RSMap), 56, 64) #fi))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 56, 57)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 56, 57)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (cmpxchgb R1:Rh, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
        convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R2, RSMap), 56, 64)) #then extractMInt( getParentValue(R2, RSMap), 48, 56) #else extractMInt( getParentValue(R2, RSMap), 56, 64) #fi))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5)

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 56, 57)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 56, 57)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
      requires sameRegisters(R1, R2)
  


// cmpxchgb-r8-rh-semantics


// sqrtsd-xmm-xmm

  rule <k>
    execinstr (sqrtsd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 192), sqrt_double(extractMInt( getParentValue(R1, RSMap), 192, 256)))
)

    </regstate>
    


// sqrtsd-xmm-xmm-semantics


// vcvtpd2ps-xmm-xmm

  rule <k>
    execinstr (vcvtpd2ps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(192, 0), concatenateMInt( cvt_double_to_single(extractMInt( getParentValue(R1, RSMap), 128, 192)), cvt_double_to_single(extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vcvtpd2ps-xmm-xmm-semantics


// vfmsub213ps-xmm-xmm-xmm

  rule <k>
    execinstr (vfmsub213ps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160), extractMInt( getParentValue(R3, RSMap), 128, 160)), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R3, RSMap), 160, 192)), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224), extractMInt( getParentValue(R3, RSMap), 192, 224)), vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R3, RSMap), 224, 256))))))
)

    </regstate>
    


// vfmsub213ps-xmm-xmm-xmm-semantics


// btsq-r64-r64

  rule <k>
    execinstr (btsq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> orMInt( getParentValue(R2, RSMap), shlMInt( mi(64, 1), uvalueMInt(mi(64, svalueMInt(andMInt( getParentValue(R1, RSMap), mi(64, 63)))))))

"CF" |-> extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(mi(64, svalueMInt(andMInt( getParentValue(R1, RSMap), mi(64, 63)))))), 63, 64)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btsq-r64-r64-semantics


// vmovsldup-ymm-ymm

  rule <k>
    execinstr (vmovsldup R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128))), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vmovsldup-ymm-ymm-semantics


// vphaddw-ymm-ymm-ymm

  rule <k>
    execinstr (vphaddw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 0, 16), extractMInt( getParentValue(R1, RSMap), 16, 32)), addMInt( extractMInt( getParentValue(R1, RSMap), 32, 48), extractMInt( getParentValue(R1, RSMap), 48, 64))), addMInt( extractMInt( getParentValue(R1, RSMap), 64, 80), extractMInt( getParentValue(R1, RSMap), 80, 96))), addMInt( extractMInt( getParentValue(R1, RSMap), 96, 112), extractMInt( getParentValue(R1, RSMap), 112, 128))), addMInt( extractMInt( getParentValue(R2, RSMap), 0, 16), extractMInt( getParentValue(R2, RSMap), 16, 32))), addMInt( extractMInt( getParentValue(R2, RSMap), 32, 48), extractMInt( getParentValue(R2, RSMap), 48, 64))), addMInt( extractMInt( getParentValue(R2, RSMap), 64, 80), extractMInt( getParentValue(R2, RSMap), 80, 96))), addMInt( extractMInt( getParentValue(R2, RSMap), 96, 112), extractMInt( getParentValue(R2, RSMap), 112, 128))), concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 144, 160)), addMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 176, 192))), addMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 208, 224))), addMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256))), addMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R2, RSMap), 144, 160))), addMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R2, RSMap), 176, 192))), addMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R2, RSMap), 208, 224))), addMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R2, RSMap), 240, 256))))
)

    </regstate>
    


// vphaddw-ymm-ymm-ymm-semantics


// vfnmadd132ps-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmadd132ps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( vfnmadd132_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfnmadd132_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vfnmadd132ps-xmm-xmm-xmm-semantics


// cmovaw-r16-r16

  rule <k>
    execinstr (cmovaw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt ((notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) andBool (notBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovaw-r16-r16-semantics


// salb-r8-cl

  rule <k>
    execinstr (salb %cl, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 9))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 8)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 8))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 9), mi(8, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool (((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 8)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 8))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// salb-r8-cl-semantics


// vpbroadcastw-xmm-xmm

  rule <k>
    execinstr (vpbroadcastw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256)))))))))
)

    </regstate>
    


// vpbroadcastw-xmm-xmm-semantics


// divb-r8

  rule <k>
    execinstr (divb R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), div_remainder_int8(extractMInt( getParentValue(%rax, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 56, 64))), div_quotient_int8(extractMInt( getParentValue(%rax, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 56, 64)))

"CF" |-> (undefMInt)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// divb-r8-semantics


// tzcntq-r64-r64

  rule <k>
    execinstr (tzcntq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)) #then mi(64, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)) #then mi(64, 1) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)) #then mi(64, 2) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)) #then mi(64, 3) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) #then mi(64, 4) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)) #then mi(64, 5) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)) #then mi(64, 6) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then mi(64, 7) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 55, 56), mi(1, 1)) #then mi(64, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 54, 55), mi(1, 1)) #then mi(64, 9) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 53, 54), mi(1, 1)) #then mi(64, 10) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 53), mi(1, 1)) #then mi(64, 11) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) #then mi(64, 12) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 50, 51), mi(1, 1)) #then mi(64, 13) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 50), mi(1, 1)) #then mi(64, 14) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then mi(64, 15) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 47, 48), mi(1, 1)) #then mi(64, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 46, 47), mi(1, 1)) #then mi(64, 17) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 45, 46), mi(1, 1)) #then mi(64, 18) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 45), mi(1, 1)) #then mi(64, 19) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 43, 44), mi(1, 1)) #then mi(64, 20) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 42, 43), mi(1, 1)) #then mi(64, 21) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 41, 42), mi(1, 1)) #then mi(64, 22) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 40, 41), mi(1, 1)) #then mi(64, 23) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 39, 40), mi(1, 1)) #then mi(64, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 38, 39), mi(1, 1)) #then mi(64, 25) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 37, 38), mi(1, 1)) #then mi(64, 26) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 37), mi(1, 1)) #then mi(64, 27) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 35, 36), mi(1, 1)) #then mi(64, 28) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 34, 35), mi(1, 1)) #then mi(64, 29) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 33, 34), mi(1, 1)) #then mi(64, 30) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) #then mi(64, 31) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 31, 32), mi(1, 1)) #then mi(64, 32) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 30, 31), mi(1, 1)) #then mi(64, 33) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 29, 30), mi(1, 1)) #then mi(64, 34) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 28, 29), mi(1, 1)) #then mi(64, 35) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 27, 28), mi(1, 1)) #then mi(64, 36) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 26, 27), mi(1, 1)) #then mi(64, 37) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 25, 26), mi(1, 1)) #then mi(64, 38) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 24, 25), mi(1, 1)) #then mi(64, 39) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 23, 24), mi(1, 1)) #then mi(64, 40) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 22, 23), mi(1, 1)) #then mi(64, 41) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 21, 22), mi(1, 1)) #then mi(64, 42) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 20, 21), mi(1, 1)) #then mi(64, 43) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 19, 20), mi(1, 1)) #then mi(64, 44) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 18, 19), mi(1, 1)) #then mi(64, 45) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 17, 18), mi(1, 1)) #then mi(64, 46) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 16, 17), mi(1, 1)) #then mi(64, 47) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 15, 16), mi(1, 1)) #then mi(64, 48) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 14, 15), mi(1, 1)) #then mi(64, 49) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 13, 14), mi(1, 1)) #then mi(64, 50) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 12, 13), mi(1, 1)) #then mi(64, 51) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 11, 12), mi(1, 1)) #then mi(64, 52) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 10, 11), mi(1, 1)) #then mi(64, 53) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 9, 10), mi(1, 1)) #then mi(64, 54) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 8, 9), mi(1, 1)) #then mi(64, 55) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 7, 8), mi(1, 1)) #then mi(64, 56) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 6, 7), mi(1, 1)) #then mi(64, 57) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 5, 6), mi(1, 1)) #then mi(64, 58) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 4, 5), mi(1, 1)) #then mi(64, 59) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 3, 4), mi(1, 1)) #then mi(64, 60) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 2, 3), mi(1, 1)) #then mi(64, 61) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 1, 2), mi(1, 1)) #then mi(64, 62) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 1)) #then mi(64, 63) #else mi(64, 64) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi)

"CF" |-> (#ifMInt eqMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)) #then mi(64, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)) #then mi(64, 1) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)) #then mi(64, 2) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)) #then mi(64, 3) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) #then mi(64, 4) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)) #then mi(64, 5) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)) #then mi(64, 6) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then mi(64, 7) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 55, 56), mi(1, 1)) #then mi(64, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 54, 55), mi(1, 1)) #then mi(64, 9) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 53, 54), mi(1, 1)) #then mi(64, 10) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 53), mi(1, 1)) #then mi(64, 11) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) #then mi(64, 12) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 50, 51), mi(1, 1)) #then mi(64, 13) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 50), mi(1, 1)) #then mi(64, 14) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then mi(64, 15) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 47, 48), mi(1, 1)) #then mi(64, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 46, 47), mi(1, 1)) #then mi(64, 17) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 45, 46), mi(1, 1)) #then mi(64, 18) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 45), mi(1, 1)) #then mi(64, 19) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 43, 44), mi(1, 1)) #then mi(64, 20) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 42, 43), mi(1, 1)) #then mi(64, 21) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 41, 42), mi(1, 1)) #then mi(64, 22) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 40, 41), mi(1, 1)) #then mi(64, 23) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 39, 40), mi(1, 1)) #then mi(64, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 38, 39), mi(1, 1)) #then mi(64, 25) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 37, 38), mi(1, 1)) #then mi(64, 26) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 37), mi(1, 1)) #then mi(64, 27) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 35, 36), mi(1, 1)) #then mi(64, 28) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 34, 35), mi(1, 1)) #then mi(64, 29) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 33, 34), mi(1, 1)) #then mi(64, 30) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) #then mi(64, 31) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 31, 32), mi(1, 1)) #then mi(64, 32) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 30, 31), mi(1, 1)) #then mi(64, 33) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 29, 30), mi(1, 1)) #then mi(64, 34) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 28, 29), mi(1, 1)) #then mi(64, 35) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 27, 28), mi(1, 1)) #then mi(64, 36) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 26, 27), mi(1, 1)) #then mi(64, 37) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 25, 26), mi(1, 1)) #then mi(64, 38) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 24, 25), mi(1, 1)) #then mi(64, 39) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 23, 24), mi(1, 1)) #then mi(64, 40) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 22, 23), mi(1, 1)) #then mi(64, 41) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 21, 22), mi(1, 1)) #then mi(64, 42) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 20, 21), mi(1, 1)) #then mi(64, 43) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 19, 20), mi(1, 1)) #then mi(64, 44) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 18, 19), mi(1, 1)) #then mi(64, 45) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 17, 18), mi(1, 1)) #then mi(64, 46) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 16, 17), mi(1, 1)) #then mi(64, 47) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 15, 16), mi(1, 1)) #then mi(64, 48) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 14, 15), mi(1, 1)) #then mi(64, 49) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 13, 14), mi(1, 1)) #then mi(64, 50) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 12, 13), mi(1, 1)) #then mi(64, 51) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 11, 12), mi(1, 1)) #then mi(64, 52) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 10, 11), mi(1, 1)) #then mi(64, 53) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 9, 10), mi(1, 1)) #then mi(64, 54) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 8, 9), mi(1, 1)) #then mi(64, 55) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 7, 8), mi(1, 1)) #then mi(64, 56) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 6, 7), mi(1, 1)) #then mi(64, 57) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 5, 6), mi(1, 1)) #then mi(64, 58) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 4, 5), mi(1, 1)) #then mi(64, 59) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 3, 4), mi(1, 1)) #then mi(64, 60) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 2, 3), mi(1, 1)) #then mi(64, 61) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 1, 2), mi(1, 1)) #then mi(64, 62) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 1)) #then mi(64, 63) #else mi(64, 64) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), mi(64, 64)) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)) #then mi(64, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)) #then mi(64, 1) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)) #then mi(64, 2) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)) #then mi(64, 3) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) #then mi(64, 4) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)) #then mi(64, 5) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)) #then mi(64, 6) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then mi(64, 7) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 55, 56), mi(1, 1)) #then mi(64, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 54, 55), mi(1, 1)) #then mi(64, 9) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 53, 54), mi(1, 1)) #then mi(64, 10) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 53), mi(1, 1)) #then mi(64, 11) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) #then mi(64, 12) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 50, 51), mi(1, 1)) #then mi(64, 13) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 50), mi(1, 1)) #then mi(64, 14) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then mi(64, 15) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 47, 48), mi(1, 1)) #then mi(64, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 46, 47), mi(1, 1)) #then mi(64, 17) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 45, 46), mi(1, 1)) #then mi(64, 18) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 45), mi(1, 1)) #then mi(64, 19) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 43, 44), mi(1, 1)) #then mi(64, 20) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 42, 43), mi(1, 1)) #then mi(64, 21) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 41, 42), mi(1, 1)) #then mi(64, 22) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 40, 41), mi(1, 1)) #then mi(64, 23) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 39, 40), mi(1, 1)) #then mi(64, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 38, 39), mi(1, 1)) #then mi(64, 25) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 37, 38), mi(1, 1)) #then mi(64, 26) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 37), mi(1, 1)) #then mi(64, 27) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 35, 36), mi(1, 1)) #then mi(64, 28) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 34, 35), mi(1, 1)) #then mi(64, 29) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 33, 34), mi(1, 1)) #then mi(64, 30) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) #then mi(64, 31) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 31, 32), mi(1, 1)) #then mi(64, 32) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 30, 31), mi(1, 1)) #then mi(64, 33) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 29, 30), mi(1, 1)) #then mi(64, 34) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 28, 29), mi(1, 1)) #then mi(64, 35) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 27, 28), mi(1, 1)) #then mi(64, 36) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 26, 27), mi(1, 1)) #then mi(64, 37) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 25, 26), mi(1, 1)) #then mi(64, 38) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 24, 25), mi(1, 1)) #then mi(64, 39) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 23, 24), mi(1, 1)) #then mi(64, 40) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 22, 23), mi(1, 1)) #then mi(64, 41) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 21, 22), mi(1, 1)) #then mi(64, 42) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 20, 21), mi(1, 1)) #then mi(64, 43) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 19, 20), mi(1, 1)) #then mi(64, 44) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 18, 19), mi(1, 1)) #then mi(64, 45) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 17, 18), mi(1, 1)) #then mi(64, 46) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 16, 17), mi(1, 1)) #then mi(64, 47) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 15, 16), mi(1, 1)) #then mi(64, 48) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 14, 15), mi(1, 1)) #then mi(64, 49) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 13, 14), mi(1, 1)) #then mi(64, 50) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 12, 13), mi(1, 1)) #then mi(64, 51) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 11, 12), mi(1, 1)) #then mi(64, 52) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 10, 11), mi(1, 1)) #then mi(64, 53) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 9, 10), mi(1, 1)) #then mi(64, 54) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 8, 9), mi(1, 1)) #then mi(64, 55) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 7, 8), mi(1, 1)) #then mi(64, 56) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 6, 7), mi(1, 1)) #then mi(64, 57) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 5, 6), mi(1, 1)) #then mi(64, 58) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 4, 5), mi(1, 1)) #then mi(64, 59) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 3, 4), mi(1, 1)) #then mi(64, 60) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 2, 3), mi(1, 1)) #then mi(64, 61) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 1, 2), mi(1, 1)) #then mi(64, 62) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 1)) #then mi(64, 63) #else mi(64, 64) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// tzcntq-r64-r64-semantics


// vmovapd-xmm-xmm

  rule <k>
    execinstr (vmovapd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), extractMInt( getParentValue(R1, RSMap), 128, 256))
)

    </regstate>
    


// vmovapd-xmm-xmm-semantics


// notl-r32

  rule <k>
    execinstr (notl R1:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( mi(32, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64)))
)

    </regstate>
    


// notl-r32-semantics


// movmskpd-r64-xmm

  rule <k>
    execinstr (movmskpd R1:Xmm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(62, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 128, 129), extractMInt(getParentValue(R1, RSMap), 192, 193)))   )


)

    </regstate>


// movmskpd-r64-xmm-semantics

/*
TargetInstr:
movmskpd %xmm1, %rbx
RWSet:
maybe read:{ %xmm1 }
must read:{ %xmm1 }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ sse2 }

Circuit:
circuit:vmovmskpd %xmm1, %ebx  #  1     0    4      OPC=vmovmskpd_r32_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movmskpd %xmm1, %rbx

  maybe read:      { %xmm1 }
  must read:       { %xmm1 }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse2 }

Circuits:

%rbx   : (concat <0x0|32> (plus (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[63:32]) (concat <0x0|1> <%ymm1|256>[63:32]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[63:32]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[63:32])) (concat <0x0|1> <%ymm1|256>[63:32]))[32:32] <0x1|1>) then (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x2|33> else <0x1|33>) else (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>)) (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>))[31:0])

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/
// setbe-r8

  rule <k>
    execinstr (setbe R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt (eqMInt(getFlag("CF", RSMap), mi(1,1)) orBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setbe-r8-semantics


// vfnmsub132pd-ymm-ymm-ymm

  rule <k>
    execinstr (vfnmsub132pd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( vfnmsub132_double(extractMInt( getParentValue(R3, RSMap), 0, 64), extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), concatenateMInt( vfnmsub132_double(extractMInt( getParentValue(R3, RSMap), 64, 128), extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128)), concatenateMInt( vfnmsub132_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfnmsub132_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)))))
)

    </regstate>
    


// vfnmsub132pd-ymm-ymm-ymm-semantics


// btsw-r16-r16

  rule <k>
    execinstr (btsw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), orMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), shlMInt( mi(16, 1), uvalueMInt(mi(16, svalueMInt(andMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 15))))))))

"CF" |-> extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), uvalueMInt(mi(16, svalueMInt(andMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 15)))))), 15, 16)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btsw-r16-r16-semantics


// psubsb-xmm-xmm

  rule <k>
    execinstr (psubsb R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 136))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 136))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 136))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 136, 144))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 136, 144))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 136, 144))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 152))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 152))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 152))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 152, 160))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 152, 160))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 152, 160))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 168))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 168))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 168))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 168, 176))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 168, 176))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 168, 176))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 184))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 184))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 184))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 184, 192))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 184, 192))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 184, 192))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 200))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 200))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 200))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 200, 208))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 200, 208))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 200, 208))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 216))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 216))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 216))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 216, 224))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 216, 224))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 216, 224))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 232))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 232))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 232))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 232, 240))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 232, 240))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 232, 240))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 248))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 248))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 248))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248)))), 2, 10) #fi) #fi), (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 248, 256))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 248, 256))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 248, 256))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))), 2, 10) #fi) #fi)))))))))))))))))
)

    </regstate>
    


// psubsb-xmm-xmm-semantics


// setnl-rh

  rule <k>
    execinstr (setnl R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setnl-rh-semantics


// vfmsub132sd-xmm-xmm-xmm

  rule <k>
    execinstr (vfmsub132sd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 192), vfmsub132_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfmsub132sd-xmm-xmm-xmm-semantics


// vpabsb-xmm-xmm

  rule <k>
    execinstr (vpabsb R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 128, 136), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 128, 136))) #else extractMInt( getParentValue(R1, RSMap), 128, 136) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 136, 144), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 136, 144))) #else extractMInt( getParentValue(R1, RSMap), 136, 144) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 144, 152), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 144, 152))) #else extractMInt( getParentValue(R1, RSMap), 144, 152) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 152, 160), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 152, 160))) #else extractMInt( getParentValue(R1, RSMap), 152, 160) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 160, 168), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 160, 168))) #else extractMInt( getParentValue(R1, RSMap), 160, 168) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 168, 176), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 168, 176))) #else extractMInt( getParentValue(R1, RSMap), 168, 176) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 176, 184), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 176, 184))) #else extractMInt( getParentValue(R1, RSMap), 176, 184) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 184, 192), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 184, 192))) #else extractMInt( getParentValue(R1, RSMap), 184, 192) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 200), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 192, 200))) #else extractMInt( getParentValue(R1, RSMap), 192, 200) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 200, 208), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 200, 208))) #else extractMInt( getParentValue(R1, RSMap), 200, 208) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 208, 216), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 208, 216))) #else extractMInt( getParentValue(R1, RSMap), 208, 216) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 216, 224), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 216, 224))) #else extractMInt( getParentValue(R1, RSMap), 216, 224) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 224, 232), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 224, 232))) #else extractMInt( getParentValue(R1, RSMap), 224, 232) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 232, 240), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 232, 240))) #else extractMInt( getParentValue(R1, RSMap), 232, 240) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 240, 248), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 240, 248))) #else extractMInt( getParentValue(R1, RSMap), 240, 248) #fi), (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), mi(8, 127)) #then addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 248, 256))) #else extractMInt( getParentValue(R1, RSMap), 248, 256) #fi)))))))))))))))))
)

    </regstate>
    


// vpabsb-xmm-xmm-semantics


// sets-r8

  rule <k>
    execinstr (sets R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt eqMInt(getFlag("SF", RSMap), mi(1,1)) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// sets-r8-semantics


// phaddd-xmm-xmm

  rule <k>
    execinstr (phaddd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( concatenateMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 160, 192)), addMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 224, 256))), addMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 160, 192))), addMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 224, 256))))
)

    </regstate>
    


// phaddd-xmm-xmm-semantics


// vpminsw-xmm-xmm-xmm

  rule <k>
    execinstr (vpminsw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)) #then extractMInt( getParentValue(R2, RSMap), 128, 144) #else extractMInt( getParentValue(R1, RSMap), 128, 144) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)) #then extractMInt( getParentValue(R2, RSMap), 144, 160) #else extractMInt( getParentValue(R1, RSMap), 144, 160) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)) #then extractMInt( getParentValue(R2, RSMap), 160, 176) #else extractMInt( getParentValue(R1, RSMap), 160, 176) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)) #then extractMInt( getParentValue(R2, RSMap), 176, 192) #else extractMInt( getParentValue(R1, RSMap), 176, 192) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)) #then extractMInt( getParentValue(R2, RSMap), 192, 208) #else extractMInt( getParentValue(R1, RSMap), 192, 208) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)) #then extractMInt( getParentValue(R2, RSMap), 208, 224) #else extractMInt( getParentValue(R1, RSMap), 208, 224) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)) #then extractMInt( getParentValue(R2, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 224, 240) #fi), (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R2, RSMap), 240, 256) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)))))))))
)

    </regstate>
    


// vpminsw-xmm-xmm-xmm-semantics


// cmovsw-r16-r16

  rule <k>
    execinstr (cmovsw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt eqMInt(getFlag("SF", RSMap), mi(1,1)) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovsw-r16-r16-semantics


// cvtsi2ssl-xmm-r32

  rule <k>
    execinstr (cvtsi2ssl R1:R32, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 224), cvt_int32_to_single(extractMInt( getParentValue(R1, RSMap), 32, 64)))
)

    </regstate>
    


// cvtsi2ssl-xmm-r32-semantics


// adcb-rh-r8

  rule <k>
    execinstr (adcb R1:R8, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 51, 52)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// adcb-rh-r8-semantics


// vpmovsxbq-ymm-xmm

  rule <k>
    execinstr (vpmovsxbq R1:Xmm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232))), concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240))), concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256))))))
)

    </regstate>
    


// vpmovsxbq-ymm-xmm-semantics


// tzcntl-r32-r32

  rule <k>
    execinstr (tzcntl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)) #then mi(64, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)) #then mi(64, 1) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)) #then mi(64, 2) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)) #then mi(64, 3) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) #then mi(64, 4) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)) #then mi(64, 5) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)) #then mi(64, 6) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then mi(64, 7) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 55, 56), mi(1, 1)) #then mi(64, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 54, 55), mi(1, 1)) #then mi(64, 9) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 53, 54), mi(1, 1)) #then mi(64, 10) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 53), mi(1, 1)) #then mi(64, 11) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) #then mi(64, 12) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 50, 51), mi(1, 1)) #then mi(64, 13) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 50), mi(1, 1)) #then mi(64, 14) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then mi(64, 15) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 47, 48), mi(1, 1)) #then mi(64, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 46, 47), mi(1, 1)) #then mi(64, 17) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 45, 46), mi(1, 1)) #then mi(64, 18) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 45), mi(1, 1)) #then mi(64, 19) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 43, 44), mi(1, 1)) #then mi(64, 20) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 42, 43), mi(1, 1)) #then mi(64, 21) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 41, 42), mi(1, 1)) #then mi(64, 22) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 40, 41), mi(1, 1)) #then mi(64, 23) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 39, 40), mi(1, 1)) #then mi(64, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 38, 39), mi(1, 1)) #then mi(64, 25) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 37, 38), mi(1, 1)) #then mi(64, 26) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 37), mi(1, 1)) #then mi(64, 27) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 35, 36), mi(1, 1)) #then mi(64, 28) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 34, 35), mi(1, 1)) #then mi(64, 29) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 33, 34), mi(1, 1)) #then mi(64, 30) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) #then mi(64, 31) #else mi(64, 32) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi)

"CF" |-> (#ifMInt eqMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)) #then mi(32, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)) #then mi(32, 1) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)) #then mi(32, 2) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)) #then mi(32, 3) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) #then mi(32, 4) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)) #then mi(32, 5) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)) #then mi(32, 6) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then mi(32, 7) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 55, 56), mi(1, 1)) #then mi(32, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 54, 55), mi(1, 1)) #then mi(32, 9) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 53, 54), mi(1, 1)) #then mi(32, 10) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 53), mi(1, 1)) #then mi(32, 11) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) #then mi(32, 12) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 50, 51), mi(1, 1)) #then mi(32, 13) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 50), mi(1, 1)) #then mi(32, 14) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then mi(32, 15) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 47, 48), mi(1, 1)) #then mi(32, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 46, 47), mi(1, 1)) #then mi(32, 17) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 45, 46), mi(1, 1)) #then mi(32, 18) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 45), mi(1, 1)) #then mi(32, 19) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 43, 44), mi(1, 1)) #then mi(32, 20) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 42, 43), mi(1, 1)) #then mi(32, 21) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 41, 42), mi(1, 1)) #then mi(32, 22) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 40, 41), mi(1, 1)) #then mi(32, 23) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 39, 40), mi(1, 1)) #then mi(32, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 38, 39), mi(1, 1)) #then mi(32, 25) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 37, 38), mi(1, 1)) #then mi(32, 26) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 37), mi(1, 1)) #then mi(32, 27) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 35, 36), mi(1, 1)) #then mi(32, 28) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 34, 35), mi(1, 1)) #then mi(32, 29) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 33, 34), mi(1, 1)) #then mi(32, 30) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) #then mi(32, 31) #else mi(32, 32) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), mi(32, 32)) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)) #then mi(32, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)) #then mi(32, 1) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)) #then mi(32, 2) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)) #then mi(32, 3) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) #then mi(32, 4) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)) #then mi(32, 5) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)) #then mi(32, 6) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then mi(32, 7) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 55, 56), mi(1, 1)) #then mi(32, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 54, 55), mi(1, 1)) #then mi(32, 9) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 53, 54), mi(1, 1)) #then mi(32, 10) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 53), mi(1, 1)) #then mi(32, 11) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) #then mi(32, 12) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 50, 51), mi(1, 1)) #then mi(32, 13) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 50), mi(1, 1)) #then mi(32, 14) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then mi(32, 15) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 47, 48), mi(1, 1)) #then mi(32, 16) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 46, 47), mi(1, 1)) #then mi(32, 17) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 45, 46), mi(1, 1)) #then mi(32, 18) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 44, 45), mi(1, 1)) #then mi(32, 19) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 43, 44), mi(1, 1)) #then mi(32, 20) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 42, 43), mi(1, 1)) #then mi(32, 21) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 41, 42), mi(1, 1)) #then mi(32, 22) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 40, 41), mi(1, 1)) #then mi(32, 23) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 39, 40), mi(1, 1)) #then mi(32, 24) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 38, 39), mi(1, 1)) #then mi(32, 25) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 37, 38), mi(1, 1)) #then mi(32, 26) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 36, 37), mi(1, 1)) #then mi(32, 27) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 35, 36), mi(1, 1)) #then mi(32, 28) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 34, 35), mi(1, 1)) #then mi(32, 29) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 33, 34), mi(1, 1)) #then mi(32, 30) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) #then mi(32, 31) #else mi(32, 32) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// tzcntl-r32-r32-semantics


// vpbroadcastb-xmm-xmm

  rule <k>
    execinstr (vpbroadcastb R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)))))))))))))))))
)

    </regstate>
    


// vpbroadcastb-xmm-xmm-semantics


// vfnmadd231pd-ymm-ymm-ymm

  rule <k>
    execinstr (vfnmadd231pd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfnmadd132_double(extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R3, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), vfnmadd132_double(extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R3, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128))), concatenateMInt( vfnmadd132_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfnmadd132_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfnmadd231pd-ymm-ymm-ymm-semantics


// andb-r8-r8

  rule <k>
    execinstr (andb R1:R8, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), andMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 56, 64)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( getParentValue(R1, RSMap), 63, 64)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( getParentValue(R1, RSMap), 62, 63)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( getParentValue(R1, RSMap), 61, 62)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( getParentValue(R1, RSMap), 60, 61)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(R1, RSMap), 59, 60)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( getParentValue(R1, RSMap), 58, 59)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( getParentValue(R1, RSMap), 57, 58)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 56, 57))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// andb-r8-r8-semantics


// xchgl-r32-eax

  rule <k>
    execinstr (xchgl %eax, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( mi(32, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))

convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))
)

    </regstate>
      requires notBool sameRegisters(%eax, R2)

  rule <k>
    execinstr (xchgl %eax, R2:R32,  .Operands) => execinstr(nop  .Operands)
  ...</k>
      requires sameRegisters(%eax, R2)


// xchgl-r32-eax-semantics


// vsqrtpd-ymm-ymm

  rule <k>
    execinstr (vsqrtpd R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( sqrt_double(extractMInt( getParentValue(R1, RSMap), 0, 64)), concatenateMInt( sqrt_double(extractMInt( getParentValue(R1, RSMap), 64, 128)), concatenateMInt( sqrt_double(extractMInt( getParentValue(R1, RSMap), 128, 192)), sqrt_double(extractMInt( getParentValue(R1, RSMap), 192, 256)))))
)

    </regstate>
    


// vsqrtpd-ymm-ymm-semantics


// vfnmsub231pd-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmsub231pd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfnmsub132_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfnmsub132_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfnmsub231pd-xmm-xmm-xmm-semantics


// vcvtpd2dqx-xmm-xmm

  rule <k>
    execinstr (vcvtpd2dqx R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(192, 0), concatenateMInt( cvt_double_to_int32(extractMInt( getParentValue(R1, RSMap), 128, 192)), cvt_double_to_int32(extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vcvtpd2dqx-xmm-xmm-semantics


// vbroadcastss-xmm-xmm

  rule <k>
    execinstr (vbroadcastss R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), extractMInt( getParentValue(R1, RSMap), 224, 256)), extractMInt( getParentValue(R1, RSMap), 224, 256)))
)

    </regstate>
    


// vbroadcastss-xmm-xmm-semantics


// cmovbw-r16-r16

  rule <k>
    execinstr (cmovbw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovbw-r16-r16-semantics


// btrl-r32-r32

  rule <k>
    execinstr (btrl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), andMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), negMInt( shlMInt( mi(32, 1), uvalueMInt(mi(32, svalueMInt(andMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 31)))))))))

"CF" |-> extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), uvalueMInt(mi(32, svalueMInt(andMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 31)))))), 31, 32)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btrl-r32-r32-semantics


// vcvtss2sil-r32-xmm

  rule <k>
    execinstr (vcvtss2sil R1:Xmm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), cvt_single_to_int32(extractMInt( getParentValue(R1, RSMap), 224, 256)))
)

    </regstate>
    


// vcvtss2sil-r32-xmm-semantics


// vandnps-ymm-ymm-ymm

  rule <k>
    execinstr (vandnps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> andMInt( negMInt( getParentValue(R2, RSMap)), getParentValue(R1, RSMap))
)

    </regstate>
    


// vandnps-ymm-ymm-ymm-semantics


// setpo-rh

  rule <k>
    execinstr (setpo R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt (notBool eqMInt(getFlag("PF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setpo-rh-semantics


// haddpd-xmm-xmm

  rule <k>
    execinstr (haddpd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( add_double(extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 128, 192)), add_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 128, 192))))
)

    </regstate>
    


// haddpd-xmm-xmm-semantics


// punpcklwd-xmm-xmm

  rule <k>
    execinstr (punpcklwd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), extractMInt( getParentValue(R2, RSMap), 240, 256))))))
)

    </regstate>
    


// punpcklwd-xmm-xmm-semantics


// cvttsd2sil-r32-xmm

  rule <k>
    execinstr (cvttsd2sil R1:Xmm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), cvt_double_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 192, 256)))
)

    </regstate>
    


// cvttsd2sil-r32-xmm-semantics


// divsd-xmm-xmm

  rule <k>
    execinstr (divsd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 192), div_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)))
)

    </regstate>
    


// divsd-xmm-xmm-semantics


// vmulps-ymm-ymm-ymm

  rule <k>
    execinstr (vmulps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mul_single(extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), concatenateMInt( mul_single(extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mul_single(extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), concatenateMInt( mul_single(extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128)), concatenateMInt( mul_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( mul_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( mul_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), mul_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))))))))
)

    </regstate>
    


// vmulps-ymm-ymm-ymm-semantics


// vcvtsd2siq-r64-xmm

  rule <k>
    execinstr (vcvtsd2siq R1:Xmm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> cvt_double_to_int64(extractMInt( getParentValue(R1, RSMap), 192, 256))
)

    </regstate>
    


// vcvtsd2siq-r64-xmm-semantics


// cvttss2sil-r32-xmm

  rule <k>
    execinstr (cvttss2sil R1:Xmm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), cvt_single_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 224, 256)))
)

    </regstate>
    


// cvttss2sil-r32-xmm-semantics


// vpmaxsb-ymm-ymm-ymm

  rule <k>
    execinstr (vpmaxsb R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 0, 8), extractMInt( getParentValue(R1, RSMap), 0, 8)) #then extractMInt( getParentValue(R2, RSMap), 0, 8) #else extractMInt( getParentValue(R1, RSMap), 0, 8) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 8, 16), extractMInt( getParentValue(R1, RSMap), 8, 16)) #then extractMInt( getParentValue(R2, RSMap), 8, 16) #else extractMInt( getParentValue(R1, RSMap), 8, 16) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 16, 24), extractMInt( getParentValue(R1, RSMap), 16, 24)) #then extractMInt( getParentValue(R2, RSMap), 16, 24) #else extractMInt( getParentValue(R1, RSMap), 16, 24) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 24, 32), extractMInt( getParentValue(R1, RSMap), 24, 32)) #then extractMInt( getParentValue(R2, RSMap), 24, 32) #else extractMInt( getParentValue(R1, RSMap), 24, 32) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 32, 40), extractMInt( getParentValue(R1, RSMap), 32, 40)) #then extractMInt( getParentValue(R2, RSMap), 32, 40) #else extractMInt( getParentValue(R1, RSMap), 32, 40) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 40, 48), extractMInt( getParentValue(R1, RSMap), 40, 48)) #then extractMInt( getParentValue(R2, RSMap), 40, 48) #else extractMInt( getParentValue(R1, RSMap), 40, 48) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 48, 56)) #then extractMInt( getParentValue(R2, RSMap), 48, 56) #else extractMInt( getParentValue(R1, RSMap), 48, 56) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 56, 64)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else extractMInt( getParentValue(R1, RSMap), 56, 64) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 64, 72), extractMInt( getParentValue(R1, RSMap), 64, 72)) #then extractMInt( getParentValue(R2, RSMap), 64, 72) #else extractMInt( getParentValue(R1, RSMap), 64, 72) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 72, 80), extractMInt( getParentValue(R1, RSMap), 72, 80)) #then extractMInt( getParentValue(R2, RSMap), 72, 80) #else extractMInt( getParentValue(R1, RSMap), 72, 80) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 80, 88), extractMInt( getParentValue(R1, RSMap), 80, 88)) #then extractMInt( getParentValue(R2, RSMap), 80, 88) #else extractMInt( getParentValue(R1, RSMap), 80, 88) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 88, 96), extractMInt( getParentValue(R1, RSMap), 88, 96)) #then extractMInt( getParentValue(R2, RSMap), 88, 96) #else extractMInt( getParentValue(R1, RSMap), 88, 96) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 96, 104), extractMInt( getParentValue(R1, RSMap), 96, 104)) #then extractMInt( getParentValue(R2, RSMap), 96, 104) #else extractMInt( getParentValue(R1, RSMap), 96, 104) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 104, 112), extractMInt( getParentValue(R1, RSMap), 104, 112)) #then extractMInt( getParentValue(R2, RSMap), 104, 112) #else extractMInt( getParentValue(R1, RSMap), 104, 112) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 112, 120), extractMInt( getParentValue(R1, RSMap), 112, 120)) #then extractMInt( getParentValue(R2, RSMap), 112, 120) #else extractMInt( getParentValue(R1, RSMap), 112, 120) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 120, 128), extractMInt( getParentValue(R1, RSMap), 120, 128)) #then extractMInt( getParentValue(R2, RSMap), 120, 128) #else extractMInt( getParentValue(R1, RSMap), 120, 128) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else extractMInt( getParentValue(R1, RSMap), 128, 136) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else extractMInt( getParentValue(R1, RSMap), 136, 144) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else extractMInt( getParentValue(R1, RSMap), 144, 152) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else extractMInt( getParentValue(R1, RSMap), 152, 160) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else extractMInt( getParentValue(R1, RSMap), 160, 168) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else extractMInt( getParentValue(R1, RSMap), 168, 176) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else extractMInt( getParentValue(R1, RSMap), 176, 184) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else extractMInt( getParentValue(R1, RSMap), 184, 192) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else extractMInt( getParentValue(R1, RSMap), 192, 200) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else extractMInt( getParentValue(R1, RSMap), 200, 208) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else extractMInt( getParentValue(R1, RSMap), 208, 216) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else extractMInt( getParentValue(R1, RSMap), 216, 224) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else extractMInt( getParentValue(R1, RSMap), 224, 232) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else extractMInt( getParentValue(R1, RSMap), 232, 240) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R1, RSMap), 240, 248) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #then extractMInt( getParentValue(R2, RSMap), 248, 256) #else extractMInt( getParentValue(R1, RSMap), 248, 256) #fi))))))))))))))))))))))))))))))))
)

    </regstate>
    


// vpmaxsb-ymm-ymm-ymm-semantics


// vphminposuw-xmm-xmm

  rule <k>
    execinstr (vphminposuw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 160, 176) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 144, 160) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 160, 176) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi) #fi) #fi)) #then concatenateMInt( mi(109, 0), mi(3, 7)) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 160, 176) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi) #fi)) #then concatenateMInt( mi(109, 0), mi(3, 6)) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi)) #then concatenateMInt( mi(109, 0), mi(3, 5)) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then concatenateMInt( mi(109, 0), mi(3, 4)) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then concatenateMInt( mi(109, 0), mi(3, 3)) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then concatenateMInt( mi(109, 0), mi(3, 2)) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then concatenateMInt( mi(109, 0), mi(3, 1)) #else concatenateMInt( mi(109, 0), mi(3, 0)) #fi) #fi) #fi) #fi) #fi) #fi) #fi), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 160, 176) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 144, 160) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 160, 176) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 128, 144) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 160, 176) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 144, 160) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 160, 176) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi)))
)

    </regstate>
    


// vphminposuw-xmm-xmm-semantics


// rsqrtss-xmm-xmm

  rule <k>
    execinstr (rsqrtss R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 224), approx_reciprocal_sqrt_single(extractMInt( getParentValue(R1, RSMap), 224, 256)))
)

    </regstate>
    


// rsqrtss-xmm-xmm-semantics


// vpmulhuw-xmm-xmm-xmm

  rule <k>
    execinstr (vpmulhuw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), 0, 16), extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), 0, 16)))))))))
)

    </regstate>
    


// vpmulhuw-xmm-xmm-xmm-semantics


// vpminsd-ymm-ymm-ymm

  rule <k>
    execinstr (vpminsd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)) #then extractMInt( getParentValue(R2, RSMap), 0, 32) #else extractMInt( getParentValue(R1, RSMap), 0, 32) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)) #then extractMInt( getParentValue(R2, RSMap), 32, 64) #else extractMInt( getParentValue(R1, RSMap), 32, 64) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)) #then extractMInt( getParentValue(R2, RSMap), 64, 96) #else extractMInt( getParentValue(R1, RSMap), 64, 96) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128)) #then extractMInt( getParentValue(R2, RSMap), 96, 128) #else extractMInt( getParentValue(R1, RSMap), 96, 128) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R1, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R1, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else extractMInt( getParentValue(R1, RSMap), 192, 224) #fi), (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))))))))
)

    </regstate>
    


// vpminsd-ymm-ymm-ymm-semantics


// vpackuswb-ymm-ymm-ymm

  rule <k>
    execinstr (vpackuswb R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 0, 16), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 0, 16), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 16, 32), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 16, 32), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 24, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 32, 48), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 32, 48), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 40, 48) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 56, 64) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 64, 80), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 64, 80), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 72, 80) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 80, 96), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 80, 96), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 88, 96) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 96, 112), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 96, 112), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 104, 112) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 112, 128), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 112, 128), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 120, 128) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 0, 16), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 0, 16), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 16, 32), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 16, 32), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 24, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 32, 48), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 32, 48), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 40, 48) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 56, 64) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 64, 80), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 64, 80), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 72, 80) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 80, 96), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 80, 96), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 88, 96) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 96, 112), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 96, 112), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 104, 112) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 112, 128), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 112, 128), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 120, 128) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 136, 144) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 152, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 168, 176) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 184, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 200, 208) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 216, 224) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 232, 240) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 248, 256) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 136, 144) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 152, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 168, 176) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 184, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 200, 208) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 216, 224) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 232, 240) #fi) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi))))))))))))))))))))))))))))))))
)

    </regstate>
    


// vpackuswb-ymm-ymm-ymm-semantics


// vcvttss2siq-r64-xmm

  rule <k>
    execinstr (vcvttss2siq R1:Xmm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> cvt_single_to_int64_truncate(extractMInt( getParentValue(R1, RSMap), 224, 256))
)

    </regstate>
    


// vcvttss2siq-r64-xmm-semantics


// blsil-r32-r32

  rule <k>
    execinstr (blsil R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), andMInt( addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), extractMInt( getParentValue(R1, RSMap), 32, 64)))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), 0, 1), extractMInt( getParentValue(R1, RSMap), 32, 33))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// blsil-r32-r32-semantics


// setp-rh

  rule <k>
    execinstr (setp R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt eqMInt(getFlag("PF", RSMap), mi(1,1)) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setp-rh-semantics


// vrsqrtss-xmm-xmm-xmm

  rule <k>
    execinstr (vrsqrtss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 224), approx_reciprocal_sqrt_single(extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vrsqrtss-xmm-xmm-xmm-semantics


// divw-r16

  rule <k>
    execinstr (divw R1:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), div_quotient_int16(concatenateMInt( extractMInt( getParentValue(%rdx, RSMap), 48, 64), extractMInt( getParentValue(%rax, RSMap), 48, 64)), extractMInt( getParentValue(R1, RSMap), 48, 64)))

"RDX" |-> concatenateMInt( extractMInt( getParentValue(%rdx, RSMap), 0, 48), div_remainder_int16(concatenateMInt( extractMInt( getParentValue(%rdx, RSMap), 48, 64), extractMInt( getParentValue(%rax, RSMap), 48, 64)), extractMInt( getParentValue(R1, RSMap), 48, 64)))

"CF" |-> (undefMInt)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// divw-r16-semantics


// bzhil-r32-r32-r32

  rule <k>
    execinstr (bzhil R1:R32, R2:R32, R3:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(32, 0), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 32)) #then (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 31)) #then concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 33, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 30)) #then concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 34, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 29)) #then concatenateMInt( mi(3, 0), extractMInt( getParentValue(R2, RSMap), 35, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 28)) #then concatenateMInt( mi(4, 0), extractMInt( getParentValue(R2, RSMap), 36, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 27)) #then concatenateMInt( mi(5, 0), extractMInt( getParentValue(R2, RSMap), 37, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 26)) #then concatenateMInt( mi(6, 0), extractMInt( getParentValue(R2, RSMap), 38, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 25)) #then concatenateMInt( mi(7, 0), extractMInt( getParentValue(R2, RSMap), 39, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 24)) #then concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 40, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 23)) #then concatenateMInt( mi(9, 0), extractMInt( getParentValue(R2, RSMap), 41, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 22)) #then concatenateMInt( mi(10, 0), extractMInt( getParentValue(R2, RSMap), 42, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 21)) #then concatenateMInt( mi(11, 0), extractMInt( getParentValue(R2, RSMap), 43, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 20)) #then concatenateMInt( mi(12, 0), extractMInt( getParentValue(R2, RSMap), 44, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 19)) #then concatenateMInt( mi(13, 0), extractMInt( getParentValue(R2, RSMap), 45, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 18)) #then concatenateMInt( mi(14, 0), extractMInt( getParentValue(R2, RSMap), 46, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 17)) #then concatenateMInt( mi(15, 0), extractMInt( getParentValue(R2, RSMap), 47, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 16)) #then concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 15)) #then concatenateMInt( mi(17, 0), extractMInt( getParentValue(R2, RSMap), 49, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 14)) #then concatenateMInt( mi(18, 0), extractMInt( getParentValue(R2, RSMap), 50, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 13)) #then concatenateMInt( mi(19, 0), extractMInt( getParentValue(R2, RSMap), 51, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 12)) #then concatenateMInt( mi(20, 0), extractMInt( getParentValue(R2, RSMap), 52, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 11)) #then concatenateMInt( mi(21, 0), extractMInt( getParentValue(R2, RSMap), 53, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 10)) #then concatenateMInt( mi(22, 0), extractMInt( getParentValue(R2, RSMap), 54, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 9)) #then concatenateMInt( mi(23, 0), extractMInt( getParentValue(R2, RSMap), 55, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 8)) #then concatenateMInt( mi(24, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 7)) #then concatenateMInt( mi(25, 0), extractMInt( getParentValue(R2, RSMap), 57, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 6)) #then concatenateMInt( mi(26, 0), extractMInt( getParentValue(R2, RSMap), 58, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 5)) #then concatenateMInt( mi(27, 0), extractMInt( getParentValue(R2, RSMap), 59, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 4)) #then concatenateMInt( mi(28, 0), extractMInt( getParentValue(R2, RSMap), 60, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 3)) #then concatenateMInt( mi(29, 0), extractMInt( getParentValue(R2, RSMap), 61, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 2)) #then concatenateMInt( mi(30, 0), extractMInt( getParentValue(R2, RSMap), 62, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)) #then concatenateMInt( mi(31, 0), extractMInt( getParentValue(R2, RSMap), 63, 64)) #else mi(32, 0) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))

"CF" |-> (#ifMInt ugeMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 32)) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 32)) #then (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 31)) #then concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 33, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 30)) #then concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 34, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 29)) #then concatenateMInt( mi(3, 0), extractMInt( getParentValue(R2, RSMap), 35, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 28)) #then concatenateMInt( mi(4, 0), extractMInt( getParentValue(R2, RSMap), 36, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 27)) #then concatenateMInt( mi(5, 0), extractMInt( getParentValue(R2, RSMap), 37, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 26)) #then concatenateMInt( mi(6, 0), extractMInt( getParentValue(R2, RSMap), 38, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 25)) #then concatenateMInt( mi(7, 0), extractMInt( getParentValue(R2, RSMap), 39, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 24)) #then concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 40, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 23)) #then concatenateMInt( mi(9, 0), extractMInt( getParentValue(R2, RSMap), 41, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 22)) #then concatenateMInt( mi(10, 0), extractMInt( getParentValue(R2, RSMap), 42, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 21)) #then concatenateMInt( mi(11, 0), extractMInt( getParentValue(R2, RSMap), 43, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 20)) #then concatenateMInt( mi(12, 0), extractMInt( getParentValue(R2, RSMap), 44, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 19)) #then concatenateMInt( mi(13, 0), extractMInt( getParentValue(R2, RSMap), 45, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 18)) #then concatenateMInt( mi(14, 0), extractMInt( getParentValue(R2, RSMap), 46, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 17)) #then concatenateMInt( mi(15, 0), extractMInt( getParentValue(R2, RSMap), 47, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 16)) #then concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 15)) #then concatenateMInt( mi(17, 0), extractMInt( getParentValue(R2, RSMap), 49, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 14)) #then concatenateMInt( mi(18, 0), extractMInt( getParentValue(R2, RSMap), 50, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 13)) #then concatenateMInt( mi(19, 0), extractMInt( getParentValue(R2, RSMap), 51, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 12)) #then concatenateMInt( mi(20, 0), extractMInt( getParentValue(R2, RSMap), 52, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 11)) #then concatenateMInt( mi(21, 0), extractMInt( getParentValue(R2, RSMap), 53, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 10)) #then concatenateMInt( mi(22, 0), extractMInt( getParentValue(R2, RSMap), 54, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 9)) #then concatenateMInt( mi(23, 0), extractMInt( getParentValue(R2, RSMap), 55, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 8)) #then concatenateMInt( mi(24, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 7)) #then concatenateMInt( mi(25, 0), extractMInt( getParentValue(R2, RSMap), 57, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 6)) #then concatenateMInt( mi(26, 0), extractMInt( getParentValue(R2, RSMap), 58, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 5)) #then concatenateMInt( mi(27, 0), extractMInt( getParentValue(R2, RSMap), 59, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 4)) #then concatenateMInt( mi(28, 0), extractMInt( getParentValue(R2, RSMap), 60, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 3)) #then concatenateMInt( mi(29, 0), extractMInt( getParentValue(R2, RSMap), 61, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 2)) #then concatenateMInt( mi(30, 0), extractMInt( getParentValue(R2, RSMap), 62, 64)) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)) #then concatenateMInt( mi(31, 0), extractMInt( getParentValue(R2, RSMap), 63, 64)) #else mi(32, 0) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 32)) #then mi(1, 0) #else extractMInt( getParentValue(R2, RSMap), 32, 33) #fi)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// bzhil-r32-r32-r32-semantics


// cmovzq-r64-r64

  rule <k>
    execinstr (cmovzq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt eqMInt(getFlag("ZF", RSMap), mi(1,1)) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovzq-r64-r64-semantics


// paddusb-xmm-xmm

  rule <k>
    execinstr (paddusb R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 128, 136))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 128, 136))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 136, 144))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 136, 144))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 144, 152))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 144, 152))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 152, 160))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 152, 160))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 160, 168))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 160, 168))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 168, 176))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 168, 176))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 176, 184))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 176, 184))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 184, 192))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 184, 192))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 192, 200))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 192, 200))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 200, 208))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 200, 208))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 208, 216))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 208, 216))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 216, 224))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 216, 224))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 224, 232))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 224, 232))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 232, 240))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 232, 240))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 240, 248))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 240, 248))), 1, 9) #fi), (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))), 1, 9) #fi)))))))))))))))))
)

    </regstate>
    


// paddusb-xmm-xmm-semantics


// vpaddb-xmm-xmm-xmm

  rule <k>
    execinstr (vpaddb R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)), addMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256))))))))))))))))))
)

    </regstate>
    


// vpaddb-xmm-xmm-xmm-semantics


// pcmpgtq-xmm-xmm

  rule <k>
    execinstr (pcmpgtq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi)))
)

    </regstate>
    


// pcmpgtq-xmm-xmm-semantics


// addl-r32-r32

  rule <k>
    execinstr (addl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// addl-r32-r32-semantics


// vpor-ymm-ymm-ymm

  rule <k>
    execinstr (vpor R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> orMInt( getParentValue(R2, RSMap), getParentValue(R1, RSMap))
)

    </regstate>
    


// vpor-ymm-ymm-ymm-semantics


// unpcklps-xmm-xmm

  rule <k>
    execinstr (unpcklps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224)), extractMInt( getParentValue(R1, RSMap), 224, 256)), extractMInt( getParentValue(R2, RSMap), 224, 256)))
)

    </regstate>
    


// unpcklps-xmm-xmm-semantics


// vpsadbw-xmm-xmm-xmm

  rule <k>
    execinstr (vpsadbw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( mi(48, 0), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 128, 136), extractMInt( getParentValue(R2, RSMap), 128, 136)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 136, 144), extractMInt( getParentValue(R2, RSMap), 136, 144)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 144, 152), extractMInt( getParentValue(R2, RSMap), 144, 152)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 152, 160), extractMInt( getParentValue(R2, RSMap), 152, 160)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 160, 168), extractMInt( getParentValue(R2, RSMap), 160, 168)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 168, 176), extractMInt( getParentValue(R2, RSMap), 168, 176)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 176, 184), extractMInt( getParentValue(R2, RSMap), 176, 184)) #fi)), concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 184, 192), extractMInt( getParentValue(R2, RSMap), 184, 192)) #fi)))))))))), concatenateMInt( mi(48, 0), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 192, 200), extractMInt( getParentValue(R2, RSMap), 192, 200)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 200, 208), extractMInt( getParentValue(R2, RSMap), 200, 208)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 208, 216), extractMInt( getParentValue(R2, RSMap), 208, 216)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 216, 224), extractMInt( getParentValue(R2, RSMap), 216, 224)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 224, 232), extractMInt( getParentValue(R2, RSMap), 224, 232)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 232, 240), extractMInt( getParentValue(R2, RSMap), 232, 240)) #fi)), addMInt( concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 240, 248), extractMInt( getParentValue(R2, RSMap), 240, 248)) #fi)), concatenateMInt( mi(8, 0), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #then subMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #else subMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), extractMInt( getParentValue(R2, RSMap), 248, 256)) #fi))))))))))))
)

    </regstate>
    


// vpsadbw-xmm-xmm-xmm-semantics


// divps-xmm-xmm

  rule <k>
    execinstr (divps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( div_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( div_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( div_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), div_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// divps-xmm-xmm-semantics


// orb-rh-r8

  rule <k>
    execinstr (orb R1:R8, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), orMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 56, 64))), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 55, 56), extractMInt( getParentValue(R1, RSMap), 63, 64)), mi(1, 1)) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 54, 55), extractMInt( getParentValue(R1, RSMap), 62, 63)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 53, 54), extractMInt( getParentValue(R1, RSMap), 61, 62)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 52, 53), extractMInt( getParentValue(R1, RSMap), 60, 61)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 51, 52), extractMInt( getParentValue(R1, RSMap), 59, 60)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 50, 51), extractMInt( getParentValue(R1, RSMap), 58, 59)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 49, 50), extractMInt( getParentValue(R1, RSMap), 57, 58)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> orMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( getParentValue(R1, RSMap), 56, 57))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// orb-rh-r8-semantics


// cmovgw-r16-r16

  rule <k>
    execinstr (cmovgw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt ((notBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) andBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1)))) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovgw-r16-r16-semantics


// xchgw-ax-r16

  rule <k>
    execinstr (xchgw R1:R16, %ax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), extractMInt( getParentValue(R1, RSMap), 48, 64))

convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), extractMInt( getParentValue(%rax, RSMap), 48, 64))
)

    </regstate>
      requires notBool sameRegisters(R1, %ax)

    rule <k>
    execinstr (xchgw R1:R16, %ax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,

convToRegKeys(R1) |-> getParentValue(R1, RSMap)
)

    </regstate>
      requires sameRegisters(R1, %ax)



// xchgw-ax-r16-semantics


// shlb-rh-one

  rule <k>
    execinstr (shlb $0x1, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 1, 2)

"OF" |-> (#ifMInt (eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(mi(9, 1))), 1, 2), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shlb-rh-one-semantics


// vorpd-xmm-xmm-xmm

  rule <k>
    execinstr (vorpd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), orMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// vorpd-xmm-xmm-xmm-semantics


// vphsubw-ymm-ymm-ymm

  rule <k>
    execinstr (vphsubw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 16, 32), extractMInt( getParentValue(R1, RSMap), 0, 16)), subMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 32, 48))), subMInt( extractMInt( getParentValue(R1, RSMap), 80, 96), extractMInt( getParentValue(R1, RSMap), 64, 80))), subMInt( extractMInt( getParentValue(R1, RSMap), 112, 128), extractMInt( getParentValue(R1, RSMap), 96, 112))), subMInt( extractMInt( getParentValue(R2, RSMap), 16, 32), extractMInt( getParentValue(R2, RSMap), 0, 16))), subMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), extractMInt( getParentValue(R2, RSMap), 32, 48))), subMInt( extractMInt( getParentValue(R2, RSMap), 80, 96), extractMInt( getParentValue(R2, RSMap), 64, 80))), subMInt( extractMInt( getParentValue(R2, RSMap), 112, 128), extractMInt( getParentValue(R2, RSMap), 96, 112))), concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 128, 144)), subMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 160, 176))), subMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 192, 208))), subMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 224, 240))), subMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R2, RSMap), 128, 144))), subMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R2, RSMap), 160, 176))), subMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R2, RSMap), 192, 208))), subMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R2, RSMap), 224, 240))))
)

    </regstate>
    


// vphsubw-ymm-ymm-ymm-semantics


// vpmaxsw-ymm-ymm-ymm

  rule <k>
    execinstr (vpmaxsw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 0, 16), extractMInt( getParentValue(R1, RSMap), 0, 16)) #then extractMInt( getParentValue(R2, RSMap), 0, 16) #else extractMInt( getParentValue(R1, RSMap), 0, 16) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 16, 32), extractMInt( getParentValue(R1, RSMap), 16, 32)) #then extractMInt( getParentValue(R2, RSMap), 16, 32) #else extractMInt( getParentValue(R1, RSMap), 16, 32) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 32, 48), extractMInt( getParentValue(R1, RSMap), 32, 48)) #then extractMInt( getParentValue(R2, RSMap), 32, 48) #else extractMInt( getParentValue(R1, RSMap), 32, 48) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 48, 64)) #then extractMInt( getParentValue(R2, RSMap), 48, 64) #else extractMInt( getParentValue(R1, RSMap), 48, 64) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 64, 80), extractMInt( getParentValue(R1, RSMap), 64, 80)) #then extractMInt( getParentValue(R2, RSMap), 64, 80) #else extractMInt( getParentValue(R1, RSMap), 64, 80) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 80, 96), extractMInt( getParentValue(R1, RSMap), 80, 96)) #then extractMInt( getParentValue(R2, RSMap), 80, 96) #else extractMInt( getParentValue(R1, RSMap), 80, 96) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 96, 112), extractMInt( getParentValue(R1, RSMap), 96, 112)) #then extractMInt( getParentValue(R2, RSMap), 96, 112) #else extractMInt( getParentValue(R1, RSMap), 96, 112) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 112, 128), extractMInt( getParentValue(R1, RSMap), 112, 128)) #then extractMInt( getParentValue(R2, RSMap), 112, 128) #else extractMInt( getParentValue(R1, RSMap), 112, 128) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)) #then extractMInt( getParentValue(R2, RSMap), 128, 144) #else extractMInt( getParentValue(R1, RSMap), 128, 144) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)) #then extractMInt( getParentValue(R2, RSMap), 144, 160) #else extractMInt( getParentValue(R1, RSMap), 144, 160) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)) #then extractMInt( getParentValue(R2, RSMap), 160, 176) #else extractMInt( getParentValue(R1, RSMap), 160, 176) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)) #then extractMInt( getParentValue(R2, RSMap), 176, 192) #else extractMInt( getParentValue(R1, RSMap), 176, 192) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)) #then extractMInt( getParentValue(R2, RSMap), 192, 208) #else extractMInt( getParentValue(R1, RSMap), 192, 208) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)) #then extractMInt( getParentValue(R2, RSMap), 208, 224) #else extractMInt( getParentValue(R1, RSMap), 208, 224) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)) #then extractMInt( getParentValue(R2, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 224, 240) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R2, RSMap), 240, 256) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))))))))))))))))
)

    </regstate>
    


// vpmaxsw-ymm-ymm-ymm-semantics


// adcq-r64-r64

  rule <k>
    execinstr (adcq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), mi(65, 1)) #else concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65)

"CF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), mi(65, 1)) #else concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), mi(65, 1)) #else concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), mi(65, 1)) #else concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), mi(65, 1)) #else concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), mi(65, 1)) #else concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), mi(65, 1)) #else concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), mi(65, 1)) #else concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), mi(65, 1)) #else concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), mi(65, 1)) #else concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), mi(65, 1)) #else concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), mi(65, 1)) #else concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), mi(65, 1)) #else concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)), mi(65, 1)) #else concatenateMInt( mi(1, 0), getParentValue(R1, RSMap)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// adcq-r64-r64-semantics


// pminsw-xmm-xmm

  rule <k>
    execinstr (pminsw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)) #then extractMInt( getParentValue(R2, RSMap), 128, 144) #else extractMInt( getParentValue(R1, RSMap), 128, 144) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)) #then extractMInt( getParentValue(R2, RSMap), 144, 160) #else extractMInt( getParentValue(R1, RSMap), 144, 160) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)) #then extractMInt( getParentValue(R2, RSMap), 160, 176) #else extractMInt( getParentValue(R1, RSMap), 160, 176) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)) #then extractMInt( getParentValue(R2, RSMap), 176, 192) #else extractMInt( getParentValue(R1, RSMap), 176, 192) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)) #then extractMInt( getParentValue(R2, RSMap), 192, 208) #else extractMInt( getParentValue(R1, RSMap), 192, 208) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)) #then extractMInt( getParentValue(R2, RSMap), 208, 224) #else extractMInt( getParentValue(R1, RSMap), 208, 224) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)) #then extractMInt( getParentValue(R2, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 224, 240) #fi), (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R2, RSMap), 240, 256) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)))))))))
)

    </regstate>
    


// pminsw-xmm-xmm-semantics


// cmovll-r32-r32

  rule <k>
    execinstr (cmovll R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt (notBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1)))) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovll-r32-r32-semantics


// rcll-r32-cl

  rule <k>
    execinstr (rcll %cl, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), uremMInt( concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(33, 33))), 1, 33))

"CF" |-> extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), uremMInt( concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(33, 33))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(33, 33)), 25, 33), mi(8, 1)) andBool (eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), uremMInt( concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(33, 33))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), uremMInt( concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(33, 33))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(33, 33)), 25, 33), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(33, 33)), 25, 33), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(33, 33)), 25, 33), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rcll-r32-cl-semantics


// rcrb-rh-one

  rule <k>
    execinstr (rcrb $0x1, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), mi(9, 1)), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), mi(9, 1)), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), mi(9, 1)), 1, 2), mi(1, 1)) xorBool eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), mi(9, 1)), 2, 3), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rcrb-rh-one-semantics


// pmovsxbd-xmm-xmm

  rule <k>
    execinstr (pmovsxbd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232))), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240))), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))))))
)

    </regstate>
    


// pmovsxbd-xmm-xmm-semantics


// vfmsub132pd-ymm-ymm-ymm

  rule <k>
    execinstr (vfmsub132pd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( vfmsub132_double(extractMInt( getParentValue(R3, RSMap), 0, 64), extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), concatenateMInt( vfmsub132_double(extractMInt( getParentValue(R3, RSMap), 64, 128), extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128)), concatenateMInt( vfmsub132_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfmsub132_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)))))
)

    </regstate>
    


// vfmsub132pd-ymm-ymm-ymm-semantics


// vmovmskpd-r64-xmm

  rule <k>
    execinstr (vmovmskpd R1:Xmm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(62, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 128, 129), extractMInt(getParentValue(R1, RSMap), 192, 193))) )


)

    </regstate>


// vmovmskpd-r64-xmm-semantics

/*
TargetInstr:
vmovmskpd %xmm1, %rbx
RWSet:
maybe read:{ %xmm1 }
must read:{ %xmm1 }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:vmovmskpd %xmm1, %r12d  #  1     0    4      OPC=vmovmskpd_r32_xmm
circuit:movq %r12, %rbx         #  2     0x4  3      OPC=movq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vmovmskpd %xmm1, %rbx

  maybe read:      { %xmm1 }
  must read:       { %xmm1 }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%rbx   : (concat <0x0|32> (plus (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[63:32]) (concat <0x0|1> <%ymm1|256>[63:32]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[63:32]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[63:32])) (concat <0x0|1> <%ymm1|256>[63:32]))[32:32] <0x1|1>) then (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x2|33> else <0x1|33>) else (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>)) (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>))[31:0])

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/
// movq-xmm-r64

  rule <k>
    execinstr (movq R1:R64, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( mi(64, 0), getParentValue(R1, RSMap)))
)

    </regstate>
    


// movq-xmm-r64-semantics


// movss-xmm-xmm

  rule <k>
    execinstr (movss R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 224), extractMInt( getParentValue(R1, RSMap), 224, 256))
)

    </regstate>
    


// movss-xmm-xmm-semantics


// ucomiss-xmm-xmm

  rule <k>
    execinstr (ucomiss R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(2, 0)) orBool eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(2, 2))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(2, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt (eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(2, 0)) orBool eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(2, 3))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// ucomiss-xmm-xmm-semantics


// vpbroadcastw-ymm-xmm

  rule <k>
    execinstr (vpbroadcastw R1:Xmm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256))))))))))))))))
)

    </regstate>
    


// vpbroadcastw-ymm-xmm-semantics


// xchgl-r32-r32

  rule <k>
    execinstr (xchgl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( mi(32, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))

convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 32, 64))
)

    </regstate>
      requires notBool sameRegisters(R1, R2)


         rule <k>
    execinstr (xchgl R1:R32, R1:R32,  .Operands) => execinstr(nop  .Operands)
  ...</k>
      requires sameRegisters(R1, %eax)


// xchgl-r32-r32-semantics


// vsubpd-ymm-ymm-ymm

  rule <k>
    execinstr (vsubpd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( sub_double(extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), concatenateMInt( sub_double(extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128)), concatenateMInt( sub_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), sub_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)))))
)

    </regstate>
    


// vsubpd-ymm-ymm-ymm-semantics


// punpckhqdq-xmm-xmm

  rule <k>
    execinstr (punpckhqdq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192)))
)

    </regstate>
    


// punpckhqdq-xmm-xmm-semantics


// setno-rh

  rule <k>
    execinstr (setno R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt (notBool eqMInt(getFlag("OF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setno-rh-semantics


// btcl-r32-r32

  rule <k>
    execinstr (btcl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), xorMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), shlMInt( mi(32, 1), uvalueMInt(mi(32, svalueMInt(andMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 31))))))))

"CF" |-> extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), uvalueMInt(mi(32, svalueMInt(andMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 31)))))), 31, 32)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btcl-r32-r32-semantics


// notq-r64

  rule <k>
    execinstr (notq R1:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> negMInt( getParentValue(R1, RSMap))
)

    </regstate>
    


// notq-r64-semantics


// vpabsw-ymm-ymm

  rule <k>
    execinstr (vpabsw R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 0, 16), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 0, 16))) #else extractMInt( getParentValue(R1, RSMap), 0, 16) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 16, 32), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 16, 32))) #else extractMInt( getParentValue(R1, RSMap), 16, 32) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 32, 48), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 48))) #else extractMInt( getParentValue(R1, RSMap), 32, 48) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64))) #else extractMInt( getParentValue(R1, RSMap), 48, 64) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 64, 80), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 64, 80))) #else extractMInt( getParentValue(R1, RSMap), 64, 80) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 80, 96), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 80, 96))) #else extractMInt( getParentValue(R1, RSMap), 80, 96) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 96, 112), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 96, 112))) #else extractMInt( getParentValue(R1, RSMap), 96, 112) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 112, 128), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 112, 128))) #else extractMInt( getParentValue(R1, RSMap), 112, 128) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 128, 144))) #else extractMInt( getParentValue(R1, RSMap), 128, 144) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 144, 160))) #else extractMInt( getParentValue(R1, RSMap), 144, 160) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 160, 176))) #else extractMInt( getParentValue(R1, RSMap), 160, 176) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 176, 192))) #else extractMInt( getParentValue(R1, RSMap), 176, 192) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 192, 208))) #else extractMInt( getParentValue(R1, RSMap), 192, 208) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 208, 224))) #else extractMInt( getParentValue(R1, RSMap), 208, 224) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 224, 240))) #else extractMInt( getParentValue(R1, RSMap), 224, 240) #fi), (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), mi(16, 32767)) #then addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 240, 256))) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))))))))))))))))
)

    </regstate>
    


// vpabsw-ymm-ymm-semantics


// setnge-rh

  rule <k>
    execinstr (setnge R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt (notBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1)))) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setnge-rh-semantics


// roll-r32-cl

  rule <k>
    execinstr (roll %cl, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), rol( extractMInt( getParentValue(R2, RSMap), 32, 64), concatenateMInt( mi(24, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)))))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 32, 64), concatenateMInt( mi(24, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)))), 31, 32), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool (eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 32, 64), concatenateMInt( mi(24, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 32, 64), concatenateMInt( mi(24, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)))), 31, 32), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// roll-r32-cl-semantics


// testb-rh-rh

  rule <k>
    execinstr (testb R1:Rh, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 55, 56), extractMInt( getParentValue(R1, RSMap), 55, 56)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 54, 55), extractMInt( getParentValue(R1, RSMap), 54, 55)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 53, 54), extractMInt( getParentValue(R1, RSMap), 53, 54)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 52, 53), extractMInt( getParentValue(R1, RSMap), 52, 53)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 51, 52), extractMInt( getParentValue(R1, RSMap), 51, 52)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 50, 51), extractMInt( getParentValue(R1, RSMap), 50, 51)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 49, 50), extractMInt( getParentValue(R1, RSMap), 49, 50)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( getParentValue(R1, RSMap), 48, 49))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// testb-rh-rh-semantics


// andb-r8-rh

  rule <k>
    execinstr (andb R1:Rh, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), andMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 48, 56)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( getParentValue(R1, RSMap), 55, 56)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( getParentValue(R1, RSMap), 54, 55)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( getParentValue(R1, RSMap), 53, 54)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( getParentValue(R1, RSMap), 52, 53)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(R1, RSMap), 51, 52)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( getParentValue(R1, RSMap), 50, 51)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( getParentValue(R1, RSMap), 49, 50)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 48, 49))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// andb-r8-rh-semantics


// vandnpd-ymm-ymm-ymm

  rule <k>
    execinstr (vandnpd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> andMInt( negMInt( getParentValue(R2, RSMap)), getParentValue(R1, RSMap))
)

    </regstate>
    


// vandnpd-ymm-ymm-ymm-semantics


// sall-r32-cl

  rule <k>
    execinstr (sall %cl, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 33))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 32)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 32))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 25, 26), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 33), mi(32, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool (((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 32)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 32))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sall-r32-cl-semantics


// pcmpgtb-xmm-xmm

  rule <k>
    execinstr (pcmpgtb R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #then mi(8, 255) #else mi(8, 0) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #then mi(8, 255) #else mi(8, 0) #fi)))))))))))))))))
)

    </regstate>
    


// pcmpgtb-xmm-xmm-semantics


// vpminub-xmm-xmm-xmm

  rule <k>
    execinstr (vpminub R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else extractMInt( getParentValue(R1, RSMap), 128, 136) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else extractMInt( getParentValue(R1, RSMap), 136, 144) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else extractMInt( getParentValue(R1, RSMap), 144, 152) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else extractMInt( getParentValue(R1, RSMap), 152, 160) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else extractMInt( getParentValue(R1, RSMap), 160, 168) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else extractMInt( getParentValue(R1, RSMap), 168, 176) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else extractMInt( getParentValue(R1, RSMap), 176, 184) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else extractMInt( getParentValue(R1, RSMap), 184, 192) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else extractMInt( getParentValue(R1, RSMap), 192, 200) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else extractMInt( getParentValue(R1, RSMap), 200, 208) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else extractMInt( getParentValue(R1, RSMap), 208, 216) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else extractMInt( getParentValue(R1, RSMap), 216, 224) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else extractMInt( getParentValue(R1, RSMap), 224, 232) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else extractMInt( getParentValue(R1, RSMap), 232, 240) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R1, RSMap), 240, 248) #fi), (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #then extractMInt( getParentValue(R2, RSMap), 248, 256) #else extractMInt( getParentValue(R1, RSMap), 248, 256) #fi)))))))))))))))))
)

    </regstate>
    


// vpminub-xmm-xmm-xmm-semantics


/*
TEMP ← SRC1;
MASK ← SRC2;
DEST ← 0 ;
m← 0, k← 0;
DO WHILE m< OperandSize
    IF MASK[ m] = 1 THEN
        DEST[ k] ← TEMP[ m];
        k ← k+ 1;
    FI
    m ← m+ 1;
OD
*/   

// pextq-r64-r64-r64

  rule <k>
    execinstr (pextq R1:R64, R2:R64, R3:R64, .Operands) => 
      setRegisterValue(mi(64, 0), R3) ~> parallelBitExtract(getRegisterValue(R1,
            RSMap), R2, R3, 0, 0)
  ...</k>
    <regstate> RSMap:Map </regstate>


  syntax KItem ::= parallelBitExtract(MInt, Register, Register, Int, Int)

  // Base Condition
  rule <k>
    parallelBitExtract(Mask:MInt, TempR:Register, DestR:Register, 63:Int, K:Int) => 
      setRegisterBitsAtPositon(getRegisterBitsAtPositon(TempR, 1, 63, RSMap), DestR, K)
  ...</k>  
    <regstate> RSMap:Map </regstate>
      requires eqMInt( extractMInt(Mask, 0, 1), mi(1, 1))

  rule <k>
    parallelBitExtract(Mask:MInt, TempR:Register, DestR:Register, 63:Int, K:Int) => 
    .
  ...</k>  
    requires eqMInt( extractMInt(Mask, 0, 1), mi(1, 0))

  // General Condition
  rule <k>
    parallelBitExtract(Mask:MInt, TempR:Register, DestR:Register, M:Int, K:Int) => 
      setRegisterBitsAtPositon(getRegisterBitsAtPositon(TempR, 1, M, RSMap), DestR, K)
  ~>  parallelBitExtract(Mask, TempR, DestR, M +Int 1, K +Int 1)
  ...</k>  
    <regstate> RSMap:Map </regstate>
      requires eqMInt( extractMInt(Mask, 63 -Int M, 64 -Int M), mi(1, 1))
      
  rule <k>
    parallelBitExtract(Mask:MInt, TempR:Register, DestR:Register, M:Int, K:Int) => 
        parallelBitExtract(Mask, TempR, DestR, M +Int 1, K)
  ...</k>  
    requires eqMInt( extractMInt(Mask, 63 -Int M, 64 -Int M), mi(1, 0))




// imulb-r8

  rule <k>
    execinstr (imulb R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(16, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 56, 64)))))

"CF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(16, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 56, 64)))), mi(16, svalueMInt(extractMInt( mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(16, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 56, 64)))), 8, 16))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(16, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 56, 64)))), mi(16, svalueMInt(extractMInt( mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(16, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 56, 64)))), 8, 16))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// imulb-r8-semantics


// vpsubq-ymm-ymm-ymm

  rule <k>
    execinstr (vpsubq R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), subMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)))))
)

    </regstate>
    


// vpsubq-ymm-ymm-ymm-semantics


// seta-r8

  rule <k>
    execinstr (seta R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt ((notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) andBool (notBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// seta-r8-semantics


// vorps-xmm-xmm-xmm

  rule <k>
    execinstr (vorps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), orMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// vorps-xmm-xmm-xmm-semantics


// cmovzw-r16-r16

  rule <k>
    execinstr (cmovzw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt eqMInt(getFlag("ZF", RSMap), mi(1,1)) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovzw-r16-r16-semantics


// nopl-r32

  rule <k>
    execinstr (nopl R1:R32,  .Operands) => .
  ...</k>


// nopl-r32-semantics


// salw-r16-cl

  rule <k>
    execinstr (salw %cl, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 17))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 16)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 16))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 9, 10), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 17), mi(16, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool (((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 16)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 16))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// salw-r16-cl-semantics


// vmovsldup-xmm-xmm

  rule <k>
    execinstr (vmovsldup R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vmovsldup-xmm-xmm-semantics


// minpd-xmm-xmm

  rule <k>
    execinstr (minpd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt eqMInt( mincmp_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 192) #else extractMInt( getParentValue(R1, RSMap), 128, 192) #fi), (#ifMInt eqMInt( mincmp_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 256) #else extractMInt( getParentValue(R1, RSMap), 192, 256) #fi)))
)

    </regstate>
    


// minpd-xmm-xmm-semantics


// vdivss-xmm-xmm-xmm

  rule <k>
    execinstr (vdivss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 224), div_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vdivss-xmm-xmm-xmm-semantics


// vmovddup-xmm-xmm

  rule <k>
    execinstr (vmovddup R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)))
)

    </regstate>
    


// vmovddup-xmm-xmm-semantics


// vfnmsub132sd-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmsub132sd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 192), vfnmsub132_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfnmsub132sd-xmm-xmm-xmm-semantics


// cmovneq-r64-r64

  rule <k>
    execinstr (cmovneq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt (notBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovneq-r64-r64-semantics


// vandpd-ymm-ymm-ymm

  rule <k>
    execinstr (vandpd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> andMInt( getParentValue(R2, RSMap), getParentValue(R1, RSMap))
)

    </regstate>
    


// vandpd-ymm-ymm-ymm-semantics


// vpabsd-ymm-ymm

  rule <k>
    execinstr (vpabsd R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 0, 32), mi(32, 2147483647)) #then addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 0, 32))) #else extractMInt( getParentValue(R1, RSMap), 0, 32) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 2147483647)) #then addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))) #else extractMInt( getParentValue(R1, RSMap), 32, 64) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 64, 96), mi(32, 2147483647)) #then addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 64, 96))) #else extractMInt( getParentValue(R1, RSMap), 64, 96) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 96, 128), mi(32, 2147483647)) #then addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 96, 128))) #else extractMInt( getParentValue(R1, RSMap), 96, 128) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), mi(32, 2147483647)) #then addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 128, 160))) #else extractMInt( getParentValue(R1, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), mi(32, 2147483647)) #then addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 160, 192))) #else extractMInt( getParentValue(R1, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), mi(32, 2147483647)) #then addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 192, 224))) #else extractMInt( getParentValue(R1, RSMap), 192, 224) #fi), (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), mi(32, 2147483647)) #then addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 224, 256))) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))))))))
)

    </regstate>
    


// vpabsd-ymm-ymm-semantics


// setno-r8

  rule <k>
    execinstr (setno R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt (notBool eqMInt(getFlag("OF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setno-r8-semantics


// vfnmadd231pd-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmadd231pd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfnmadd132_double(mi(64, 0), mi(64, 0), mi(64, 0)), vfnmadd132_double(mi(64, 0), mi(64, 0), mi(64, 0))), concatenateMInt( vfnmadd132_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfnmadd132_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfnmadd231pd-xmm-xmm-xmm-semantics


// vcvtsi2sdl-xmm-xmm-r32

  rule <k>
    execinstr (vcvtsi2sdl R1:R32, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), cvt_int32_to_double(extractMInt( getParentValue(R1, RSMap), 32, 64))))
)

    </regstate>
    


// vcvtsi2sdl-xmm-xmm-r32-semantics


// vpabsd-xmm-xmm

  rule <k>
    execinstr (vpabsd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), mi(32, 2147483647)) #then addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 128, 160))) #else extractMInt( getParentValue(R1, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), mi(32, 2147483647)) #then addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 160, 192))) #else extractMInt( getParentValue(R1, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), mi(32, 2147483647)) #then addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 192, 224))) #else extractMInt( getParentValue(R1, RSMap), 192, 224) #fi), (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), mi(32, 2147483647)) #then addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 224, 256))) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi)))))
)

    </regstate>
    


// vpabsd-xmm-xmm-semantics


// vpmovzxbq-ymm-xmm

  rule <k>
    execinstr (vpmovzxbq R1:Xmm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( mi(56, 0), extractMInt( getParentValue(R1, RSMap), 224, 232)), concatenateMInt( concatenateMInt( mi(56, 0), extractMInt( getParentValue(R1, RSMap), 232, 240)), concatenateMInt( concatenateMInt( mi(56, 0), extractMInt( getParentValue(R1, RSMap), 240, 248)), concatenateMInt( mi(56, 0), extractMInt( getParentValue(R1, RSMap), 248, 256)))))
)

    </regstate>
    


// vpmovzxbq-ymm-xmm-semantics


// cvtdq2pd-xmm-xmm

  rule <k>
    execinstr (cvtdq2pd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( cvt_int32_to_double(extractMInt( getParentValue(R1, RSMap), 192, 224)), cvt_int32_to_double(extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// cvtdq2pd-xmm-xmm-semantics


// vfnmsub132ps-ymm-ymm-ymm

  rule <k>
    execinstr (vfnmsub132ps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R3, RSMap), 0, 32), extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R3, RSMap), 32, 64), extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R3, RSMap), 64, 96), extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R3, RSMap), 96, 128), extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128)), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfnmsub132_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))))))))
)

    </regstate>
    


// vfnmsub132ps-ymm-ymm-ymm-semantics


// cmpxchgl-r32-r32

  rule <k>
    execinstr (cmpxchgl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> (#ifMInt eqMInt( extractMInt( getParentValue(%rax, RSMap), 32, 64), extractMInt( getParentValue(R2, RSMap), 32, 64)) #then getParentValue(%rax, RSMap) #else concatenateMInt( mi(32, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)) #fi)

convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), (#ifMInt eqMInt( extractMInt( getParentValue(%rax, RSMap), 32, 64), extractMInt( getParentValue(R2, RSMap), 32, 64)) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 28, 29))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 32, 33)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 32, 33)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (cmpxchgl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
        convToRegKeys(R2) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R2, RSMap), 32, 64)) #then extractMInt( getParentValue(R2, RSMap), 0, 32) #else mi(32, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29)

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 32, 33)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 32, 33)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
      requires sameRegisters(R1, R2)
  


// cmpxchgl-r32-r32-semantics


// vpcmpeqd-ymm-ymm-ymm

  rule <k>
    execinstr (vpcmpeqd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)) #then mi(32, 4294967295) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)) #then mi(32, 4294967295) #else mi(32, 0) #fi))))))))
)

    </regstate>
    


// vpcmpeqd-ymm-ymm-ymm-semantics


// vfnmadd213pd-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmadd213pd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfnmadd132_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192), extractMInt( getParentValue(R3, RSMap), 128, 192)), vfnmadd132_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R3, RSMap), 192, 256))))
)

    </regstate>
    


// vfnmadd213pd-xmm-xmm-xmm-semantics


// btq-r64-r64

  rule <k>
    execinstr (btq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(mi(64, svalueMInt(andMInt( getParentValue(R1, RSMap), mi(64, 63)))))), 63, 64)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btq-r64-r64-semantics


// movd-xmm-r32

  rule <k>
    execinstr (movd R1:R32, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( mi(96, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)))
)

    </regstate>
    


// movd-xmm-r32-semantics


// cqto

  rule <k>
    execinstr (cqto  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RDX" |-> extractMInt( mi(128, svalueMInt(getParentValue(%rax, RSMap))), 0, 64)
)

    </regstate>
    


// cqto-semantics


// vcvttpd2dq-xmm-xmm

  rule <k>
    execinstr (vcvttpd2dq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(192, 0), concatenateMInt( cvt_double_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 128, 192)), cvt_double_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vcvttpd2dq-xmm-xmm-semantics


// vpmuldq-xmm-xmm-xmm

  rule <k>
    execinstr (vpmuldq R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 192))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 192)))), mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 256))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vpmuldq-xmm-xmm-xmm-semantics


// cvtsd2ss-xmm-xmm

  rule <k>
    execinstr (cvtsd2ss R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 224), cvt_double_to_single(extractMInt( getParentValue(R1, RSMap), 192, 256)))
)

    </regstate>
    


// cvtsd2ss-xmm-xmm-semantics


// setns-rh

  rule <k>
    execinstr (setns R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt (notBool eqMInt(getFlag("SF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setns-rh-semantics


// cmovsl-r32-r32

  rule <k>
    execinstr (cmovsl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt eqMInt(getFlag("SF", RSMap), mi(1,1)) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovsl-r32-r32-semantics


// andw-r16-r16

  rule <k>
    execinstr (andw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), andMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 48, 64)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( getParentValue(R1, RSMap), 63, 64)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( getParentValue(R1, RSMap), 62, 63)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( getParentValue(R1, RSMap), 61, 62)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( getParentValue(R1, RSMap), 60, 61)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(R1, RSMap), 59, 60)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( getParentValue(R1, RSMap), 58, 59)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( getParentValue(R1, RSMap), 57, 58)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 48, 64)), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( getParentValue(R1, RSMap), 48, 49))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// andw-r16-r16-semantics


// vfmadd231pd-ymm-ymm-ymm

  rule <k>
    execinstr (vfmadd231pd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( vfmadd132_double(extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R3, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), concatenateMInt( vfmadd132_double(extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R3, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128)), concatenateMInt( vfmadd132_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfmadd132_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)))))
)

    </regstate>
    


// vfmadd231pd-ymm-ymm-ymm-semantics


// salw-r16-one

  rule <k>
    execinstr (salw $0x1, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 1, 17))

"CF" |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 1, 2)

"OF" |-> (#ifMInt (eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 1, 2), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// salw-r16-one-semantics


// vpunpckhqdq-ymm-ymm-ymm

  rule <k>
    execinstr (vpunpckhqdq R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 64), extractMInt( getParentValue(R2, RSMap), 0, 64)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192)))
)

    </regstate>
    


// vpunpckhqdq-ymm-ymm-ymm-semantics


// psllw-xmm-xmm

  rule <k>
    execinstr (psllw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(128, 0) #else concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), shlMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))))))))) #fi))
)

    </regstate>
    


// psllw-xmm-xmm-semantics


// divpd-xmm-xmm

  rule <k>
    execinstr (divpd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( div_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), div_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// divpd-xmm-xmm-semantics


// vpslld-xmm-xmm-xmm

  rule <k>
    execinstr (vpslld R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 31)) #then concatenateMInt( mi(128, 0), mi(128, 0)) #else concatenateMInt( mi(128, 0), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), shlMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))))))) #fi)
)

    </regstate>
    


// vpslld-xmm-xmm-xmm-semantics


// pmovzxbd-xmm-xmm

  rule <k>
    execinstr (pmovzxbd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( mi(24, 0), extractMInt( getParentValue(R1, RSMap), 224, 232)), concatenateMInt( concatenateMInt( mi(24, 0), extractMInt( getParentValue(R1, RSMap), 232, 240)), concatenateMInt( concatenateMInt( mi(24, 0), extractMInt( getParentValue(R1, RSMap), 240, 248)), concatenateMInt( mi(24, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))))))
)

    </regstate>
    


// pmovzxbd-xmm-xmm-semantics


// paddsb-xmm-xmm

  rule <k>
    execinstr (paddsb R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 136))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 136))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 136))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 136, 144))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 136, 144))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 136, 144))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 152))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 152))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 152))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 152, 160))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 152, 160))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 152, 160))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 168))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 168))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 168))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 168, 176))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 168, 176))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 168, 176))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 184))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 184))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 184))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 184, 192))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 184, 192))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 184, 192))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 200))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 200))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 200))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 200, 208))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 200, 208))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 200, 208))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 216))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 216))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 216))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 216, 224))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 216, 224))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 216, 224))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 232))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 232))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 232))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 232, 240))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 232, 240))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 232, 240))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240)))), 8, 16) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 248))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 248))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 248))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248)))), 8, 16) #fi) #fi), (#ifMInt sgtMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 248, 256))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 248, 256))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( addMInt( mi(16, svalueMInt(extractMInt( getParentValue(R2, RSMap), 248, 256))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))), 8, 16) #fi) #fi)))))))))))))))))
)

    </regstate>
    


// paddsb-xmm-xmm-semantics


// cmpxchgq-r64-r64

  rule <k>
    execinstr (cmpxchgq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> (#ifMInt eqMInt( getParentValue(%rax, RSMap), getParentValue(R2, RSMap)) #then getParentValue(%rax, RSMap) #else getParentValue(R2, RSMap) #fi)

convToRegKeys(R2) |-> (#ifMInt eqMInt( getParentValue(%rax, RSMap), getParentValue(R2, RSMap)) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 60, 61))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (cmpxchgq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
        convToRegKeys(R2) |-> getParentValue(R2, RSMap)

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61)

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( getParentValue(R2, RSMap))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
      requires sameRegisters(R1, R2)
  


// cmpxchgq-r64-r64-semantics


// cwtl

  rule <k>
    execinstr (cwtl  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( mi(32, 0), mi(32, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 48, 64))))
)

    </regstate>
    


// cwtl-semantics


// vphsubw-xmm-xmm-xmm

  rule <k>
    execinstr (vphsubw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 128, 144)), subMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 160, 176))), subMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 192, 208))), subMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 224, 240))), subMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R2, RSMap), 128, 144))), subMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R2, RSMap), 160, 176))), subMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R2, RSMap), 192, 208))), subMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R2, RSMap), 224, 240))))
)

    </regstate>
    


// vphsubw-xmm-xmm-xmm-semantics


// vfmaddsub231pd-xmm-xmm-xmm

  rule <k>
    execinstr (vfmaddsub231pd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfmadd231_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfmsub231_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfmaddsub231pd-xmm-xmm-xmm-semantics


// punpckhdq-xmm-xmm

  rule <k>
    execinstr (punpckhdq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192))))
)

    </regstate>
    


// punpckhdq-xmm-xmm-semantics


// rsqrtps-xmm-xmm

  rule <k>
    execinstr (rsqrtps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( approx_reciprocal_sqrt_single(extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( approx_reciprocal_sqrt_single(extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( approx_reciprocal_sqrt_single(extractMInt( getParentValue(R1, RSMap), 192, 224)), approx_reciprocal_sqrt_single(extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// rsqrtps-xmm-xmm-semantics


// setz-r8

  rule <k>
    execinstr (setz R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt eqMInt(getFlag("ZF", RSMap), mi(1,1)) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setz-r8-semantics


// vaddsubps-xmm-xmm-xmm

  rule <k>
    execinstr (vaddsubps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( add_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), sub_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192))), concatenateMInt( add_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), sub_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))))
)

    </regstate>
    


// vaddsubps-xmm-xmm-xmm-semantics


// btl-r32-r32

  rule <k>
    execinstr (btl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), uvalueMInt(mi(32, svalueMInt(andMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 31)))))), 31, 32)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btl-r32-r32-semantics


// rolq-r64-cl

  rule <k>
    execinstr (rolq %cl, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> rol( getParentValue(R2, RSMap), concatenateMInt( mi(56, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( rol( getParentValue(R2, RSMap), concatenateMInt( mi(56, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)))), 63, 64), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 1)) andBool (eqMInt( extractMInt( rol( getParentValue(R2, RSMap), concatenateMInt( mi(56, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( getParentValue(R2, RSMap), concatenateMInt( mi(56, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)))), 63, 64), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rolq-r64-cl-semantics


// negb-rh

  rule <k>
    execinstr (negb R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56)))), extractMInt( getParentValue(R1, RSMap), 56, 64))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 56), mi(8, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), 0, 1), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), 3, 4), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt eqMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) andBool eqMInt( extractMInt( addMInt(mi(8, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// negb-rh-semantics


// movzbw-r16-rh

  rule <k>
    execinstr (movzbw R1:Rh, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)))
)

    </regstate>
    


// movzbw-r16-rh-semantics


// rcrb-r8-cl

  rule <k>
    execinstr (rcrb %cl, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9))), 1, 9))

"CF" |-> extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 1)) andBool (eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9))), 1, 2), mi(1, 1)) xorBool eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9))), 2, 3), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rcrb-r8-cl-semantics


// vpackuswb-xmm-xmm-xmm

  rule <k>
    execinstr (vpackuswb R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 136, 144) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 152, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 168, 176) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 184, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 200, 208) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 216, 224) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 232, 240) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 248, 256) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 136, 144) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 152, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 168, 176) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 184, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 200, 208) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 216, 224) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 232, 240) #fi) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi)))))))))))))))))
)

    </regstate>
    


// vpackuswb-xmm-xmm-xmm-semantics


// vpsubsb-xmm-xmm-xmm

  rule <k>
    execinstr (vpsubsb R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 136))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 136))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 136))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 136, 144))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 136, 144))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 136, 144))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 152))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 152))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 152))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 152, 160))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 152, 160))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 152, 160))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 168))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 168))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 168))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 168, 176))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 168, 176))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 168, 176))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 184))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 184))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 184))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 184, 192))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 184, 192))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 184, 192))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 200))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 200))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 200))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 200, 208))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 200, 208))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 200, 208))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 216))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 216))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 216))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 216, 224))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 216, 224))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 216, 224))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 232))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 232))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 232))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 232, 240))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 232, 240))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 232, 240))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240)))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 248))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 248))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 248))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248)))), 2, 10) #fi) #fi), (#ifMInt sgtMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 248, 256))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))), mi(10, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 248, 256))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))), mi(10, 18446744073709551488)) #then mi(8, 128) #else extractMInt( subMInt( mi(10, svalueMInt(extractMInt( getParentValue(R2, RSMap), 248, 256))), mi(10, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))), 2, 10) #fi) #fi)))))))))))))))))
)

    </regstate>
    


// vpsubsb-xmm-xmm-xmm-semantics


// xorb-r8-r8

  rule <k>
    execinstr (xorb R1:R8, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 56, 64)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( getParentValue(R1, RSMap), 63, 64)), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( getParentValue(R1, RSMap), 62, 63)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( getParentValue(R1, RSMap), 61, 62)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( getParentValue(R1, RSMap), 60, 61)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(R1, RSMap), 59, 60)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( getParentValue(R1, RSMap), 58, 59)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( getParentValue(R1, RSMap), 57, 58)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 56, 57))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// xorb-r8-r8-semantics


// pmovzxbq-xmm-xmm

  rule <k>
    execinstr (pmovzxbq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( mi(56, 0), extractMInt( getParentValue(R1, RSMap), 240, 248)), concatenateMInt( mi(56, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))))
)

    </regstate>
    


// pmovzxbq-xmm-xmm-semantics


// orps-xmm-xmm

  rule <k>
    execinstr (orps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), orMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// orps-xmm-xmm-semantics


// vpavgw-ymm-ymm-ymm

  rule <k>
    execinstr (vpavgw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 0, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 0, 16))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 16, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 16, 32))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 48)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 48))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 64, 80)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 64, 80))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 80, 96)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 80, 96))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 96, 112)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 96, 112))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 112, 128)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 112, 128))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17), extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(17, 1)), uvalueMInt(mi(17, 1))), 1, 17))))))))))))))))
)

    </regstate>
    


// vpavgw-ymm-ymm-ymm-semantics


// subb-r8-r8

  rule <k>
    execinstr (subb R1:R8, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// subb-r8-r8-semantics


// andb-rh-r8

  rule <k>
    execinstr (andb R1:R8, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), andMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 56, 64))), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 55, 56), extractMInt( getParentValue(R1, RSMap), 63, 64)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 54, 55), extractMInt( getParentValue(R1, RSMap), 62, 63)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 53, 54), extractMInt( getParentValue(R1, RSMap), 61, 62)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 52, 53), extractMInt( getParentValue(R1, RSMap), 60, 61)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 51, 52), extractMInt( getParentValue(R1, RSMap), 59, 60)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 50, 51), extractMInt( getParentValue(R1, RSMap), 58, 59)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 49, 50), extractMInt( getParentValue(R1, RSMap), 57, 58)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 56, 64)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( getParentValue(R1, RSMap), 56, 57))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// andb-rh-r8-semantics


// pmulhw-xmm-xmm

  rule <k>
    execinstr (pmulhw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), 0, 16), extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), 0, 16)))))))))
)

    </regstate>
    


// pmulhw-xmm-xmm-semantics


// psubusw-xmm-xmm

  rule <k>
    execinstr (psubusw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), 2, 18) #fi) #fi), (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), 2, 18) #fi) #fi)))))))))
)

    </regstate>
    


// psubusw-xmm-xmm-semantics


// rcrq-r64-cl

  rule <k>
    execinstr (rcrq %cl, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))), mi(65, 65))), 1, 65)

"CF" |-> extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))), mi(65, 65))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))), mi(65, 65)), 57, 65), mi(8, 1)) andBool (eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))), mi(65, 65))), 1, 2), mi(1, 1)) xorBool eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))), mi(65, 65))), 2, 3), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))), mi(65, 65)), 57, 65), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))), mi(65, 65)), 57, 65), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))), mi(65, 65)), 57, 65), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rcrq-r64-cl-semantics


// vmovdqu-xmm-xmm

  rule <k>
    execinstr (vmovdqu R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), extractMInt( getParentValue(R1, RSMap), 128, 256))
)

    </regstate>
    


// vmovdqu-xmm-xmm-semantics


// decq-r64

  rule <k>
    execinstr (decq R1:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> subMInt( getParentValue(R1, RSMap), mi(64, 1))

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( subMInt( getParentValue(R1, RSMap), mi(64, 1)), 63, 64), mi(1, 1)) xorBool eqMInt( extractMInt( subMInt( getParentValue(R1, RSMap), mi(64, 1)), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( getParentValue(R1, RSMap), mi(64, 1)), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( getParentValue(R1, RSMap), mi(64, 1)), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( getParentValue(R1, RSMap), mi(64, 1)), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( getParentValue(R1, RSMap), mi(64, 1)), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( getParentValue(R1, RSMap), mi(64, 1)), 57, 58), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( getParentValue(R1, RSMap), mi(64, 1)), 56, 57), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt eqMInt( subMInt( getParentValue(R1, RSMap), mi(64, 1)), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( subMInt( getParentValue(R1, RSMap), mi(64, 1)), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 1)) andBool eqMInt( extractMInt( getParentValue(R1, RSMap), 1, 64), mi(63, 0))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// decq-r64-semantics


// vaddpd-ymm-ymm-ymm

  rule <k>
    execinstr (vaddpd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( add_double(extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), concatenateMInt( add_double(extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128)), concatenateMInt( add_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), add_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)))))
)

    </regstate>
    


// vaddpd-ymm-ymm-ymm-semantics


// cmoveq-r64-r64

  rule <k>
    execinstr (cmoveq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt eqMInt(getFlag("ZF", RSMap), mi(1,1)) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmoveq-r64-r64-semantics


// pcmpeqw-xmm-xmm

  rule <k>
    execinstr (pcmpeqw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)) #then mi(16, 65535) #else mi(16, 0) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then mi(16, 65535) #else mi(16, 0) #fi)))))))))
)

    </regstate>
    


// pcmpeqw-xmm-xmm-semantics


// pminsb-xmm-xmm

  rule <k>
    execinstr (pminsb R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else extractMInt( getParentValue(R1, RSMap), 128, 136) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else extractMInt( getParentValue(R1, RSMap), 136, 144) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else extractMInt( getParentValue(R1, RSMap), 144, 152) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else extractMInt( getParentValue(R1, RSMap), 152, 160) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else extractMInt( getParentValue(R1, RSMap), 160, 168) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else extractMInt( getParentValue(R1, RSMap), 168, 176) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else extractMInt( getParentValue(R1, RSMap), 176, 184) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else extractMInt( getParentValue(R1, RSMap), 184, 192) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else extractMInt( getParentValue(R1, RSMap), 192, 200) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else extractMInt( getParentValue(R1, RSMap), 200, 208) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else extractMInt( getParentValue(R1, RSMap), 208, 216) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else extractMInt( getParentValue(R1, RSMap), 216, 224) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else extractMInt( getParentValue(R1, RSMap), 224, 232) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else extractMInt( getParentValue(R1, RSMap), 232, 240) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R1, RSMap), 240, 248) #fi), (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #then extractMInt( getParentValue(R2, RSMap), 248, 256) #else extractMInt( getParentValue(R1, RSMap), 248, 256) #fi)))))))))))))))))
)

    </regstate>
    


// pminsb-xmm-xmm-semantics


// rorw-r16-one

  rule <k>
    execinstr (rorw $0x1, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), ror( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(16, 1)))

"CF" |-> extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(16, 1)), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(16, 1)), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(16, 1)), 1, 2), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rorw-r16-one-semantics


// vphaddd-xmm-xmm-xmm

  rule <k>
    execinstr (vphaddd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( concatenateMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 160, 192)), addMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 224, 256))), addMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 160, 192))), addMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 224, 256))))
)

    </regstate>
    


// vphaddd-xmm-xmm-xmm-semantics


// shrw-r16-one

  rule <k>
    execinstr (shrw $0x1, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 0, 16))

"CF" |-> extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 16, 17)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 15, 16), mi(1, 1)) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 9, 10), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 8, 9), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 0, 16), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 0, 1)

"OF" |-> extractMInt( getParentValue(R2, RSMap), 48, 49)
)

    </regstate>
    


// shrw-r16-one-semantics


// vpbroadcastq-ymm-xmm

  rule <k>
    execinstr (vpbroadcastq R1:Xmm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)))
)

    </regstate>
    


// vpbroadcastq-ymm-xmm-semantics


// cmovnzq-r64-r64

  rule <k>
    execinstr (cmovnzq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt (notBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovnzq-r64-r64-semantics


// divss-xmm-xmm

  rule <k>
    execinstr (divss R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 224), div_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))
)

    </regstate>
    


// divss-xmm-xmm-semantics


// vdivps-ymm-ymm-ymm

  rule <k>
    execinstr (vdivps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( div_single(extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), concatenateMInt( div_single(extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( div_single(extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), concatenateMInt( div_single(extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128)), concatenateMInt( div_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( div_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( div_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), div_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))))))))
)

    </regstate>
    


// vdivps-ymm-ymm-ymm-semantics


// vpmovsxbd-xmm-xmm

  rule <k>
    execinstr (vpmovsxbd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232))), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240))), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))))))
)

    </regstate>
    


// vpmovsxbd-xmm-xmm-semantics


// minps-xmm-xmm

  rule <k>
    execinstr (minps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt eqMInt( mincmp_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R1, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt eqMInt( mincmp_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R1, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt eqMInt( mincmp_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else extractMInt( getParentValue(R1, RSMap), 192, 224) #fi), (#ifMInt eqMInt( mincmp_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi)))))
)

    </regstate>
    


// minps-xmm-xmm-semantics


// imulw-r16-r16

  rule <k>
    execinstr (imulw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64)))), 16, 32))

"CF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64)))), mi(32, svalueMInt(extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64)))), 16, 32))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64)))), mi(32, svalueMInt(extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64)))), 16, 32))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// imulw-r16-r16-semantics


// paddusw-xmm-xmm

  rule <k>
    execinstr (paddusw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), 1, 17) #fi), (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), 1, 17) #fi)))))))))
)

    </regstate>
    


// paddusw-xmm-xmm-semantics


// comiss-xmm-xmm

  rule <k>
    execinstr (comiss R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(2, 0)) orBool eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(2, 2))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(2, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt (eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(2, 0)) orBool eqMInt( comiss(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(2, 3))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// comiss-xmm-xmm-semantics


// punpckldq-xmm-xmm

  rule <k>
    execinstr (punpckldq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256))))
)

    </regstate>
    


// punpckldq-xmm-xmm-semantics


// vfmsub132ss-xmm-xmm-xmm

  rule <k>
    execinstr (vfmsub132ss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 224), vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vfmsub132ss-xmm-xmm-xmm-semantics


// nopw-r16

  rule <k>
    execinstr (nopw R1:R16,  .Operands) => .
  ...</k>


// nopw-r16-semantics


// shlq-r64-cl

  rule <k>
    execinstr (shlq %cl, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 1, 65)

"CF" |-> (#ifMInt ((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 64)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 64))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 57, 58), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 1, 65), mi(64, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 1, 2), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 1)) andBool (((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 64)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 64))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shlq-r64-cl-semantics


// decb-r8

  rule <k>
    execinstr (decb R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), subMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)))

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)), 0, 1), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt eqMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 56, 64), mi(8, 1)), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) andBool eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 64), mi(7, 0))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// decb-r8-semantics


// vfmsubadd231pd-xmm-xmm-xmm

  rule <k>
    execinstr (vfmsubadd231pd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfmsub231_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfmadd231_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfmsubadd231pd-xmm-xmm-xmm-semantics


// vpsrlq-ymm-ymm-xmm

  rule <k>
    execinstr (vpsrlq R1:Xmm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 63)) #then mi(256, 0) #else concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 0, 64), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 64, 128), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 256))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 256)))))) #fi)
)

    </regstate>
    


// vpsrlq-ymm-ymm-xmm-semantics


// subb-rh-r8

  rule <k>
    execinstr (subb R1:R8, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 51, 52)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 56, 64))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// subb-rh-r8-semantics


// pmuldq-xmm-xmm

  rule <k>
    execinstr (pmuldq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 192))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 192)))), mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 256))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// pmuldq-xmm-xmm-semantics


// vpsubb-ymm-ymm-ymm

  rule <k>
    execinstr (vpsubb R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 0, 8), extractMInt( getParentValue(R1, RSMap), 0, 8)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 8, 16), extractMInt( getParentValue(R1, RSMap), 8, 16)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 16, 24), extractMInt( getParentValue(R1, RSMap), 16, 24)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 24, 32), extractMInt( getParentValue(R1, RSMap), 24, 32)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 32, 40), extractMInt( getParentValue(R1, RSMap), 32, 40)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 40, 48), extractMInt( getParentValue(R1, RSMap), 40, 48)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 64, 72), extractMInt( getParentValue(R1, RSMap), 64, 72)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 72, 80), extractMInt( getParentValue(R1, RSMap), 72, 80)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 80, 88), extractMInt( getParentValue(R1, RSMap), 80, 88)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 88, 96), extractMInt( getParentValue(R1, RSMap), 88, 96)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 96, 104), extractMInt( getParentValue(R1, RSMap), 96, 104)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 104, 112), extractMInt( getParentValue(R1, RSMap), 104, 112)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 112, 120), extractMInt( getParentValue(R1, RSMap), 112, 120)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 120, 128), extractMInt( getParentValue(R1, RSMap), 120, 128)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)), subMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)))))))))))))))))))))))))))))))))
)

    </regstate>
    


// vpsubb-ymm-ymm-ymm-semantics


// pabsd-xmm-xmm

  rule <k>
    execinstr (pabsd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), mi(32, 2147483647)) #then addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 128, 160))) #else extractMInt( getParentValue(R1, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), mi(32, 2147483647)) #then addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 160, 192))) #else extractMInt( getParentValue(R1, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), mi(32, 2147483647)) #then addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 192, 224))) #else extractMInt( getParentValue(R1, RSMap), 192, 224) #fi), (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), mi(32, 2147483647)) #then addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R1, RSMap), 224, 256))) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi)))))
)

    </regstate>
    


// pabsd-xmm-xmm-semantics


// cmovnpl-r32-r32

  rule <k>
    execinstr (cmovnpl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt (notBool eqMInt(getFlag("PF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovnpl-r32-r32-semantics


// cmovnaew-r16-r16

  rule <k>
    execinstr (cmovnaew R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovnaew-r16-r16-semantics


// sarxq-r64-r64-r64

  rule <k>
    execinstr (sarxq R1:R64, R2:R64, R3:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> ashrMInt( getParentValue(R2, RSMap), uvalueMInt(andMInt( getParentValue(R1, RSMap), mi(64, 63))))
)

    </regstate>
    


// sarxq-r64-r64-r64-semantics


// vpcmpeqw-ymm-ymm-ymm

  rule <k>
    execinstr (vpcmpeqw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 16), extractMInt( getParentValue(R1, RSMap), 0, 16)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 16, 32), extractMInt( getParentValue(R1, RSMap), 16, 32)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 48), extractMInt( getParentValue(R1, RSMap), 32, 48)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 48, 64)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 64, 80), extractMInt( getParentValue(R1, RSMap), 64, 80)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 80, 96), extractMInt( getParentValue(R1, RSMap), 80, 96)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 96, 112), extractMInt( getParentValue(R1, RSMap), 96, 112)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 112, 128), extractMInt( getParentValue(R1, RSMap), 112, 128)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)) #then mi(16, 65535) #else mi(16, 0) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then mi(16, 65535) #else mi(16, 0) #fi))))))))))))))))
)

    </regstate>
    


// vpcmpeqw-ymm-ymm-ymm-semantics


// cmc

  rule <k>
    execinstr (cmc  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 0) #else mi(1, 1) #fi)
)

    </regstate>
    


// cmc-semantics


// rcrq-r64-one

  rule <k>
    execinstr (rcrq $0x1, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), mi(8, 1)), mi(65, 65))), 1, 65)

"CF" |-> extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), mi(8, 1)), mi(65, 65))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), mi(8, 1)), mi(65, 65)), 57, 65), mi(8, 1)) andBool (eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), mi(8, 1)), mi(65, 65))), 1, 2), mi(1, 1)) xorBool eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), mi(8, 1)), mi(65, 65))), 2, 3), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), mi(8, 1)), mi(65, 65)), 57, 65), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), mi(8, 1)), mi(65, 65)), 57, 65), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), mi(8, 1)), mi(65, 65)), 57, 65), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rcrq-r64-one-semantics


// divb-rh

  rule <k>
    execinstr (divb R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), div_remainder_int8(extractMInt( getParentValue(%rax, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 48, 56))), div_quotient_int8(extractMInt( getParentValue(%rax, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 48, 56)))

"CF" |-> (undefMInt)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// divb-rh-semantics


// rolb-r8-cl

  rule <k>
    execinstr (rolb %cl, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), rol( extractMInt( getParentValue(R2, RSMap), 56, 64), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 56, 64), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), 7, 8), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool (eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 56, 64), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 56, 64), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), 7, 8), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rolb-r8-cl-semantics


// vfnmsub213pd-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmsub213pd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfnmsub132_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192), extractMInt( getParentValue(R3, RSMap), 128, 192)), vfnmsub132_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R3, RSMap), 192, 256))))
)

    </regstate>
    


// vfnmsub213pd-xmm-xmm-xmm-semantics


// cmovgl-r32-r32

  rule <k>
    execinstr (cmovgl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt ((notBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) andBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1)))) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovgl-r32-r32-semantics


// vpshufb-xmm-xmm-xmm

  rule <k>
    execinstr (vpshufb R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 128, 129), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 132, 136), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 136, 137), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 140, 144), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 144, 145), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 148, 152), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 152, 153), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 156, 160), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 160, 161), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 164, 168), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 168, 169), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 172, 176), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 176, 177), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 180, 184), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 184, 185), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 188, 192), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 192, 193), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 196, 200), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 200, 201), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 204, 208), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 208, 209), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 212, 216), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 216, 217), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 220, 224), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 224, 225), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 228, 232), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 232, 233), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 236, 240), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 240, 241), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 244, 248), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 248, 249), mi(1, 1)) #then mi(8, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 15)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 14)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 13)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 12)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 11)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 10)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 9)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 8)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 7)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 6)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 5)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 4)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 3)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 2)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 252, 256), mi(4, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi)))))))))))))))))
)

    </regstate>
    


// vpshufb-xmm-xmm-xmm-semantics


// mull-r32

  rule <k>
    execinstr (mull R1:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( mi(32, 0), extractMInt( mulMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 32, 64))

"RDX" |-> concatenateMInt( mi(32, 0), extractMInt( mulMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 0, 32))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( mulMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 0, 32), mi(32, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( extractMInt( mulMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 0, 32), mi(32, 0))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// mull-r32-semantics


// pmaxsd-xmm-xmm

  rule <k>
    execinstr (pmaxsd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R1, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R1, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else extractMInt( getParentValue(R1, RSMap), 192, 224) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi)))))
)

    </regstate>
    


// pmaxsd-xmm-xmm-semantics


// vfmsub213pd-ymm-ymm-ymm

  rule <k>
    execinstr (vfmsub213pd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64), extractMInt( getParentValue(R3, RSMap), 0, 64)), concatenateMInt( vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128), extractMInt( getParentValue(R3, RSMap), 64, 128)), concatenateMInt( vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192), extractMInt( getParentValue(R3, RSMap), 128, 192)), vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R3, RSMap), 192, 256)))))
)

    </regstate>
    


// vfmsub213pd-ymm-ymm-ymm-semantics


// vpsubsw-xmm-xmm-xmm

  rule <k>
    execinstr (vpsubsw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), 2, 18) #fi) #fi), (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), 2, 18) #fi) #fi)))))))))
)

    </regstate>
    


// vpsubsw-xmm-xmm-xmm-semantics


// cmovngel-r32-r32

  rule <k>
    execinstr (cmovngel R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt (notBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1)))) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovngel-r32-r32-semantics


// setc-r8

  rule <k>
    execinstr (setc R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setc-r8-semantics


// setnb-r8

  rule <k>
    execinstr (setnb R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt (notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setnb-r8-semantics


// paddsw-xmm-xmm

  rule <k>
    execinstr (paddsw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), 16, 32) #fi) #fi), (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), 16, 32) #fi) #fi)))))))))
)

    </regstate>
    


// paddsw-xmm-xmm-semantics


// rorb-rh-cl

  rule <k>
    execinstr (rorb %cl, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), ror( extractMInt( getParentValue(R2, RSMap), 48, 56), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)))), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 48, 56), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool (eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 48, 56), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 48, 56), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rorb-rh-cl-semantics


// vpunpckhdq-ymm-ymm-ymm

  rule <k>
    execinstr (vpunpckhdq R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 32), extractMInt( getParentValue(R2, RSMap), 0, 32)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), extractMInt( getParentValue(R2, RSMap), 32, 64)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192)))))
)

    </regstate>
    


// vpunpckhdq-ymm-ymm-ymm-semantics


// vrcpss-xmm-xmm-xmm

  rule <k>
    execinstr (vrcpss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 224), approx_reciprocal_single(extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vrcpss-xmm-xmm-xmm-semantics


// testb-r8-rh

  rule <k>
    execinstr (testb R1:Rh, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( getParentValue(R1, RSMap), 55, 56)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( getParentValue(R1, RSMap), 54, 55)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( getParentValue(R1, RSMap), 53, 54)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( getParentValue(R1, RSMap), 52, 53)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(R1, RSMap), 51, 52)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( getParentValue(R1, RSMap), 50, 51)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( getParentValue(R1, RSMap), 49, 50)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 48, 49))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// testb-r8-rh-semantics


// vaddsubpd-xmm-xmm-xmm

  rule <k>
    execinstr (vaddsubpd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( add_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), sub_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vaddsubpd-xmm-xmm-xmm-semantics


// setbe-rh

  rule <k>
    execinstr (setbe R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt (eqMInt(getFlag("CF", RSMap), mi(1,1)) orBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setbe-rh-semantics


// vpmulld-ymm-ymm-ymm

  rule <k>
    execinstr (vpmulld R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 32))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 32)))), 32, 64), concatenateMInt( extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 64)))), 32, 64), concatenateMInt( extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 96))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 96)))), 32, 64), concatenateMInt( extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 128))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 128)))), 32, 64), concatenateMInt( extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 160))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 160)))), 32, 64), concatenateMInt( extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 192))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 192)))), 32, 64), concatenateMInt( extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 224))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 224)))), 32, 64), extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 256))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256)))), 32, 64))))))))
)

    </regstate>
    


// vpmulld-ymm-ymm-ymm-semantics


// vpaddq-xmm-xmm-xmm

  rule <k>
    execinstr (vpaddq R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), addMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vpaddq-xmm-xmm-xmm-semantics


// vpmovsxwq-xmm-xmm

  rule <k>
    execinstr (vpmovsxwq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))))
)

    </regstate>
    


// vpmovsxwq-xmm-xmm-semantics


// vpmovzxwd-xmm-xmm

  rule <k>
    execinstr (vpmovzxwd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 192, 208)), concatenateMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 208, 224)), concatenateMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 224, 240)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))))))
)

    </regstate>
    


// vpmovzxwd-xmm-xmm-semantics


// pmovmskb-r32-xmm

  rule <k>
    execinstr (pmovmskb R1:Xmm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(48, 0), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 129), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 136, 137), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 144, 145), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 152, 153), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 161), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 168, 169), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 176, 177), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 184, 185), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 193), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 200, 201), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 208, 209), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 216, 217), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 225), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 232, 233), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 241), extractMInt( getParentValue(R1, RSMap), 248, 249)))))))))))))))))
)

    </regstate>
    


// pmovmskb-r32-xmm-semantics


// incq-r64

  rule <k>
    execinstr (incq R1:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> addMInt( getParentValue(R1, RSMap), mi(64, 1))

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( getParentValue(R1, RSMap), mi(64, 1)), 63, 64), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( getParentValue(R1, RSMap), mi(64, 1)), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( getParentValue(R1, RSMap), mi(64, 1)), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( getParentValue(R1, RSMap), mi(64, 1)), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( getParentValue(R1, RSMap), mi(64, 1)), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( getParentValue(R1, RSMap), mi(64, 1)), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( getParentValue(R1, RSMap), mi(64, 1)), 57, 58), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( getParentValue(R1, RSMap), mi(64, 1)), 56, 57), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 15)) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt eqMInt( addMInt( getParentValue(R1, RSMap), mi(64, 1)), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( getParentValue(R1, RSMap), mi(64, 1)), 0, 1)

"OF" |-> (#ifMInt ((notBool eqMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), mi(1, 1))) andBool eqMInt( extractMInt( getParentValue(R1, RSMap), 1, 64), mi(63, 18446744073709551615))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// incq-r64-semantics


// cmovcw-r16-r16

  rule <k>
    execinstr (cmovcw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovcw-r16-r16-semantics


// psubq-xmm-xmm

  rule <k>
    execinstr (psubq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), subMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// psubq-xmm-xmm-semantics


// adcl-r32-r32

  rule <k>
    execinstr (adcl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(33, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33))

"CF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(33, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(33, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(33, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(33, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(33, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(33, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(33, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(33, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(33, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(33, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(33, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(33, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(33, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// adcl-r32-r32-semantics


// vphaddd-ymm-ymm-ymm

  rule <k>
    execinstr (vphaddd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 32, 64)), addMInt( extractMInt( getParentValue(R1, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 96, 128))), addMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R2, RSMap), 32, 64))), addMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R2, RSMap), 96, 128))), concatenateMInt( concatenateMInt( concatenateMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 160, 192)), addMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 224, 256))), addMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 160, 192))), addMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 224, 256))))
)

    </regstate>
    


// vphaddd-ymm-ymm-ymm-semantics


// setp-r8

  rule <k>
    execinstr (setp R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt eqMInt(getFlag("PF", RSMap), mi(1,1)) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setp-r8-semantics


// notw-r16

  rule <k>
    execinstr (notw R1:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 64)))
)

    </regstate>
    


// notw-r16-semantics


// cmovbew-r16-r16

  rule <k>
    execinstr (cmovbew R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt (eqMInt(getFlag("CF", RSMap), mi(1,1)) orBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovbew-r16-r16-semantics


// vfnmadd213sd-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmadd213sd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 192), vfnmadd213_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfnmadd213sd-xmm-xmm-xmm-semantics


// cmovnlew-r16-r16

  rule <k>
    execinstr (cmovnlew R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt ((notBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) andBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1)))) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovnlew-r16-r16-semantics


// addsubps-xmm-xmm

  rule <k>
    execinstr (addsubps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( add_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), sub_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192))), concatenateMInt( add_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), sub_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))))
)

    </regstate>
    


// addsubps-xmm-xmm-semantics


// xchgw-r16-ax

  rule <k>
    execinstr (xchgw %ax, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), extractMInt( getParentValue(R2, RSMap), 48, 64))

convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( getParentValue(%rax, RSMap), 48, 64))
)

    </regstate>
      requires notBool sameRegisters(%ax, R2)

     rule <k>
    execinstr (xchgw %ax, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> getParentValue(R2, RSMap)
)

    </regstate>
      requires sameRegisters(%ax, R2)



// xchgw-r16-ax-semantics


// vpaddusb-ymm-ymm-ymm

  rule <k>
    execinstr (vpaddusb R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 0, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 0, 8))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 0, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 0, 8))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 8, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 8, 16))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 8, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 8, 16))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 16, 24)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 16, 24))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 16, 24)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 16, 24))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 24, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 24, 32))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 24, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 24, 32))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 40)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 40))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 40)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 32, 40))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 40, 48)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 40, 48))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 40, 48)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 40, 48))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 64, 72)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 64, 72))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 64, 72)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 64, 72))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 72, 80)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 72, 80))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 72, 80)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 72, 80))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 80, 88)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 80, 88))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 80, 88)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 80, 88))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 88, 96)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 88, 96))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 88, 96)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 88, 96))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 96, 104)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 96, 104))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 96, 104)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 96, 104))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 104, 112)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 104, 112))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 104, 112)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 104, 112))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 112, 120)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 112, 120))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 112, 120)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 112, 120))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 120, 128)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 120, 128))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 120, 128)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 120, 128))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 128, 136))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 128, 136))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 136, 144))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 136, 144))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 144, 152))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 144, 152))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 152, 160))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 152, 160))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 160, 168))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 160, 168))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 168, 176))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 168, 176))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 176, 184))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 176, 184))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 184, 192))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 184, 192))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 192, 200))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 192, 200))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 200, 208))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 200, 208))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 208, 216))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 208, 216))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 216, 224))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 216, 224))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 224, 232))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 224, 232))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 232, 240))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 232, 240))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 240, 248))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 240, 248))), 1, 9) #fi), (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))), 1, 9) #fi))))))))))))))))))))))))))))))))
)

    </regstate>
    


// vpaddusb-ymm-ymm-ymm-semantics


// movb-r8-r8

  rule <k>
    execinstr (movb R1:R8, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// movb-r8-r8-semantics


// vxorpd-xmm-xmm-xmm

  rule <k>
    execinstr (vxorpd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), xorMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// vxorpd-xmm-xmm-xmm-semantics


// vunpcklpd-ymm-ymm-ymm

  rule <k>
    execinstr (vunpcklpd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 64, 128), extractMInt( getParentValue(R2, RSMap), 64, 128)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256)))
)

    </regstate>
    


// vunpcklpd-ymm-ymm-ymm-semantics


// movzbl-r32-r8

  rule <k>
    execinstr (movzbl R1:R8, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(56, 0), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// movzbl-r32-r8-semantics


// vpsravd-ymm-ymm-ymm

  rule <k>
    execinstr (vpsravd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 32))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 64))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 96))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 128))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 160))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 192))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 224))), ashrMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))))))))))
)

    </regstate>
    


// vpsravd-ymm-ymm-ymm-semantics


// bextrq-r64-r64-r64

  rule <k>
    execinstr (bextrq R1:R64, R2:R64, R3:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> andMInt( extractMInt( lshrMInt( concatenateMInt( mi(448, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(504, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)))), 448, 512), negMInt( extractMInt( shlMInt( lshrMInt( mi(512, 18446744073709551615), uvalueMInt(concatenateMInt( mi(504, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)))), uvalueMInt(concatenateMInt( mi(504, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)))), 448, 512)))

"CF" |-> mi(1, 0)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( lshrMInt( concatenateMInt( mi(448, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(504, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)))), 448, 512), negMInt( extractMInt( shlMInt( lshrMInt( mi(512, 18446744073709551615), uvalueMInt(concatenateMInt( mi(504, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)))), uvalueMInt(concatenateMInt( mi(504, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)))), 448, 512))), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (undefMInt)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// bextrq-r64-r64-r64-semantics


// subpd-xmm-xmm

  rule <k>
    execinstr (subpd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( sub_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), sub_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// subpd-xmm-xmm-semantics


// movsd-xmm-xmm

  rule <k>
    execinstr (movsd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 192), extractMInt( getParentValue(R1, RSMap), 192, 256))
)

    </regstate>
    


// movsd-xmm-xmm-semantics


// vfmsub132ps-xmm-xmm-xmm

  rule <k>
    execinstr (vfmsub132ps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vfmsub132ps-xmm-xmm-xmm-semantics


// vfnmsub231ss-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmsub231ss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 224), vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vfnmsub231ss-xmm-xmm-xmm-semantics


// cmovnbew-r16-r16

  rule <k>
    execinstr (cmovnbew R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt ((notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) andBool (notBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovnbew-r16-r16-semantics


// vpmaxub-ymm-ymm-ymm

  rule <k>
    execinstr (vpmaxub R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 0, 8), extractMInt( getParentValue(R1, RSMap), 0, 8)) #then extractMInt( getParentValue(R2, RSMap), 0, 8) #else extractMInt( getParentValue(R1, RSMap), 0, 8) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 8, 16), extractMInt( getParentValue(R1, RSMap), 8, 16)) #then extractMInt( getParentValue(R2, RSMap), 8, 16) #else extractMInt( getParentValue(R1, RSMap), 8, 16) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 16, 24), extractMInt( getParentValue(R1, RSMap), 16, 24)) #then extractMInt( getParentValue(R2, RSMap), 16, 24) #else extractMInt( getParentValue(R1, RSMap), 16, 24) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 24, 32), extractMInt( getParentValue(R1, RSMap), 24, 32)) #then extractMInt( getParentValue(R2, RSMap), 24, 32) #else extractMInt( getParentValue(R1, RSMap), 24, 32) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 32, 40), extractMInt( getParentValue(R1, RSMap), 32, 40)) #then extractMInt( getParentValue(R2, RSMap), 32, 40) #else extractMInt( getParentValue(R1, RSMap), 32, 40) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 40, 48), extractMInt( getParentValue(R1, RSMap), 40, 48)) #then extractMInt( getParentValue(R2, RSMap), 40, 48) #else extractMInt( getParentValue(R1, RSMap), 40, 48) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 48, 56)) #then extractMInt( getParentValue(R2, RSMap), 48, 56) #else extractMInt( getParentValue(R1, RSMap), 48, 56) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 56, 64)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else extractMInt( getParentValue(R1, RSMap), 56, 64) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 64, 72), extractMInt( getParentValue(R1, RSMap), 64, 72)) #then extractMInt( getParentValue(R2, RSMap), 64, 72) #else extractMInt( getParentValue(R1, RSMap), 64, 72) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 72, 80), extractMInt( getParentValue(R1, RSMap), 72, 80)) #then extractMInt( getParentValue(R2, RSMap), 72, 80) #else extractMInt( getParentValue(R1, RSMap), 72, 80) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 80, 88), extractMInt( getParentValue(R1, RSMap), 80, 88)) #then extractMInt( getParentValue(R2, RSMap), 80, 88) #else extractMInt( getParentValue(R1, RSMap), 80, 88) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 88, 96), extractMInt( getParentValue(R1, RSMap), 88, 96)) #then extractMInt( getParentValue(R2, RSMap), 88, 96) #else extractMInt( getParentValue(R1, RSMap), 88, 96) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 96, 104), extractMInt( getParentValue(R1, RSMap), 96, 104)) #then extractMInt( getParentValue(R2, RSMap), 96, 104) #else extractMInt( getParentValue(R1, RSMap), 96, 104) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 104, 112), extractMInt( getParentValue(R1, RSMap), 104, 112)) #then extractMInt( getParentValue(R2, RSMap), 104, 112) #else extractMInt( getParentValue(R1, RSMap), 104, 112) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 112, 120), extractMInt( getParentValue(R1, RSMap), 112, 120)) #then extractMInt( getParentValue(R2, RSMap), 112, 120) #else extractMInt( getParentValue(R1, RSMap), 112, 120) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 120, 128), extractMInt( getParentValue(R1, RSMap), 120, 128)) #then extractMInt( getParentValue(R2, RSMap), 120, 128) #else extractMInt( getParentValue(R1, RSMap), 120, 128) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else extractMInt( getParentValue(R1, RSMap), 128, 136) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else extractMInt( getParentValue(R1, RSMap), 136, 144) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else extractMInt( getParentValue(R1, RSMap), 144, 152) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else extractMInt( getParentValue(R1, RSMap), 152, 160) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else extractMInt( getParentValue(R1, RSMap), 160, 168) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else extractMInt( getParentValue(R1, RSMap), 168, 176) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else extractMInt( getParentValue(R1, RSMap), 176, 184) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else extractMInt( getParentValue(R1, RSMap), 184, 192) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else extractMInt( getParentValue(R1, RSMap), 192, 200) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else extractMInt( getParentValue(R1, RSMap), 200, 208) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else extractMInt( getParentValue(R1, RSMap), 208, 216) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else extractMInt( getParentValue(R1, RSMap), 216, 224) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else extractMInt( getParentValue(R1, RSMap), 224, 232) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else extractMInt( getParentValue(R1, RSMap), 232, 240) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R1, RSMap), 240, 248) #fi), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #then extractMInt( getParentValue(R2, RSMap), 248, 256) #else extractMInt( getParentValue(R1, RSMap), 248, 256) #fi))))))))))))))))))))))))))))))))
)

    </regstate>
    


// vpmaxub-ymm-ymm-ymm-semantics


// vpmulhw-xmm-xmm-xmm

  rule <k>
    execinstr (vpmulhw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), 0, 16), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), 0, 16), extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), 0, 16)))))))))
)

    </regstate>
    


// vpmulhw-xmm-xmm-xmm-semantics


// vpmovsxbw-xmm-xmm

  rule <k>
    execinstr (vpmovsxbw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))))))))))
)

    </regstate>
    


// vpmovsxbw-xmm-xmm-semantics


// btrq-r64-r64

  rule <k>
    execinstr (btrq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> andMInt( getParentValue(R2, RSMap), negMInt( shlMInt( mi(64, 1), uvalueMInt(mi(64, svalueMInt(andMInt( getParentValue(R1, RSMap), mi(64, 63))))))))

"CF" |-> extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(mi(64, svalueMInt(andMInt( getParentValue(R1, RSMap), mi(64, 63)))))), 63, 64)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btrq-r64-r64-semantics


// pmaddwd-xmm-xmm

  rule <k>
    execinstr (pmaddwd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( addMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160)))), mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))))), concatenateMInt( addMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192)))), mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))))), concatenateMInt( addMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224)))), mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))))), addMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256)))), mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))))))))
)

    </regstate>
    


// pmaddwd-xmm-xmm-semantics


// blsiq-r64-r64

  rule <k>
    execinstr (blsiq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> andMInt( addMInt(mi(64, 1), negMInt( getParentValue(R1, RSMap))), getParentValue(R1, RSMap))

"CF" |-> (#ifMInt (notBool eqMInt( getParentValue(R1, RSMap), mi(64, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( addMInt(mi(64, 1), negMInt( getParentValue(R1, RSMap))), getParentValue(R1, RSMap)), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( addMInt(mi(64, 1), negMInt( getParentValue(R1, RSMap))), 0, 1), extractMInt( getParentValue(R1, RSMap), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// blsiq-r64-r64-semantics


// rcrw-r16-cl

  rule <k>
    execinstr (rcrw %cl, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(17, 17))), 1, 17))

"CF" |-> extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(17, 17))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(17, 17)), 9, 17), mi(8, 1)) andBool (eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(17, 17))), 1, 2), mi(1, 1)) xorBool eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(17, 17))), 2, 3), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(17, 17)), 9, 17), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(17, 17)), 9, 17), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(9, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), mi(17, 17)), 9, 17), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rcrw-r16-cl-semantics


// adcb-rh-rh

  rule <k>
    execinstr (adcb R1:Rh, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), extractMInt( getParentValue(R2, RSMap), 51, 52)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(9, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// adcb-rh-rh-semantics


// andnl-r32-r32-r32

  rule <k>
    execinstr (andnl R1:R32, R2:R32, R3:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(32, 0), andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64)), extractMInt( getParentValue(R1, RSMap), 32, 64)))

"CF" |-> mi(1, 0)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 32, 64)), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 32, 33)), extractMInt( getParentValue(R1, RSMap), 32, 33))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// andnl-r32-r32-r32-semantics


// cmovnew-r16-r16

  rule <k>
    execinstr (cmovnew R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt (notBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovnew-r16-r16-semantics


// vpermilps-ymm-ymm-ymm

  rule <k>
    execinstr (vpermilps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 30, 32), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 96, 128) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 30, 32), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 64, 96) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 30, 32), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 0, 32) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 64), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 96, 128) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 64), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 64, 96) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 64), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 0, 32) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 94, 96), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 96, 128) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 94, 96), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 64, 96) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 94, 96), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 0, 32) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 126, 128), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 96, 128) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 126, 128), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 64, 96) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 126, 128), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 0, 32) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 158, 160), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 158, 160), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 158, 160), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 190, 192), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 190, 192), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 190, 192), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 222, 224), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 222, 224), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 222, 224), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 254, 256), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 254, 256), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 254, 256), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi))))))))
)

    </regstate>
    


// vpermilps-ymm-ymm-ymm-semantics


// cmovnsw-r16-r16

  rule <k>
    execinstr (cmovnsw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt (notBool eqMInt(getFlag("SF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovnsw-r16-r16-semantics


// orb-rh-rh

  rule <k>
    execinstr (orb R1:Rh, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), orMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 48, 56))), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 55, 56), extractMInt( getParentValue(R1, RSMap), 55, 56)), mi(1, 1)) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 54, 55), extractMInt( getParentValue(R1, RSMap), 54, 55)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 53, 54), extractMInt( getParentValue(R1, RSMap), 53, 54)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 52, 53), extractMInt( getParentValue(R1, RSMap), 52, 53)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 51, 52), extractMInt( getParentValue(R1, RSMap), 51, 52)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 50, 51), extractMInt( getParentValue(R1, RSMap), 50, 51)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 49, 50), extractMInt( getParentValue(R1, RSMap), 49, 50)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> orMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( getParentValue(R1, RSMap), 48, 49))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// orb-rh-rh-semantics


// vfnmadd132ss-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmadd132ss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 224), vfnmadd132_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vfnmadd132ss-xmm-xmm-xmm-semantics


// vpminuw-xmm-xmm-xmm

  rule <k>
    execinstr (vpminuw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)) #then extractMInt( getParentValue(R2, RSMap), 128, 144) #else extractMInt( getParentValue(R1, RSMap), 128, 144) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)) #then extractMInt( getParentValue(R2, RSMap), 144, 160) #else extractMInt( getParentValue(R1, RSMap), 144, 160) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)) #then extractMInt( getParentValue(R2, RSMap), 160, 176) #else extractMInt( getParentValue(R1, RSMap), 160, 176) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)) #then extractMInt( getParentValue(R2, RSMap), 176, 192) #else extractMInt( getParentValue(R1, RSMap), 176, 192) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)) #then extractMInt( getParentValue(R2, RSMap), 192, 208) #else extractMInt( getParentValue(R1, RSMap), 192, 208) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)) #then extractMInt( getParentValue(R2, RSMap), 208, 224) #else extractMInt( getParentValue(R1, RSMap), 208, 224) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)) #then extractMInt( getParentValue(R2, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 224, 240) #fi), (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R2, RSMap), 240, 256) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)))))))))
)

    </regstate>
    


// vpminuw-xmm-xmm-xmm-semantics


// vpackssdw-xmm-xmm-xmm

  rule <k>
    execinstr (vpackssdw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R1, RSMap), 144, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R1, RSMap), 176, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R1, RSMap), 208, 224) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R2, RSMap), 144, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R2, RSMap), 176, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R2, RSMap), 208, 224) #fi) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R2, RSMap), 240, 256) #fi) #fi)))))))))
)

    </regstate>
    


// vpackssdw-xmm-xmm-xmm-semantics


// vmovdqa-xmm-xmm

  rule <k>
    execinstr (vmovdqa R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), extractMInt( getParentValue(R1, RSMap), 128, 256))
)

    </regstate>
    


// vmovdqa-xmm-xmm-semantics


// setna-r8

  rule <k>
    execinstr (setna R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt (eqMInt(getFlag("CF", RSMap), mi(1,1)) orBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setna-r8-semantics


// vpmaxsd-xmm-xmm-xmm

  rule <k>
    execinstr (vpmaxsd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R1, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R1, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else extractMInt( getParentValue(R1, RSMap), 192, 224) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi)))))
)

    </regstate>
    


// vpmaxsd-xmm-xmm-xmm-semantics


// decl-r32

  rule <k>
    execinstr (decl R1:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( mi(32, 0), subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)))

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 31, 32), mi(1, 1)) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 25, 26), mi(1, 1))) xorBool eqMInt( extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 24, 25), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt eqMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 1)), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), mi(1, 1)) andBool eqMInt( extractMInt( getParentValue(R1, RSMap), 33, 64), mi(31, 0))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// decl-r32-semantics


// btsl-r32-r32

  rule <k>
    execinstr (btsl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), orMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), shlMInt( mi(32, 1), uvalueMInt(mi(32, svalueMInt(andMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 31))))))))

"CF" |-> extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), uvalueMInt(mi(32, svalueMInt(andMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 31)))))), 31, 32)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btsl-r32-r32-semantics


// mulb-rh

  rule <k>
    execinstr (mulb R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), mulMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(8, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( mulMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(8, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 0, 8), mi(8, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( extractMInt( mulMInt( concatenateMInt( mi(8, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(8, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 0, 8), mi(8, 0))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// mulb-rh-semantics


// vpmaxub-xmm-xmm-xmm

  rule <k>
    execinstr (vpmaxub R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else extractMInt( getParentValue(R1, RSMap), 128, 136) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else extractMInt( getParentValue(R1, RSMap), 136, 144) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else extractMInt( getParentValue(R1, RSMap), 144, 152) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else extractMInt( getParentValue(R1, RSMap), 152, 160) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else extractMInt( getParentValue(R1, RSMap), 160, 168) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else extractMInt( getParentValue(R1, RSMap), 168, 176) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else extractMInt( getParentValue(R1, RSMap), 176, 184) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else extractMInt( getParentValue(R1, RSMap), 184, 192) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else extractMInt( getParentValue(R1, RSMap), 192, 200) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else extractMInt( getParentValue(R1, RSMap), 200, 208) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else extractMInt( getParentValue(R1, RSMap), 208, 216) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else extractMInt( getParentValue(R1, RSMap), 216, 224) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else extractMInt( getParentValue(R1, RSMap), 224, 232) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else extractMInt( getParentValue(R1, RSMap), 232, 240) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R1, RSMap), 240, 248) #fi), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #then extractMInt( getParentValue(R2, RSMap), 248, 256) #else extractMInt( getParentValue(R1, RSMap), 248, 256) #fi)))))))))))))))))
)

    </regstate>
    


// vpmaxub-xmm-xmm-xmm-semantics


// vpcmpeqw-xmm-xmm-xmm

  rule <k>
    execinstr (vpcmpeqw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)) #then mi(16, 65535) #else mi(16, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)) #then mi(16, 65535) #else mi(16, 0) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then mi(16, 65535) #else mi(16, 0) #fi)))))))))
)

    </regstate>
    


// vpcmpeqw-xmm-xmm-xmm-semantics


// cmovael-r32-r32

  rule <k>
    execinstr (cmovael R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt (notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovael-r32-r32-semantics


// setc-rh

  rule <k>
    execinstr (setc R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setc-rh-semantics


// maxpd-xmm-xmm

  rule <k>
    execinstr (maxpd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt eqMInt( maxcmp_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 192) #else extractMInt( getParentValue(R1, RSMap), 128, 192) #fi), (#ifMInt eqMInt( maxcmp_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 256) #else extractMInt( getParentValue(R1, RSMap), 192, 256) #fi)))
)

    </regstate>
    


// maxpd-xmm-xmm-semantics


// rorq-r64-one

  rule <k>
    execinstr (rorq $0x1, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ror( getParentValue(R2, RSMap), mi(64, 1))

"CF" |-> extractMInt( ror( getParentValue(R2, RSMap), mi(64, 1)), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( ror( getParentValue(R2, RSMap), mi(64, 1)), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( ror( getParentValue(R2, RSMap), mi(64, 1)), 1, 2), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rorq-r64-one-semantics


// shrb-rh-cl

  rule <k>
    execinstr (shrb %cl, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 8)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 8)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 8))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 8, 9), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 8), mi(8, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shrb-rh-cl-semantics


// vpmovsxbq-xmm-xmm

  rule <k>
    execinstr (vpmovsxbq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))))
)

    </regstate>
    


// vpmovsxbq-xmm-xmm-semantics


// cmovngq-r64-r64

  rule <k>
    execinstr (cmovngq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1,1)) orBool (notBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1))))) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovngq-r64-r64-semantics


// shlw-r16-one

  rule <k>
    execinstr (shlw $0x1, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 1, 17))

"CF" |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 1, 2)

"OF" |-> (#ifMInt (eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(mi(17, 1))), 1, 2), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shlw-r16-one-semantics


// vmovmskps-r32-ymm

  rule <k>
    execinstr (vmovmskps R1:Ymm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(56, 0), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 64, 65), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 96, 97), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 129), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 161), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 193), extractMInt( getParentValue(R1, RSMap), 224, 225)))))))))
)

    </regstate>
    


// vmovmskps-r32-ymm-semantics


// vpsrlw-xmm-xmm-xmm

  rule <k>
    execinstr (vpsrlw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then concatenateMInt( mi(128, 0), mi(128, 0)) #else concatenateMInt( mi(128, 0), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))))))))))) #fi)
)

    </regstate>
    


// vpsrlw-xmm-xmm-xmm-semantics


// vmovlhps-xmm-xmm-xmm

  rule <k>
    execinstr (vmovlhps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256)))
)

    </regstate>
    


// vmovlhps-xmm-xmm-xmm-semantics


// sarw-r16-one

  rule <k>
    execinstr (sarw $0x1, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 0, 16))

"CF" |-> extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 16, 17)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 15, 16), mi(1, 1)) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 9, 10), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 8, 9), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 0, 16), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(mi(17, 1))), 0, 1)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// sarw-r16-one-semantics


// bextrl-r32-r32-r32

  rule <k>
    execinstr (bextrl R1:R32, R2:R32, R3:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(32, 0), andMInt( extractMInt( lshrMInt( concatenateMInt( mi(480, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(504, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)))), 480, 512), negMInt( extractMInt( shlMInt( lshrMInt( mi(512, 18446744073709551615), uvalueMInt(concatenateMInt( mi(504, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)))), uvalueMInt(concatenateMInt( mi(504, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)))), 480, 512))))

"CF" |-> mi(1, 0)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( lshrMInt( concatenateMInt( mi(480, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(504, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)))), 480, 512), negMInt( extractMInt( shlMInt( lshrMInt( mi(512, 18446744073709551615), uvalueMInt(concatenateMInt( mi(504, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)))), uvalueMInt(concatenateMInt( mi(504, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)))), 480, 512))), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (undefMInt)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// bextrl-r32-r32-r32-semantics


// xaddb-r8-r8

  rule <k>
    execinstr (xaddb R1:R8, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), extractMInt( getParentValue(R2, RSMap), 56, 64))

convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (xaddb R1:R8, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
        convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5)

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
      requires sameRegisters(R1, R2)
  


// xaddb-r8-r8-semantics


// vpermilpd-xmm-xmm-xmm

  rule <k>
    execinstr (vpermilpd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 190, 191), mi(1, 0)) #then extractMInt( getParentValue(R2, RSMap), 192, 256) #else extractMInt( getParentValue(R2, RSMap), 128, 192) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 254, 255), mi(1, 0)) #then extractMInt( getParentValue(R2, RSMap), 192, 256) #else extractMInt( getParentValue(R2, RSMap), 128, 192) #fi)))
)

    </regstate>
    


// vpermilpd-xmm-xmm-xmm-semantics


// pcmpeqd-xmm-xmm

  rule <k>
    execinstr (pcmpeqd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)) #then mi(32, 4294967295) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)) #then mi(32, 4294967295) #else mi(32, 0) #fi)))))
)

    </regstate>
    


// pcmpeqd-xmm-xmm-semantics


// vaddps-ymm-ymm-ymm

  rule <k>
    execinstr (vaddps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( add_single(extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), concatenateMInt( add_single(extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( add_single(extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), concatenateMInt( add_single(extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128)), concatenateMInt( add_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( add_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( add_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), add_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))))))))
)

    </regstate>
    


// vaddps-ymm-ymm-ymm-semantics


// cltq

  rule <k>
    execinstr (cltq  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> mi(64, svalueMInt(extractMInt( getParentValue(%rax, RSMap), 32, 64)))
)

    </regstate>
    


// cltq-semantics


// vpavgb-xmm-xmm-xmm

  rule <k>
    execinstr (vpavgb R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 128, 136))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 136, 144))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 144, 152))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 152, 160))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 160, 168))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 168, 176))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 176, 184))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 184, 192))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 192, 200))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 200, 208))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 208, 216))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 216, 224))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 224, 232))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 232, 240))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), concatenateMInt( extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 240, 248))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9), extractMInt( lshrMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))), mi(9, 1)), uvalueMInt(mi(9, 1))), 1, 9)))))))))))))))))
)

    </regstate>
    


// vpavgb-xmm-xmm-xmm-semantics


// salq-r64-cl

  rule <k>
    execinstr (salq %cl, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 1, 65)

"CF" |-> (#ifMInt ((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 64)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 64))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 57, 58), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 1, 65), mi(64, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 1, 2), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 1)) andBool (((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 64)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 64))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63))))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// salq-r64-cl-semantics


// vaddpd-xmm-xmm-xmm

  rule <k>
    execinstr (vaddpd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( add_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), add_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vaddpd-xmm-xmm-xmm-semantics


// vfnmsub231sd-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmsub231sd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 192), vfmsub132_double(vfnmsub132_double((#ifMInt eqMInt( mincmp_double(concatenateMInt( mi(32, 0), extractMInt( getParentValue(R2, RSMap), 160, 192)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(R2, RSMap), 224, 256))), mi(1, 1)) #then concatenateMInt( mi(32, 0), extractMInt( getParentValue(R2, RSMap), 160, 192)) #else concatenateMInt( mi(32, 0), extractMInt( getParentValue(R2, RSMap), 224, 256)) #fi), extractMInt( getParentValue(R2, RSMap), 192, 256), (#ifMInt eqMInt( mincmp_double(concatenateMInt( mi(32, 0), extractMInt( getParentValue(R2, RSMap), 160, 192)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(R2, RSMap), 224, 256))), mi(1, 1)) #then concatenateMInt( mi(32, 0), extractMInt( getParentValue(R2, RSMap), 160, 192)) #else concatenateMInt( mi(32, 0), extractMInt( getParentValue(R2, RSMap), 224, 256)) #fi)), extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfnmsub231sd-xmm-xmm-xmm-semantics


// mulsd-xmm-xmm

  rule <k>
    execinstr (mulsd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 192), mul_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)))
)

    </regstate>
    


// mulsd-xmm-xmm-semantics


// vfmaddsub132ps-xmm-xmm-xmm

  rule <k>
    execinstr (vfmaddsub132ps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192))), concatenateMInt( vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))))
)

    </regstate>
    


// vfmaddsub132ps-xmm-xmm-xmm-semantics


// vpaddd-ymm-ymm-ymm

  rule <k>
    execinstr (vpaddd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), addMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))))))))
)

    </regstate>
    


// vpaddd-ymm-ymm-ymm-semantics


// vmovupd-ymm-ymm

  rule <k>
    execinstr (vmovupd R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> getParentValue(R1, RSMap)
)

    </regstate>
    


// vmovupd-ymm-ymm-semantics


// cmovlq-r64-r64

  rule <k>
    execinstr (cmovlq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt (notBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1)))) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovlq-r64-r64-semantics


// cmpb-rh-rh

  rule <k>
    execinstr (cmpb R1:Rh, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), extractMInt( getParentValue(R2, RSMap), 51, 52)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 48, 56))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// cmpb-rh-rh-semantics


// adcw-r16-r16

  rule <k>
    execinstr (adcw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), mi(17, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17))

"CF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), mi(17, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), mi(17, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), mi(17, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), mi(17, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), mi(17, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), mi(17, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), mi(17, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), mi(17, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), mi(17, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), mi(17, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), mi(17, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), mi(17, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)), mi(17, 1)) #else concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 64)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// adcw-r16-r16-semantics


// vminss-xmm-xmm-xmm

  rule <k>
    execinstr (vminss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 224), (#ifMInt eqMInt( mincmp_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi)))
)

    </regstate>
    


// vminss-xmm-xmm-xmm-semantics


// vpcmpgtq-ymm-ymm-ymm

  rule <k>
    execinstr (vpcmpgtq R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi))))
)

    </regstate>
    


// vpcmpgtq-ymm-ymm-ymm-semantics


// vpxor-xmm-xmm-xmm

  rule <k>
    execinstr (vpxor R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), xorMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// vpxor-xmm-xmm-xmm-semantics


// addsubpd-xmm-xmm

  rule <k>
    execinstr (addsubpd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( add_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), sub_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// addsubpd-xmm-xmm-semantics


// movq-r64-imm64

  rule <k>
    execinstr (movq IMM64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> mi(64, 0)
)

    </regstate>
    


// movq-r64-imm64-semantics


// movzwl-r32-r16

  rule <k>
    execinstr (movzwl R1:R16, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(48, 0), extractMInt( getParentValue(R1, RSMap), 48, 64))
)

    </regstate>
    


// movzwl-r32-r16-semantics


// vfmsubadd213ps-ymm-ymm-ymm

  rule <k>
    execinstr (vfmsubadd213ps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfmsub213_single(extractMInt( getParentValue(R3, RSMap), 0, 32), extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), vfmadd213_single(extractMInt( getParentValue(R3, RSMap), 32, 64), extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64))), concatenateMInt( concatenateMInt( vfmsub213_single(extractMInt( getParentValue(R3, RSMap), 64, 96), extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), vfmadd213_single(extractMInt( getParentValue(R3, RSMap), 96, 128), extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128))), concatenateMInt( concatenateMInt( vfmsub213_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), vfmadd213_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192))), concatenateMInt( vfmsub213_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfmadd213_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vfmsubadd213ps-ymm-ymm-ymm-semantics


// hsubpd-xmm-xmm

  rule <k>
    execinstr (hsubpd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( sub_double(extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 128, 192)), sub_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 128, 192))))
)

    </regstate>
    


// hsubpd-xmm-xmm-semantics


// vsqrtss-xmm-xmm-xmm

  rule <k>
    execinstr (vsqrtss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 224), sqrt_single(extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vsqrtss-xmm-xmm-xmm-semantics


// vmulsd-xmm-xmm-xmm

  rule <k>
    execinstr (vmulsd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), mul_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vmulsd-xmm-xmm-xmm-semantics


// vhsubps-ymm-ymm-ymm

  rule <k>
    execinstr (vhsubps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( sub_single(extractMInt( getParentValue(R1, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 0, 32)), sub_single(extractMInt( getParentValue(R1, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 64, 96))), sub_single(extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R2, RSMap), 0, 32))), sub_single(extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R2, RSMap), 64, 96))), concatenateMInt( concatenateMInt( concatenateMInt( sub_single(extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 128, 160)), sub_single(extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 192, 224))), sub_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 128, 160))), sub_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 192, 224))))
)

    </regstate>
    


// vhsubps-ymm-ymm-ymm-semantics


// vcvttpd2dq-xmm-ymm

  rule <k>
    execinstr (vcvttpd2dq R1:Ymm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( cvt_double_to_int32_truncate(extractMInt( getParentValue(R2, RSMap), 0, 64)), concatenateMInt( cvt_double_to_int32_truncate(extractMInt( getParentValue(R2, RSMap), 64, 128)), concatenateMInt( cvt_double_to_int32_truncate(extractMInt( getParentValue(R2, RSMap), 128, 192)), cvt_double_to_int32_truncate(extractMInt( getParentValue(R2, RSMap), 192, 256))))))
)

    </regstate>
    


// vcvttpd2dq-xmm-ymm-semantics


// vdivps-xmm-xmm-xmm

  rule <k>
    execinstr (vdivps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( div_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( div_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( div_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), div_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vdivps-xmm-xmm-xmm-semantics


// xaddb-rh-r8

  rule <k>
    execinstr (xaddb R1:R8, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), extractMInt( getParentValue(R2, RSMap), 48, 56))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 51, 52)), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (xaddb R1:R8, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
        convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 48, 56))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 51, 52)), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
      requires sameRegisters(R1, R2)
  


// xaddb-rh-r8-semantics


// sets-rh

  rule <k>
    execinstr (sets R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt eqMInt(getFlag("SF", RSMap), mi(1,1)) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// sets-rh-semantics


// setnge-r8

  rule <k>
    execinstr (setnge R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt (notBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1)))) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setnge-r8-semantics


// vsubss-xmm-xmm-xmm

  rule <k>
    execinstr (vsubss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 224), sub_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vsubss-xmm-xmm-xmm-semantics


// vcvtdq2pd-xmm-xmm

  rule <k>
    execinstr (vcvtdq2pd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( cvt_int32_to_double(extractMInt( getParentValue(R1, RSMap), 192, 224)), cvt_int32_to_double(extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vcvtdq2pd-xmm-xmm-semantics


// xchgb-r8-rh

  rule <k>
    execinstr (xchgb R1:Rh, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), extractMInt( getParentValue(R2, RSMap), 56, 64)), extractMInt( getParentValue(R1, RSMap), 56, 64))

convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( getParentValue(R1, RSMap), 48, 56))
)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (xchgb R1:Rh, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
        convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( getParentValue(R2, RSMap), 56, 64)), extractMInt( getParentValue(R2, RSMap), 48, 56))
      )
    </regstate>
      requires sameRegisters(R1, R2)
  


// xchgb-r8-rh-semantics


// setna-rh

  rule <k>
    execinstr (setna R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt (eqMInt(getFlag("CF", RSMap), mi(1,1)) orBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setna-rh-semantics


// setne-rh

  rule <k>
    execinstr (setne R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt (notBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setne-rh-semantics


// vfmaddsub132pd-xmm-xmm-xmm

  rule <k>
    execinstr (vfmaddsub132pd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( vfmadd132_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfmsub132_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfmaddsub132pd-xmm-xmm-xmm-semantics


// vsubps-xmm-xmm-xmm

  rule <k>
    execinstr (vsubps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( sub_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( sub_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( sub_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), sub_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vsubps-xmm-xmm-xmm-semantics


// andnq-r64-r64-r64

  rule <k>
    execinstr (andnq R1:R64, R2:R64, R3:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> andMInt( negMInt( getParentValue(R2, RSMap)), getParentValue(R1, RSMap))

"CF" |-> mi(1, 0)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( negMInt( getParentValue(R2, RSMap)), getParentValue(R1, RSMap)), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 0, 1)), extractMInt( getParentValue(R1, RSMap), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// andnq-r64-r64-r64-semantics


// vsqrtps-xmm-xmm

  rule <k>
    execinstr (vsqrtps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( sqrt_single(extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( sqrt_single(extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( sqrt_single(extractMInt( getParentValue(R1, RSMap), 192, 224)), sqrt_single(extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vsqrtps-xmm-xmm-semantics


// vpslld-ymm-ymm-xmm

  rule <k>
    execinstr (vpslld R1:Xmm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 31)) #then mi(256, 0) #else concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), shlMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256)))))))))) #fi)
)

    </regstate>
    


// vpslld-ymm-ymm-xmm-semantics


// vpmullw-ymm-ymm-ymm

  rule <k>
    execinstr (vpmullw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 16))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 16)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 32))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 32)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 48))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 48)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 80))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 80)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 96))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 96)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 112))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 112)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 128))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 128)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), 16, 32), concatenateMInt( extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), 16, 32), extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), 16, 32))))))))))))))))
)

    </regstate>
    


// vpmullw-ymm-ymm-ymm-semantics


// cmovaew-r16-r16

  rule <k>
    execinstr (cmovaew R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt (notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovaew-r16-r16-semantics


// rorb-r8-one

  rule <k>
    execinstr (rorb $0x1, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), ror( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(8, 1)))

"CF" |-> extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(8, 1)), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(8, 1)), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(8, 1)), 1, 2), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rorb-r8-one-semantics


// xorq-r64-r64

  rule <k>
    execinstr (xorq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> xorMInt( getParentValue(R2, RSMap), getParentValue(R1, RSMap))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( getParentValue(R1, RSMap), 63, 64)), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( getParentValue(R1, RSMap), 62, 63)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( getParentValue(R1, RSMap), 61, 62)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( getParentValue(R1, RSMap), 60, 61)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(R1, RSMap), 59, 60)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( getParentValue(R1, RSMap), 58, 59)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( getParentValue(R1, RSMap), 57, 58)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( xorMInt( getParentValue(R2, RSMap), getParentValue(R1, RSMap)), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), extractMInt( getParentValue(R1, RSMap), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// xorq-r64-r64-semantics


// vsqrtsd-xmm-xmm-xmm

  rule <k>
    execinstr (vsqrtsd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), sqrt_double(extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vsqrtsd-xmm-xmm-xmm-semantics


// sarl-r32-cl

  rule <k>
    execinstr (sarl %cl, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 32))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 32, 33), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 31, 32), mi(1, 1)) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 25, 26), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 24, 25), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 32), mi(32, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool false) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sarl-r32-cl-semantics


// vpmaddwd-xmm-xmm-xmm

  rule <k>
    execinstr (vpmaddwd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( addMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160)))), mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))))), concatenateMInt( addMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192)))), mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))))), concatenateMInt( addMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224)))), mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))))), addMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256)))), mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))))))))
)

    </regstate>
    


// vpmaddwd-xmm-xmm-xmm-semantics


// setpo-r8

  rule <k>
    execinstr (setpo R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt (notBool eqMInt(getFlag("PF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setpo-r8-semantics


// vmovq-xmm-r64

  rule <k>
    execinstr (vmovq R1:R64, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(192, 0), getParentValue(R1, RSMap))
)

    </regstate>
    


// vmovq-xmm-r64-semantics


// cmovpeq-r64-r64

  rule <k>
    execinstr (cmovpeq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt eqMInt(getFlag("PF", RSMap), mi(1,1)) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovpeq-r64-r64-semantics


// vcvtps2pd-xmm-xmm

  rule <k>
    execinstr (vcvtps2pd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( cvt_single_to_double(extractMInt( getParentValue(R1, RSMap), 192, 224)), cvt_single_to_double(extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// vcvtps2pd-xmm-xmm-semantics


// vpminuw-ymm-ymm-ymm

  rule <k>
    execinstr (vpminuw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 0, 16), extractMInt( getParentValue(R1, RSMap), 0, 16)) #then extractMInt( getParentValue(R2, RSMap), 0, 16) #else extractMInt( getParentValue(R1, RSMap), 0, 16) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 16, 32), extractMInt( getParentValue(R1, RSMap), 16, 32)) #then extractMInt( getParentValue(R2, RSMap), 16, 32) #else extractMInt( getParentValue(R1, RSMap), 16, 32) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 32, 48), extractMInt( getParentValue(R1, RSMap), 32, 48)) #then extractMInt( getParentValue(R2, RSMap), 32, 48) #else extractMInt( getParentValue(R1, RSMap), 32, 48) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 48, 64)) #then extractMInt( getParentValue(R2, RSMap), 48, 64) #else extractMInt( getParentValue(R1, RSMap), 48, 64) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 64, 80), extractMInt( getParentValue(R1, RSMap), 64, 80)) #then extractMInt( getParentValue(R2, RSMap), 64, 80) #else extractMInt( getParentValue(R1, RSMap), 64, 80) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 80, 96), extractMInt( getParentValue(R1, RSMap), 80, 96)) #then extractMInt( getParentValue(R2, RSMap), 80, 96) #else extractMInt( getParentValue(R1, RSMap), 80, 96) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 96, 112), extractMInt( getParentValue(R1, RSMap), 96, 112)) #then extractMInt( getParentValue(R2, RSMap), 96, 112) #else extractMInt( getParentValue(R1, RSMap), 96, 112) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 112, 128), extractMInt( getParentValue(R1, RSMap), 112, 128)) #then extractMInt( getParentValue(R2, RSMap), 112, 128) #else extractMInt( getParentValue(R1, RSMap), 112, 128) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)) #then extractMInt( getParentValue(R2, RSMap), 128, 144) #else extractMInt( getParentValue(R1, RSMap), 128, 144) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)) #then extractMInt( getParentValue(R2, RSMap), 144, 160) #else extractMInt( getParentValue(R1, RSMap), 144, 160) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)) #then extractMInt( getParentValue(R2, RSMap), 160, 176) #else extractMInt( getParentValue(R1, RSMap), 160, 176) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)) #then extractMInt( getParentValue(R2, RSMap), 176, 192) #else extractMInt( getParentValue(R1, RSMap), 176, 192) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)) #then extractMInt( getParentValue(R2, RSMap), 192, 208) #else extractMInt( getParentValue(R1, RSMap), 192, 208) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)) #then extractMInt( getParentValue(R2, RSMap), 208, 224) #else extractMInt( getParentValue(R1, RSMap), 208, 224) #fi), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)) #then extractMInt( getParentValue(R2, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 224, 240) #fi), (#ifMInt ultMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R2, RSMap), 240, 256) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))))))))))))))))
)

    </regstate>
    


// vpminuw-ymm-ymm-ymm-semantics


// cvtdq2ps-xmm-xmm

  rule <k>
    execinstr (cvtdq2ps R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( cvt_int32_to_single(extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( cvt_int32_to_single(extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( cvt_int32_to_single(extractMInt( getParentValue(R1, RSMap), 192, 224)), cvt_int32_to_single(extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// cvtdq2ps-xmm-xmm-semantics


// vpsllvq-xmm-xmm-xmm

  rule <k>
    execinstr (vpsllvq R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 192))), shlMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 256)))))
)

    </regstate>
    


// vpsllvq-xmm-xmm-xmm-semantics


// cmovnaq-r64-r64

  rule <k>
    execinstr (cmovnaq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt (eqMInt(getFlag("CF", RSMap), mi(1,1)) orBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovnaq-r64-r64-semantics


// xchgq-rax-r64

  rule <k>
    execinstr (xchgq R1:R64, %rax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> getParentValue(R1, RSMap)

convToRegKeys(R1) |-> getParentValue(%rax, RSMap)
)

    </regstate>
      requires notBool sameRegisters(%rax, R1)

rule <k>
    execinstr (xchgq R1:R64, %rax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> getParentValue(%rax, RSMap)
)

    </regstate>
      requires sameRegisters(%rax, R1)




// xchgq-rax-r64-semantics


// vfmsubadd231ps-ymm-ymm-ymm

  rule <k>
    execinstr (vfmsubadd231ps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfmsub231_single(extractMInt( getParentValue(R3, RSMap), 0, 32), extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), vfmadd231_single(extractMInt( getParentValue(R3, RSMap), 32, 64), extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64))), concatenateMInt( concatenateMInt( vfmsub231_single(extractMInt( getParentValue(R3, RSMap), 64, 96), extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), vfmadd231_single(extractMInt( getParentValue(R3, RSMap), 96, 128), extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128))), concatenateMInt( concatenateMInt( vfmsub231_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), vfmadd231_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192))), concatenateMInt( vfmsub231_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfmadd231_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vfmsubadd231ps-ymm-ymm-ymm-semantics


// setnl-r8

  rule <k>
    execinstr (setnl R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setnl-r8-semantics


// vtestpd-ymm-ymm

  rule <k>
    execinstr (vtestpd R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (((eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 192, 193)), extractMInt( getParentValue(R1, RSMap), 192, 193)), mi(1, 0)) andBool eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 128, 129)), extractMInt( getParentValue(R1, RSMap), 128, 129)), mi(1, 0))) andBool eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 64, 65)), extractMInt( getParentValue(R1, RSMap), 64, 65)), mi(1, 0))) andBool eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 0, 1)), extractMInt( getParentValue(R1, RSMap), 0, 1)), mi(1, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> mi(1, 0)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt (((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 192, 193), extractMInt( getParentValue(R1, RSMap), 192, 193)), mi(1, 0)) andBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 128, 129), extractMInt( getParentValue(R1, RSMap), 128, 129)), mi(1, 0))) andBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 64, 65), extractMInt( getParentValue(R1, RSMap), 64, 65)), mi(1, 0))) andBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), extractMInt( getParentValue(R1, RSMap), 0, 1)), mi(1, 0))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// vtestpd-ymm-ymm-semantics


// vpsrld-xmm-xmm-xmm

  rule <k>
    execinstr (vpsrld R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 31)) #then concatenateMInt( mi(128, 0), mi(128, 0)) #else concatenateMInt( mi(128, 0), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))))))) #fi)
)

    </regstate>
    


// vpsrld-xmm-xmm-xmm-semantics


// pmovsxwq-xmm-xmm

  rule <k>
    execinstr (pmovsxwq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))))
)

    </regstate>
    


// pmovsxwq-xmm-xmm-semantics


// vpmovzxwd-ymm-xmm

  rule <k>
    execinstr (vpmovzxwd R1:Xmm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 128, 144)), concatenateMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 144, 160)), concatenateMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 160, 176)), concatenateMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 176, 192)), concatenateMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 192, 208)), concatenateMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 208, 224)), concatenateMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 224, 240)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 240, 256)))))))))
)

    </regstate>
    


// vpmovzxwd-ymm-xmm-semantics


// rorl-r32-one

  rule <k>
    execinstr (rorl $0x1, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), ror( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(32, 1)))

"CF" |-> extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(32, 1)), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(32, 1)), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(32, 1)), 1, 2), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rorl-r32-one-semantics


// setnle-r8

  rule <k>
    execinstr (setnle R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt ((notBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) andBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1)))) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setnle-r8-semantics


// vpunpckhqdq-xmm-xmm-xmm

  rule <k>
    execinstr (vpunpckhqdq R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192)))
)

    </regstate>
    


// vpunpckhqdq-xmm-xmm-xmm-semantics


// rolq-r64-one

  rule <k>
    execinstr (rolq $0x1, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> rol( getParentValue(R2, RSMap), mi(64, 1))

"CF" |-> extractMInt( rol( getParentValue(R2, RSMap), mi(64, 1)), 63, 64)

"OF" |-> (#ifMInt (eqMInt( extractMInt( rol( getParentValue(R2, RSMap), mi(64, 1)), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( getParentValue(R2, RSMap), mi(64, 1)), 63, 64), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rolq-r64-one-semantics


// vandnps-xmm-xmm-xmm

  rule <k>
    execinstr (vandnps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 128, 256)), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// vandnps-xmm-xmm-xmm-semantics


// paddb-xmm-xmm

  rule <k>
    execinstr (paddb R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)), addMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256))))))))))))))))))
)

    </regstate>
    


// paddb-xmm-xmm-semantics


// vpmuldq-ymm-ymm-ymm

  rule <k>
    execinstr (vpmuldq R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 64)))), concatenateMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 128))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 128)))), concatenateMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 192))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 192)))), mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 256))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256)))))))
)

    </regstate>
    


// vpmuldq-ymm-ymm-ymm-semantics


// punpcklqdq-xmm-xmm

  rule <k>
    execinstr (punpcklqdq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256)))
)

    </regstate>
    


// punpcklqdq-xmm-xmm-semantics


// vpsubusb-xmm-xmm-xmm

  rule <k>
    execinstr (vpsubusb R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 136))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 136))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 136))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 136, 144))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 136, 144))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 136, 144))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 152))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 152))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 152))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 152, 160))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 152, 160))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 152, 160))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 168))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 168))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 168))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 168, 176))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 168, 176))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 168, 176))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 184))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 184))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 184))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 184, 192))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 184, 192))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 184, 192))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 200))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 200))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 200))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 200, 208))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 200, 208))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 200, 208))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 216))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 216))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 216))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 216, 224))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 216, 224))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 216, 224))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 232))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 232))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 232))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 232, 240))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 232, 240))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 232, 240))), 2, 10) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 248))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 248))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 248))), 2, 10) #fi) #fi), (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))), mi(10, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))), mi(10, 0)) #then mi(8, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))), 2, 10) #fi) #fi)))))))))))))))))
)

    </regstate>
    


// vpsubusb-xmm-xmm-xmm-semantics


// ptest-xmm-xmm

  rule <k>
    execinstr (ptest R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt eqMInt( andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 128, 256)), extractMInt( getParentValue(R1, RSMap), 128, 256)), mi(128, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> mi(1, 0)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), extractMInt( getParentValue(R1, RSMap), 128, 256)), mi(128, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// ptest-xmm-xmm-semantics


// vunpcklps-ymm-ymm-ymm

  rule <k>
    execinstr (vunpcklps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 64, 96), extractMInt( getParentValue(R2, RSMap), 64, 96)), extractMInt( getParentValue(R1, RSMap), 96, 128)), extractMInt( getParentValue(R2, RSMap), 96, 128)), concatenateMInt( concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224)), extractMInt( getParentValue(R1, RSMap), 224, 256)), extractMInt( getParentValue(R2, RSMap), 224, 256)))
)

    </regstate>
    


// vunpcklps-ymm-ymm-ymm-semantics


// vcvtss2siq-r64-xmm

  rule <k>
    execinstr (vcvtss2siq R1:Xmm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> cvt_single_to_int64(extractMInt( getParentValue(R1, RSMap), 224, 256))
)

    </regstate>
    


// vcvtss2siq-r64-xmm-semantics


// rolb-rh-one

  rule <k>
    execinstr (rolb $0x1, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), rol( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(8, 1))), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(8, 1)), 7, 8)

"OF" |-> (#ifMInt (eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(8, 1)), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(8, 1)), 7, 8), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rolb-rh-one-semantics


// setae-rh

  rule <k>
    execinstr (setae R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt (notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setae-rh-semantics


// vpsubusw-ymm-ymm-ymm

  rule <k>
    execinstr (vpsubusw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 0, 16)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 0, 16))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 0, 16)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 0, 16))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 0, 16)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 0, 16))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 16, 32)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 16, 32))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 16, 32)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 16, 32))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 16, 32)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 16, 32))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 32, 48)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 32, 48))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 32, 48)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 32, 48))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 32, 48)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 32, 48))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 48, 64))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 64, 80)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 64, 80))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 64, 80)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 64, 80))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 64, 80)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 64, 80))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 80, 96)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 80, 96))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 80, 96)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 80, 96))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 80, 96)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 80, 96))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 96, 112)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 96, 112))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 96, 112)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 96, 112))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 96, 112)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 96, 112))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 112, 128)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 112, 128))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 112, 128)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 112, 128))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 112, 128)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 112, 128))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), 2, 18) #fi) #fi), (#ifMInt sgtMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(18, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(18, 0)) #then mi(16, 0) #else extractMInt( subMInt( concatenateMInt( mi(2, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(2, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), 2, 18) #fi) #fi))))))))))))))))
)

    </regstate>
    


// vpsubusw-ymm-ymm-ymm-semantics


// cmovel-r32-r32

  rule <k>
    execinstr (cmovel R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt eqMInt(getFlag("ZF", RSMap), mi(1,1)) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovel-r32-r32-semantics


// minss-xmm-xmm

  rule <k>
    execinstr (minss R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 224), (#ifMInt eqMInt( mincmp_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))
)

    </regstate>
    


// minss-xmm-xmm-semantics


// vpsignw-xmm-xmm-xmm

  rule <k>
    execinstr (vpsignw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), mi(16, 0)) #then extractMInt( getParentValue(R2, RSMap), 128, 144) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), mi(16, 0)) #then mi(16, 0) #else addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 128, 144))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), mi(16, 0)) #then extractMInt( getParentValue(R2, RSMap), 144, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), mi(16, 0)) #then mi(16, 0) #else addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 144, 160))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), mi(16, 0)) #then extractMInt( getParentValue(R2, RSMap), 160, 176) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), mi(16, 0)) #then mi(16, 0) #else addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 160, 176))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), mi(16, 0)) #then extractMInt( getParentValue(R2, RSMap), 176, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), mi(16, 0)) #then mi(16, 0) #else addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 176, 192))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), mi(16, 0)) #then extractMInt( getParentValue(R2, RSMap), 192, 208) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), mi(16, 0)) #then mi(16, 0) #else addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 192, 208))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), mi(16, 0)) #then extractMInt( getParentValue(R2, RSMap), 208, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), mi(16, 0)) #then mi(16, 0) #else addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 208, 224))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), mi(16, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 240) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), mi(16, 0)) #then mi(16, 0) #else addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 224, 240))) #fi) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), mi(16, 0)) #then extractMInt( getParentValue(R2, RSMap), 240, 256) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), mi(16, 0)) #then mi(16, 0) #else addMInt(mi(16, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 240, 256))) #fi) #fi)))))))))
)

    </regstate>
    


// vpsignw-xmm-xmm-xmm-semantics


// packusdw-xmm-xmm

  rule <k>
    execinstr (packusdw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R1, RSMap), 144, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R1, RSMap), 176, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R1, RSMap), 208, 224) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 144, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 176, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 208, 224) #fi) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), mi(32, 65535)) #then mi(16, 65535) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), mi(32, 0)) #then mi(16, 0) #else extractMInt( getParentValue(R2, RSMap), 240, 256) #fi) #fi)))))))))
)

    </regstate>
    


// packusdw-xmm-xmm-semantics


// phsubd-xmm-xmm

  rule <k>
    execinstr (phsubd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( concatenateMInt( subMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 128, 160)), subMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 192, 224))), subMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 128, 160))), subMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 192, 224))))
)

    </regstate>
    


// phsubd-xmm-xmm-semantics


// unpcklpd-xmm-xmm

  rule <k>
    execinstr (unpcklpd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256)))
)

    </regstate>
    


// unpcklpd-xmm-xmm-semantics


// vpmulhrsw-ymm-ymm-ymm

  rule <k>
    execinstr (vpmulhrsw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 16))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 16)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 32))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 32)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 48))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 48)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 80))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 80)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 96))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 96)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 112))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 112)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 128))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 128)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31))))))))))))))))
)

    </regstate>
    


// vpmulhrsw-ymm-ymm-ymm-semantics


// packsswb-xmm-xmm

  rule <k>
    execinstr (packsswb R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 136, 144) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 152, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 168, 176) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 184, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 200, 208) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 216, 224) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 232, 240) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R1, RSMap), 248, 256) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 136, 144) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 152, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 168, 176) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 184, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 200, 208) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 216, 224) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 232, 240) #fi) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), mi(16, 127)) #then mi(8, 127) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), mi(16, 18446744073709551488)) #then mi(8, 18446744073709551488) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi)))))))))))))))))
)

    </regstate>
    


// packsswb-xmm-xmm-semantics


// cvttpd2dq-xmm-xmm

  rule <k>
    execinstr (cvttpd2dq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( mi(64, 0), concatenateMInt( cvt_double_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 128, 192)), cvt_double_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 192, 256)))))
)

    </regstate>
    


// cvttpd2dq-xmm-xmm-semantics


// rolb-rh-cl

  rule <k>
    execinstr (rolb %cl, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), rol( extractMInt( getParentValue(R2, RSMap), 48, 56), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)))), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 48, 56), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), 7, 8), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool (eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 48, 56), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 48, 56), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), 7, 8), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rolb-rh-cl-semantics


// vpmovzxbq-xmm-xmm

  rule <k>
    execinstr (vpmovzxbq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( mi(56, 0), extractMInt( getParentValue(R1, RSMap), 240, 248)), concatenateMInt( mi(56, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))))
)

    </regstate>
    


// vpmovzxbq-xmm-xmm-semantics


// cmovcl-r32-r32

  rule <k>
    execinstr (cmovcl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovcl-r32-r32-semantics


// vpbroadcastq-xmm-xmm

  rule <k>
    execinstr (vpbroadcastq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)))
)

    </regstate>
    


// vpbroadcastq-xmm-xmm-semantics


// vsubsd-xmm-xmm-xmm

  rule <k>
    execinstr (vsubsd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), sub_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vsubsd-xmm-xmm-xmm-semantics


// vpmovzxwq-xmm-xmm

  rule <k>
    execinstr (vpmovzxwq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( mi(48, 0), extractMInt( getParentValue(R1, RSMap), 224, 240)), concatenateMInt( mi(48, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))))
)

    </regstate>
    


// vpmovzxwq-xmm-xmm-semantics


// cvtps2dq-xmm-xmm

  rule <k>
    execinstr (cvtps2dq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( cvt_single_to_int32(extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( cvt_single_to_int32(extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( cvt_single_to_int32(extractMInt( getParentValue(R1, RSMap), 192, 224)), cvt_single_to_int32(extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// cvtps2dq-xmm-xmm-semantics


// andnpd-xmm-xmm

  rule <k>
    execinstr (andnpd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 128, 256)), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// andnpd-xmm-xmm-semantics


// psignd-xmm-xmm

  rule <k>
    execinstr (psignd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), mi(32, 0)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), mi(32, 0)) #then mi(32, 0) #else addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 128, 160))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), mi(32, 0)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), mi(32, 0)) #then mi(32, 0) #else addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 160, 192))) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), mi(32, 0)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), mi(32, 0)) #then mi(32, 0) #else addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 192, 224))) #fi) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), mi(32, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), mi(32, 0)) #then mi(32, 0) #else addMInt(mi(32, 1), negMInt( extractMInt( getParentValue(R2, RSMap), 224, 256))) #fi) #fi)))))
)

    </regstate>
    


// psignd-xmm-xmm-semantics


// cvttsd2siq-r64-xmm

  rule <k>
    execinstr (cvttsd2siq R1:Xmm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> cvt_double_to_int64_truncate(extractMInt( getParentValue(R1, RSMap), 192, 256))
)

    </regstate>
    


// cvttsd2siq-r64-xmm-semantics


// vfmadd213sd-xmm-xmm-xmm

  rule <k>
    execinstr (vfmadd213sd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 192), vfmadd213_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfmadd213sd-xmm-xmm-xmm-semantics


// vpsubb-xmm-xmm-xmm

  rule <k>
    execinstr (vpsubb R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)), subMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256))))))))))))))))))
)

    </regstate>
    


// vpsubb-xmm-xmm-xmm-semantics


// imulq-r64-r64

  rule <k>
    execinstr (imulq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( mulMInt( mi(128, svalueMInt(getParentValue(R2, RSMap))), mi(128, svalueMInt(getParentValue(R1, RSMap)))), 64, 128)

"CF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(128, svalueMInt(getParentValue(R2, RSMap))), mi(128, svalueMInt(getParentValue(R1, RSMap)))), mi(128, svalueMInt(extractMInt( mulMInt( mi(128, svalueMInt(getParentValue(R2, RSMap))), mi(128, svalueMInt(getParentValue(R1, RSMap)))), 64, 128))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(128, svalueMInt(getParentValue(R2, RSMap))), mi(128, svalueMInt(getParentValue(R1, RSMap)))), mi(128, svalueMInt(extractMInt( mulMInt( mi(128, svalueMInt(getParentValue(R2, RSMap))), mi(128, svalueMInt(getParentValue(R1, RSMap)))), 64, 128))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// imulq-r64-r64-semantics


// vpandn-xmm-xmm-xmm

  rule <k>
    execinstr (vpandn R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 128, 256)), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// vpandn-xmm-xmm-xmm-semantics


// vpsrad-ymm-ymm-xmm

  rule <k>
    execinstr (vpsrad R1:Xmm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 31)) #then mi(32, 32) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 31)) #then mi(32, 32) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 31)) #then mi(32, 32) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 31)) #then mi(32, 32) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 31)) #then mi(32, 32) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 31)) #then mi(32, 32) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 31)) #then mi(32, 32) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))), ashrMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 31)) #then mi(32, 32) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))))))))))
)

    </regstate>
    


// vpsrad-ymm-ymm-xmm-semantics


// divq-r64

  rule <k>
    execinstr (divq R1:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> div_quotient_int64(concatenateMInt( getParentValue(%rdx, RSMap), getParentValue(%rax, RSMap)), getParentValue(R1, RSMap))

"RDX" |-> div_remainder_int64(concatenateMInt( getParentValue(%rdx, RSMap), getParentValue(%rax, RSMap)), getParentValue(R1, RSMap))

"CF" |-> (undefMInt)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// divq-r64-semantics


// vfmsubadd132pd-ymm-ymm-ymm

  rule <k>
    execinstr (vfmsubadd132pd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfmsub132_double(extractMInt( getParentValue(R3, RSMap), 0, 64), extractMInt( getParentValue(R2, RSMap), 0, 64), extractMInt( getParentValue(R1, RSMap), 0, 64)), vfmadd132_double(extractMInt( getParentValue(R3, RSMap), 64, 128), extractMInt( getParentValue(R2, RSMap), 64, 128), extractMInt( getParentValue(R1, RSMap), 64, 128))), concatenateMInt( vfmsub132_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), vfmadd132_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfmsubadd132pd-ymm-ymm-ymm-semantics


// vcvttss2sil-r32-xmm

  rule <k>
    execinstr (vcvttss2sil R1:Xmm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), cvt_single_to_int32_truncate(extractMInt( getParentValue(R1, RSMap), 224, 256)))
)

    </regstate>
    


// vcvttss2sil-r32-xmm-semantics


// incw-r16

  rule <k>
    execinstr (incw R1:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), addMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 1)))

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 1)), 15, 16), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 1)), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 1)), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 1)), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 1)), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 1)), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 1)), 9, 10), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 1)), 8, 9), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 64), mi(4, 15)) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt eqMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 1)), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 1)), 0, 1)

"OF" |-> (#ifMInt ((notBool eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1))) andBool eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 64), mi(15, 18446744073709551615))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// incw-r16-semantics


// vfmsub132ps-ymm-ymm-ymm

  rule <k>
    execinstr (vfmsub132ps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 0, 32), extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 32, 64), extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 64, 96), extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 96, 128), extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128)), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))))))))
)

    </regstate>
    


// vfmsub132ps-ymm-ymm-ymm-semantics


// addss-xmm-xmm

  rule <k>
    execinstr (addss R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 224), add_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))
)

    </regstate>
    


// addss-xmm-xmm-semantics


// vpmaxsw-xmm-xmm-xmm

  rule <k>
    execinstr (vpmaxsw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)) #then extractMInt( getParentValue(R2, RSMap), 128, 144) #else extractMInt( getParentValue(R1, RSMap), 128, 144) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)) #then extractMInt( getParentValue(R2, RSMap), 144, 160) #else extractMInt( getParentValue(R1, RSMap), 144, 160) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)) #then extractMInt( getParentValue(R2, RSMap), 160, 176) #else extractMInt( getParentValue(R1, RSMap), 160, 176) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)) #then extractMInt( getParentValue(R2, RSMap), 176, 192) #else extractMInt( getParentValue(R1, RSMap), 176, 192) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)) #then extractMInt( getParentValue(R2, RSMap), 192, 208) #else extractMInt( getParentValue(R1, RSMap), 192, 208) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)) #then extractMInt( getParentValue(R2, RSMap), 208, 224) #else extractMInt( getParentValue(R1, RSMap), 208, 224) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)) #then extractMInt( getParentValue(R2, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 224, 240) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R2, RSMap), 240, 256) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)))))))))
)

    </regstate>
    


// vpmaxsw-xmm-xmm-xmm-semantics


// vmovmskpd-r32-ymm

  rule <k>
    execinstr (vmovmskpd R1:Ymm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(48, 0), extractMInt(addMInt(concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 1), extractMInt(getParentValue(R1, RSMap), 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 1), extractMInt(getParentValue(R1, RSMap), 64, 65)))), 1, 9)), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 128, 129), extractMInt(getParentValue(R1, RSMap), 192, 193)))), 1, 9)), concatenateMInt(mi(9, 0), extractMInt(addMInt(concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 1), extractMInt(getParentValue(R1, RSMap), 64, 65))), concatenateMInt(mi(7, 0), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 1), extractMInt(getParentValue(R1, RSMap), 64, 65)))), 1, 9))), 1, 17)) )


)

    </regstate>


// vmovmskpd-r32-ymm-semantics

/*
TargetInstr:
vmovmskpd %ymm1, %ebx
RWSet:
maybe read:{ %ymm1 }
must read:{ %ymm1 }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:movq $0x20, %rbx       #  1     0     10     OPC=movq_r64_imm64
circuit:vmovmskpd %ymm1, %r12  #  2     0xa   4      OPC=vmovmskpd_r64_ymm
circuit:xaddw %bx, %r12w       #  3     0xe   5      OPC=xaddw_r16_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vmovmskpd %ymm1, %ebx

  maybe read:      { %ymm1 }
  must read:       { %ymm1 }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%rbx   : (concat <0x0|48> (plus (concat <0x0|1> (concat (plus (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[191:160]) (concat <0x0|1> <%ymm1|256>[191:160]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[191:160]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[191:160])) (concat <0x0|1> <%ymm1|256>[191:160]))[32:32] <0x1|1>) then (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x2|33> else <0x1|33>) else (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>)) (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>))[15:8] (plus (concat <0x0|1> (plus (concat <0x0|1> (plus (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[191:160]) (concat <0x0|1> <%ymm1|256>[191:160]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[191:160]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[191:160])) (concat <0x0|1> <%ymm1|256>[191:160]))[32:32] <0x1|1>) then (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x2|33> else <0x1|33>) else (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>)) (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>))[7:0]) (concat <0x0|1> (plus (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[191:160]) (concat <0x0|1> <%ymm1|256>[191:160]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[191:160]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[191:160])) (concat <0x0|1> <%ymm1|256>[191:160]))[32:32] <0x1|1>) then (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x2|33> else <0x1|33>) else (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>)) (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>))[7:0]))[7:0]) (concat <0x0|1> (plus (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[63:32]) (concat <0x0|1> <%ymm1|256>[63:32]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[63:32]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[63:32])) (concat <0x0|1> <%ymm1|256>[63:32]))[32:32] <0x1|1>) then (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x2|33> else <0x1|33>) else (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>)) (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>))[7:0]))[7:0])) (concat <0x0|1> (concat (plus (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[63:32]) (concat <0x0|1> <%ymm1|256>[63:32]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[63:32]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[63:32])) (concat <0x0|1> <%ymm1|256>[63:32]))[32:32] <0x1|1>) then (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x2|33> else <0x1|33>) else (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>)) (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[127:96]) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[127:96]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[127:96])) (concat <0x0|1> <%ymm1|256>[127:96]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>))[15:8] (plus (concat <0x0|1> (plus (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[191:160]) (concat <0x0|1> <%ymm1|256>[191:160]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[191:160]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[191:160])) (concat <0x0|1> <%ymm1|256>[191:160]))[32:32] <0x1|1>) then (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x2|33> else <0x1|33>) else (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>)) (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>))[7:0]) (concat <0x0|1> (plus (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[191:160]) (concat <0x0|1> <%ymm1|256>[191:160]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[191:160]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[191:160])) (concat <0x0|1> <%ymm1|256>[191:160]))[32:32] <0x1|1>) then (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x2|33> else <0x1|33>) else (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>)) (if (== (plus (if (== (plus (concat <0x0|1> <%ymm1|256>[255:224]) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then (plus (concat <0x0|1> <%ymm1|256>[255:224]) <0x1|33>) else (concat <0x0|1> <%ymm1|256>[255:224])) (concat <0x0|1> <%ymm1|256>[255:224]))[32:32] <0x1|1>) then <0x1|33> else <0x0|33>))[7:0]))[7:0])))[15:0])

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/
// setl-r8

  rule <k>
    execinstr (setl R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt (notBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1)))) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setl-r8-semantics


// vdivsd-xmm-xmm-xmm

  rule <k>
    execinstr (vdivsd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), div_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vdivsd-xmm-xmm-xmm-semantics


// testl-r32-r32

  rule <k>
    execinstr (testl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( getParentValue(R1, RSMap), 63, 64)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( getParentValue(R1, RSMap), 62, 63)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( getParentValue(R1, RSMap), 61, 62)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( getParentValue(R1, RSMap), 60, 61)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(R1, RSMap), 59, 60)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( getParentValue(R1, RSMap), 58, 59)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( getParentValue(R1, RSMap), 57, 58)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), extractMInt( getParentValue(R1, RSMap), 32, 33))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// testl-r32-r32-semantics


// vaddps-xmm-xmm-xmm

  rule <k>
    execinstr (vaddps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( add_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( add_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( add_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), add_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vaddps-xmm-xmm-xmm-semantics


// vpmaddubsw-xmm-xmm-xmm

  rule <k>
    execinstr (vpmaddubsw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 136, 144))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 136, 144))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 136, 144))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 136, 144))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 136))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 152, 160))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 152, 160))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 152, 160))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 152, 160))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 152))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 168, 176))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 168, 176))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 168, 176))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 168, 176))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 168))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 184, 192))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 184, 192))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 184, 192))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 184, 192))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 184))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 200, 208))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 200, 208))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 200, 208))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 216, 224))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 216, 224))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 216, 224))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)))))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 232, 240))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 232, 240))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 232, 240))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)))))), 16, 32) #fi) #fi), (#ifMInt sgtMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 248, 256))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)))))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 248, 256))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)))))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( addMInt( mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 248, 256))))), mi(32, svalueMInt(mulMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248))), concatenateMInt( mi(8, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)))))), 16, 32) #fi) #fi)))))))))
)

    </regstate>
    


// vpmaddubsw-xmm-xmm-xmm-semantics


// vpaddw-ymm-ymm-ymm

  rule <k>
    execinstr (vpaddw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 0, 16), extractMInt( getParentValue(R1, RSMap), 0, 16)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 16, 32), extractMInt( getParentValue(R1, RSMap), 16, 32)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 32, 48), extractMInt( getParentValue(R1, RSMap), 32, 48)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), extractMInt( getParentValue(R1, RSMap), 48, 64)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 64, 80), extractMInt( getParentValue(R1, RSMap), 64, 80)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 80, 96), extractMInt( getParentValue(R1, RSMap), 80, 96)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 96, 112), extractMInt( getParentValue(R1, RSMap), 96, 112)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 112, 128), extractMInt( getParentValue(R1, RSMap), 112, 128)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), extractMInt( getParentValue(R1, RSMap), 128, 144)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), extractMInt( getParentValue(R1, RSMap), 144, 160)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), extractMInt( getParentValue(R1, RSMap), 160, 176)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), extractMInt( getParentValue(R1, RSMap), 176, 192)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), extractMInt( getParentValue(R1, RSMap), 192, 208)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), extractMInt( getParentValue(R1, RSMap), 208, 224)), concatenateMInt( addMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 224, 240)), addMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), extractMInt( getParentValue(R1, RSMap), 240, 256)))))))))))))))))
)

    </regstate>
    


// vpaddw-ymm-ymm-ymm-semantics


// cmovgeq-r64-r64

  rule <k>
    execinstr (cmovgeq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1))) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovgeq-r64-r64-semantics


// xorb-r8-rh

  rule <k>
    execinstr (xorb R1:Rh, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 48, 56)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( getParentValue(R1, RSMap), 55, 56)), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( getParentValue(R1, RSMap), 54, 55)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( getParentValue(R1, RSMap), 53, 54)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( getParentValue(R1, RSMap), 52, 53)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(R1, RSMap), 51, 52)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( getParentValue(R1, RSMap), 50, 51)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( getParentValue(R1, RSMap), 49, 50)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 48, 49)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 48, 56)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 48, 49))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// xorb-r8-rh-semantics


// orpd-xmm-xmm

  rule <k>
    execinstr (orpd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), orMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// orpd-xmm-xmm-semantics


// btw-r16-r16

  rule <k>
    execinstr (btw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), uvalueMInt(mi(16, svalueMInt(andMInt( extractMInt( getParentValue(R1, RSMap), 48, 64), mi(16, 15)))))), 15, 16)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btw-r16-r16-semantics


// vpsraw-ymm-ymm-xmm

  rule <k>
    execinstr (vpsraw R1:Xmm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 0, 16), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 16, 32), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 32, 48), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 64, 80), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 80, 96), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 96, 112), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 112, 128), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))), ashrMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), uvalueMInt((#ifMInt ugtMInt( extractMInt( getParentValue(R1, RSMap), 192, 256), mi(64, 15)) #then mi(16, 16) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi))))))))))))))))))
)

    </regstate>
    


// vpsraw-ymm-ymm-xmm-semantics


// shrxl-r32-r32-r32

  rule <k>
    execinstr (shrxl R1:R32, R2:R32, R3:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(32, 0), lshrMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), uvalueMInt(andMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 31)))))
)

    </regstate>
    


// shrxl-r32-r32-r32-semantics


// psubb-xmm-xmm

  rule <k>
    execinstr (psubb R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)), subMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256))))))))))))))))))
)

    </regstate>
    


// psubb-xmm-xmm-semantics


// rolw-r16-cl

  rule <k>
    execinstr (rolw %cl, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), rol( extractMInt( getParentValue(R2, RSMap), 48, 64), concatenateMInt( mi(8, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)))))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 48, 64), concatenateMInt( mi(8, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)))), 15, 16), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool (eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 48, 64), concatenateMInt( mi(8, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 48, 64), concatenateMInt( mi(8, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)))), 15, 16), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rolw-r16-cl-semantics


// cmovbq-r64-r64

  rule <k>
    execinstr (cmovbq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovbq-r64-r64-semantics


// pmovsxbw-xmm-xmm

  rule <k>
    execinstr (pmovsxbw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 200))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 200, 208))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 216))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 216, 224))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 232))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 232, 240))), concatenateMInt( mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 248))), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 248, 256)))))))))))
)

    </regstate>
    


// pmovsxbw-xmm-xmm-semantics


// tzcntw-r16-r16

  rule <k>
    execinstr (tzcntw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)) #then mi(16, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)) #then mi(16, 1) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)) #then mi(16, 2) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)) #then mi(16, 3) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) #then mi(16, 4) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)) #then mi(16, 5) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)) #then mi(16, 6) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then mi(16, 7) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 55, 56), mi(1, 1)) #then mi(16, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 54, 55), mi(1, 1)) #then mi(16, 9) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 53, 54), mi(1, 1)) #then mi(16, 10) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 53), mi(1, 1)) #then mi(16, 11) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) #then mi(16, 12) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 50, 51), mi(1, 1)) #then mi(16, 13) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 50), mi(1, 1)) #then mi(16, 14) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then mi(16, 15) #else mi(16, 16) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi))

"CF" |-> (#ifMInt eqMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)) #then mi(16, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)) #then mi(16, 1) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)) #then mi(16, 2) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)) #then mi(16, 3) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) #then mi(16, 4) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)) #then mi(16, 5) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)) #then mi(16, 6) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then mi(16, 7) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 55, 56), mi(1, 1)) #then mi(16, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 54, 55), mi(1, 1)) #then mi(16, 9) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 53, 54), mi(1, 1)) #then mi(16, 10) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 53), mi(1, 1)) #then mi(16, 11) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) #then mi(16, 12) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 50, 51), mi(1, 1)) #then mi(16, 13) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 50), mi(1, 1)) #then mi(16, 14) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then mi(16, 15) #else mi(16, 16) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), mi(16, 16)) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 63, 64), mi(1, 1)) #then mi(16, 0) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 1)) #then mi(16, 1) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 61, 62), mi(1, 1)) #then mi(16, 2) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 60, 61), mi(1, 1)) #then mi(16, 3) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), mi(1, 1)) #then mi(16, 4) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 58, 59), mi(1, 1)) #then mi(16, 5) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 57, 58), mi(1, 1)) #then mi(16, 6) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), mi(1, 1)) #then mi(16, 7) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 55, 56), mi(1, 1)) #then mi(16, 8) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 54, 55), mi(1, 1)) #then mi(16, 9) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 53, 54), mi(1, 1)) #then mi(16, 10) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 52, 53), mi(1, 1)) #then mi(16, 11) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), mi(1, 1)) #then mi(16, 12) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 50, 51), mi(1, 1)) #then mi(16, 13) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 49, 50), mi(1, 1)) #then mi(16, 14) #else (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) #then mi(16, 15) #else mi(16, 16) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi) #fi), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// tzcntw-r16-r16-semantics


// movapd-xmm-xmm

  rule <k>
    execinstr (movapd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), extractMInt( getParentValue(R1, RSMap), 128, 256))
)

    </regstate>
    


// movapd-xmm-xmm-semantics


// cmpxchgw-r16-r16

  rule <k>
    execinstr (cmpxchgw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> (#ifMInt eqMInt( extractMInt( getParentValue(%rax, RSMap), 48, 64), extractMInt( getParentValue(R2, RSMap), 48, 64)) #then getParentValue(%rax, RSMap) #else concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), extractMInt( getParentValue(R2, RSMap), 48, 64)) #fi)

convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt eqMInt( extractMInt( getParentValue(%rax, RSMap), 48, 64), extractMInt( getParentValue(R2, RSMap), 48, 64)) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (cmpxchgw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
        convToRegKeys(R2) |-> getParentValue(R2, RSMap)

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13)

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 48, 49)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
      requires sameRegisters(R1, R2)
  


// cmpxchgw-r16-r16-semantics


// imull-r32-r32

  rule <k>
    execinstr (imull R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 64)))), 32, 64))

"CF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 64)))), mi(64, svalueMInt(extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 64)))), 32, 64))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 64)))), mi(64, svalueMInt(extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 64)))), 32, 64))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// imull-r32-r32-semantics


// vpermilpd-ymm-ymm-ymm

  rule <k>
    execinstr (vpermilpd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 62, 63), mi(1, 0)) #then extractMInt( getParentValue(R2, RSMap), 64, 128) #else extractMInt( getParentValue(R2, RSMap), 0, 64) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 126, 127), mi(1, 0)) #then extractMInt( getParentValue(R2, RSMap), 64, 128) #else extractMInt( getParentValue(R2, RSMap), 0, 64) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 190, 191), mi(1, 0)) #then extractMInt( getParentValue(R2, RSMap), 192, 256) #else extractMInt( getParentValue(R2, RSMap), 128, 192) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 254, 255), mi(1, 0)) #then extractMInt( getParentValue(R2, RSMap), 192, 256) #else extractMInt( getParentValue(R2, RSMap), 128, 192) #fi))))
)

    </regstate>
    


// vpermilpd-ymm-ymm-ymm-semantics


// vpmulhrsw-xmm-xmm-xmm

  rule <k>
    execinstr (vpmulhrsw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), concatenateMInt( extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31), extractMInt( addMInt( lshrMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), uvalueMInt(mi(32, 14))), mi(32, 1)), 15, 31)))))))))
)

    </regstate>
    


// vpmulhrsw-xmm-xmm-xmm-semantics


// vpminsb-ymm-ymm-ymm

  rule <k>
    execinstr (vpminsb R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 0, 8), extractMInt( getParentValue(R1, RSMap), 0, 8)) #then extractMInt( getParentValue(R2, RSMap), 0, 8) #else extractMInt( getParentValue(R1, RSMap), 0, 8) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 8, 16), extractMInt( getParentValue(R1, RSMap), 8, 16)) #then extractMInt( getParentValue(R2, RSMap), 8, 16) #else extractMInt( getParentValue(R1, RSMap), 8, 16) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 16, 24), extractMInt( getParentValue(R1, RSMap), 16, 24)) #then extractMInt( getParentValue(R2, RSMap), 16, 24) #else extractMInt( getParentValue(R1, RSMap), 16, 24) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 24, 32), extractMInt( getParentValue(R1, RSMap), 24, 32)) #then extractMInt( getParentValue(R2, RSMap), 24, 32) #else extractMInt( getParentValue(R1, RSMap), 24, 32) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 32, 40), extractMInt( getParentValue(R1, RSMap), 32, 40)) #then extractMInt( getParentValue(R2, RSMap), 32, 40) #else extractMInt( getParentValue(R1, RSMap), 32, 40) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 40, 48), extractMInt( getParentValue(R1, RSMap), 40, 48)) #then extractMInt( getParentValue(R2, RSMap), 40, 48) #else extractMInt( getParentValue(R1, RSMap), 40, 48) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), extractMInt( getParentValue(R1, RSMap), 48, 56)) #then extractMInt( getParentValue(R2, RSMap), 48, 56) #else extractMInt( getParentValue(R1, RSMap), 48, 56) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), extractMInt( getParentValue(R1, RSMap), 56, 64)) #then extractMInt( getParentValue(R2, RSMap), 56, 64) #else extractMInt( getParentValue(R1, RSMap), 56, 64) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 64, 72), extractMInt( getParentValue(R1, RSMap), 64, 72)) #then extractMInt( getParentValue(R2, RSMap), 64, 72) #else extractMInt( getParentValue(R1, RSMap), 64, 72) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 72, 80), extractMInt( getParentValue(R1, RSMap), 72, 80)) #then extractMInt( getParentValue(R2, RSMap), 72, 80) #else extractMInt( getParentValue(R1, RSMap), 72, 80) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 80, 88), extractMInt( getParentValue(R1, RSMap), 80, 88)) #then extractMInt( getParentValue(R2, RSMap), 80, 88) #else extractMInt( getParentValue(R1, RSMap), 80, 88) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 88, 96), extractMInt( getParentValue(R1, RSMap), 88, 96)) #then extractMInt( getParentValue(R2, RSMap), 88, 96) #else extractMInt( getParentValue(R1, RSMap), 88, 96) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 96, 104), extractMInt( getParentValue(R1, RSMap), 96, 104)) #then extractMInt( getParentValue(R2, RSMap), 96, 104) #else extractMInt( getParentValue(R1, RSMap), 96, 104) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 104, 112), extractMInt( getParentValue(R1, RSMap), 104, 112)) #then extractMInt( getParentValue(R2, RSMap), 104, 112) #else extractMInt( getParentValue(R1, RSMap), 104, 112) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 112, 120), extractMInt( getParentValue(R1, RSMap), 112, 120)) #then extractMInt( getParentValue(R2, RSMap), 112, 120) #else extractMInt( getParentValue(R1, RSMap), 112, 120) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 120, 128), extractMInt( getParentValue(R1, RSMap), 120, 128)) #then extractMInt( getParentValue(R2, RSMap), 120, 128) #else extractMInt( getParentValue(R1, RSMap), 120, 128) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else extractMInt( getParentValue(R1, RSMap), 128, 136) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else extractMInt( getParentValue(R1, RSMap), 136, 144) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else extractMInt( getParentValue(R1, RSMap), 144, 152) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else extractMInt( getParentValue(R1, RSMap), 152, 160) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else extractMInt( getParentValue(R1, RSMap), 160, 168) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else extractMInt( getParentValue(R1, RSMap), 168, 176) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else extractMInt( getParentValue(R1, RSMap), 176, 184) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else extractMInt( getParentValue(R1, RSMap), 184, 192) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else extractMInt( getParentValue(R1, RSMap), 192, 200) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else extractMInt( getParentValue(R1, RSMap), 200, 208) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else extractMInt( getParentValue(R1, RSMap), 208, 216) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else extractMInt( getParentValue(R1, RSMap), 216, 224) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else extractMInt( getParentValue(R1, RSMap), 224, 232) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else extractMInt( getParentValue(R1, RSMap), 232, 240) #fi), concatenateMInt( (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R1, RSMap), 240, 248) #fi), (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #then extractMInt( getParentValue(R2, RSMap), 248, 256) #else extractMInt( getParentValue(R1, RSMap), 248, 256) #fi))))))))))))))))))))))))))))))))
)

    </regstate>
    


// vpminsb-ymm-ymm-ymm-semantics


// addpd-xmm-xmm

  rule <k>
    execinstr (addpd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( add_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), add_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// addpd-xmm-xmm-semantics


// vpcmpgtb-xmm-xmm-xmm

  rule <k>
    execinstr (vpcmpgtb R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #then mi(8, 255) #else mi(8, 0) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #then mi(8, 255) #else mi(8, 0) #fi)))))))))))))))))
)

    </regstate>
    


// vpcmpgtb-xmm-xmm-xmm-semantics


// pmovzxwd-xmm-xmm

  rule <k>
    execinstr (pmovzxwd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 192, 208)), concatenateMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 208, 224)), concatenateMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 224, 240)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))))))
)

    </regstate>
    


// pmovzxwd-xmm-xmm-semantics


// vfnmsub231ps-ymm-ymm-ymm

  rule <k>
    execinstr (vfnmsub231ps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R3, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R3, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R3, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R3, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128))))), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vfnmsub231ps-ymm-ymm-ymm-semantics


// movshdup-xmm-xmm

  rule <k>
    execinstr (movshdup R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), extractMInt( getParentValue(R1, RSMap), 192, 224)), extractMInt( getParentValue(R1, RSMap), 192, 224)))
)

    </regstate>
    


// movshdup-xmm-xmm-semantics


// vandps-ymm-ymm-ymm

  rule <k>
    execinstr (vandps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> andMInt( getParentValue(R2, RSMap), getParentValue(R1, RSMap))
)

    </regstate>
    


// vandps-ymm-ymm-ymm-semantics


// vmovshdup-ymm-ymm

  rule <k>
    execinstr (vmovshdup R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96))), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224))))
)

    </regstate>
    


// vmovshdup-ymm-ymm-semantics


// vminps-xmm-xmm-xmm

  rule <k>
    execinstr (vminps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( mincmp_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R1, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt eqMInt( mincmp_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R1, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt eqMInt( mincmp_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else extractMInt( getParentValue(R1, RSMap), 192, 224) #fi), (#ifMInt eqMInt( mincmp_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi)))))
)

    </regstate>
    


// vminps-xmm-xmm-xmm-semantics


// movsbl-r32-r8

  rule <k>
    execinstr (movsbl R1:R8, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 56, 64))))
)

    </regstate>
    


// movsbl-r32-r8-semantics


// vfmaddsub231ps-ymm-ymm-ymm

  rule <k>
    execinstr (vfmaddsub231ps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfmadd231_single(extractMInt( getParentValue(R3, RSMap), 0, 32), extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), vfmsub231_single(extractMInt( getParentValue(R3, RSMap), 32, 64), extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64))), concatenateMInt( concatenateMInt( vfmadd231_single(extractMInt( getParentValue(R3, RSMap), 64, 96), extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), vfmsub231_single(extractMInt( getParentValue(R3, RSMap), 96, 128), extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128))), concatenateMInt( concatenateMInt( vfmadd231_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), vfmsub231_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192))), concatenateMInt( vfmadd231_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfmsub231_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256))))))
)

    </regstate>
    


// vfmaddsub231ps-ymm-ymm-ymm-semantics


// vpermps-ymm-ymm-ymm

  rule <k>
    execinstr (vpermps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( lshrMInt( getParentValue(R1, RSMap), uvalueMInt(mulMInt( concatenateMInt( mi(253, 0), extractMInt( getParentValue(R2, RSMap), 29, 32)), mi(256, 32)))), 224, 256), concatenateMInt( extractMInt( lshrMInt( getParentValue(R1, RSMap), uvalueMInt(mulMInt( concatenateMInt( mi(253, 0), extractMInt( getParentValue(R2, RSMap), 61, 64)), mi(256, 32)))), 224, 256), concatenateMInt( extractMInt( lshrMInt( getParentValue(R1, RSMap), uvalueMInt(mulMInt( concatenateMInt( mi(253, 0), extractMInt( getParentValue(R2, RSMap), 93, 96)), mi(256, 32)))), 224, 256), concatenateMInt( extractMInt( lshrMInt( getParentValue(R1, RSMap), uvalueMInt(mulMInt( concatenateMInt( mi(253, 0), extractMInt( getParentValue(R2, RSMap), 125, 128)), mi(256, 32)))), 224, 256), concatenateMInt( extractMInt( lshrMInt( getParentValue(R1, RSMap), uvalueMInt(mulMInt( concatenateMInt( mi(253, 0), extractMInt( getParentValue(R2, RSMap), 157, 160)), mi(256, 32)))), 224, 256), concatenateMInt( extractMInt( lshrMInt( getParentValue(R1, RSMap), uvalueMInt(mulMInt( concatenateMInt( mi(253, 0), extractMInt( getParentValue(R2, RSMap), 189, 192)), mi(256, 32)))), 224, 256), concatenateMInt( extractMInt( lshrMInt( getParentValue(R1, RSMap), uvalueMInt(mulMInt( concatenateMInt( mi(253, 0), extractMInt( getParentValue(R2, RSMap), 221, 224)), mi(256, 32)))), 224, 256), extractMInt( lshrMInt( getParentValue(R1, RSMap), uvalueMInt(mulMInt( concatenateMInt( mi(253, 0), extractMInt( getParentValue(R2, RSMap), 253, 256)), mi(256, 32)))), 224, 256))))))))
)

    </regstate>
    


// vpermps-ymm-ymm-ymm-semantics


// movsbw-r16-r8

  rule <k>
    execinstr (movsbw R1:R8, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), mi(16, svalueMInt(extractMInt( getParentValue(R1, RSMap), 56, 64))))
)

    </regstate>
    


// movsbw-r16-r8-semantics


// vpmaxud-xmm-xmm-xmm

  rule <k>
    execinstr (vpmaxud R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R1, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R1, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else extractMInt( getParentValue(R1, RSMap), 192, 224) #fi), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi)))))
)

    </regstate>
    


// vpmaxud-xmm-xmm-xmm-semantics


// setnc-r8

  rule <k>
    execinstr (setnc R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt (notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setnc-r8-semantics


// vfnmsub213ss-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmsub213ss R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 224), vfnmsub132_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R3, RSMap), 224, 256))))
)

    </regstate>
    


// vfnmsub213ss-xmm-xmm-xmm-semantics


// shlb-r8-cl

  rule <k>
    execinstr (shlb %cl, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 9))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 8)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 8))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 9), mi(8, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool (((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 8)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 8))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shlb-r8-cl-semantics


// phminposuw-xmm-xmm

  rule <k>
    execinstr (phminposuw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 160, 176) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 144, 160) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 160, 176) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi) #fi) #fi)) #then concatenateMInt( mi(109, 0), mi(3, 7)) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 160, 176) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi) #fi)) #then concatenateMInt( mi(109, 0), mi(3, 6)) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi)) #then concatenateMInt( mi(109, 0), mi(3, 5)) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then concatenateMInt( mi(109, 0), mi(3, 4)) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then concatenateMInt( mi(109, 0), mi(3, 3)) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then concatenateMInt( mi(109, 0), mi(3, 2)) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then concatenateMInt( mi(109, 0), mi(3, 1)) #else concatenateMInt( mi(109, 0), mi(3, 0)) #fi) #fi) #fi) #fi) #fi) #fi) #fi), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 160, 176) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 144, 160) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 160, 176) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 128, 144) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 160, 176) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 144, 160) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 160, 176) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 176, 192) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi)) #then extractMInt( getParentValue(R1, RSMap), 192, 208) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi)) #then extractMInt( getParentValue(R1, RSMap), 208, 224) #else (#ifMInt ultMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), extractMInt( getParentValue(R1, RSMap), 240, 256)) #then extractMInt( getParentValue(R1, RSMap), 224, 240) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi) #fi) #fi) #fi) #fi) #fi)))
)

    </regstate>
    


// phminposuw-xmm-xmm-semantics


// vpaddusb-xmm-xmm-xmm

  rule <k>
    execinstr (vpaddusb R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 128, 136))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 128, 136)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 128, 136))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 136, 144))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 136, 144)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 136, 144))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 144, 152))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 144, 152)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 144, 152))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 152, 160))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 152, 160)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 152, 160))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 160, 168))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 160, 168)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 160, 168))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 168, 176))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 168, 176)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 168, 176))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 176, 184))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 176, 184)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 176, 184))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 184, 192))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 184, 192)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 184, 192))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 192, 200))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 192, 200))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 200, 208))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 200, 208))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 208, 216))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 208, 216))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 216, 224))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 216, 224))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 224, 232))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 224, 232))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 232, 240))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 232, 240))), 1, 9) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 240, 248))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 240, 248))), 1, 9) #fi), (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))), 0, 1), mi(1, 1)) #then mi(8, 255) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 248, 256)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 248, 256))), 1, 9) #fi)))))))))))))))))
)

    </regstate>
    


// vpaddusb-xmm-xmm-xmm-semantics


// cmovncl-r32-r32

  rule <k>
    execinstr (cmovncl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt (notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovncl-r32-r32-semantics


// vunpckhpd-xmm-xmm-xmm

  rule <k>
    execinstr (vunpckhpd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192)))
)

    </regstate>
    


// vunpckhpd-xmm-xmm-xmm-semantics


// vblendvpd-xmm-xmm-xmm-xmm

  rule <k>
    execinstr (vblendvpd R1:Xmm, R2:Xmm, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 128, 129), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 192) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 192, 193), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 192, 256) #else extractMInt( getParentValue(R2, RSMap), 192, 256) #fi)))
)

    </regstate>
    


// vblendvpd-xmm-xmm-xmm-xmm-semantics


// sarxl-r32-r32-r32

  rule <k>
    execinstr (sarxl R1:R32, R2:R32, R3:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(32, 0), ashrMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), uvalueMInt(andMInt( extractMInt( getParentValue(R1, RSMap), 32, 64), mi(32, 31)))))
)

    </regstate>
    


// sarxl-r32-r32-r32-semantics


// vmovaps-ymm-ymm

  rule <k>
    execinstr (vmovaps R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> getParentValue(R1, RSMap)
)

    </regstate>
    


// vmovaps-ymm-ymm-semantics


// pandn-xmm-xmm

  rule <k>
    execinstr (pandn R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), andMInt( negMInt( extractMInt( getParentValue(R2, RSMap), 128, 256)), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// pandn-xmm-xmm-semantics


// cmovnsl-r32-r32

  rule <k>
    execinstr (cmovnsl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt (notBool eqMInt(getFlag("SF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovnsl-r32-r32-semantics


// cmovew-r16-r16

  rule <k>
    execinstr (cmovew R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt eqMInt(getFlag("ZF", RSMap), mi(1,1)) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovew-r16-r16-semantics


// cmpl-r32-r32

  rule <k>
    execinstr (cmpl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 32, 33)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 32, 33)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// cmpl-r32-r32-semantics


// vblendvps-xmm-xmm-xmm-xmm

  rule <k>
    execinstr (vblendvps R1:Xmm, R2:Xmm, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 128, 129), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 160) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 160, 161), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 192, 193), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 192, 224) #else extractMInt( getParentValue(R2, RSMap), 192, 224) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 224, 225), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 224, 256) #else extractMInt( getParentValue(R2, RSMap), 224, 256) #fi)))))
)

    </regstate>
    


// vblendvps-xmm-xmm-xmm-xmm-semantics


// vfmsub213ps-ymm-ymm-ymm

  rule <k>
    execinstr (vfmsub213ps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32), extractMInt( getParentValue(R3, RSMap), 0, 32)), vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64), extractMInt( getParentValue(R3, RSMap), 32, 64))), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96), extractMInt( getParentValue(R3, RSMap), 64, 96)), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128), extractMInt( getParentValue(R3, RSMap), 96, 128)), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160), extractMInt( getParentValue(R3, RSMap), 128, 160)), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R3, RSMap), 160, 192)), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224), extractMInt( getParentValue(R3, RSMap), 192, 224)), vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R3, RSMap), 224, 256))))))))
)

    </regstate>
    


// vfmsub213ps-ymm-ymm-ymm-semantics


// packssdw-xmm-xmm

  rule <k>
    execinstr (packssdw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 128, 160), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R1, RSMap), 144, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 160, 192), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R1, RSMap), 176, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 192, 224), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R1, RSMap), 208, 224) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 224, 256), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R1, RSMap), 240, 256) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R2, RSMap), 144, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R2, RSMap), 176, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R2, RSMap), 208, 224) #fi) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( getParentValue(R2, RSMap), 240, 256) #fi) #fi)))))))))
)

    </regstate>
    


// packssdw-xmm-xmm-semantics


// vfnmadd231sd-xmm-xmm-xmm

  rule <k>
    execinstr (vfnmadd231sd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 192), vfnmadd231_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfnmadd231sd-xmm-xmm-xmm-semantics


// vcvtdq2pd-ymm-ymm

  rule <k>
    execinstr (vcvtdq2pd R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( cvt_int32_to_double(extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( cvt_int32_to_double(extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( cvt_int32_to_double(extractMInt( getParentValue(R1, RSMap), 192, 224)), cvt_int32_to_double(extractMInt( getParentValue(R1, RSMap), 224, 256)))))
)

    </regstate>
    


// vcvtdq2pd-ymm-ymm-semantics


// orl-r32-r32

  rule <k>
    execinstr (orl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), orMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( getParentValue(R1, RSMap), 63, 64)), mi(1, 1)) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( getParentValue(R1, RSMap), 62, 63)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( getParentValue(R1, RSMap), 61, 62)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( getParentValue(R1, RSMap), 60, 61)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( getParentValue(R1, RSMap), 59, 60)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( getParentValue(R1, RSMap), 58, 59)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( getParentValue(R1, RSMap), 57, 58)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( getParentValue(R1, RSMap), 56, 57)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> orMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), extractMInt( getParentValue(R1, RSMap), 32, 33))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// orl-r32-r32-semantics


// vpsllvd-ymm-ymm-ymm

  rule <k>
    execinstr (vpsllvd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 32))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 64))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 96))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 128))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 160))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 192))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 224))), shlMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 256))))))))))
)

    </regstate>
    


// vpsllvd-ymm-ymm-ymm-semantics


// vpmovsxwd-xmm-xmm

  rule <k>
    execinstr (vpmovsxwd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(128, 0), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208))), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224))), concatenateMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))))))
)

    </regstate>
    


// vpmovsxwd-xmm-xmm-semantics


// vfmsubadd213ps-xmm-xmm-xmm

  rule <k>
    execinstr (vfmsubadd213ps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( vfmsub213_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), vfmadd213_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192))), concatenateMInt( vfmsub213_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfmadd213_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))))
)

    </regstate>
    


// vfmsubadd213ps-xmm-xmm-xmm-semantics


// vhsubps-xmm-xmm-xmm

  rule <k>
    execinstr (vhsubps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( concatenateMInt( sub_single(extractMInt( getParentValue(R1, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 128, 160)), sub_single(extractMInt( getParentValue(R1, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 192, 224))), sub_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 128, 160))), sub_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 192, 224))))
)

    </regstate>
    


// vhsubps-xmm-xmm-xmm-semantics


// vphsubsw-ymm-ymm-ymm

  rule <k>
    execinstr (vphsubsw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 32))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 16)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 32))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 16)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 32))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 16)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 48)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 48)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 48)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 96))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 80)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 96))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 80)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 96))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 80)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 128))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 112)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 128))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 112)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 128))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 112)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 32))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 16)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 32))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 16)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 32))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 16)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 48)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 48)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 48)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 96))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 80)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 96))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 80)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 96))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 80)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 128))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 112)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 128))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 112)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 128))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 112)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176)))), 16, 32) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208)))), 16, 32) #fi) #fi), (#ifMInt sgtMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))), mi(32, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))), mi(32, 18446744073709518848)) #then mi(16, 18446744073709518848) #else extractMInt( subMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240)))), 16, 32) #fi) #fi))))))))))))))))
)

    </regstate>
    


// vphsubsw-ymm-ymm-ymm-semantics


// cmovngl-r32-r32

  rule <k>
    execinstr (cmovngl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), (#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1,1)) orBool (notBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1))))) #then extractMInt( getParentValue(R1, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi))
)

    </regstate>
    


// cmovngl-r32-r32-semantics


// vfmsub231ps-ymm-ymm-ymm

  rule <k>
    execinstr (vfmsub231ps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R3, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R3, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R3, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R3, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128)), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfmsub132_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))))))))
)

    </regstate>
    


// vfmsub231ps-ymm-ymm-ymm-semantics


// clc

  rule <k>
    execinstr (clc  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)
)

    </regstate>
    


// clc-semantics


// cvtps2pd-xmm-xmm

  rule <k>
    execinstr (cvtps2pd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( cvt_single_to_double(extractMInt( getParentValue(R1, RSMap), 192, 224)), cvt_single_to_double(extractMInt( getParentValue(R1, RSMap), 224, 256))))
)

    </regstate>
    


// cvtps2pd-xmm-xmm-semantics


// vmaxps-ymm-ymm-ymm

  rule <k>
    execinstr (vmaxps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt eqMInt( maxcmp_single(extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 0, 32) #else extractMInt( getParentValue(R1, RSMap), 0, 32) #fi), concatenateMInt( (#ifMInt eqMInt( maxcmp_single(extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 32, 64) #else extractMInt( getParentValue(R1, RSMap), 32, 64) #fi), concatenateMInt( (#ifMInt eqMInt( maxcmp_single(extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 64, 96) #else extractMInt( getParentValue(R1, RSMap), 64, 96) #fi), concatenateMInt( (#ifMInt eqMInt( maxcmp_single(extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 96, 128) #else extractMInt( getParentValue(R1, RSMap), 96, 128) #fi), concatenateMInt( (#ifMInt eqMInt( maxcmp_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R1, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt eqMInt( maxcmp_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R1, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt eqMInt( maxcmp_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else extractMInt( getParentValue(R1, RSMap), 192, 224) #fi), (#ifMInt eqMInt( maxcmp_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else extractMInt( getParentValue(R1, RSMap), 224, 256) #fi))))))))
)

    </regstate>
    


// vmaxps-ymm-ymm-ymm-semantics


// vfmsub231sd-xmm-xmm-xmm

  rule <k>
    execinstr (vfmsub231sd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 192), vfmsub132_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256))))
)

    </regstate>
    


// vfmsub231sd-xmm-xmm-xmm-semantics


// vsubps-ymm-ymm-ymm

  rule <k>
    execinstr (vsubps R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( sub_single(extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), concatenateMInt( sub_single(extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( sub_single(extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), concatenateMInt( sub_single(extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128)), concatenateMInt( sub_single(extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( sub_single(extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( sub_single(extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), sub_single(extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))))))))
)

    </regstate>
    


// vsubps-ymm-ymm-ymm-semantics


// pmulhuw-xmm-xmm

  rule <k>
    execinstr (pmulhuw R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), 0, 16), concatenateMInt( extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), 0, 16), extractMInt( mulMInt( concatenateMInt( mi(16, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(16, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), 0, 16)))))))))
)

    </regstate>
    


// pmulhuw-xmm-xmm-semantics


// pmovmskb-r64-xmm

  rule <k>
    execinstr (pmovmskb R1:Xmm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(48, 0), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 129), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 136, 137), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 144, 145), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 152, 153), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 161), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 168, 169), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 176, 177), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 184, 185), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 193), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 200, 201), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 208, 209), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 216, 217), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 225), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 232, 233), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 241), extractMInt( getParentValue(R1, RSMap), 248, 249)))))))))))))))))
)

    </regstate>
    


// pmovmskb-r64-xmm-semantics


// vfmsubadd132ps-xmm-xmm-xmm

  rule <k>
    execinstr (vfmsubadd132ps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192))), concatenateMInt( vfmsub132_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), vfmadd132_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))))
)

    </regstate>
    


// vfmsubadd132ps-xmm-xmm-xmm-semantics


// blsrq-r64-r64

  rule <k>
    execinstr (blsrq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> andMInt( subMInt( getParentValue(R1, RSMap), mi(64, 1)), getParentValue(R1, RSMap))

"CF" |-> (#ifMInt eqMInt( getParentValue(R1, RSMap), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( subMInt( getParentValue(R1, RSMap), mi(64, 1)), getParentValue(R1, RSMap)), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( subMInt( getParentValue(R1, RSMap), mi(64, 1)), 0, 1), extractMInt( getParentValue(R1, RSMap), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// blsrq-r64-r64-semantics


// cmovpew-r16-r16

  rule <k>
    execinstr (cmovpew R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt eqMInt(getFlag("PF", RSMap), mi(1,1)) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovpew-r16-r16-semantics


// setpe-r8

  rule <k>
    execinstr (setpe R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt eqMInt(getFlag("PF", RSMap), mi(1,1)) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setpe-r8-semantics


// movsbq-r64-r8

  rule <k>
    execinstr (movsbq R1:R8, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> mi(64, svalueMInt(extractMInt( getParentValue(R1, RSMap), 56, 64)))
)

    </regstate>
    


// movsbq-r64-r8-semantics


// vmovmskps-r32-xmm

  rule <k>
    execinstr (vmovmskps R1:Xmm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(60, 0), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 129), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 161), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 193), extractMInt( getParentValue(R1, RSMap), 224, 225)))))
)

    </regstate>
    


// vmovmskps-r32-xmm-semantics


// pcmpeqq-xmm-xmm

  rule <k>
    execinstr (pcmpeqq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi)))
)

    </regstate>
    


// pcmpeqq-xmm-xmm-semantics


// vminpd-xmm-xmm-xmm

  rule <k>
    execinstr (vminpd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( mincmp_double(extractMInt( getParentValue(R2, RSMap), 128, 192), extractMInt( getParentValue(R1, RSMap), 128, 192)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 192) #else extractMInt( getParentValue(R1, RSMap), 128, 192) #fi), (#ifMInt eqMInt( mincmp_double(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 256) #else extractMInt( getParentValue(R1, RSMap), 192, 256) #fi)))
)

    </regstate>
    


// vminpd-xmm-xmm-xmm-semantics


// ucomisd-xmm-xmm

  rule <k>
    execinstr (ucomisd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 0)) orBool eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 2))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> mi(1, 0)

"ZF" |-> (#ifMInt (eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 0)) orBool eqMInt( comisd(extractMInt( getParentValue(R2, RSMap), 192, 256), extractMInt( getParentValue(R1, RSMap), 192, 256)), mi(2, 3))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> mi(1, 0)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// ucomisd-xmm-xmm-semantics


// vpor-xmm-xmm-xmm

  rule <k>
    execinstr (vpor R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), orMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), extractMInt( getParentValue(R1, RSMap), 128, 256)))
)

    </regstate>
    


// vpor-xmm-xmm-xmm-semantics


// vpunpcklbw-xmm-xmm-xmm

  rule <k>
    execinstr (vpunpcklbw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 200), extractMInt( getParentValue(R2, RSMap), 192, 200)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 200, 208), extractMInt( getParentValue(R2, RSMap), 200, 208)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 208, 216), extractMInt( getParentValue(R2, RSMap), 208, 216)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 216, 224), extractMInt( getParentValue(R2, RSMap), 216, 224)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 232), extractMInt( getParentValue(R2, RSMap), 224, 232)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 232, 240), extractMInt( getParentValue(R2, RSMap), 232, 240)), concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 248), extractMInt( getParentValue(R2, RSMap), 240, 248)), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 248, 256), extractMInt( getParentValue(R2, RSMap), 248, 256))))))))))
)

    </regstate>
    


// vpunpcklbw-xmm-xmm-xmm-semantics


// vpsubd-ymm-ymm-ymm

  rule <k>
    execinstr (vpsubd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), extractMInt( getParentValue(R1, RSMap), 0, 32)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), extractMInt( getParentValue(R1, RSMap), 32, 64)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), extractMInt( getParentValue(R1, RSMap), 64, 96)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), extractMInt( getParentValue(R1, RSMap), 96, 128)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), extractMInt( getParentValue(R1, RSMap), 128, 160)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), extractMInt( getParentValue(R1, RSMap), 160, 192)), concatenateMInt( subMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), extractMInt( getParentValue(R1, RSMap), 192, 224)), subMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), extractMInt( getParentValue(R1, RSMap), 224, 256)))))))))
)

    </regstate>
    


// vpsubd-ymm-ymm-ymm-semantics


// cmovpq-r64-r64

  rule <k>
    execinstr (cmovpq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt eqMInt(getFlag("PF", RSMap), mi(1,1)) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovpq-r64-r64-semantics


// sarq-r64-one

  rule <k>
    execinstr (sarq $0x1, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 0, 64)

"CF" |-> extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 64, 65)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 63, 64), mi(1, 1)) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 57, 58), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 56, 57), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 0, 64), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), mi(8, 1)))), 0, 1)

"OF" |-> mi(1, 0)
)

    </regstate>
    


// sarq-r64-one-semantics


// xaddb-rh-rh

  rule <k>
    execinstr (xaddb R1:Rh, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), extractMInt( getParentValue(R2, RSMap), 48, 56)), extractMInt( getParentValue(R1, RSMap), 56, 64))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), extractMInt( getParentValue(R2, RSMap), 51, 52)), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (xaddb R1:Rh, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap,
        convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5)

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
      )
    </regstate>
      requires sameRegisters(R1, R2)
  


// xaddb-rh-rh-semantics


// seta-rh

  rule <k>
    execinstr (seta R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt ((notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) andBool (notBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// seta-rh-semantics


// setng-rh

  rule <k>
    execinstr (setng R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1,1)) orBool (notBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1))))) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setng-rh-semantics


// setnc-rh

  rule <k>
    execinstr (setnc R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 48), (#ifMInt (notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi)), extractMInt( getParentValue(R1, RSMap), 56, 64))
)

    </regstate>
    


// setnc-rh-semantics


// setnz-r8

  rule <k>
    execinstr (setnz R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 56), (#ifMInt (notBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) #then mi(8, 1) #else mi(8, 0) #fi))
)

    </regstate>
    


// setnz-r8-semantics


// vpmovmskb-r64-ymm

  rule <k>
    execinstr (vpmovmskb R1:Ymm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 0, 1), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 8, 9), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 16, 17), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 24, 25), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 32, 33), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 40, 41), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 56, 57), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 64, 65), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 72, 73), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 80, 81), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 88, 89), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 96, 97), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 104, 105), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 112, 113), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 120, 121), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 128, 129), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 136, 137), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 144, 145), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 152, 153), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 160, 161), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 168, 169), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 176, 177), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 184, 185), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 192, 193), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 200, 201), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 208, 209), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 216, 217), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 224, 225), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 232, 233), concatenateMInt( extractMInt( getParentValue(R1, RSMap), 240, 241), extractMInt( getParentValue(R1, RSMap), 248, 249)))))))))))))))))))))))))))))))))
)

    </regstate>
    


// vpmovmskb-r64-ymm-semantics


// rcrb-r8-one

  rule <k>
    execinstr (rcrb $0x1, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), mi(9, 1)), 1, 9))

"CF" |-> extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), mi(9, 1)), 0, 1)

"OF" |-> (#ifMInt (eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), mi(9, 1)), 1, 2), mi(1, 1)) xorBool eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), mi(9, 1)), 2, 3), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rcrb-r8-one-semantics


// cmovnzw-r16-r16

  rule <k>
    execinstr (cmovnzw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), (#ifMInt (notBool eqMInt(getFlag("ZF", RSMap), mi(1,1))) #then extractMInt( getParentValue(R1, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi))
)

    </regstate>
    


// cmovnzw-r16-r16-semantics


// cmovncq-r64-r64

  rule <k>
    execinstr (cmovncq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt (notBool eqMInt(getFlag("CF", RSMap), mi(1,1))) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovncq-r64-r64-semantics


// movq-xmm-xmm

  rule <k>
    execinstr (movq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( mi(64, 0), extractMInt( getParentValue(R1, RSMap), 192, 256)))
)

    </regstate>
    


// movq-xmm-xmm-semantics


// shrb-r8-cl

  rule <k>
    execinstr (shrb %cl, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 8))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 8)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 8))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 8, 9), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 8), mi(8, 0))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shrb-r8-cl-semantics


// rorb-r8-cl

  rule <k>
    execinstr (rorb %cl, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), ror( extractMInt( getParentValue(R2, RSMap), 56, 64), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 56, 64), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1)) andBool (eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 56, 64), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 56, 64), andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( extractMInt( getParentValue(%rcx, RSMap), 56, 64), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rorb-r8-cl-semantics


// vpcmpeqb-xmm-xmm-xmm

  rule <k>
    execinstr (vpcmpeqb R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #then mi(8, 255) #else mi(8, 0) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #then mi(8, 255) #else mi(8, 0) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #then mi(8, 255) #else mi(8, 0) #fi)))))))))))))))))
)

    </regstate>
    


// vpcmpeqb-xmm-xmm-xmm-semantics


// mulxl-r32-r32-r32

  rule <k>
    execinstr (mulxl R1:R32, R2:R32, R3:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(32, 0), extractMInt( mulMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(%rdx, RSMap), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 32, 64))), 0, 32))

convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( mulMInt( concatenateMInt( mi(32, 0), extractMInt( getParentValue(%rdx, RSMap), 32, 64)), concatenateMInt( mi(32, 0), extractMInt( getParentValue(R1, RSMap), 32, 64))), 32, 64))
)

    </regstate>
    


// mulxl-r32-r32-r32-semantics


// subl-r32-r32

  rule <k>
    execinstr (subl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 59, 60), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 32, 33)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( getParentValue(R1, RSMap), 32, 33)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( extractMInt( getParentValue(R1, RSMap), 32, 64))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// subl-r32-r32-semantics


// blendvps-xmm-xmm-xmm0

  rule <k>
    execinstr (blendvps XMM0, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 128, 129), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 160) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 160, 161), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 192, 193), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 192, 224) #else extractMInt( getParentValue(R2, RSMap), 192, 224) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(%ymm0, RSMap), 224, 225), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 224, 256) #else extractMInt( getParentValue(R2, RSMap), 224, 256) #fi)))))
)

    </regstate>
    


// blendvps-xmm-xmm-xmm0-semantics


// addb-rh-rh

  rule <k>
    execinstr (addb R1:Rh, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( getParentValue(R1, RSMap), 51, 52), extractMInt( getParentValue(R2, RSMap), 51, 52)), extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( getParentValue(R1, RSMap), 48, 49), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 48, 56)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// addb-rh-rh-semantics


// vpaddusw-xmm-xmm-xmm

  rule <k>
    execinstr (vpaddusw R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 128, 144)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 128, 144))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 144, 160)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 144, 160))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 160, 176)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 160, 176))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 176, 192)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 176, 192))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 192, 208)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 192, 208))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 208, 224)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 208, 224))), 1, 17) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 224, 240)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 224, 240))), 1, 17) #fi), (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), 0, 1), mi(1, 1)) #then mi(16, 65535) #else extractMInt( addMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 240, 256)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R1, RSMap), 240, 256))), 1, 17) #fi)))))))))
)

    </regstate>
    


// vpaddusw-xmm-xmm-xmm-semantics


// cmovngeq-r64-r64

  rule <k>
    execinstr (cmovngeq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (#ifMInt (notBool (eqMInt(getFlag("SF", RSMap), mi(1,1)) ==Bool eqMInt(getFlag("OF", RSMap), mi(1,1)))) #then getParentValue(R1, RSMap) #else getParentValue(R2, RSMap) #fi)
)

    </regstate>
    


// cmovngeq-r64-r64-semantics


// vpsubsw-ymm-ymm-ymm

  rule <k>
    execinstr (vpsubsw R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 16))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 16)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 16))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 16)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 0, 16))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 0, 16)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 32))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 32)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 32))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 32)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 16, 32))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 16, 32)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 48))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 48)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 48))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 48)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 48))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 32, 48)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 48, 64)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 80))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 80)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 80))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 80)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 64, 80))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 64, 80)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 96))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 96)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 96))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 96)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 80, 96))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 80, 96)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 112))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 112)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 112))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 112)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 96, 112))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 96, 112)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 128))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 128)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 128))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 128)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 112, 128))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 112, 128)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 128, 144))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 128, 144)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 144, 160))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 144, 160)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 160, 176))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 160, 176)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 176, 192))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 176, 192)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 192, 208))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 192, 208)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 208, 224))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 208, 224)))), 2, 18) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 224, 240))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 224, 240)))), 2, 18) #fi) #fi), (#ifMInt sgtMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), mi(18, 32767)) #then mi(16, 32767) #else (#ifMInt sltMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), mi(18, 18446744073709518848)) #then mi(16, 32768) #else extractMInt( subMInt( mi(18, svalueMInt(extractMInt( getParentValue(R2, RSMap), 240, 256))), mi(18, svalueMInt(extractMInt( getParentValue(R1, RSMap), 240, 256)))), 2, 18) #fi) #fi))))))))))))))))
)

    </regstate>
    


// vpsubsw-ymm-ymm-ymm-semantics


// packuswb-xmm-xmm

  rule <k>
    execinstr (packuswb R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 128, 144), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 136, 144) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 144, 160), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 152, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 160, 176), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 168, 176) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 176, 192), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 184, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 192, 208), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 200, 208) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 208, 224), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 216, 224) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 224, 240), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 232, 240) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R1, RSMap), 240, 256), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R1, RSMap), 248, 256) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 136, 144) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 152, 160) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 168, 176) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 184, 192) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 200, 208) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 216, 224) #fi) #fi), concatenateMInt( (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 232, 240) #fi) #fi), (#ifMInt sgtMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), mi(16, 255)) #then mi(8, 255) #else (#ifMInt sltMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), mi(16, 0)) #then mi(8, 0) #else extractMInt( getParentValue(R2, RSMap), 248, 256) #fi) #fi)))))))))))))))))
)

    </regstate>
    


// packuswb-xmm-xmm-semantics


// pmaxub-xmm-xmm

  rule <k>
    execinstr (pmaxub R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 128, 136), extractMInt( getParentValue(R1, RSMap), 128, 136)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else extractMInt( getParentValue(R1, RSMap), 128, 136) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 136, 144), extractMInt( getParentValue(R1, RSMap), 136, 144)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else extractMInt( getParentValue(R1, RSMap), 136, 144) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 144, 152), extractMInt( getParentValue(R1, RSMap), 144, 152)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else extractMInt( getParentValue(R1, RSMap), 144, 152) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 152, 160), extractMInt( getParentValue(R1, RSMap), 152, 160)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else extractMInt( getParentValue(R1, RSMap), 152, 160) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 160, 168), extractMInt( getParentValue(R1, RSMap), 160, 168)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else extractMInt( getParentValue(R1, RSMap), 160, 168) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 168, 176), extractMInt( getParentValue(R1, RSMap), 168, 176)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else extractMInt( getParentValue(R1, RSMap), 168, 176) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 176, 184), extractMInt( getParentValue(R1, RSMap), 176, 184)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else extractMInt( getParentValue(R1, RSMap), 176, 184) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 184, 192), extractMInt( getParentValue(R1, RSMap), 184, 192)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else extractMInt( getParentValue(R1, RSMap), 184, 192) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 192, 200), extractMInt( getParentValue(R1, RSMap), 192, 200)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else extractMInt( getParentValue(R1, RSMap), 192, 200) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 200, 208), extractMInt( getParentValue(R1, RSMap), 200, 208)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else extractMInt( getParentValue(R1, RSMap), 200, 208) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 208, 216), extractMInt( getParentValue(R1, RSMap), 208, 216)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else extractMInt( getParentValue(R1, RSMap), 208, 216) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 216, 224), extractMInt( getParentValue(R1, RSMap), 216, 224)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else extractMInt( getParentValue(R1, RSMap), 216, 224) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 224, 232), extractMInt( getParentValue(R1, RSMap), 224, 232)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else extractMInt( getParentValue(R1, RSMap), 224, 232) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 232, 240), extractMInt( getParentValue(R1, RSMap), 232, 240)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else extractMInt( getParentValue(R1, RSMap), 232, 240) #fi), concatenateMInt( (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 240, 248), extractMInt( getParentValue(R1, RSMap), 240, 248)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R1, RSMap), 240, 248) #fi), (#ifMInt ugtMInt( extractMInt( getParentValue(R2, RSMap), 248, 256), extractMInt( getParentValue(R1, RSMap), 248, 256)) #then extractMInt( getParentValue(R2, RSMap), 248, 256) #else extractMInt( getParentValue(R1, RSMap), 248, 256) #fi)))))))))))))))))
)

    </regstate>
    


// pmaxub-xmm-xmm-semantics


// vpblendvb-xmm-xmm-xmm-xmm

  rule <k>
    execinstr (vpblendvb R1:Xmm, R2:Xmm, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 128, 129), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 136) #else extractMInt( getParentValue(R3, RSMap), 128, 136) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 136, 137), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 136, 144) #else extractMInt( getParentValue(R3, RSMap), 136, 144) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 144, 145), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 144, 152) #else extractMInt( getParentValue(R3, RSMap), 144, 152) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 152, 153), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 152, 160) #else extractMInt( getParentValue(R3, RSMap), 152, 160) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 160, 161), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 160, 168) #else extractMInt( getParentValue(R3, RSMap), 160, 168) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 168, 169), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 168, 176) #else extractMInt( getParentValue(R3, RSMap), 168, 176) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 176, 177), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 176, 184) #else extractMInt( getParentValue(R3, RSMap), 176, 184) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 184, 185), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 184, 192) #else extractMInt( getParentValue(R3, RSMap), 184, 192) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 192, 193), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 200) #else extractMInt( getParentValue(R3, RSMap), 192, 200) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 200, 201), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 200, 208) #else extractMInt( getParentValue(R3, RSMap), 200, 208) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 208, 209), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 208, 216) #else extractMInt( getParentValue(R3, RSMap), 208, 216) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 216, 217), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 216, 224) #else extractMInt( getParentValue(R3, RSMap), 216, 224) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 224, 225), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 224, 232) #else extractMInt( getParentValue(R3, RSMap), 224, 232) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 232, 233), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 232, 240) #else extractMInt( getParentValue(R3, RSMap), 232, 240) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 240, 241), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 240, 248) #else extractMInt( getParentValue(R3, RSMap), 240, 248) #fi), (#ifMInt eqMInt( extractMInt( getParentValue(R1, RSMap), 248, 249), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 248, 256) #else extractMInt( getParentValue(R3, RSMap), 248, 256) #fi)))))))))))))))))
)

    </regstate>
    


// vpblendvb-xmm-xmm-xmm-xmm-semantics


// shrl-r32-one

  rule <k>
    execinstr (shrl $0x1, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 0, 32))

"CF" |-> extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 32, 33)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 31, 32), mi(1, 1)) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 25, 26), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 24, 25), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 0, 32), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(mi(33, 1))), 0, 1)

"OF" |-> extractMInt( getParentValue(R2, RSMap), 32, 33)
)

    </regstate>
    


// shrl-r32-one-semantics


// sall-r32-one

  rule <k>
    execinstr (sall $0x1, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 1, 33))

"CF" |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 1, 2)

"OF" |-> (#ifMInt (eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(mi(33, 1))), 1, 2), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sall-r32-one-semantics


// btrq-r64-imm8

  rule <k>
    execinstr (btrq Imm8:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> andMInt( getParentValue(R2, RSMap), negMInt( shlMInt( mi(64, 1), uvalueMInt(mi(64, svalueMInt(andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))))))

"CF" |-> extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(mi(64, svalueMInt(andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)))))), 63, 64)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btrq-r64-imm8-semantics


// cmpw-ax-imm16

  rule <k>
    execinstr (cmpw Imm16:Imm, %ax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 11, 12), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// cmpw-ax-imm16-semantics


// rolw-r16-imm8

  rule <k>
    execinstr (rolw Imm8:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), rol( extractMInt( getParentValue(R2, RSMap), 48, 64), concatenateMInt( mi(8, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 48, 64), concatenateMInt( mi(8, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))), 15, 16), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool (eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 48, 64), concatenateMInt( mi(8, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 48, 64), concatenateMInt( mi(8, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))), 15, 16), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rolw-r16-imm8-semantics


// vcmpsd-xmm-xmm-xmm-imm8

  rule <k>
    execinstr (vcmpsd Imm8:Imm, R2:Xmm, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 192), (#ifMInt eqMInt( cmp_double_pred(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi)))
)

    </regstate>
    


// vcmpsd-xmm-xmm-xmm-imm8-semantics


// vpsrlw-ymm-ymm-imm8

  rule <k>
    execinstr (vpsrlw Imm8:Imm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(256, 0) #else concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 0, 16), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 16, 32), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 32, 48), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 64, 80), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 80, 96), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 96, 112), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 112, 128), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8))))))))))))))))))) #fi)
)

    </regstate>
    


// vpsrlw-ymm-ymm-imm8-semantics


// vpslld-xmm-xmm-imm8

  rule <k>
    execinstr (vpslld Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 31)) #then concatenateMInt( mi(128, 0), mi(128, 0)) #else concatenateMInt( mi(128, 0), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), shlMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))))))) #fi)
)

    </regstate>
    


// vpslld-xmm-xmm-imm8-semantics


// btsq-r64-imm8

  rule <k>
    execinstr (btsq Imm8:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> orMInt( getParentValue(R2, RSMap), shlMInt( mi(64, 1), uvalueMInt(mi(64, svalueMInt(andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)))))))

"CF" |-> extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(mi(64, svalueMInt(andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)))))), 63, 64)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btsq-r64-imm8-semantics


// pblendw-xmm-xmm-imm8

  rule <k>
    execinstr (pblendw Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 144) #else extractMInt( getParentValue(R2, RSMap), 128, 144) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 144, 160) #else extractMInt( getParentValue(R2, RSMap), 144, 160) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 160, 176) #else extractMInt( getParentValue(R2, RSMap), 160, 176) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 176, 192) #else extractMInt( getParentValue(R2, RSMap), 176, 192) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 192, 208) #else extractMInt( getParentValue(R2, RSMap), 192, 208) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 208, 224) #else extractMInt( getParentValue(R2, RSMap), 208, 224) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 224, 240) #else extractMInt( getParentValue(R2, RSMap), 224, 240) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 240, 256) #else extractMInt( getParentValue(R2, RSMap), 240, 256) #fi)))))))))
)

    </regstate>
    


// pblendw-xmm-xmm-imm8-semantics


// cmpss-xmm-xmm-imm8

  rule <k>
    execinstr (cmpss Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 224), (#ifMInt eqMInt( cmp_single_pred(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(32, 4294967295) #else mi(32, 0) #fi))
)

    </regstate>
    


// cmpss-xmm-xmm-imm8-semantics


// roundps-xmm-xmm-imm8

  rule <k>
    execinstr (roundps Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), concatenateMInt( cvt_single_to_int32_rm(extractMInt( getParentValue(R2, RSMap), 128, 160), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( cvt_single_to_int32_rm(extractMInt( getParentValue(R2, RSMap), 160, 192), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( cvt_single_to_int32_rm(extractMInt( getParentValue(R2, RSMap), 192, 224), handleImmediateWithSignExtend(Imm8, 8, 8)), cvt_single_to_int32_rm(extractMInt( getParentValue(R2, RSMap), 224, 256), handleImmediateWithSignExtend(Imm8, 8, 8))))))
)

    </regstate>
    


// roundps-xmm-xmm-imm8-semantics


// cmpb-al-imm8

  rule <k>
    execinstr (cmpb Imm8:Imm, %al,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// cmpb-al-imm8-semantics


// testw-r16-imm16

  rule <k>
    execinstr (testw Imm16:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 15, 16)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 14, 15)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 13, 14)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 12, 13)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 11, 12)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 10, 11)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 9, 10)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 8, 9)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// testw-r16-imm16-semantics


// sarq-r64-imm8

  rule <k>
    execinstr (sarq Imm8:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 0, 64)

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 64, 65), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 63, 64), mi(1, 1)) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 57, 58), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 56, 57), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 0, 64), mi(64, 0))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 1)) andBool false) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sarq-r64-imm8-semantics


// rclw-r16-imm8

  rule <k>
    execinstr (rclw Imm8:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), uremMInt( concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(17, 17))), 1, 17))

"CF" |-> extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), uremMInt( concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(17, 17))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(17, 17)), 9, 17), mi(8, 1)) andBool (eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), uremMInt( concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(17, 17))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), uremMInt( concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(17, 17))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(17, 17)), 9, 17), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(17, 17)), 9, 17), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(17, 17)), 9, 17), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rclw-r16-imm8-semantics



/*@
  Push R: 
  1. ValTostore = R
  2. *(RSP-8)  = ValTostore
  3. RSP = RSP - 8
*/  
// pushq-imm32

  rule <k> 
    execinstr (pushq Imm32:Imm, .Operands) =>
      storeToMemory(
          handleImmediateWithSignExtend(Imm32, 32, 64), 
          subMInt(getRegisterValue(%rsp, RSMap), mi(64, 8)), 
          64)  ~>  
      decRSPInBytes(8)
  ...</k>
  <regstate> RSMap </regstate>


// andb-al-imm8

  rule <k>
    execinstr (andb Imm8:Imm, %al,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 56), andMInt( extractMInt( getParentValue(%rax, RSMap), 56, 64), handleImmediateWithSignExtend(Imm8, 8, 8)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 56, 64), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// andb-al-imm8-semantics


// vpextrw-r32-xmm-imm8

  rule <k>
    execinstr (vpextrw Imm8:Imm, R2:Xmm, R3:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(48, 0), extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(125, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 8)), uvalueMInt(mi(128, 4))))), 112, 128))
)

    </regstate>
    


// vpextrw-r32-xmm-imm8-semantics


// shlb-r8-imm8

  rule <k>
    execinstr (shlb Imm8:Imm, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 9))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 8)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 8))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 9), mi(8, 0))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool (((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 8)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 8))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shlb-r8-imm8-semantics


// shlw-r16-imm8

  rule <k>
    execinstr (shlw Imm8:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 17))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 16)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 16))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 9, 10), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 17), mi(16, 0))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool (((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 16)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 16))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shlw-r16-imm8-semantics


// rolb-rh-imm8

  rule <k>
    execinstr (rolb Imm8:Imm, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), rol( extractMInt( getParentValue(R2, RSMap), 48, 56), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 48, 56), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), 7, 8), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool (eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 48, 56), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 48, 56), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), 7, 8), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rolb-rh-imm8-semantics


// salb-r8-imm8

  rule <k>
    execinstr (salb Imm8:Imm, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 9))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 8)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 8))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 9), mi(8, 0))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool (((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 8)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 8))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// salb-r8-imm8-semantics


// addq-r64-imm32

  rule <k>
    execinstr (addq Imm32:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65)

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// addq-r64-imm32-semantics


// vroundpd-xmm-xmm-imm8

  rule <k>
    execinstr (vroundpd Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( cvt_double_to_int64_rm(extractMInt( getParentValue(R2, RSMap), 128, 192), handleImmediateWithSignExtend(Imm8, 8, 8)), cvt_double_to_int64_rm(extractMInt( getParentValue(R2, RSMap), 192, 256), handleImmediateWithSignExtend(Imm8, 8, 8))))
)

    </regstate>
    


// vroundpd-xmm-xmm-imm8-semantics


// andl-eax-imm32

  rule <k>
    execinstr (andl Imm32:Imm, %eax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( mi(32, 0), andMInt( extractMInt( getParentValue(%rax, RSMap), 32, 64), handleImmediateWithSignExtend(Imm32, 32, 32)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 31, 32)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 30, 31)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 29, 30)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 28, 29)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 26, 27)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 25, 26)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 24, 25)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 32, 64), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(%rax, RSMap), 32, 33), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// andl-eax-imm32-semantics


// andq-r64-imm8

  rule <k>
    execinstr (andq Imm8:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> andMInt( getParentValue(R2, RSMap), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( getParentValue(R2, RSMap), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// andq-r64-imm8-semantics


// vextractf128-xmm-ymm-imm8

  rule <k>
    execinstr (vextractf128 Imm8:Imm, R2:Ymm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 256) #else extractMInt( getParentValue(R3, RSMap), 0, 128) #fi))
)

    </regstate>
    


// vextractf128-xmm-ymm-imm8-semantics


// addw-r16-imm8

  rule <k>
    execinstr (addw Imm8:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// addw-r16-imm8-semantics


// vshufpd-xmm-xmm-xmm-imm8

  rule <k>
    execinstr (vshufpd Imm8:Imm, R2:Xmm, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 192) #else extractMInt( getParentValue(R2, RSMap), 192, 256) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 128, 192) #else extractMInt( getParentValue(R3, RSMap), 192, 256) #fi)))
)

    </regstate>
    


// vshufpd-xmm-xmm-xmm-imm8-semantics


// vpsllw-ymm-ymm-imm8

  rule <k>
    execinstr (vpsllw Imm8:Imm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(256, 0) #else concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 0, 16), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 16, 32), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 32, 48), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 64, 80), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 80, 96), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 96, 112), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 112, 128), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), shlMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8))))))))))))))))))) #fi)
)

    </regstate>
    


// vpsllw-ymm-ymm-imm8-semantics


// rclb-r8-imm8

  rule <k>
    execinstr (rclb Imm8:Imm, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9))), 1, 9))

"CF" |-> extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 1)) andBool (eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rclb-r8-imm8-semantics


// adcw-r16-imm16

  rule <k>
    execinstr (adcw Imm16:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17))

"CF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 11, 12), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// adcw-r16-imm16-semantics


// pslld-xmm-imm8

  rule <k>
    execinstr (pslld Imm8:Imm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), (#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 31)) #then mi(128, 0) #else concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), shlMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8))))))) #fi))
)

    </regstate>
    


// pslld-xmm-imm8-semantics


// orq-rax-imm32

  rule <k>
    execinstr (orq Imm32:Imm, %rax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> orMInt( getParentValue(%rax, RSMap), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 31, 32)), mi(1, 1)) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 30, 31)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 29, 30)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 28, 29)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 26, 27)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 25, 26)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 24, 25)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( orMInt( getParentValue(%rax, RSMap), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> orMInt( extractMInt( getParentValue(%rax, RSMap), 0, 1), extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// orq-rax-imm32-semantics


// rcrb-r8-imm8

  rule <k>
    execinstr (rcrb Imm8:Imm, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9))), 1, 9))

"CF" |-> extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 1)) andBool (eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9))), 1, 2), mi(1, 1)) xorBool eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 56, 64)), uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9))), 2, 3), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rcrb-r8-imm8-semantics


// vpshufhw-xmm-xmm-imm8

  rule <k>
    execinstr (vpshufhw Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2)), uvalueMInt(mi(128, 4))))), 48, 64), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4)), uvalueMInt(mi(128, 4))))), 48, 64), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6)), uvalueMInt(mi(128, 4))))), 48, 64), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(128, 4))))), 48, 64), extractMInt( getParentValue(R2, RSMap), 192, 256))))))
)

    </regstate>
    


// vpshufhw-xmm-xmm-imm8-semantics


// vpsllw-xmm-xmm-imm8

  rule <k>
    execinstr (vpsllw Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then concatenateMInt( mi(128, 0), mi(128, 0)) #else concatenateMInt( mi(128, 0), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), shlMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))))))))))) #fi)
)

    </regstate>
    


// vpsllw-xmm-xmm-imm8-semantics


// orl-r32-imm8

  rule <k>
    execinstr (orl Imm8:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), orMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), mi(1, 1)) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> orMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), extractMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// orl-r32-imm8-semantics


// vcmpss-xmm-xmm-xmm-imm8

  rule <k>
    execinstr (vcmpss Imm8:Imm, R2:Xmm, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 224), (#ifMInt eqMInt( cmp_single_pred(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(32, 4294967295) #else mi(32, 0) #fi)))
)

    </regstate>
    


// vcmpss-xmm-xmm-xmm-imm8-semantics


// andb-r8-imm8

  rule <k>
    execinstr (andb Imm8:Imm, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), andMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), handleImmediateWithSignExtend(Imm8, 8, 8)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// andb-r8-imm8-semantics


// pextrq-r64-xmm-imm8

  rule <k>
    execinstr (pextrq Imm8:Imm, R2:Xmm, R3:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(127, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), uvalueMInt(mi(128, 6))))), 64, 128)
)

    </regstate>
    


// pextrq-r64-xmm-imm8-semantics


// vcmppd-xmm-xmm-xmm-imm8

  rule <k>
    execinstr (vcmppd Imm8:Imm, R2:Xmm, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( cmp_double_pred(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi), (#ifMInt eqMInt( cmp_double_pred(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi)))
)

    </regstate>
    


// vcmppd-xmm-xmm-xmm-imm8-semantics


// vpinsrd-xmm-xmm-r32-imm8

  rule <k>
    execinstr (vpinsrd Imm8:Imm, R2:R32, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), orMInt( andMInt( extractMInt( getParentValue(R3, RSMap), 128, 256), negMInt( shlMInt( mi(128, 4294967295), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(128, 5))))))), andMInt( shlMInt( concatenateMInt( mi(96, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(128, 5))))), shlMInt( mi(128, 4294967295), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(128, 5))))))))
)

    </regstate>
    


// vpinsrd-xmm-xmm-r32-imm8-semantics


// btrl-r32-imm8

  rule <k>
    execinstr (btrl Imm8:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), andMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), negMInt( shlMInt( mi(32, 1), uvalueMInt(mi(32, svalueMInt(andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))))))))

"CF" |-> extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), uvalueMInt(mi(32, svalueMInt(andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))))), 31, 32)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btrl-r32-imm8-semantics


// vpinsrw-xmm-xmm-r32-imm8

  rule <k>
    execinstr (vpinsrw Imm8:Imm, R2:R32, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), orMInt( andMInt( extractMInt( getParentValue(R3, RSMap), 128, 256), negMInt( shlMInt( mi(128, 65535), uvalueMInt(shlMInt( concatenateMInt( mi(125, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 8)), uvalueMInt(mi(128, 4))))))), andMInt( shlMInt( concatenateMInt( mi(96, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(shlMInt( concatenateMInt( mi(125, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 8)), uvalueMInt(mi(128, 4))))), shlMInt( mi(128, 65535), uvalueMInt(shlMInt( concatenateMInt( mi(125, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 8)), uvalueMInt(mi(128, 4))))))))
)

    </regstate>
    


// vpinsrw-xmm-xmm-r32-imm8-semantics


// vinsertps-xmm-xmm-xmm-imm8

  rule <k>
    execinstr (vinsertps Imm8:Imm, R2:Xmm, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 1)) #then mi(32, 0) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 160) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 1)) #then extractMInt( getParentValue(R3, RSMap), 128, 160) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 2)) #then extractMInt( getParentValue(R3, RSMap), 128, 160) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi) #fi) #fi) #fi) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 1)) #then mi(32, 0) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 0)) #then extractMInt( getParentValue(R3, RSMap), 160, 192) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 1)) #then extractMInt( getParentValue(R3, RSMap), 160, 192) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 2)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi) #else extractMInt( getParentValue(R3, RSMap), 160, 192) #fi) #fi) #fi) #fi)), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 1)) #then mi(32, 0) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 0)) #then extractMInt( getParentValue(R3, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 1)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi) #else extractMInt( getParentValue(R3, RSMap), 192, 224) #fi) #fi) #fi)), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 1)) #then mi(32, 0) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 0)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi) #else extractMInt( getParentValue(R3, RSMap), 224, 256) #fi) #fi)))
)

    </regstate>
    


// vinsertps-xmm-xmm-xmm-imm8-semantics


// vmpsadbw-xmm-xmm-xmm-imm8

  rule <k>
    execinstr (vmpsadbw Imm8:Imm, R2:Xmm, R3:Xmm, R4:Xmm,  .Operands) => 
      execinstr (vmpsadbw
        selectSliceMPSAD(getRegisterValue(R2, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), 7 , 0 ),
        selectSliceMPSAD(getRegisterValue(R2, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), 15, 8 ),
        selectSliceMPSAD(getRegisterValue(R2, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), 23, 16),
        selectSliceMPSAD(getRegisterValue(R2, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), 31, 24),

        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 7 ,  0),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 15,  8),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 23, 16),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 31, 24),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 39, 32),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 47, 40),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 55, 48),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 63, 56),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 71, 64),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 79, 72),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 87, 80),
        R3:Xmm, 
        .Operands)
  ...</k>   
    <regstate> RSMap </regstate>

  rule <k> 
    execinstr (vmpsadbw 
        SrcByte0:MInt, SrcByte1:MInt, SrcByte2:MInt, SrcByte3:MInt,
        DestByte0:MInt, DestByte1:MInt, DestByte2:MInt, DestByte3:MInt,
        DestByte4:MInt, DestByte5:MInt, DestByte6:MInt, DestByte7:MInt,
        DestByte8:MInt, DestByte9:MInt, DestByte10:MInt,
        R3:Xmm,  .Operands) =>
  setParentValue(
  concatenateMInt(mi(128, 0),
    concatenateMInt(

      concatenateMInt(    
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(DestByte7, SrcByte0),
              absoluteUnsignedDifference(DestByte8, SrcByte1)),
            addMInt(
              absoluteUnsignedDifference(DestByte9, SrcByte2),
              absoluteUnsignedDifference(DestByte10, SrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(DestByte6, SrcByte0),
              absoluteUnsignedDifference(DestByte7, SrcByte1)),
            addMInt(
              absoluteUnsignedDifference(DestByte8, SrcByte2),
              absoluteUnsignedDifference(DestByte9, SrcByte3))
          )),
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(DestByte5, SrcByte0),
              absoluteUnsignedDifference(DestByte6, SrcByte1)),
            addMInt(
              absoluteUnsignedDifference(DestByte7, SrcByte2),
              absoluteUnsignedDifference(DestByte8, SrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(DestByte4, SrcByte0),
              absoluteUnsignedDifference(DestByte5, SrcByte1)),
            addMInt(
              absoluteUnsignedDifference(DestByte6, SrcByte2),
              absoluteUnsignedDifference(DestByte7, SrcByte3))
          ))
        ),
     
      concatenateMInt(
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(DestByte3, SrcByte0),
              absoluteUnsignedDifference(DestByte4, SrcByte1)),
            addMInt(
              absoluteUnsignedDifference(DestByte5, SrcByte2),
              absoluteUnsignedDifference(DestByte6, SrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(DestByte2, SrcByte0),
              absoluteUnsignedDifference(DestByte3, SrcByte1)),
            addMInt(
              absoluteUnsignedDifference(DestByte4, SrcByte2),
              absoluteUnsignedDifference(DestByte5, SrcByte3))
          )),
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(DestByte1, SrcByte0),
              absoluteUnsignedDifference(DestByte2, SrcByte1)),
            addMInt(
              absoluteUnsignedDifference(DestByte3, SrcByte2),
              absoluteUnsignedDifference(DestByte4, SrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(DestByte0, SrcByte0),
              absoluteUnsignedDifference(DestByte1, SrcByte1)),
            addMInt(
              absoluteUnsignedDifference(DestByte2, SrcByte2),
              absoluteUnsignedDifference(DestByte3, SrcByte3))
          ))
      ))) , R3)

  ...</k>

  // Utils

  syntax MInt ::= absoluteUnsignedDifference(MInt, MInt) [function]
  rule absoluteUnsignedDifference(A:MInt, B:MInt) => subMInt(A, B)
    requires ugtMInt(A, B)

  rule absoluteUnsignedDifference(A:MInt, B:MInt) => subMInt(B, A)
    requires notBool ugtMInt(A, B)

  syntax MInt ::= selectSliceMPSAD(MInt, MInt, Int, Int) [function]
  rule selectSliceMPSAD(DEST:MInt, Offset:MInt, High:Int, Low:Int) =>
    concatenateMInt(mi(8, 0), extractMInt(DEST, (uvalueMInt(Offset) *Int 32)
          +Int High, (uvalueMInt(Offset) *Int 32) +Int Low))


// vmpsadbw-xmm-xmm-xmm-imm8-semantics


// vpermilpd-ymm-ymm-imm8

  rule <k>
    execinstr (vpermilpd Imm8:Imm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 0)) #then extractMInt( getParentValue(R2, RSMap), 64, 128) #else extractMInt( getParentValue(R2, RSMap), 0, 64) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 0)) #then extractMInt( getParentValue(R2, RSMap), 64, 128) #else extractMInt( getParentValue(R2, RSMap), 0, 64) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 0)) #then extractMInt( getParentValue(R2, RSMap), 192, 256) #else extractMInt( getParentValue(R2, RSMap), 128, 192) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 0)) #then extractMInt( getParentValue(R2, RSMap), 192, 256) #else extractMInt( getParentValue(R2, RSMap), 128, 192) #fi))))
)

    </regstate>
    


// vpermilpd-ymm-ymm-imm8-semantics


// rorw-r16-imm8

  rule <k>
    execinstr (rorw Imm8:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), ror( extractMInt( getParentValue(R2, RSMap), 48, 64), concatenateMInt( mi(8, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 48, 64), concatenateMInt( mi(8, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool (eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 48, 64), concatenateMInt( mi(8, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 48, 64), concatenateMInt( mi(8, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rorw-r16-imm8-semantics


// roundpd-xmm-xmm-imm8

  rule <k>
    execinstr (roundpd Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), concatenateMInt( cvt_double_to_int64_rm(extractMInt( getParentValue(R2, RSMap), 128, 192), handleImmediateWithSignExtend(Imm8, 8, 8)), cvt_double_to_int64_rm(extractMInt( getParentValue(R2, RSMap), 192, 256), handleImmediateWithSignExtend(Imm8, 8, 8))))
)

    </regstate>
    


// roundpd-xmm-xmm-imm8-semantics


// vpalignr-ymm-ymm-ymm-imm8

  rule <k>
    execinstr (vpalignr Imm8:Imm, R2:Ymm, R3:Ymm, R4:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), extractMInt( getParentValue(R2, RSMap), 0, 128)), uvalueMInt(shlMInt( concatenateMInt( mi(248, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), uvalueMInt(mi(256, 3))))), 128, 256), extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 256), extractMInt( getParentValue(R2, RSMap), 128, 256)), uvalueMInt(shlMInt( concatenateMInt( mi(248, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), uvalueMInt(mi(256, 3))))), 128, 256))
)

    </regstate>
    


// vpalignr-ymm-ymm-ymm-imm8-semantics


// rorq-r64-imm8

  rule <k>
    execinstr (rorq Imm8:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ror( getParentValue(R2, RSMap), concatenateMInt( mi(56, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( ror( getParentValue(R2, RSMap), concatenateMInt( mi(56, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 1)) andBool (eqMInt( extractMInt( ror( getParentValue(R2, RSMap), concatenateMInt( mi(56, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( ror( getParentValue(R2, RSMap), concatenateMInt( mi(56, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rorq-r64-imm8-semantics


// andw-r16-imm16

  rule <k>
    execinstr (andw Imm16:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), andMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), handleImmediateWithSignExtend(Imm16, 16, 16)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 15, 16)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 14, 15)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 13, 14)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 12, 13)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 11, 12)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 10, 11)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 9, 10)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 8, 9)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// andw-r16-imm16-semantics


// xorb-al-imm8

  rule <k>
    execinstr (xorb Imm8:Imm, %al,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 56), xorMInt( extractMInt( getParentValue(%rax, RSMap), 56, 64), handleImmediateWithSignExtend(Imm8, 8, 8)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 56, 64), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// xorb-al-imm8-semantics


// adcw-r16-imm8

  rule <k>
    execinstr (adcw Imm8:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17))

"CF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(17, 1)) #else concatenateMInt( mi(1, 0), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// adcw-r16-imm8-semantics


// roundsd-xmm-xmm-imm8

  rule <k>
    execinstr (roundsd Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 192), cvt_double_to_int64_rm(extractMInt( getParentValue(R2, RSMap), 192, 256), handleImmediateWithSignExtend(Imm8, 8, 8)))
)

    </regstate>
    


// roundsd-xmm-xmm-imm8-semantics


// cmppd-xmm-xmm-imm8

  rule <k>
    execinstr (cmppd Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), concatenateMInt( (#ifMInt eqMInt( cmp_double_pred(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi), (#ifMInt eqMInt( cmp_double_pred(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi)))
)

    </regstate>
    


// cmppd-xmm-xmm-imm8-semantics


// andq-r64-imm32

  rule <k>
    execinstr (andq Imm32:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> andMInt( getParentValue(R2, RSMap), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 31, 32)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 30, 31)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 29, 30)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 28, 29)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 26, 27)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 25, 26)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 24, 25)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( getParentValue(R2, RSMap), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// andq-r64-imm32-semantics


// subl-r32-imm32

  rule <k>
    execinstr (subl Imm32:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// subl-r32-imm32-semantics


// vpblendd-xmm-xmm-xmm-imm8

  rule <k>
    execinstr (vpblendd Imm8:Imm, R2:Xmm, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 160) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 192, 224) #else extractMInt( getParentValue(R2, RSMap), 192, 224) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 224, 256) #else extractMInt( getParentValue(R2, RSMap), 224, 256) #fi)))))
)

    </regstate>
    


// vpblendd-xmm-xmm-xmm-imm8-semantics


// rclq-r64-imm8

  rule <k>
    execinstr (rclq Imm8:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))), mi(65, 65))), 1, 65)

"CF" |-> extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))), mi(65, 65))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))), mi(65, 65)), 57, 65), mi(8, 1)) andBool (eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))), mi(65, 65))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))), mi(65, 65))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))), mi(65, 65)), 57, 65), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))), mi(65, 65)), 57, 65), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))), mi(65, 65)), 57, 65), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rclq-r64-imm8-semantics


// insertps-xmm-xmm-imm8

  rule <k>
    execinstr (insertps Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), concatenateMInt( concatenateMInt( concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 1)) #then mi(32, 0) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 160) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 1)) #then extractMInt( getParentValue(R3, RSMap), 128, 160) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 2)) #then extractMInt( getParentValue(R3, RSMap), 128, 160) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi) #fi) #fi) #fi) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 1)) #then mi(32, 0) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 0)) #then extractMInt( getParentValue(R3, RSMap), 160, 192) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 1)) #then extractMInt( getParentValue(R3, RSMap), 160, 192) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 2)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi) #else extractMInt( getParentValue(R3, RSMap), 160, 192) #fi) #fi) #fi) #fi)), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 1)) #then mi(32, 0) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 0)) #then extractMInt( getParentValue(R3, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 1)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi) #else extractMInt( getParentValue(R3, RSMap), 192, 224) #fi) #fi) #fi)), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 1)) #then mi(32, 0) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 0)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi) #else extractMInt( getParentValue(R3, RSMap), 224, 256) #fi) #fi)))
)

    </regstate>
    


// insertps-xmm-xmm-imm8-semantics


// shrw-r16-imm8

  rule <k>
    execinstr (shrw Imm8:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 16))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 16)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 16))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 16, 17), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 15, 16), mi(1, 1)) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 9, 10), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 8, 9), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 16), mi(16, 0))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shrw-r16-imm8-semantics


// addw-ax-imm16

  rule <k>
    execinstr (addw Imm16:Imm, %ax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 1, 17))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 11, 12), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// addw-ax-imm16-semantics


// btcq-r64-imm8

  rule <k>
    execinstr (btcq Imm8:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> xorMInt( getParentValue(R2, RSMap), shlMInt( mi(64, 1), uvalueMInt(mi(64, svalueMInt(andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)))))))

"CF" |-> extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(mi(64, svalueMInt(andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)))))), 63, 64)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btcq-r64-imm8-semantics


// cmpw-r16-imm8

  rule <k>
    execinstr (cmpw Imm8:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// cmpw-r16-imm8-semantics


// vinsertf128-ymm-ymm-xmm-imm8

  rule <k>
    execinstr (vinsertf128 Imm8:Imm, R2:Xmm, R3:Ymm, R4:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 0)) #then concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), extractMInt( getParentValue(R2, RSMap), 128, 256)) #else concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), extractMInt( getParentValue(R3, RSMap), 128, 256)) #fi)
)

    </regstate>
    


// vinsertf128-ymm-ymm-xmm-imm8-semantics


// vcmppd-ymm-ymm-ymm-imm8

  rule <k>
    execinstr (vcmppd Imm8:Imm, R2:Ymm, R3:Ymm, R4:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( (#ifMInt eqMInt( cmp_double_pred(extractMInt( getParentValue(R3, RSMap), 0, 64), extractMInt( getParentValue(R2, RSMap), 0, 64), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi), concatenateMInt( (#ifMInt eqMInt( cmp_double_pred(extractMInt( getParentValue(R3, RSMap), 64, 128), extractMInt( getParentValue(R2, RSMap), 64, 128), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi), concatenateMInt( (#ifMInt eqMInt( cmp_double_pred(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi), (#ifMInt eqMInt( cmp_double_pred(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi))))
)

    </regstate>
    


// vcmppd-ymm-ymm-ymm-imm8-semantics


// vextractps-r32-xmm-imm8

  rule <k>
    execinstr (vextractps Imm8:Imm, R2:Xmm, R3:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(32, 0), extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(128, 5))))), 96, 128))
)

    </regstate>
    


// vextractps-r32-xmm-imm8-semantics


// testq-rax-imm32

  rule <k>
    execinstr (testq Imm32:Imm, %rax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 31, 32)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 30, 31)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 29, 30)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 28, 29)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 26, 27)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 25, 26)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 24, 25)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( getParentValue(%rax, RSMap), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(%rax, RSMap), 0, 1), extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// testq-rax-imm32-semantics


// vpsrld-xmm-xmm-imm8

  rule <k>
    execinstr (vpsrld Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 31)) #then concatenateMInt( mi(128, 0), mi(128, 0)) #else concatenateMInt( mi(128, 0), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))))))) #fi)
)

    </regstate>
    


// vpsrld-xmm-xmm-imm8-semantics


// vpslld-ymm-ymm-imm8

  rule <k>
    execinstr (vpslld Imm8:Imm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 31)) #then mi(256, 0) #else concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), shlMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8))))))))))) #fi)
)

    </regstate>
    


// vpslld-ymm-ymm-imm8-semantics


// vpextrb-r64-xmm-imm8

  rule <k>
    execinstr (vpextrb Imm8:Imm, R2:Xmm, R3:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(56, 0), extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(124, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 8)), uvalueMInt(mi(128, 3))))), 120, 128))
)

    </regstate>
    


// vpextrb-r64-xmm-imm8-semantics


// subq-r64-imm32

  rule <k>
    execinstr (subq Imm32:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65)

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// subq-r64-imm32-semantics


// vpshuflw-ymm-ymm-imm8

  rule <k>
    execinstr (vpshuflw Imm8:Imm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 64), concatenateMInt( extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2)), uvalueMInt(mi(256, 4))))), 112, 128), concatenateMInt( extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4)), uvalueMInt(mi(256, 4))))), 112, 128), concatenateMInt( extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6)), uvalueMInt(mi(256, 4))))), 112, 128), concatenateMInt( extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(256, 4))))), 112, 128), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), concatenateMInt( extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2)), uvalueMInt(mi(256, 4))))), 240, 256), concatenateMInt( extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4)), uvalueMInt(mi(256, 4))))), 240, 256), concatenateMInt( extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6)), uvalueMInt(mi(256, 4))))), 240, 256), extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(256, 4))))), 240, 256))))))))))
)

    </regstate>
    


// vpshuflw-ymm-ymm-imm8-semantics


// vblendpd-xmm-xmm-xmm-imm8

  rule <k>
    execinstr (vblendpd Imm8:Imm, R2:Xmm, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 192) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 192, 256) #else extractMInt( getParentValue(R2, RSMap), 192, 256) #fi)))
)

    </regstate>
    


// vblendpd-xmm-xmm-xmm-imm8-semantics


// addl-eax-imm32

  rule <k>
    execinstr (addl Imm32:Imm, %eax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 1, 33))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 28, 29))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// addl-eax-imm32-semantics


// sarw-r16-imm8

  rule <k>
    execinstr (sarw Imm8:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 16))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 16, 17), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 15, 16), mi(1, 1)) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 9, 10), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 8, 9), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 16), mi(16, 0))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool false) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sarw-r16-imm8-semantics


// vpblendw-ymm-ymm-ymm-imm8

  rule <k>
    execinstr (vpblendw Imm8:Imm, R2:Ymm, R3:Ymm, R4:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 0, 16) #else extractMInt( getParentValue(R2, RSMap), 0, 16) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 16, 32) #else extractMInt( getParentValue(R2, RSMap), 16, 32) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 32, 48) #else extractMInt( getParentValue(R2, RSMap), 32, 48) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 48, 64) #else extractMInt( getParentValue(R2, RSMap), 48, 64) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 64, 80) #else extractMInt( getParentValue(R2, RSMap), 64, 80) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 80, 96) #else extractMInt( getParentValue(R2, RSMap), 80, 96) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 96, 112) #else extractMInt( getParentValue(R2, RSMap), 96, 112) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 112, 128) #else extractMInt( getParentValue(R2, RSMap), 112, 128) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 144) #else extractMInt( getParentValue(R2, RSMap), 128, 144) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 144, 160) #else extractMInt( getParentValue(R2, RSMap), 144, 160) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 160, 176) #else extractMInt( getParentValue(R2, RSMap), 160, 176) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 176, 192) #else extractMInt( getParentValue(R2, RSMap), 176, 192) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 192, 208) #else extractMInt( getParentValue(R2, RSMap), 192, 208) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 208, 224) #else extractMInt( getParentValue(R2, RSMap), 208, 224) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 224, 240) #else extractMInt( getParentValue(R2, RSMap), 224, 240) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 240, 256) #else extractMInt( getParentValue(R2, RSMap), 240, 256) #fi))))))))))))))))
)

    </regstate>
    


// vpblendw-ymm-ymm-ymm-imm8-semantics


// subb-r8-imm8

  rule <k>
    execinstr (subb Imm8:Imm, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// subb-r8-imm8-semantics


// psllq-xmm-imm8

  rule <k>
    execinstr (psllq Imm8:Imm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), (#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 63)) #then mi(128, 0) #else concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), uvalueMInt(concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), shlMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), uvalueMInt(concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8))))) #fi))
)

    </regstate>
    


// psllq-xmm-imm8-semantics


// mpsadbw-xmm-xmm-imm8

  rule <k>
    execinstr (mpsadbw Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) =>
      execinstr (mpsadbw
        selectSliceMPSAD(getRegisterValue(R2, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), 7 , 0 ),
        selectSliceMPSAD(getRegisterValue(R2, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), 15, 8 ),
        selectSliceMPSAD(getRegisterValue(R2, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), 23, 16),
        selectSliceMPSAD(getRegisterValue(R2, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), 31, 24),

        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 7 ,  0),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 15,  8),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 23, 16),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 31, 24),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 39, 32),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 47, 40),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 55, 48),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 63, 56),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 71, 64),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 79, 72),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 87, 80),
        R3:Xmm, 
        .Operands)
  ...</k>   
    <regstate> RSMap </regstate>

  rule <k> 
    execinstr (mpsadbw 
        SrcByte0:MInt, SrcByte1:MInt, SrcByte2:MInt, SrcByte3:MInt,
        DestByte0:MInt, DestByte1:MInt, DestByte2:MInt, DestByte3:MInt,
        DestByte4:MInt, DestByte5:MInt, DestByte6:MInt, DestByte7:MInt,
        DestByte8:MInt, DestByte9:MInt, DestByte10:MInt,
        R3:Xmm,  .Operands) =>
  setRegisterValue(
    concatenateMInt(

      concatenateMInt(    
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(DestByte7, SrcByte0),
              absoluteUnsignedDifference(DestByte8, SrcByte1)),
            addMInt(
              absoluteUnsignedDifference(DestByte9, SrcByte2),
              absoluteUnsignedDifference(DestByte10, SrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(DestByte6, SrcByte0),
              absoluteUnsignedDifference(DestByte7, SrcByte1)),
            addMInt(
              absoluteUnsignedDifference(DestByte8, SrcByte2),
              absoluteUnsignedDifference(DestByte9, SrcByte3))
          )),
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(DestByte5, SrcByte0),
              absoluteUnsignedDifference(DestByte6, SrcByte1)),
            addMInt(
              absoluteUnsignedDifference(DestByte7, SrcByte2),
              absoluteUnsignedDifference(DestByte8, SrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(DestByte4, SrcByte0),
              absoluteUnsignedDifference(DestByte5, SrcByte1)),
            addMInt(
              absoluteUnsignedDifference(DestByte6, SrcByte2),
              absoluteUnsignedDifference(DestByte7, SrcByte3))
          ))
        ),
     
      concatenateMInt(
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(DestByte3, SrcByte0),
              absoluteUnsignedDifference(DestByte4, SrcByte1)),
            addMInt(
              absoluteUnsignedDifference(DestByte5, SrcByte2),
              absoluteUnsignedDifference(DestByte6, SrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(DestByte2, SrcByte0),
              absoluteUnsignedDifference(DestByte3, SrcByte1)),
            addMInt(
              absoluteUnsignedDifference(DestByte4, SrcByte2),
              absoluteUnsignedDifference(DestByte5, SrcByte3))
          )),
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(DestByte1, SrcByte0),
              absoluteUnsignedDifference(DestByte2, SrcByte1)),
            addMInt(
              absoluteUnsignedDifference(DestByte3, SrcByte2),
              absoluteUnsignedDifference(DestByte4, SrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(DestByte0, SrcByte0),
              absoluteUnsignedDifference(DestByte1, SrcByte1)),
            addMInt(
              absoluteUnsignedDifference(DestByte2, SrcByte2),
              absoluteUnsignedDifference(DestByte3, SrcByte3))
          ))
      )) , R3)

  ...</k>

  // Utils

  syntax MInt ::= absoluteUnsignedDifference(MInt, MInt) [function]
  rule absoluteUnsignedDifference(A:MInt, B:MInt) => subMInt(A, B)
    requires ugtMInt(A, B)

  rule absoluteUnsignedDifference(A:MInt, B:MInt) => subMInt(B, A)
    requires notBool ugtMInt(A, B)

  syntax MInt ::= selectSliceMPSAD(MInt, MInt, Int, Int) [function]
  rule selectSliceMPSAD(DEST:MInt, Offset:MInt, High:Int, Low:Int) =>
    concatenateMInt(mi(8, 0), extractMInt(DEST, (uvalueMInt(Offset) *Int 32)
          +Int High, (uvalueMInt(Offset) *Int 32) +Int Low))


// mpsadbw-xmm-xmm-imm8-semantics


// pshufhw-xmm-xmm-imm8

  rule <k>
    execinstr (pshufhw Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2)), uvalueMInt(mi(128, 4))))), 48, 64), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4)), uvalueMInt(mi(128, 4))))), 48, 64), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6)), uvalueMInt(mi(128, 4))))), 48, 64), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(128, 4))))), 48, 64), extractMInt( getParentValue(R2, RSMap), 192, 256))))))
)

    </regstate>
    


// pshufhw-xmm-xmm-imm8-semantics


// andw-r16-imm8

  rule <k>
    execinstr (andw Imm8:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), andMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// andw-r16-imm8-semantics


// vpalignr-xmm-xmm-xmm-imm8

  rule <k>
    execinstr (vpalignr Imm8:Imm, R2:Xmm, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 256), extractMInt( getParentValue(R2, RSMap), 128, 256)), uvalueMInt(shlMInt( concatenateMInt( mi(248, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), uvalueMInt(mi(256, 3))))), 128, 256))
)

    </regstate>
    


// vpalignr-xmm-xmm-xmm-imm8-semantics


// vpblendd-ymm-ymm-ymm-imm8

  rule <k>
    execinstr (vpblendd Imm8:Imm, R2:Ymm, R3:Ymm, R4:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 0, 32) #else extractMInt( getParentValue(R2, RSMap), 0, 32) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 64, 96) #else extractMInt( getParentValue(R2, RSMap), 64, 96) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 96, 128) #else extractMInt( getParentValue(R2, RSMap), 96, 128) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 160) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 192, 224) #else extractMInt( getParentValue(R2, RSMap), 192, 224) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 224, 256) #else extractMInt( getParentValue(R2, RSMap), 224, 256) #fi))))))))
)

    </regstate>
    


// vpblendd-ymm-ymm-ymm-imm8-semantics


// vpermilpd-xmm-xmm-imm8

  rule <k>
    execinstr (vpermilpd Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 0)) #then extractMInt( getParentValue(R2, RSMap), 192, 256) #else extractMInt( getParentValue(R2, RSMap), 128, 192) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 0)) #then extractMInt( getParentValue(R2, RSMap), 192, 256) #else extractMInt( getParentValue(R2, RSMap), 128, 192) #fi)))
)

    </regstate>
    


// vpermilpd-xmm-xmm-imm8-semantics


// adcw-ax-imm16

  rule <k>
    execinstr (adcw Imm16:Imm, %ax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 1, 17))

"CF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 11, 12), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(17, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// adcw-ax-imm16-semantics


// subl-eax-imm32

  rule <k>
    execinstr (subl Imm32:Imm, %eax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( mi(32, 0), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 1, 33))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 28, 29))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// subl-eax-imm32-semantics


// sbbb-rh-imm8

  rule <k>
    execinstr (sbbb Imm8:Imm, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 51, 52)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sbbb-rh-imm8-semantics


/*

IF (Imm8[0] = 0 )
    THEN
        TEMP1←SRC1 [63:0];
    ELSE
        TEMP1←SRC1 [127:64];
FI
IF (Imm8[4] = 0 )
    THEN
        TEMP2←SRC2 [63:0];
    ELSE
        TEMP2←SRC2 [127:64];
FI
For i = 0 to 63 {
    TmpB [ i ]←(TEMP1[ 0 ] and TEMP2[ i ]);
    For j = 1 to i {
        TmpB [ i ]←TmpB [ i ] xor (TEMP1[ j ] and TEMP2[ i - j ])
    }
    DEST[ i ]←TmpB[ i ];
}
For i = 64 to 126 {
    TmpB [ i ]←0;
    For j = i - 63 to 63 {
        TmpB [ i ]←TmpB [ i ] xor (TEMP1[ j ] and TEMP2[ i - j ])
    }
    DEST[ i ]←TmpB[ i ];
}
DEST[127] ← 0;
DEST[MAXVL-1:128] (Unmodified)
*/

// pclmulqdq-xmm-xmm-imm8

  /*
    IF (Imm8[0] = 0 )
        THEN
            TEMP1←SRC1 [63:0];
        ELSE
            TEMP1←SRC1 [127:64];
    FI
    IF (Imm8[4] = 0 )
        THEN
            TEMP2←SRC2 [63:0];
        ELSE
            TEMP2←SRC2 [127:64];
  */   
  rule <k>
    execinstr (pclmulqdq Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => 
      execinstr(pclmulqdq 
          selectSlice(getRegisterValue(R3, RSMap), handleImmediateWithSignExtend(Imm8,
              8, 8), 7, 64, 0),
          selectSlice(getRegisterValue(R2, RSMap), handleImmediateWithSignExtend(Imm8,
              8, 8), 3, 64, 0), R3
          , .Operands)
  ...</k>
    <regstate> RSMap </regstate>

  rule <k>
    execinstr (pclmulqdq TEMP1:MInt, TEMP2:MInt, R3:Xmm,   .Operands) => 
      setRegisterValue(
          orMInt(
            computePCLMULQDQ1(TEMP1, TEMP2, mi(128, 0), 0, 63), 
            computePCLMULQDQ2(TEMP1, TEMP2, mi(128, 0), 64, 126) 
            ), R3)
  ...</k>
  
  /*
    For i = 0 to 63 {
        TmpB [ i ]←(TEMP1[ 0 ] and TEMP2[ i ]);
        For j = 1 to i {
            TmpB [ i ]←TmpB [ i ] xor (TEMP1[ j ] and TEMP2[ i - j ])
        }
        DEST[ i ]←TmpB[ i ];
    }
  */   
  syntax MInt ::= computePCLMULQDQ1(MInt, MInt, MInt, Int, Int) [function]
  syntax MInt ::= computePCLMULQDQ1Refine(MInt, MInt, Int) [function]

  rule computePCLMULQDQ1(TEMP1:MInt, TEMP2:MInt, DEST:MInt, N:Int, N:Int) => DEST

  rule computePCLMULQDQ1(TEMP1:MInt, TEMP2:MInt, DEST:MInt, M:Int, N:Int) =>
    computePCLMULQDQ1( 
        TEMP1, TEMP2, plugInMask(DEST, computePCLMULQDQ1Refine(TEMP1, TEMP2, M), M), M +Int 1, N)

  rule computePCLMULQDQ1Refine(TEMP1:MInt, TEMP2:MInt, M:Int) =>
  refineHelper(TEMP1, TEMP2, 1, M, 
        andMInt( 
          extractMInt(TEMP1, 63, 64), extractMInt(TEMP2, 63 -Int M, 64 -Int M) 
          )
      )

  /*
     For i = 64 to 126 {
    TmpB [ i ]←0;
    For j = i - 63 to 63 {
        TmpB [ i ]←TmpB [ i ] xor (TEMP1[ j ] and TEMP2[ i - j ])
    }
    DEST[ i ]←TmpB[ i ];
  }
  */

  syntax MInt ::= computePCLMULQDQ2(MInt, MInt, MInt, Int, Int) [function]
  syntax MInt ::= computePCLMULQDQ2Refine(MInt, MInt, Int) [function]

  rule computePCLMULQDQ2(TEMP1:MInt, TEMP2:MInt, DEST:MInt, N:Int, N:Int) => DEST

  rule computePCLMULQDQ2(TEMP1:MInt, TEMP2:MInt, DEST:MInt, M:Int, N:Int) =>
    computePCLMULQDQ2( 
        TEMP1, TEMP2, plugInMask(DEST, computePCLMULQDQ2Refine(TEMP1, TEMP2, M), M), M +Int 1, N)

  rule computePCLMULQDQ2Refine(TEMP1:MInt, TEMP2:MInt, M:Int) =>
  refineHelper(TEMP1, TEMP2, M -Int 63, 63,  mi(1, 0))


  // Utils
  syntax MInt ::= refineHelper(MInt, MInt, Int, Int, MInt) [function]
  rule refineHelper(TEMP1:MInt, TEMP2:MInt, Q:Int, Q:Int,
      RES:MInt) => RES

  rule refineHelper(TEMP1:MInt, TEMP2:MInt, P:Int, Q:Int,
      RES:MInt) => 
    refineHelper(TEMP1, TEMP2, P +Int 1, Q, 
        xorMInt(RES, 
          andMInt(
            extractMInt(TEMP1, 63 -Int P,         64 -Int P),
            extractMInt(TEMP2, 63 -Int (P -Int Q), 64 -Int (P -Int Q))
            )))

  syntax MInt ::= selectSlice(MInt, MInt, Int, Int, Int) [function]

  rule selectSlice(SRC1:MInt, Imm8:MInt, CheckBit:Int, Start1:Int, Start2:Int)
  => extractMInt(SRC1, Start1, Start1 +Int 64)
    requires  eqMInt(mi(1, 0), extractMInt(Imm8, CheckBit, CheckBit +Int 1))
    
  rule selectSlice(SRC1:MInt, Imm8:MInt, CheckBit:Int, Start1:Int, Start2:Int)
  => extractMInt(SRC1, Start2, Start2 +Int 64)
    requires  eqMInt(mi(1, 1), extractMInt(Imm8, CheckBit, CheckBit +Int 1))


// pclmulqdq-xmm-xmm-imm8-semantics


// sbbl-r32-imm32

  rule <k>
    execinstr (sbbl Imm32:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sbbl-r32-imm32-semantics


// cmpq-r64-imm32

  rule <k>
    execinstr (cmpq Imm32:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// cmpq-r64-imm32-semantics


// vpermilps-xmm-xmm-imm8

  rule <k>
    execinstr (vpermilps Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi)))))
)

    </regstate>
    


// vpermilps-xmm-xmm-imm8-semantics


// cmpq-rax-imm32

  rule <k>
    execinstr (cmpq Imm32:Imm, %rax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 60, 61))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// cmpq-rax-imm32-semantics


// vroundsd-xmm-xmm-xmm-imm8

  rule <k>
    execinstr (vroundsd Imm8:Imm, R2:Xmm, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 192), cvt_double_to_int64_rm(extractMInt( getParentValue(R2, RSMap), 192, 256), handleImmediateWithSignExtend(Imm8, 8, 8))))
)

    </regstate>
    


// vroundsd-xmm-xmm-xmm-imm8-semantics


// roll-r32-imm8

  rule <k>
    execinstr (roll Imm8:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), rol( extractMInt( getParentValue(R2, RSMap), 32, 64), concatenateMInt( mi(24, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 32, 64), concatenateMInt( mi(24, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))), 31, 32), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool (eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 32, 64), concatenateMInt( mi(24, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 32, 64), concatenateMInt( mi(24, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))), 31, 32), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// roll-r32-imm8-semantics


// subb-al-imm8

  rule <k>
    execinstr (subb Imm8:Imm, %al,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 56), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 9))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// subb-al-imm8-semantics


// andw-ax-imm16

  rule <k>
    execinstr (andw Imm16:Imm, %ax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), andMInt( extractMInt( getParentValue(%rax, RSMap), 48, 64), handleImmediateWithSignExtend(Imm16, 16, 16)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 15, 16)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 14, 15)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 13, 14)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 12, 13)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 11, 12)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 10, 11)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 9, 10)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 8, 9)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 48, 64), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(%rax, RSMap), 48, 49), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// andw-ax-imm16-semantics


// xorb-r8-imm8

  rule <k>
    execinstr (xorb Imm8:Imm, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), handleImmediateWithSignExtend(Imm8, 8, 8)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// xorb-r8-imm8-semantics


// vpsrldq-ymm-ymm-imm8

  rule <k>
    execinstr (vpsrldq Imm8:Imm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), uvalueMInt(shlMInt( (#ifMInt ugtMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 15)) #then concatenateMInt( mi(120, 0), mi(8, 16)) #else concatenateMInt( mi(120, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), uvalueMInt(mi(128, 3))))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( (#ifMInt ugtMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 15)) #then concatenateMInt( mi(120, 0), mi(8, 16)) #else concatenateMInt( mi(120, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), uvalueMInt(mi(128, 3))))))
)

    </regstate>
    


// vpsrldq-ymm-ymm-imm8-semantics


// movq-r64-imm32

  rule <k>
    execinstr (movq Imm32:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))
)

    </regstate>
    


// movq-r64-imm32-semantics


// xorw-r16-imm8

  rule <k>
    execinstr (xorw Imm8:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// xorw-r16-imm8-semantics


// palignr-xmm-xmm-imm8

  rule <k>
    execinstr (palignr Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 256), extractMInt( getParentValue(R2, RSMap), 128, 256)), uvalueMInt(shlMInt( concatenateMInt( mi(248, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), uvalueMInt(mi(256, 3))))), 128, 256))
)

    </regstate>
    


// palignr-xmm-xmm-imm8-semantics


// cmpl-r32-imm8

  rule <k>
    execinstr (cmpl Imm8:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// cmpl-r32-imm8-semantics


// vpslldq-xmm-xmm-imm8

  rule <k>
    execinstr (vpslldq Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( (#ifMInt ugtMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 15)) #then concatenateMInt( mi(120, 0), mi(8, 16)) #else concatenateMInt( mi(120, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), uvalueMInt(mi(128, 3))))))
)

    </regstate>
    


// vpslldq-xmm-xmm-imm8-semantics


// xorl-r32-imm8

  rule <k>
    execinstr (xorl Imm8:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), xorMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), extractMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// xorl-r32-imm8-semantics


// sarb-r8-imm8

  rule <k>
    execinstr (sarb Imm8:Imm, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 8))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 8, 9), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 8), mi(8, 0))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool false) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sarb-r8-imm8-semantics


// orl-r32-imm32

  rule <k>
    execinstr (orl Imm32:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), orMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), handleImmediateWithSignExtend(Imm32, 32, 32)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 31, 32)), mi(1, 1)) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 30, 31)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 29, 30)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 28, 29)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 26, 27)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 25, 26)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 24, 25)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> orMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// orl-r32-imm32-semantics


// sbbb-al-imm8

  rule <k>
    execinstr (sbbb Imm8:Imm, %al,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 56), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 9))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sbbb-al-imm8-semantics


// orw-ax-imm16

  rule <k>
    execinstr (orw Imm16:Imm, %ax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), orMInt( extractMInt( getParentValue(%rax, RSMap), 48, 64), handleImmediateWithSignExtend(Imm16, 16, 16)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 15, 16)), mi(1, 1)) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 14, 15)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 13, 14)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 12, 13)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 11, 12)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 10, 11)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 9, 10)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 8, 9)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 48, 64), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> orMInt( extractMInt( getParentValue(%rax, RSMap), 48, 49), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// orw-ax-imm16-semantics


// sall-r32-imm8

  rule <k>
    execinstr (sall Imm8:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 33))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 32)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 32))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 25, 26), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 33), mi(32, 0))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool (((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 32)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 32))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sall-r32-imm8-semantics


// rclb-rh-imm8

  rule <k>
    execinstr (rclb Imm8:Imm, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 1)) andBool (eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rclb-rh-imm8-semantics


// sarb-rh-imm8

  rule <k>
    execinstr (sarb Imm8:Imm, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 8)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 8, 9), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 8), mi(8, 0))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool false) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sarb-rh-imm8-semantics


// testb-rh-imm8

  rule <k>
    execinstr (testb Imm8:Imm, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 55, 56), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 54, 55), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 53, 54), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 52, 53), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 51, 52), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 50, 51), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 49, 50), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// testb-rh-imm8-semantics


// vpsrlq-xmm-xmm-imm8

  rule <k>
    execinstr (vpsrlq Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 63)) #then concatenateMInt( mi(128, 0), mi(128, 0)) #else concatenateMInt( mi(128, 0), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), uvalueMInt(concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), uvalueMInt(concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))))) #fi)
)

    </regstate>
    


// vpsrlq-xmm-xmm-imm8-semantics


// movb-r8-imm8

  rule <k>
    execinstr (movb Imm8:Imm, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), handleImmediateWithSignExtend(Imm8, 8, 8))
)

    </regstate>
    


// movb-r8-imm8-semantics


// movl-r32-imm32

  rule <k>
    execinstr (movl Imm32:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), handleImmediateWithSignExtend(Imm32, 32, 32))
)

    </regstate>
    


// movl-r32-imm32-semantics


// vpsrlw-xmm-xmm-imm8

  rule <k>
    execinstr (vpsrlw Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then concatenateMInt( mi(128, 0), mi(128, 0)) #else concatenateMInt( mi(128, 0), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))))))))))) #fi)
)

    </regstate>
    


// vpsrlw-xmm-xmm-imm8-semantics


// adcl-r32-imm32

  rule <k>
    execinstr (adcl Imm32:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33))

"CF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// adcl-r32-imm32-semantics


// vpslldq-ymm-ymm-imm8

  rule <k>
    execinstr (vpslldq Imm8:Imm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), uvalueMInt(shlMInt( (#ifMInt ugtMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 15)) #then concatenateMInt( mi(120, 0), mi(8, 16)) #else concatenateMInt( mi(120, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), uvalueMInt(mi(128, 3))))), shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( (#ifMInt ugtMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 15)) #then concatenateMInt( mi(120, 0), mi(8, 16)) #else concatenateMInt( mi(120, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), uvalueMInt(mi(128, 3))))))
)

    </regstate>
    


// vpslldq-ymm-ymm-imm8-semantics


// adcl-r32-imm8

  rule <k>
    execinstr (adcl Imm8:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(33, 1)) #else concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33))

"CF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(33, 1)) #else concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(33, 1)) #else concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(33, 1)) #else concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(33, 1)) #else concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(33, 1)) #else concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(33, 1)) #else concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(33, 1)) #else concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(33, 1)) #else concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(33, 1)) #else concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(33, 1)) #else concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(33, 1)) #else concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(33, 1)) #else concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(33, 1)) #else concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// adcl-r32-imm8-semantics


// btq-r64-imm8

  rule <k>
    execinstr (btq Imm8:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(mi(64, svalueMInt(andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)))))), 63, 64)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btq-r64-imm8-semantics


// xorw-ax-imm16

  rule <k>
    execinstr (xorw Imm16:Imm, %ax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), xorMInt( extractMInt( getParentValue(%rax, RSMap), 48, 64), handleImmediateWithSignExtend(Imm16, 16, 16)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 15, 16)), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 14, 15)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 13, 14)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 12, 13)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 11, 12)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 10, 11)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 9, 10)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 8, 9)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 48, 64), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( getParentValue(%rax, RSMap), 48, 49), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// xorw-ax-imm16-semantics


// shll-r32-imm8

  rule <k>
    execinstr (shll Imm8:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 33))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 32)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 32))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 25, 26), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 33), mi(32, 0))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool (((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 32)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 32))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shll-r32-imm8-semantics


// addq-r64-imm8

  rule <k>
    execinstr (addq Imm8:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65)

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// addq-r64-imm8-semantics


// rcll-r32-imm8

  rule <k>
    execinstr (rcll Imm8:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), uremMInt( concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(33, 33))), 1, 33))

"CF" |-> extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), uremMInt( concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(33, 33))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(33, 33)), 25, 33), mi(8, 1)) andBool (eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), uremMInt( concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(33, 33))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), uremMInt( concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(33, 33))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(33, 33)), 25, 33), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(33, 33)), 25, 33), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(33, 33)), 25, 33), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rcll-r32-imm8-semantics


// rolq-r64-imm8

  rule <k>
    execinstr (rolq Imm8:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> rol( getParentValue(R2, RSMap), concatenateMInt( mi(56, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( rol( getParentValue(R2, RSMap), concatenateMInt( mi(56, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)))), 63, 64), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 1)) andBool (eqMInt( extractMInt( rol( getParentValue(R2, RSMap), concatenateMInt( mi(56, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( getParentValue(R2, RSMap), concatenateMInt( mi(56, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)))), 63, 64), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rolq-r64-imm8-semantics


// salb-rh-imm8

  rule <k>
    execinstr (salb Imm8:Imm, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 8)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 8))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 9), mi(8, 0))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool (((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 8)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 8))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// salb-rh-imm8-semantics


// adcq-r64-imm32

  rule <k>
    execinstr (adcq Imm32:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65)

"CF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// adcq-r64-imm32-semantics


// vpermq-ymm-ymm-imm8

  rule <k>
    execinstr (vpermq Imm8:Imm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2)), uvalueMInt(mi(256, 6))))), 192, 256), concatenateMInt( extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4)), uvalueMInt(mi(256, 6))))), 192, 256), concatenateMInt( extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6)), uvalueMInt(mi(256, 6))))), 192, 256), extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(256, 6))))), 192, 256))))
)

    </regstate>
    


// vpermq-ymm-ymm-imm8-semantics


// cmpps-xmm-xmm-imm8

  rule <k>
    execinstr (cmpps Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), concatenateMInt( (#ifMInt eqMInt( cmp_single_pred(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt eqMInt( cmp_single_pred(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt eqMInt( cmp_single_pred(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(32, 4294967295) #else mi(32, 0) #fi), (#ifMInt eqMInt( cmp_single_pred(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(32, 4294967295) #else mi(32, 0) #fi)))))
)

    </regstate>
    


// cmpps-xmm-xmm-imm8-semantics


// vinserti128-ymm-ymm-xmm-imm8

  rule <k>
    execinstr (vinserti128 Imm8:Imm, R2:Xmm, R3:Ymm, R4:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 0)) #then concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), extractMInt( getParentValue(R2, RSMap), 128, 256)) #else concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), extractMInt( getParentValue(R3, RSMap), 128, 256)) #fi)
)

    </regstate>
    


// vinserti128-ymm-ymm-xmm-imm8-semantics


// rorb-r8-imm8

  rule <k>
    execinstr (rorb Imm8:Imm, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), ror( extractMInt( getParentValue(R2, RSMap), 56, 64), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 56, 64), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool (eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 56, 64), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 56, 64), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rorb-r8-imm8-semantics


// vcvtps2ph-xmm-xmm-imm8

  rule <k>
    execinstr (vcvtps2ph Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(192, 0), concatenateMInt( cvt_single_to_fp16_rm(extractMInt( getParentValue(R2, RSMap), 128, 160), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( cvt_single_to_fp16_rm(extractMInt( getParentValue(R2, RSMap), 160, 192), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( cvt_single_to_fp16_rm(extractMInt( getParentValue(R2, RSMap), 192, 224), handleImmediateWithSignExtend(Imm8, 8, 8)), cvt_single_to_fp16_rm(extractMInt( getParentValue(R2, RSMap), 224, 256), handleImmediateWithSignExtend(Imm8, 8, 8))))))
)

    </regstate>
    


// vcvtps2ph-xmm-xmm-imm8-semantics


// testb-al-imm8

  rule <k>
    execinstr (testb Imm8:Imm, %al,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 56, 64), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// testb-al-imm8-semantics


// sbbq-r64-imm32

  rule <k>
    execinstr (sbbq Imm32:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65)

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sbbq-r64-imm32-semantics


// rorxq-r64-r64-imm8

  rule <k>
    execinstr (rorxq Imm8:Imm, R2:R64, R3:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> orMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(andMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 63)))), shlMInt( getParentValue(R2, RSMap), uvalueMInt(subMInt( mi(64, 64), andMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 63))))))
)

    </regstate>
    


// rorxq-r64-r64-imm8-semantics


// rorb-rh-imm8

  rule <k>
    execinstr (rorb Imm8:Imm, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), ror( extractMInt( getParentValue(R2, RSMap), 48, 56), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 48, 56), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool (eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 48, 56), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 48, 56), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rorb-rh-imm8-semantics


// vpinsrb-xmm-xmm-r32-imm8

  rule <k>
    execinstr (vpinsrb Imm8:Imm, R2:R32, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), orMInt( andMInt( extractMInt( getParentValue(R3, RSMap), 128, 256), negMInt( shlMInt( mi(128, 255), uvalueMInt(shlMInt( concatenateMInt( mi(124, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 8)), uvalueMInt(mi(128, 3))))))), andMInt( shlMInt( concatenateMInt( mi(96, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(shlMInt( concatenateMInt( mi(124, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 8)), uvalueMInt(mi(128, 3))))), shlMInt( mi(128, 255), uvalueMInt(shlMInt( concatenateMInt( mi(124, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 8)), uvalueMInt(mi(128, 3))))))))
)

    </regstate>
    


// vpinsrb-xmm-xmm-r32-imm8-semantics


// addw-r16-imm16

  rule <k>
    execinstr (addw Imm16:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 11, 12), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm16, 16, 16)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// addw-r16-imm16-semantics


// vpextrb-r32-xmm-imm8

  rule <k>
    execinstr (vpextrb Imm8:Imm, R2:Xmm, R3:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(56, 0), extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(124, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 8)), uvalueMInt(mi(128, 3))))), 120, 128))
)

    </regstate>
    


// vpextrb-r32-xmm-imm8-semantics


// btcl-r32-imm8

  rule <k>
    execinstr (btcl Imm8:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), xorMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), shlMInt( mi(32, 1), uvalueMInt(mi(32, svalueMInt(andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))))))

"CF" |-> extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), uvalueMInt(mi(32, svalueMInt(andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))))), 31, 32)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btcl-r32-imm8-semantics


// psrlw-xmm-imm8

  rule <k>
    execinstr (psrlw Imm8:Imm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), (#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(128, 0) #else concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8))))))))))) #fi))
)

    </regstate>
    


// psrlw-xmm-imm8-semantics


// orw-r16-imm8

  rule <k>
    execinstr (orw Imm8:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), orMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), mi(1, 1)) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> orMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// orw-r16-imm8-semantics


// imulq-r64-r64-imm8

  rule <k>
    execinstr (imulq Imm8:Imm, R2:R64, R3:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> extractMInt( mulMInt( mi(128, svalueMInt(getParentValue(R2, RSMap))), mi(128, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), 64, 128)

"CF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(128, svalueMInt(getParentValue(R2, RSMap))), mi(128, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(128, svalueMInt(extractMInt( mulMInt( mi(128, svalueMInt(getParentValue(R2, RSMap))), mi(128, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), 64, 128))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(128, svalueMInt(getParentValue(R2, RSMap))), mi(128, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(128, svalueMInt(extractMInt( mulMInt( mi(128, svalueMInt(getParentValue(R2, RSMap))), mi(128, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), 64, 128))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// imulq-r64-r64-imm8-semantics


// subq-rax-imm32

  rule <k>
    execinstr (subq Imm32:Imm, %rax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 1, 65)

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 60, 61))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// subq-rax-imm32-semantics


// cmpw-r16-imm16

  rule <k>
    execinstr (cmpw Imm16:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 11, 12), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// cmpw-r16-imm16-semantics


// rorl-r32-imm8

  rule <k>
    execinstr (rorl Imm8:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), ror( extractMInt( getParentValue(R2, RSMap), 32, 64), concatenateMInt( mi(24, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 32, 64), concatenateMInt( mi(24, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool (eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 32, 64), concatenateMInt( mi(24, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( ror( extractMInt( getParentValue(R2, RSMap), 32, 64), concatenateMInt( mi(24, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rorl-r32-imm8-semantics


// btcw-r16-imm8

  rule <k>
    execinstr (btcw Imm8:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), shlMInt( mi(16, 1), uvalueMInt(mi(16, svalueMInt(andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 15))))))))

"CF" |-> extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), uvalueMInt(mi(16, svalueMInt(andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 15)))))), 15, 16)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btcw-r16-imm8-semantics


// andb-rh-imm8

  rule <k>
    execinstr (andb Imm8:Imm, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), andMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), handleImmediateWithSignExtend(Imm8, 8, 8))), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 55, 56), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 54, 55), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 53, 54), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 52, 53), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 51, 52), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 50, 51), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 49, 50), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// andb-rh-imm8-semantics


// vpextrw-r64-xmm-imm8

  rule <k>
    execinstr (vpextrw Imm8:Imm, R2:Xmm, R3:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(48, 0), extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(125, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 8)), uvalueMInt(mi(128, 4))))), 112, 128))
)

    </regstate>
    


// vpextrw-r64-xmm-imm8-semantics


// psraw-xmm-imm8

  rule <k>
    execinstr (psraw Imm8:Imm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), ashrMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi)))))))))))
)

    </regstate>
    


// psraw-xmm-imm8-semantics


// vpsraw-xmm-xmm-imm8

  rule <k>
    execinstr (vpsraw Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), ashrMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi)))))))))))
)

    </regstate>
    


// vpsraw-xmm-xmm-imm8-semantics


// blendps-xmm-xmm-imm8

  rule <k>
    execinstr (blendps Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 160) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 192, 224) #else extractMInt( getParentValue(R2, RSMap), 192, 224) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 224, 256) #else extractMInt( getParentValue(R2, RSMap), 224, 256) #fi)))))
)

    </regstate>
    


// blendps-xmm-xmm-imm8-semantics


// pshufd-xmm-xmm-imm8

  rule <k>
    execinstr (pshufd Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2)), uvalueMInt(mi(128, 5))))), 96, 128), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4)), uvalueMInt(mi(128, 5))))), 96, 128), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6)), uvalueMInt(mi(128, 5))))), 96, 128), extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(128, 5))))), 96, 128)))))
)

    </regstate>
    


// pshufd-xmm-xmm-imm8-semantics


// dpps-xmm-xmm-imm8

  rule <k>
    execinstr (dpps Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), concatenateMInt( concatenateMInt( concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi)), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi)), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi)))
)

    </regstate>
    


// dpps-xmm-xmm-imm8-semantics


// shrq-r64-imm8

  rule <k>
    execinstr (shrq Imm8:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 0, 64)

"CF" |-> (#ifMInt ((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 64)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 64))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 64, 65), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 63, 64), mi(1, 1)) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 57, 58), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 56, 57), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 0, 64), mi(64, 0))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( getParentValue(R2, RSMap), mi(1, 0)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 1)) andBool eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shrq-r64-imm8-semantics


// rolb-r8-imm8

  rule <k>
    execinstr (rolb Imm8:Imm, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), rol( extractMInt( getParentValue(R2, RSMap), 56, 64), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 56, 64), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), 7, 8), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool (eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 56, 64), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), 0, 1), mi(1, 1)) xorBool eqMInt( extractMInt( rol( extractMInt( getParentValue(R2, RSMap), 56, 64), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), 7, 8), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rolb-r8-imm8-semantics


// vblendps-ymm-ymm-ymm-imm8

  rule <k>
    execinstr (vblendps Imm8:Imm, R2:Ymm, R3:Ymm, R4:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 0, 32) #else extractMInt( getParentValue(R2, RSMap), 0, 32) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 32, 64) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 64, 96) #else extractMInt( getParentValue(R2, RSMap), 64, 96) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 96, 128) #else extractMInt( getParentValue(R2, RSMap), 96, 128) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 160) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 192, 224) #else extractMInt( getParentValue(R2, RSMap), 192, 224) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 224, 256) #else extractMInt( getParentValue(R2, RSMap), 224, 256) #fi))))))))
)

    </regstate>
    


// vblendps-ymm-ymm-ymm-imm8-semantics


// orb-rh-imm8

  rule <k>
    execinstr (orb Imm8:Imm, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), orMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), handleImmediateWithSignExtend(Imm8, 8, 8))), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 55, 56), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), mi(1, 1)) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 54, 55), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 53, 54), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 52, 53), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 51, 52), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 50, 51), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 49, 50), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> orMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// orb-rh-imm8-semantics


// vpinsrq-xmm-xmm-r64-imm8

  rule <k>
    execinstr (vpinsrq Imm8:Imm, R2:R64, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), orMInt( andMInt( extractMInt( getParentValue(R3, RSMap), 128, 256), negMInt( shlMInt( mi(128, 18446744073709551615), uvalueMInt(shlMInt( concatenateMInt( mi(127, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), uvalueMInt(mi(128, 6))))))), andMInt( shlMInt( concatenateMInt( mi(64, 0), getParentValue(R2, RSMap)), uvalueMInt(shlMInt( concatenateMInt( mi(127, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), uvalueMInt(mi(128, 6))))), shlMInt( mi(128, 18446744073709551615), uvalueMInt(shlMInt( concatenateMInt( mi(127, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), uvalueMInt(mi(128, 6))))))))
)

    </regstate>
    


// vpinsrq-xmm-xmm-r64-imm8-semantics


// vperm2f128-ymm-ymm-ymm-imm8

  rule <k>
    execinstr (vperm2f128 Imm8:Imm, R2:Ymm, R3:Ymm, R4:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 1)) #then concatenateMInt( mi(128, 0), mi(128, 0)) #else concatenateMInt( mi(128, 0), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), mi(2, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), mi(2, 1)) #then extractMInt( getParentValue(R3, RSMap), 0, 128) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 128, 256) #else extractMInt( getParentValue(R2, RSMap), 0, 128) #fi) #fi) #fi)) #fi) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 1)) #then concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 1)) #then extractMInt( getParentValue(R3, RSMap), 0, 128) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 128, 256) #else extractMInt( getParentValue(R2, RSMap), 0, 128) #fi) #fi) #fi), mi(128, 0)) #else concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 1)) #then extractMInt( getParentValue(R3, RSMap), 0, 128) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 128, 256) #else extractMInt( getParentValue(R2, RSMap), 0, 128) #fi) #fi) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), mi(2, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), mi(2, 1)) #then extractMInt( getParentValue(R3, RSMap), 0, 128) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 128, 256) #else extractMInt( getParentValue(R2, RSMap), 0, 128) #fi) #fi) #fi)) #fi) #fi)
)

    </regstate>
    


// vperm2f128-ymm-ymm-ymm-imm8-semantics


// andl-r32-imm8

  rule <k>
    execinstr (andl Imm8:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), andMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), extractMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// andl-r32-imm8-semantics


// testw-ax-imm16

  rule <k>
    execinstr (testw Imm16:Imm, %ax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 15, 16)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 14, 15)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 13, 14)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 12, 13)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 11, 12)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 10, 11)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 9, 10)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 8, 9)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 48, 64), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(%rax, RSMap), 48, 49), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// testw-ax-imm16-semantics


// orb-al-imm8

  rule <k>
    execinstr (orb Imm8:Imm, %al,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 56), orMInt( extractMInt( getParentValue(%rax, RSMap), 56, 64), handleImmediateWithSignExtend(Imm8, 8, 8)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), mi(1, 1)) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 56, 64), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> orMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// orb-al-imm8-semantics


// xorq-r64-imm32

  rule <k>
    execinstr (xorq Imm32:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> xorMInt( getParentValue(R2, RSMap), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 31, 32)), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 30, 31)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 29, 30)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 28, 29)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 26, 27)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 25, 26)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 24, 25)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( xorMInt( getParentValue(R2, RSMap), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// xorq-r64-imm32-semantics


// sbbw-r16-imm8

  rule <k>
    execinstr (sbbw Imm8:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sbbw-r16-imm8-semantics


// btsw-r16-imm8

  rule <k>
    execinstr (btsw Imm8:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), orMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), shlMInt( mi(16, 1), uvalueMInt(mi(16, svalueMInt(andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 15))))))))

"CF" |-> extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), uvalueMInt(mi(16, svalueMInt(andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 15)))))), 15, 16)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btsw-r16-imm8-semantics


// imull-r32-r32-imm32

  rule <k>
    execinstr (imull Imm32:Imm, R2:R32, R3:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(32, 0), extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), 32, 64))

"CF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(64, svalueMInt(extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), 32, 64))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(64, svalueMInt(extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), 32, 64))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// imull-r32-r32-imm32-semantics


// xorq-r64-imm8

  rule <k>
    execinstr (xorq Imm8:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> xorMInt( getParentValue(R2, RSMap), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( xorMInt( getParentValue(R2, RSMap), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// xorq-r64-imm8-semantics


// pextrb-r64-xmm-imm8

  rule <k>
    execinstr (pextrb Imm8:Imm, R2:Xmm, R3:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(56, 0), extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(124, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 8)), uvalueMInt(mi(128, 3))))), 120, 128))
)

    </regstate>
    


// pextrb-r64-xmm-imm8-semantics


// vmpsadbw-ymm-ymm-ymm-imm8

  rule <k>
    execinstr (vmpsadbw Imm8:Imm, R2:Ymm, R3:Ymm, R4:Ymm,  .Operands) => 
      execinstr (vmpsadbw
        //Low slices  
        selectSliceMPSAD(getRegisterValue(R2, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), 7 , 0 ),
        selectSliceMPSAD(getRegisterValue(R2, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), 15, 8 ),
        selectSliceMPSAD(getRegisterValue(R2, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), 23, 16),
        selectSliceMPSAD(getRegisterValue(R2, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), 31, 24),

        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 7 ,  0),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 15,  8),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 23, 16),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 31, 24),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 39, 32),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 47, 40),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 55, 48),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 63, 56),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 71, 64),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 79, 72),
        selectSliceMPSAD(getRegisterValue(R3, RSMap),
          extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), 87, 80),

        //High slices  
        selectSliceMPSAD( getRegisterValue(R2, RSMap), 
            extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 3, 5), 7 +Int
            128, 0 +Int 128),
        selectSliceMPSAD( getRegisterValue(R2, RSMap), 
            extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 3, 5), 15+Int
            128, 8 +Int 128),
        selectSliceMPSAD( getRegisterValue(R2, RSMap), 
            extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 3, 5), 23+Int
            128, 16+Int 128),
        selectSliceMPSAD( getRegisterValue(R2, RSMap), 
            extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 3, 5), 31+Int
            128, 24+Int 128),

        selectSliceMPSAD(getRegisterValue(R3, RSMap), 
            extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), 7
            +Int 128,  0 +Int 128),
        selectSliceMPSAD(getRegisterValue(R3, RSMap), 
            extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), 15
            +Int 128,  8 +Int 128),
        selectSliceMPSAD(getRegisterValue(R3, RSMap), 
            extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), 23
            +Int 128, 16 +Int 128),
        selectSliceMPSAD(getRegisterValue(R3, RSMap), 
            extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), 31
            +Int 128, 24 +Int 128),
        selectSliceMPSAD(getRegisterValue(R3, RSMap), 
            extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), 39
            +Int 128, 32 +Int 128),
        selectSliceMPSAD(getRegisterValue(R3, RSMap), 
            extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), 47
            +Int 128, 40 +Int 128),
        selectSliceMPSAD(getRegisterValue(R3, RSMap), 
            extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), 55
            +Int 128, 48 +Int 128),
        selectSliceMPSAD(getRegisterValue(R3, RSMap), 
            extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), 63
            +Int 128, 56 +Int 128),
        selectSliceMPSAD(getRegisterValue(R3, RSMap), 
            extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), 71
            +Int 128, 64 +Int 128),
        selectSliceMPSAD(getRegisterValue(R3, RSMap), 
            extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), 79
            +Int 128, 72 +Int 128),
        selectSliceMPSAD(getRegisterValue(R3, RSMap), 
            extractMInt(handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), 87
            +Int 128, 80 +Int 128),

        R4:Ymm, 
        .Operands)
  ...</k>   
    <regstate> RSMap </regstate>


  rule <k> 
    execinstr (vmpsadbw 
        LowSrcByte0:MInt, LowSrcByte1:MInt, LowSrcByte2:MInt, LowSrcByte3:MInt,
        LowDestByte0:MInt, LowDestByte1:MInt, LowDestByte2:MInt, LowDestByte3:MInt,
        LowDestByte4:MInt, LowDestByte5:MInt, LowDestByte6:MInt, LowDestByte7:MInt,
        LowDestByte8:MInt, LowDestByte9:MInt, LowDestByte10:MInt,

        HighSrcByte0:MInt, HighSrcByte1:MInt, HighSrcByte2:MInt, HighSrcByte3:MInt,
        HighDestByte0:MInt, HighDestByte1:MInt, HighDestByte2:MInt, HighDestByte3:MInt,
        HighDestByte4:MInt, HighDestByte5:MInt, HighDestByte6:MInt, HighDestByte7:MInt,
        HighDestByte8:MInt, HighDestByte9:MInt, HighDestByte10:MInt,
        R4:Ymm,  .Operands) =>
  setRegisterValue(
  concatenateMInt(
    concatenateMInt(

      concatenateMInt(    
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(HighDestByte7, HighSrcByte0),
              absoluteUnsignedDifference(HighDestByte8, HighSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(HighDestByte9, HighSrcByte2),
              absoluteUnsignedDifference(HighDestByte10, HighSrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(HighDestByte6, HighSrcByte0),
              absoluteUnsignedDifference(HighDestByte7, HighSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(HighDestByte8, HighSrcByte2),
              absoluteUnsignedDifference(HighDestByte9, HighSrcByte3))
          )),
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(HighDestByte5, HighSrcByte0),
              absoluteUnsignedDifference(HighDestByte6, HighSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(HighDestByte7, HighSrcByte2),
              absoluteUnsignedDifference(HighDestByte8, HighSrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(HighDestByte4, HighSrcByte0),
              absoluteUnsignedDifference(HighDestByte5, HighSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(HighDestByte6, HighSrcByte2),
              absoluteUnsignedDifference(HighDestByte7, HighSrcByte3))
          ))
        ),
     
      concatenateMInt(
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(HighDestByte3, HighSrcByte0),
              absoluteUnsignedDifference(HighDestByte4, HighSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(HighDestByte5, HighSrcByte2),
              absoluteUnsignedDifference(HighDestByte6, HighSrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(HighDestByte2, HighSrcByte0),
              absoluteUnsignedDifference(HighDestByte3, HighSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(HighDestByte4, HighSrcByte2),
              absoluteUnsignedDifference(HighDestByte5, HighSrcByte3))
          )),
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(HighDestByte1, HighSrcByte0),
              absoluteUnsignedDifference(HighDestByte2, HighSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(HighDestByte3, HighSrcByte2),
              absoluteUnsignedDifference(HighDestByte4, HighSrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(HighDestByte0, HighSrcByte0),
              absoluteUnsignedDifference(HighDestByte1, HighSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(HighDestByte2, HighSrcByte2),
              absoluteUnsignedDifference(HighDestByte3, HighSrcByte3))
          ))
      )),

      //Lower 
      
    concatenateMInt(

      concatenateMInt(    
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(LowDestByte7, LowSrcByte0),
              absoluteUnsignedDifference(LowDestByte8, LowSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(LowDestByte9, LowSrcByte2),
              absoluteUnsignedDifference(LowDestByte10, LowSrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(LowDestByte6, LowSrcByte0),
              absoluteUnsignedDifference(LowDestByte7, LowSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(LowDestByte8, LowSrcByte2),
              absoluteUnsignedDifference(LowDestByte9, LowSrcByte3))
          )),
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(LowDestByte5, LowSrcByte0),
              absoluteUnsignedDifference(LowDestByte6, LowSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(LowDestByte7, LowSrcByte2),
              absoluteUnsignedDifference(LowDestByte8, LowSrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(LowDestByte4, LowSrcByte0),
              absoluteUnsignedDifference(LowDestByte5, LowSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(LowDestByte6, LowSrcByte2),
              absoluteUnsignedDifference(LowDestByte7, LowSrcByte3))
          ))
        ),
     
      concatenateMInt(
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(LowDestByte3, LowSrcByte0),
              absoluteUnsignedDifference(LowDestByte4, LowSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(LowDestByte5, LowSrcByte2),
              absoluteUnsignedDifference(LowDestByte6, LowSrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(LowDestByte2, LowSrcByte0),
              absoluteUnsignedDifference(LowDestByte3, LowSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(LowDestByte4, LowSrcByte2),
              absoluteUnsignedDifference(LowDestByte5, LowSrcByte3))
          )),
        concatenateMInt(
          addMInt(
            addMInt(
              absoluteUnsignedDifference(LowDestByte1, LowSrcByte0),
              absoluteUnsignedDifference(LowDestByte2, LowSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(LowDestByte3, LowSrcByte2),
              absoluteUnsignedDifference(LowDestByte4, LowSrcByte3))
          ),
          addMInt(
            addMInt(
              absoluteUnsignedDifference(LowDestByte0, LowSrcByte0),
              absoluteUnsignedDifference(LowDestByte1, LowSrcByte1)),
            addMInt(
              absoluteUnsignedDifference(LowDestByte2, LowSrcByte2),
              absoluteUnsignedDifference(LowDestByte3, LowSrcByte3))
          ))
      ))
      
      
      ) , R4)

  ...</k>

  // Utils

  syntax MInt ::= absoluteUnsignedDifference(MInt, MInt) [function]
  rule absoluteUnsignedDifference(A:MInt, B:MInt) => subMInt(A, B)
    requires ugtMInt(A, B)

  rule absoluteUnsignedDifference(A:MInt, B:MInt) => subMInt(B, A)
    requires notBool ugtMInt(A, B)

  syntax MInt ::= selectSliceMPSAD(MInt, MInt, Int, Int) [function]
  rule selectSliceMPSAD(DEST:MInt, Offset:MInt, High:Int, Low:Int) =>
    concatenateMInt(mi(8, 0), extractMInt(DEST, (uvalueMInt(Offset) *Int 32)
          +Int High, (uvalueMInt(Offset) *Int 32) +Int Low))
  


// vmpsadbw-ymm-ymm-ymm-imm8-semantics


// btsl-r32-imm8

  rule <k>
    execinstr (btsl Imm8:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), orMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), shlMInt( mi(32, 1), uvalueMInt(mi(32, svalueMInt(andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))))))

"CF" |-> extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), uvalueMInt(mi(32, svalueMInt(andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))))), 31, 32)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btsl-r32-imm8-semantics


// subb-rh-imm8

  rule <k>
    execinstr (subb Imm8:Imm, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 51, 52)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// subb-rh-imm8-semantics


// vperm2i128-ymm-ymm-ymm-imm8

  rule <k>
    execinstr (vperm2i128 Imm8:Imm, R2:Ymm, R3:Ymm, R4:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 1)) #then concatenateMInt( mi(128, 0), mi(128, 0)) #else concatenateMInt( mi(128, 0), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), mi(2, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), mi(2, 1)) #then extractMInt( getParentValue(R3, RSMap), 0, 128) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 128, 256) #else extractMInt( getParentValue(R2, RSMap), 0, 128) #fi) #fi) #fi)) #fi) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 1)) #then concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 1)) #then extractMInt( getParentValue(R3, RSMap), 0, 128) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 128, 256) #else extractMInt( getParentValue(R2, RSMap), 0, 128) #fi) #fi) #fi), mi(128, 0)) #else concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 1)) #then extractMInt( getParentValue(R3, RSMap), 0, 128) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 128, 256) #else extractMInt( getParentValue(R2, RSMap), 0, 128) #fi) #fi) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), mi(2, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), mi(2, 1)) #then extractMInt( getParentValue(R3, RSMap), 0, 128) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 128, 256) #else extractMInt( getParentValue(R2, RSMap), 0, 128) #fi) #fi) #fi)) #fi) #fi)
)

    </regstate>
    


// vperm2i128-ymm-ymm-ymm-imm8-semantics


// vpextrq-r64-xmm-imm8

  rule <k>
    execinstr (vpextrq Imm8:Imm, R2:Xmm, R3:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(127, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), uvalueMInt(mi(128, 6))))), 64, 128)
)

    </regstate>
    


// vpextrq-r64-xmm-imm8-semantics


// vpermpd-ymm-ymm-imm8

  rule <k>
    execinstr (vpermpd Imm8:Imm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2)), uvalueMInt(mi(256, 6))))), 192, 256), concatenateMInt( extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4)), uvalueMInt(mi(256, 6))))), 192, 256), concatenateMInt( extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6)), uvalueMInt(mi(256, 6))))), 192, 256), extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(256, 6))))), 192, 256))))
)

    </regstate>
    


// vpermpd-ymm-ymm-imm8-semantics


// xorb-rh-imm8

  rule <k>
    execinstr (xorb Imm8:Imm, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), handleImmediateWithSignExtend(Imm8, 8, 8))), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 55, 56), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 54, 55), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 53, 54), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 52, 53), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 51, 52), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 50, 51), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 49, 50), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// xorb-rh-imm8-semantics


// vroundpd-ymm-ymm-imm8

  rule <k>
    execinstr (vroundpd Imm8:Imm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( cvt_double_to_int64_rm(extractMInt( getParentValue(R2, RSMap), 0, 64), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( cvt_double_to_int64_rm(extractMInt( getParentValue(R2, RSMap), 64, 128), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( cvt_double_to_int64_rm(extractMInt( getParentValue(R2, RSMap), 128, 192), handleImmediateWithSignExtend(Imm8, 8, 8)), cvt_double_to_int64_rm(extractMInt( getParentValue(R2, RSMap), 192, 256), handleImmediateWithSignExtend(Imm8, 8, 8)))))
)

    </regstate>
    


// vroundpd-ymm-ymm-imm8-semantics


// sbbw-ax-imm16

  rule <k>
    execinstr (sbbw Imm16:Imm, %ax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 1, 17))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 11, 12), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sbbw-ax-imm16-semantics


// vblendpd-ymm-ymm-ymm-imm8

  rule <k>
    execinstr (vblendpd Imm8:Imm, R2:Ymm, R3:Ymm, R4:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 0, 64) #else extractMInt( getParentValue(R2, RSMap), 0, 64) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 64, 128) #else extractMInt( getParentValue(R2, RSMap), 64, 128) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 192) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 192, 256) #else extractMInt( getParentValue(R2, RSMap), 192, 256) #fi))))
)

    </regstate>
    


// vblendpd-ymm-ymm-ymm-imm8-semantics


// pextrb-r32-xmm-imm8

  rule <k>
    execinstr (pextrb Imm8:Imm, R2:Xmm, R3:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(56, 0), extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(124, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 8)), uvalueMInt(mi(128, 3))))), 120, 128))
)

    </regstate>
    


// pextrb-r32-xmm-imm8-semantics


// vpextrd-r32-xmm-imm8

  rule <k>
    execinstr (vpextrd Imm8:Imm, R2:Xmm, R3:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(32, 0), extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(128, 5))))), 96, 128))
)

    </regstate>
    


// vpextrd-r32-xmm-imm8-semantics


// vpsrad-ymm-ymm-imm8

  rule <k>
    execinstr (vpsrad Imm8:Imm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 31)) #then mi(32, 32) #else concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 31)) #then mi(32, 32) #else concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 31)) #then mi(32, 32) #else concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 31)) #then mi(32, 32) #else concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 31)) #then mi(32, 32) #else concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 31)) #then mi(32, 32) #else concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 31)) #then mi(32, 32) #else concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), ashrMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 31)) #then mi(32, 32) #else concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))))))))))
)

    </regstate>
    


// vpsrad-ymm-ymm-imm8-semantics


// roundss-xmm-xmm-imm8

  rule <k>
    execinstr (roundss Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 224), cvt_single_to_int32_rm(extractMInt( getParentValue(R2, RSMap), 224, 256), handleImmediateWithSignExtend(Imm8, 8, 8)))
)

    </regstate>
    


// roundss-xmm-xmm-imm8-semantics


// vpsllq-ymm-ymm-imm8

  rule <k>
    execinstr (vpsllq Imm8:Imm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 63)) #then mi(256, 0) #else concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 0, 64), uvalueMInt(concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 64, 128), uvalueMInt(concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), uvalueMInt(concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), shlMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), uvalueMInt(concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8))))))) #fi)
)

    </regstate>
    


// vpsllq-ymm-ymm-imm8-semantics


// cmpl-eax-imm32

  rule <k>
    execinstr (cmpl Imm32:Imm, %eax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 28, 29))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// cmpl-eax-imm32-semantics


// vdpps-ymm-ymm-ymm-imm8

  rule <k>
    execinstr (vdpps Imm8:Imm, R2:Ymm, R3:Ymm, R4:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( concatenateMInt( concatenateMInt( concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 96, 128), extractMInt( getParentValue(R2, RSMap), 96, 128)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 64, 96), extractMInt( getParentValue(R2, RSMap), 64, 96)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 32, 64), extractMInt( getParentValue(R2, RSMap), 32, 64)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 0, 32), extractMInt( getParentValue(R2, RSMap), 0, 32)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 96, 128), extractMInt( getParentValue(R2, RSMap), 96, 128)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 64, 96), extractMInt( getParentValue(R2, RSMap), 64, 96)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 32, 64), extractMInt( getParentValue(R2, RSMap), 32, 64)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 0, 32), extractMInt( getParentValue(R2, RSMap), 0, 32)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi)), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 96, 128), extractMInt( getParentValue(R2, RSMap), 96, 128)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 64, 96), extractMInt( getParentValue(R2, RSMap), 64, 96)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 32, 64), extractMInt( getParentValue(R2, RSMap), 32, 64)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 0, 32), extractMInt( getParentValue(R2, RSMap), 0, 32)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi)), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 96, 128), extractMInt( getParentValue(R2, RSMap), 96, 128)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 64, 96), extractMInt( getParentValue(R2, RSMap), 64, 96)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 32, 64), extractMInt( getParentValue(R2, RSMap), 32, 64)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 0, 32), extractMInt( getParentValue(R2, RSMap), 0, 32)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi)), concatenateMInt( concatenateMInt( concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi)), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi)), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi)))
)

    </regstate>
    


// vdpps-ymm-ymm-ymm-imm8-semantics


// sbbq-r64-imm8

  rule <k>
    execinstr (sbbq Imm8:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65)

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sbbq-r64-imm8-semantics


// rcrb-rh-imm8

  rule <k>
    execinstr (rcrb Imm8:Imm, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 1)) andBool (eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9))), 1, 2), mi(1, 1)) xorBool eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 56)), uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9))), 2, 3), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(9, 9)), 1, 9), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rcrb-rh-imm8-semantics


// pinsrw-xmm-r32-imm8

  rule <k>
    execinstr (pinsrw Imm8:Imm, R2:R32, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), orMInt( andMInt( extractMInt( getParentValue(R3, RSMap), 128, 256), negMInt( shlMInt( mi(128, 65535), uvalueMInt(shlMInt( concatenateMInt( mi(125, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 8)), uvalueMInt(mi(128, 4))))))), andMInt( shlMInt( concatenateMInt( mi(96, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(shlMInt( concatenateMInt( mi(125, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 8)), uvalueMInt(mi(128, 4))))), shlMInt( mi(128, 65535), uvalueMInt(shlMInt( concatenateMInt( mi(125, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 8)), uvalueMInt(mi(128, 4))))))))
)

    </regstate>
    


// pinsrw-xmm-r32-imm8-semantics


// vpsrldq-xmm-xmm-imm8

  rule <k>
    execinstr (vpsrldq Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( (#ifMInt ugtMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 15)) #then concatenateMInt( mi(120, 0), mi(8, 16)) #else concatenateMInt( mi(120, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), uvalueMInt(mi(128, 3))))))
)

    </regstate>
    


// vpsrldq-xmm-xmm-imm8-semantics


// rcrl-r32-imm8

  rule <k>
    execinstr (rcrl Imm8:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), uremMInt( concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(33, 33))), 1, 33))

"CF" |-> extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), uremMInt( concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(33, 33))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(33, 33)), 25, 33), mi(8, 1)) andBool (eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), uremMInt( concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(33, 33))), 1, 2), mi(1, 1)) xorBool eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 32, 64)), uremMInt( concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(33, 33))), 2, 3), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(33, 33)), 25, 33), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(33, 33)), 25, 33), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(33, 33)), 25, 33), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rcrl-r32-imm8-semantics


// imull-r32-r32-imm8

  rule <k>
    execinstr (imull Imm8:Imm, R2:R32, R3:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(32, 0), extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), 32, 64))

"CF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(64, svalueMInt(extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), 32, 64))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(64, svalueMInt(extractMInt( mulMInt( mi(64, svalueMInt(extractMInt( getParentValue(R2, RSMap), 32, 64))), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), 32, 64))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// imull-r32-r32-imm8-semantics


// shlb-rh-imm8

  rule <k>
    execinstr (shlb Imm8:Imm, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 8)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 8))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 9), mi(8, 0))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool (((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 8)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 8))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shlb-rh-imm8-semantics


// testl-r32-imm32

  rule <k>
    execinstr (testl Imm32:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 31, 32)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 30, 31)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 29, 30)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 28, 29)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 26, 27)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 25, 26)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 24, 25)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// testl-r32-imm32-semantics


// imulq-r64-r64-imm32

  rule <k>
    execinstr (imulq Imm32:Imm, R2:R64, R3:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> extractMInt( mulMInt( mi(128, svalueMInt(getParentValue(R2, RSMap))), mi(128, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), 64, 128)

"CF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(128, svalueMInt(getParentValue(R2, RSMap))), mi(128, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(128, svalueMInt(extractMInt( mulMInt( mi(128, svalueMInt(getParentValue(R2, RSMap))), mi(128, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), 64, 128))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(128, svalueMInt(getParentValue(R2, RSMap))), mi(128, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(128, svalueMInt(extractMInt( mulMInt( mi(128, svalueMInt(getParentValue(R2, RSMap))), mi(128, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), 64, 128))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// imulq-r64-r64-imm32-semantics


// psllw-xmm-imm8

  rule <k>
    execinstr (psllw Imm8:Imm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), (#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(128, 0) #else concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), shlMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), uvalueMInt(concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8))))))))))) #fi))
)

    </regstate>
    


// psllw-xmm-imm8-semantics


// rorxl-r32-r32-imm8

  rule <k>
    execinstr (rorxl Imm8:Imm, R2:R32, R3:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(32, 0), orMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), uvalueMInt(andMInt( concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(32, 31)))), shlMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), uvalueMInt(subMInt( mi(32, 32), andMInt( concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(32, 31)))))))
)

    </regstate>
    


// rorxl-r32-r32-imm8-semantics


// cmpsd-xmm-xmm-imm8

  rule <k>
    execinstr (cmpsd Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 192), (#ifMInt eqMInt( cmp_double_pred(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(64, 18446744073709551615) #else mi(64, 0) #fi))
)

    </regstate>
    


// cmpsd-xmm-xmm-imm8-semantics


// btl-r32-imm8

  rule <k>
    execinstr (btl Imm8:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), uvalueMInt(mi(32, svalueMInt(andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)))))), 31, 32)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btl-r32-imm8-semantics


// vshufps-ymm-ymm-ymm-imm8

  rule <k>
    execinstr (vshufps Imm8:Imm, R2:Ymm, R3:Ymm, R4:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 0, 32) #else extractMInt( getParentValue(R2, RSMap), 64, 96) #fi) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 96, 128) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 0, 32) #else extractMInt( getParentValue(R2, RSMap), 64, 96) #fi) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 96, 128) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 0, 32) #else extractMInt( getParentValue(R3, RSMap), 64, 96) #fi) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 32, 64) #else extractMInt( getParentValue(R3, RSMap), 96, 128) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 0, 32) #else extractMInt( getParentValue(R3, RSMap), 64, 96) #fi) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 32, 64) #else extractMInt( getParentValue(R3, RSMap), 96, 128) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R2, RSMap), 192, 224) #fi) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 224, 256) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R2, RSMap), 192, 224) #fi) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 224, 256) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 128, 160) #else extractMInt( getParentValue(R3, RSMap), 192, 224) #fi) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 160, 192) #else extractMInt( getParentValue(R3, RSMap), 224, 256) #fi) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 128, 160) #else extractMInt( getParentValue(R3, RSMap), 192, 224) #fi) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 160, 192) #else extractMInt( getParentValue(R3, RSMap), 224, 256) #fi) #fi))))))))
)

    </regstate>
    


// vshufps-ymm-ymm-ymm-imm8-semantics


// sbbw-r16-imm16

  rule <k>
    execinstr (sbbw Imm16:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 11, 12), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sbbw-r16-imm16-semantics


// cmpb-rh-imm8

  rule <k>
    execinstr (cmpb Imm8:Imm, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 51, 52)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// cmpb-rh-imm8-semantics


// psrlq-xmm-imm8

  rule <k>
    execinstr (psrlq Imm8:Imm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), (#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 63)) #then mi(128, 0) #else concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), uvalueMInt(concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), uvalueMInt(concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8))))) #fi))
)

    </regstate>
    


// psrlq-xmm-imm8-semantics


// imulw-r16-r16-imm8

  rule <k>
    execinstr (imulw Imm8:Imm, R2:R16, R3:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 48), extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), 16, 32))

"CF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(32, svalueMInt(extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), 16, 32))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(32, svalueMInt(extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), 16, 32))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// imulw-r16-r16-imm8-semantics


// orq-r64-imm8

  rule <k>
    execinstr (orq Imm8:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> orMInt( getParentValue(R2, RSMap), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), mi(1, 1)) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( orMInt( getParentValue(R2, RSMap), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> orMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// orq-r64-imm8-semantics


// vpsllq-xmm-xmm-imm8

  rule <k>
    execinstr (vpsllq Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 63)) #then concatenateMInt( mi(128, 0), mi(128, 0)) #else concatenateMInt( mi(128, 0), concatenateMInt( shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), uvalueMInt(concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), shlMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), uvalueMInt(concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))))) #fi)
)

    </regstate>
    


// vpsllq-xmm-xmm-imm8-semantics


// addl-r32-imm32

  rule <k>
    execinstr (addl Imm32:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// addl-r32-imm32-semantics


// rcrq-r64-imm8

  rule <k>
    execinstr (rcrq Imm8:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))), mi(65, 65))), 1, 65)

"CF" |-> extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))), mi(65, 65))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))), mi(65, 65)), 57, 65), mi(8, 1)) andBool (eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))), mi(65, 65))), 1, 2), mi(1, 1)) xorBool eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), getParentValue(R2, RSMap)), uremMInt( concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))), mi(65, 65))), 2, 3), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))), mi(65, 65)), 57, 65), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))), mi(65, 65)), 57, 65), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))), mi(65, 65)), 57, 65), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rcrq-r64-imm8-semantics


// xorq-rax-imm32

  rule <k>
    execinstr (xorq Imm32:Imm, %rax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> xorMInt( getParentValue(%rax, RSMap), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 31, 32)), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 30, 31)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 29, 30)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 28, 29)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 26, 27)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 25, 26)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 24, 25)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( xorMInt( getParentValue(%rax, RSMap), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( getParentValue(%rax, RSMap), 0, 1), extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// xorq-rax-imm32-semantics


// vpshuflw-xmm-xmm-imm8

  rule <k>
    execinstr (vpshuflw Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2)), uvalueMInt(mi(128, 4))))), 112, 128), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4)), uvalueMInt(mi(128, 4))))), 112, 128), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6)), uvalueMInt(mi(128, 4))))), 112, 128), extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(128, 4))))), 112, 128))))))
)

    </regstate>
    


// vpshuflw-xmm-xmm-imm8-semantics


// orl-eax-imm32

  rule <k>
    execinstr (orl Imm32:Imm, %eax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( mi(32, 0), orMInt( extractMInt( getParentValue(%rax, RSMap), 32, 64), handleImmediateWithSignExtend(Imm32, 32, 32)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 31, 32)), mi(1, 1)) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 30, 31)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 29, 30)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 28, 29)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 26, 27)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 25, 26)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 24, 25)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( orMInt( extractMInt( getParentValue(%rax, RSMap), 32, 64), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> orMInt( extractMInt( getParentValue(%rax, RSMap), 32, 33), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// orl-eax-imm32-semantics


// shufpd-xmm-xmm-imm8

  rule <k>
    execinstr (shufpd Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 192) #else extractMInt( getParentValue(R2, RSMap), 192, 256) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 128, 192) #else extractMInt( getParentValue(R3, RSMap), 192, 256) #fi)))
)

    </regstate>
    


// shufpd-xmm-xmm-imm8-semantics


// psrad-xmm-imm8

  rule <k>
    execinstr (psrad Imm8:Imm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 31)) #then mi(32, 32) #else concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 31)) #then mi(32, 32) #else concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 31)) #then mi(32, 32) #else concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), ashrMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 31)) #then mi(32, 32) #else concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi)))))))
)

    </regstate>
    


// psrad-xmm-imm8-semantics


// vpsrlq-ymm-ymm-imm8

  rule <k>
    execinstr (vpsrlq Imm8:Imm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 63)) #then mi(256, 0) #else concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 0, 64), uvalueMInt(concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 64, 128), uvalueMInt(concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), uvalueMInt(concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 192, 256), uvalueMInt(concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8))))))) #fi)
)

    </regstate>
    


// vpsrlq-ymm-ymm-imm8-semantics


// vpclmulqdq-xmm-xmm-xmm-imm8

    /*
    IF (Imm8[0] = 0 )
        THEN
            TEMP1←SRC1 [63:0];
        ELSE
            TEMP1←SRC1 [127:64];
    FI
    IF (Imm8[4] = 0 )
        THEN
            TEMP2←SRC2 [63:0];
        ELSE
            TEMP2←SRC2 [127:64];
  */   
  rule <k>
    execinstr (vpclmulqdq Imm8:Imm, R2:Xmm, R3:Xmm, R4:Xmm, .Operands) => 
      execinstr(vpclmulqdq 
          selectSlice(getRegisterValue(R3, RSMap), handleImmediateWithSignExtend(Imm8,
              8, 8), 7, 64, 0),
          selectSlice(getRegisterValue(R2, RSMap), handleImmediateWithSignExtend(Imm8,
              8, 8), 3, 64, 0), R4
          , .Operands)
  ...</k>
    <regstate> RSMap </regstate>

  rule <k>
    execinstr (vpclmulqdq TEMP1:MInt, TEMP2:MInt, R4:Xmm,   .Operands) => 
      setParentValue(
          concatenateMInt(
            mi(128, 0), 
            orMInt(
              computePCLMULQDQ1(TEMP1, TEMP2, mi(128, 0), 0, 63), 
              computePCLMULQDQ2(TEMP1, TEMP2, mi(128, 0), 64, 126) 
            )), R4)
  ...</k>
  
  /*
    For i = 0 to 63 {
        TmpB [ i ]←(TEMP1[ 0 ] and TEMP2[ i ]);
        For j = 1 to i {
            TmpB [ i ]←TmpB [ i ] xor (TEMP1[ j ] and TEMP2[ i - j ])
        }
        DEST[ i ]←TmpB[ i ];
    }
  */   
  syntax MInt ::= computePCLMULQDQ1(MInt, MInt, MInt, Int, Int) [function]
  syntax MInt ::= computePCLMULQDQ1Refine(MInt, MInt, Int) [function]

  rule computePCLMULQDQ1(TEMP1:MInt, TEMP2:MInt, DEST:MInt, N:Int, N:Int) => DEST

  rule computePCLMULQDQ1(TEMP1:MInt, TEMP2:MInt, DEST:MInt, M:Int, N:Int) =>
    computePCLMULQDQ1( 
        TEMP1, TEMP2, plugInMask(DEST, computePCLMULQDQ1Refine(TEMP1, TEMP2, M), M), M +Int 1, N)

  rule computePCLMULQDQ1Refine(TEMP1:MInt, TEMP2:MInt, M:Int) =>
  refineHelper(TEMP1, TEMP2, 1, M, 
        andMInt( 
          extractMInt(TEMP1, 63, 64), extractMInt(TEMP2, 63 -Int M, 64 -Int M) 
          )
      )

  /*
     For i = 64 to 126 {
    TmpB [ i ]←0;
    For j = i - 63 to 63 {
        TmpB [ i ]←TmpB [ i ] xor (TEMP1[ j ] and TEMP2[ i - j ])
    }
    DEST[ i ]←TmpB[ i ];
  }
  */

  syntax MInt ::= computePCLMULQDQ2(MInt, MInt, MInt, Int, Int) [function]
  syntax MInt ::= computePCLMULQDQ2Refine(MInt, MInt, Int) [function]

  rule computePCLMULQDQ2(TEMP1:MInt, TEMP2:MInt, DEST:MInt, N:Int, N:Int) => DEST

  rule computePCLMULQDQ2(TEMP1:MInt, TEMP2:MInt, DEST:MInt, M:Int, N:Int) =>
    computePCLMULQDQ2( 
        TEMP1, TEMP2, plugInMask(DEST, computePCLMULQDQ2Refine(TEMP1, TEMP2, M), M), M +Int 1, N)

  rule computePCLMULQDQ2Refine(TEMP1:MInt, TEMP2:MInt, M:Int) =>
  refineHelper(TEMP1, TEMP2, M -Int 63, 63,  mi(1, 0))


  // Utils
  syntax MInt ::= refineHelper(MInt, MInt, Int, Int, MInt) [function]
  rule refineHelper(TEMP1:MInt, TEMP2:MInt, Q:Int, Q:Int,
      RES:MInt) => RES

  rule refineHelper(TEMP1:MInt, TEMP2:MInt, P:Int, Q:Int,
      RES:MInt) => 
    refineHelper(TEMP1, TEMP2, P +Int 1, Q, 
        xorMInt(RES, 
          andMInt(
            extractMInt(TEMP1, 63 -Int P,         64 -Int P),
            extractMInt(TEMP2, 63 -Int (P -Int Q), 64 -Int (P -Int Q))
            )))

  syntax MInt ::= selectSlice(MInt, MInt, Int, Int, Int) [function]

  rule selectSlice(SRC1:MInt, Imm8:MInt, CheckBit:Int, Start1:Int, Start2:Int)
  => extractMInt(SRC1, Start1, Start1 +Int 64)
    requires  eqMInt(mi(1, 0), extractMInt(Imm8, CheckBit, CheckBit +Int 1))
    
  rule selectSlice(SRC1:MInt, Imm8:MInt, CheckBit:Int, Start1:Int, Start2:Int)
  => extractMInt(SRC1, Start2, Start2 +Int 64)
    requires  eqMInt(mi(1, 1), extractMInt(Imm8, CheckBit, CheckBit +Int 1))
    


// vpclmulqdq-xmm-xmm-xmm-imm8-semantics


// movb-rh-imm8

  rule <k>
    execinstr (movb Imm8:Imm, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), handleImmediateWithSignExtend(Imm8, 8, 8)), extractMInt( getParentValue(R2, RSMap), 56, 64))
)

    </regstate>
    


// movb-rh-imm8-semantics


// orq-r64-imm32

  rule <k>
    execinstr (orq Imm32:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> orMInt( getParentValue(R2, RSMap), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 31, 32)), mi(1, 1)) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 30, 31)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 29, 30)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 28, 29)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 26, 27)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 25, 26)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 24, 25)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( orMInt( getParentValue(R2, RSMap), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> orMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// orq-r64-imm32-semantics


// dppd-xmm-xmm-imm8

  rule <k>
    execinstr (dppd Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 1)) #then add_double((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256)) #else mi(64, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192)) #else mi(64, 0) #fi)) #else mi(64, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 1)) #then add_double((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256)) #else mi(64, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192)) #else mi(64, 0) #fi)) #else mi(64, 0) #fi)))
)

    </regstate>
    


// dppd-xmm-xmm-imm8-semantics


// shrb-r8-imm8

  rule <k>
    execinstr (shrb Imm8:Imm, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 8))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 8)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 8))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 8, 9), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 8), mi(8, 0))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shrb-r8-imm8-semantics


// vpsrad-xmm-xmm-imm8

  rule <k>
    execinstr (vpsrad Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 31)) #then mi(32, 32) #else concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 31)) #then mi(32, 32) #else concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 31)) #then mi(32, 32) #else concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), ashrMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 31)) #then mi(32, 32) #else concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi)))))))
)

    </regstate>
    


// vpsrad-xmm-xmm-imm8-semantics


// vpshufd-ymm-ymm-imm8

  rule <k>
    execinstr (vpshufd Imm8:Imm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2)), uvalueMInt(mi(128, 5))))), 96, 128), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4)), uvalueMInt(mi(128, 5))))), 96, 128), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6)), uvalueMInt(mi(128, 5))))), 96, 128), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(128, 5))))), 96, 128), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2)), uvalueMInt(mi(128, 5))))), 96, 128), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4)), uvalueMInt(mi(128, 5))))), 96, 128), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6)), uvalueMInt(mi(128, 5))))), 96, 128), extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(128, 5))))), 96, 128))))))))
)

    </regstate>
    


// vpshufd-ymm-ymm-imm8-semantics


// vdppd-xmm-xmm-xmm-imm8

  rule <k>
    execinstr (vdppd Imm8:Imm, R2:Xmm, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 1)) #then add_double((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256)) #else mi(64, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192)) #else mi(64, 0) #fi)) #else mi(64, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 1)) #then add_double((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_double(extractMInt( getParentValue(R3, RSMap), 192, 256), extractMInt( getParentValue(R2, RSMap), 192, 256)) #else mi(64, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_double(extractMInt( getParentValue(R3, RSMap), 128, 192), extractMInt( getParentValue(R2, RSMap), 128, 192)) #else mi(64, 0) #fi)) #else mi(64, 0) #fi)))
)

    </regstate>
    


// vdppd-xmm-xmm-xmm-imm8-semantics


// pshuflw-xmm-xmm-imm8

  rule <k>
    execinstr (pshuflw Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 128, 192), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2)), uvalueMInt(mi(128, 4))))), 112, 128), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4)), uvalueMInt(mi(128, 4))))), 112, 128), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6)), uvalueMInt(mi(128, 4))))), 112, 128), extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(128, 4))))), 112, 128))))))
)

    </regstate>
    


// pshuflw-xmm-xmm-imm8-semantics


// vpshufd-xmm-xmm-imm8

  rule <k>
    execinstr (vpshufd Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2)), uvalueMInt(mi(128, 5))))), 96, 128), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4)), uvalueMInt(mi(128, 5))))), 96, 128), concatenateMInt( extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6)), uvalueMInt(mi(128, 5))))), 96, 128), extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(128, 5))))), 96, 128)))))
)

    </regstate>
    


// vpshufd-xmm-xmm-imm8-semantics


// addb-r8-imm8

  rule <k>
    execinstr (addb Imm8:Imm, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// addb-r8-imm8-semantics


// vshufps-xmm-xmm-xmm-imm8

  rule <k>
    execinstr (vshufps Imm8:Imm, R2:Xmm, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R2, RSMap), 192, 224) #fi) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 224, 256) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R2, RSMap), 192, 224) #fi) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 224, 256) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 128, 160) #else extractMInt( getParentValue(R3, RSMap), 192, 224) #fi) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 160, 192) #else extractMInt( getParentValue(R3, RSMap), 224, 256) #fi) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 128, 160) #else extractMInt( getParentValue(R3, RSMap), 192, 224) #fi) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 160, 192) #else extractMInt( getParentValue(R3, RSMap), 224, 256) #fi) #fi)))))
)

    </regstate>
    


// vshufps-xmm-xmm-xmm-imm8-semantics


// salw-r16-imm8

  rule <k>
    execinstr (salw Imm8:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 17))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 16)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 16))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 9, 10), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 17), mi(16, 0))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool (((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 16)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 16))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64)), uvalueMInt(concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// salw-r16-imm8-semantics


// vcmpps-ymm-ymm-ymm-imm8

  rule <k>
    execinstr (vcmpps Imm8:Imm, R2:Ymm, R3:Ymm, R4:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( (#ifMInt eqMInt( cmp_single_pred(extractMInt( getParentValue(R3, RSMap), 0, 32), extractMInt( getParentValue(R2, RSMap), 0, 32), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt eqMInt( cmp_single_pred(extractMInt( getParentValue(R3, RSMap), 32, 64), extractMInt( getParentValue(R2, RSMap), 32, 64), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt eqMInt( cmp_single_pred(extractMInt( getParentValue(R3, RSMap), 64, 96), extractMInt( getParentValue(R2, RSMap), 64, 96), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt eqMInt( cmp_single_pred(extractMInt( getParentValue(R3, RSMap), 96, 128), extractMInt( getParentValue(R2, RSMap), 96, 128), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt eqMInt( cmp_single_pred(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt eqMInt( cmp_single_pred(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt eqMInt( cmp_single_pred(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(32, 4294967295) #else mi(32, 0) #fi), (#ifMInt eqMInt( cmp_single_pred(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(32, 4294967295) #else mi(32, 0) #fi))))))))
)

    </regstate>
    


// vcmpps-ymm-ymm-ymm-imm8-semantics


// extractps-r32-xmm-imm8

  rule <k>
    execinstr (extractps Imm8:Imm, R2:Xmm, R3:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(32, 0), extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(128, 5))))), 96, 128))
)

    </regstate>
    


// extractps-r32-xmm-imm8-semantics


// cmpb-r8-imm8

  rule <k>
    execinstr (cmpb Imm8:Imm, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// cmpb-r8-imm8-semantics


// andl-r32-imm32

  rule <k>
    execinstr (andl Imm32:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), andMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), handleImmediateWithSignExtend(Imm32, 32, 32)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 31, 32)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 30, 31)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 29, 30)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 28, 29)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 26, 27)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 25, 26)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 24, 25)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// andl-r32-imm32-semantics


// subw-ax-imm16

  rule <k>
    execinstr (subw Imm16:Imm, %ax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 48), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 1, 17))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 11, 12), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// subw-ax-imm16-semantics


// andq-rax-imm32

  rule <k>
    execinstr (andq Imm32:Imm, %rax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> andMInt( getParentValue(%rax, RSMap), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 31, 32)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 30, 31)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 29, 30)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 28, 29)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 26, 27)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 25, 26)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 24, 25)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( getParentValue(%rax, RSMap), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(%rax, RSMap), 0, 1), extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// andq-rax-imm32-semantics


// btrw-r16-imm8

  rule <k>
    execinstr (btrw Imm8:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), andMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), negMInt( shlMInt( mi(16, 1), uvalueMInt(mi(16, svalueMInt(andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 15)))))))))

"CF" |-> extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), uvalueMInt(mi(16, svalueMInt(andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 15)))))), 15, 16)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btrw-r16-imm8-semantics


// psrldq-xmm-imm8

  rule <k>
    execinstr (psrldq Imm8:Imm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( (#ifMInt ugtMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 15)) #then concatenateMInt( mi(120, 0), mi(8, 16)) #else concatenateMInt( mi(120, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), uvalueMInt(mi(128, 3))))))
)

    </regstate>
    


// psrldq-xmm-imm8-semantics


// pslldq-xmm-imm8

  rule <k>
    execinstr (pslldq Imm8:Imm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), shlMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( (#ifMInt ugtMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 15)) #then concatenateMInt( mi(120, 0), mi(8, 16)) #else concatenateMInt( mi(120, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), uvalueMInt(mi(128, 3))))))
)

    </regstate>
    


// pslldq-xmm-imm8-semantics


// cmpq-r64-imm8

  rule <k>
    execinstr (cmpq Imm8:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// cmpq-r64-imm8-semantics


// vpshufhw-ymm-ymm-imm8

  rule <k>
    execinstr (vpshufhw Imm8:Imm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2)), uvalueMInt(mi(256, 4))))), 48, 64), concatenateMInt( extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4)), uvalueMInt(mi(256, 4))))), 48, 64), concatenateMInt( extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6)), uvalueMInt(mi(256, 4))))), 48, 64), concatenateMInt( extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(256, 4))))), 48, 64), concatenateMInt( extractMInt( getParentValue(R2, RSMap), 64, 128), concatenateMInt( extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2)), uvalueMInt(mi(256, 4))))), 176, 192), concatenateMInt( extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4)), uvalueMInt(mi(256, 4))))), 176, 192), concatenateMInt( extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6)), uvalueMInt(mi(256, 4))))), 176, 192), concatenateMInt( extractMInt( lshrMInt( getParentValue(R2, RSMap), uvalueMInt(shlMInt( concatenateMInt( mi(254, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(256, 4))))), 176, 192), extractMInt( getParentValue(R2, RSMap), 192, 256))))))))))
)

    </regstate>
    


// vpshufhw-ymm-ymm-imm8-semantics


// shlq-r64-imm8

  rule <k>
    execinstr (shlq Imm8:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 1, 65)

"CF" |-> (#ifMInt ((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 64)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 64))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 57, 58), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 1, 65), mi(64, 0))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 1, 2), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 1)) andBool (((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 64)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 64))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shlq-r64-imm8-semantics


// pextrw-r32-xmm-imm8

  rule <k>
    execinstr (pextrw Imm8:Imm, R2:Xmm, R3:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(48, 0), extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(125, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 8)), uvalueMInt(mi(128, 4))))), 112, 128))
)

    </regstate>
    


// pextrw-r32-xmm-imm8-semantics


// vpermilps-ymm-ymm-imm8

  rule <k>
    execinstr (vpermilps Imm8:Imm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 96, 128) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 64, 96) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 0, 32) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 96, 128) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 64, 96) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 0, 32) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 96, 128) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 64, 96) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 0, 32) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 96, 128) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 64, 96) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 32, 64) #else extractMInt( getParentValue(R2, RSMap), 0, 32) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 2), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 4), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 6), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), mi(2, 0)) #then extractMInt( getParentValue(R2, RSMap), 224, 256) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), mi(2, 1)) #then extractMInt( getParentValue(R2, RSMap), 192, 224) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8), mi(2, 2)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi) #fi) #fi))))))))
)

    </regstate>
    


// vpermilps-ymm-ymm-imm8-semantics


// adcq-rax-imm32

  rule <k>
    execinstr (adcq Imm32:Imm, %rax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 1, 65)

"CF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 60, 61))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// adcq-rax-imm32-semantics


// vblendps-xmm-xmm-xmm-imm8

  rule <k>
    execinstr (vblendps Imm8:Imm, R2:Xmm, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 160) #else extractMInt( getParentValue(R2, RSMap), 128, 160) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 160, 192) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 192, 224) #else extractMInt( getParentValue(R2, RSMap), 192, 224) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 224, 256) #else extractMInt( getParentValue(R2, RSMap), 224, 256) #fi)))))
)

    </regstate>
    


// vblendps-xmm-xmm-xmm-imm8-semantics


// vroundps-xmm-xmm-imm8

  rule <k>
    execinstr (vroundps Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( cvt_single_to_int32_rm(extractMInt( getParentValue(R2, RSMap), 128, 160), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( cvt_single_to_int32_rm(extractMInt( getParentValue(R2, RSMap), 160, 192), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( cvt_single_to_int32_rm(extractMInt( getParentValue(R2, RSMap), 192, 224), handleImmediateWithSignExtend(Imm8, 8, 8)), cvt_single_to_int32_rm(extractMInt( getParentValue(R2, RSMap), 224, 256), handleImmediateWithSignExtend(Imm8, 8, 8))))))
)

    </regstate>
    


// vroundps-xmm-xmm-imm8-semantics


// salq-r64-imm8

  rule <k>
    execinstr (salq Imm8:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 1, 65)

"CF" |-> (#ifMInt ((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 64)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 64))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 57, 58), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 1, 65), mi(64, 0))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 1, 2), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 1)) andBool (((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 64)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 64))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) xorBool eqMInt( extractMInt( shlMInt( concatenateMInt( mi(1, 0), getParentValue(R2, RSMap)), uvalueMInt(concatenateMInt( mi(57, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63))))), 1, 2), mi(1, 1)))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 63)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// salq-r64-imm8-semantics


// vpsrld-ymm-ymm-imm8

  rule <k>
    execinstr (vpsrld Imm8:Imm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 31)) #then mi(256, 0) #else concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 0, 32), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 64, 96), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 96, 128), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8))))))))))) #fi)
)

    </regstate>
    


// vpsrld-ymm-ymm-imm8-semantics


// orb-r8-imm8

  rule <k>
    execinstr (orb Imm8:Imm, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), orMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), handleImmediateWithSignExtend(Imm8, 8, 8)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), mi(1, 1)) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> orMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// orb-r8-imm8-semantics


// addb-rh-imm8

  rule <k>
    execinstr (addb Imm8:Imm, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 51, 52)), extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// addb-rh-imm8-semantics


// vpsraw-ymm-ymm-imm8

  rule <k>
    execinstr (vpsraw Imm8:Imm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 0, 16), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 16, 32), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 32, 48), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 64, 80), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 80, 96), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 96, 112), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 112, 128), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 128, 144), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 144, 160), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 160, 176), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 176, 192), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 192, 208), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 208, 224), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), concatenateMInt( ashrMInt( extractMInt( getParentValue(R2, RSMap), 224, 240), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))), ashrMInt( extractMInt( getParentValue(R2, RSMap), 240, 256), uvalueMInt((#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 15)) #then mi(16, 16) #else concatenateMInt( mi(8, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi))))))))))))))))))
)

    </regstate>
    


// vpsraw-ymm-ymm-imm8-semantics


// addb-al-imm8

  rule <k>
    execinstr (addb Imm8:Imm, %al,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 56), extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 9))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// addb-al-imm8-semantics


// vshufpd-ymm-ymm-ymm-imm8

  rule <k>
    execinstr (vshufpd Imm8:Imm, R2:Ymm, R3:Ymm, R4:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 0, 64) #else extractMInt( getParentValue(R2, RSMap), 64, 128) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 0, 64) #else extractMInt( getParentValue(R3, RSMap), 64, 128) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 192) #else extractMInt( getParentValue(R2, RSMap), 192, 256) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 128, 192) #else extractMInt( getParentValue(R3, RSMap), 192, 256) #fi))))
)

    </regstate>
    


// vshufpd-ymm-ymm-ymm-imm8-semantics


// testb-r8-imm8

  rule <k>
    execinstr (testb Imm8:Imm, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 64), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// testb-r8-imm8-semantics


// pextrd-r32-xmm-imm8

  rule <k>
    execinstr (pextrd Imm8:Imm, R2:Xmm, R3:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(32, 0), extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(128, 5))))), 96, 128))
)

    </regstate>
    


// pextrd-r32-xmm-imm8-semantics


// pinsrb-xmm-r32-imm8

  rule <k>
    execinstr (pinsrb Imm8:Imm, R2:R32, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), orMInt( andMInt( extractMInt( getParentValue(R3, RSMap), 128, 256), negMInt( shlMInt( mi(128, 255), uvalueMInt(shlMInt( concatenateMInt( mi(124, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 8)), uvalueMInt(mi(128, 3))))))), andMInt( shlMInt( concatenateMInt( mi(96, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(shlMInt( concatenateMInt( mi(124, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 8)), uvalueMInt(mi(128, 3))))), shlMInt( mi(128, 255), uvalueMInt(shlMInt( concatenateMInt( mi(124, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 8)), uvalueMInt(mi(128, 3))))))))
)

    </regstate>
    


// pinsrb-xmm-r32-imm8-semantics


// vcvtps2ph-xmm-ymm-imm8

  rule <k>
    execinstr (vcvtps2ph Imm8:Imm, R2:Ymm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), concatenateMInt( cvt_single_to_fp16_rm(extractMInt( getParentValue(R3, RSMap), 0, 32), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( cvt_single_to_fp16_rm(extractMInt( getParentValue(R3, RSMap), 32, 64), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( cvt_single_to_fp16_rm(extractMInt( getParentValue(R3, RSMap), 64, 96), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( cvt_single_to_fp16_rm(extractMInt( getParentValue(R3, RSMap), 96, 128), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( cvt_single_to_fp16_rm(extractMInt( getParentValue(R3, RSMap), 128, 160), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( cvt_single_to_fp16_rm(extractMInt( getParentValue(R3, RSMap), 160, 192), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( cvt_single_to_fp16_rm(extractMInt( getParentValue(R3, RSMap), 192, 224), handleImmediateWithSignExtend(Imm8, 8, 8)), cvt_single_to_fp16_rm(extractMInt( getParentValue(R3, RSMap), 224, 256), handleImmediateWithSignExtend(Imm8, 8, 8))))))))))
)

    </regstate>
    


// vcvtps2ph-xmm-ymm-imm8-semantics


// imulw-r16-r16-imm16

  rule <k>
    execinstr (imulw Imm16:Imm, R2:R16, R3:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 48), extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm16, 16, 16)))), 16, 32))

"CF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm16, 16, 16)))), mi(32, svalueMInt(extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm16, 16, 16)))), 16, 32))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"ZF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (#ifMInt (notBool eqMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm16, 16, 16)))), mi(32, svalueMInt(extractMInt( mulMInt( mi(32, svalueMInt(extractMInt( getParentValue(R2, RSMap), 48, 64))), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm16, 16, 16)))), 16, 32))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// imulw-r16-r16-imm16-semantics


// xorl-r32-imm32

  rule <k>
    execinstr (xorl Imm32:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), xorMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), handleImmediateWithSignExtend(Imm32, 32, 32)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 31, 32)), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 30, 31)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 29, 30)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 28, 29)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 26, 27)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 25, 26)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 24, 25)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// xorl-r32-imm32-semantics


// psrld-xmm-imm8

  rule <k>
    execinstr (psrld Imm8:Imm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 128), (#ifMInt ugtMInt( concatenateMInt( mi(56, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(64, 31)) #then mi(128, 0) #else concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 160), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 160, 192), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 192, 224), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8)))), lshrMInt( extractMInt( getParentValue(R2, RSMap), 224, 256), uvalueMInt(concatenateMInt( mi(24, 0), handleImmediateWithSignExtend(Imm8, 8, 8))))))) #fi))
)

    </regstate>
    


// psrld-xmm-imm8-semantics


// pinsrd-xmm-r32-imm8

  rule <k>
    execinstr (pinsrd Imm8:Imm, R2:R32, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), orMInt( andMInt( extractMInt( getParentValue(R3, RSMap), 128, 256), negMInt( shlMInt( mi(128, 4294967295), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(128, 5))))))), andMInt( shlMInt( concatenateMInt( mi(96, 0), extractMInt( getParentValue(R2, RSMap), 32, 64)), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(128, 5))))), shlMInt( mi(128, 4294967295), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(128, 5))))))))
)

    </regstate>
    


// pinsrd-xmm-r32-imm8-semantics


// adcq-r64-imm8

  rule <k>
    execinstr (adcq Imm8:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65)

"CF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), mi(65, 1)) #else concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))) #fi), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// adcq-r64-imm8-semantics


// shrl-r32-imm8

  rule <k>
    execinstr (shrl Imm8:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 32))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 32)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 32))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 32, 33), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 31, 32), mi(1, 1)) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 25, 26), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 24, 25), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 32), mi(32, 0))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), mi(1, 1))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shrl-r32-imm8-semantics


// adcb-al-imm8

  rule <k>
    execinstr (adcb Imm8:Imm, %al,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( extractMInt( getParentValue(%rax, RSMap), 0, 56), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 9))

"CF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// adcb-al-imm8-semantics


// rcrw-r16-imm8

  rule <k>
    execinstr (rcrw Imm8:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), uremMInt( concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(17, 17))), 1, 17))

"CF" |-> extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), uremMInt( concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(17, 17))), 0, 1)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( uremMInt( concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(17, 17)), 9, 17), mi(8, 1)) andBool (eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), uremMInt( concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(17, 17))), 1, 2), mi(1, 1)) xorBool eqMInt( extractMInt( ror( concatenateMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then mi(1, 1) #else mi(1, 0) #fi), extractMInt( getParentValue(R2, RSMap), 48, 64)), uremMInt( concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(17, 17))), 2, 3), mi(1, 1)))) orBool ((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(17, 17)), 9, 17), mi(8, 1))) andBool (((notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(17, 17)), 9, 17), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( extractMInt( uremMInt( concatenateMInt( mi(9, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))), mi(17, 17)), 9, 17), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// rcrw-r16-imm8-semantics


// adcl-eax-imm32

  rule <k>
    execinstr (adcl Imm32:Imm, %eax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( mi(32, 0), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 1, 33))

"CF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 28, 29))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(33, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm32, 32, 32)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// adcl-eax-imm32-semantics


// pextrw-r64-xmm-imm8

  rule <k>
    execinstr (pextrw Imm8:Imm, R2:Xmm, R3:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(48, 0), extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(125, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 8)), uvalueMInt(mi(128, 4))))), 112, 128))
)

    </regstate>
    


// pextrw-r64-xmm-imm8-semantics


// vroundss-xmm-xmm-xmm-imm8

  rule <k>
    execinstr (vroundss Imm8:Imm, R2:Xmm, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), concatenateMInt( extractMInt( getParentValue(R3, RSMap), 128, 224), cvt_single_to_int32_rm(extractMInt( getParentValue(R2, RSMap), 224, 256), handleImmediateWithSignExtend(Imm8, 8, 8))))
)

    </regstate>
    


// vroundss-xmm-xmm-xmm-imm8-semantics


// adcb-r8-imm8

  rule <k>
    execinstr (adcb Imm8:Imm, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9))

"CF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// adcb-r8-imm8-semantics


// xorw-r16-imm16

  rule <k>
    execinstr (xorw Imm16:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), handleImmediateWithSignExtend(Imm16, 16, 16)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 15, 16)), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 14, 15)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 13, 14)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 12, 13)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 11, 12)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 10, 11)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 9, 10)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 8, 9)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// xorw-r16-imm16-semantics


// vdpps-xmm-xmm-xmm-imm8

  rule <k>
    execinstr (vdpps Imm8:Imm, R2:Xmm, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), concatenateMInt( concatenateMInt( concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi)), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi)), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 1)) #then add_single(add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224)) #else mi(32, 0) #fi)), add_single((#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192)) #else mi(32, 0) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then mul_single(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160)) #else mi(32, 0) #fi))) #else mi(32, 0) #fi)))
)

    </regstate>
    


// vdpps-xmm-xmm-xmm-imm8-semantics


// testq-r64-imm32

  rule <k>
    execinstr (testq Imm32:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 31, 32)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 30, 31)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 29, 30)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 28, 29)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 26, 27)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 25, 26)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 24, 25)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( getParentValue(R2, RSMap), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// testq-r64-imm32-semantics


// subw-r16-imm8

  rule <k>
    execinstr (subw Imm8:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(16, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// subw-r16-imm8-semantics


// subl-r32-imm8

  rule <k>
    execinstr (subl Imm8:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// subl-r32-imm8-semantics


// vextracti128-xmm-ymm-imm8

  rule <k>
    execinstr (vextracti128 Imm8:Imm, R2:Ymm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(128, 0), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 256) #else extractMInt( getParentValue(R3, RSMap), 0, 128) #fi))
)

    </regstate>
    


// vextracti128-xmm-ymm-imm8-semantics


// subq-r64-imm8

  rule <k>
    execinstr (subq Imm8:Imm, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65)

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 60, 61))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(65, 1)), concatenateMInt( mi(1, 0), getParentValue(R2, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// subq-r64-imm8-semantics


// vroundps-ymm-ymm-imm8

  rule <k>
    execinstr (vroundps Imm8:Imm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( cvt_single_to_int32_rm(extractMInt( getParentValue(R2, RSMap), 0, 32), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( cvt_single_to_int32_rm(extractMInt( getParentValue(R2, RSMap), 32, 64), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( cvt_single_to_int32_rm(extractMInt( getParentValue(R2, RSMap), 64, 96), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( cvt_single_to_int32_rm(extractMInt( getParentValue(R2, RSMap), 96, 128), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( cvt_single_to_int32_rm(extractMInt( getParentValue(R2, RSMap), 128, 160), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( cvt_single_to_int32_rm(extractMInt( getParentValue(R2, RSMap), 160, 192), handleImmediateWithSignExtend(Imm8, 8, 8)), concatenateMInt( cvt_single_to_int32_rm(extractMInt( getParentValue(R2, RSMap), 192, 224), handleImmediateWithSignExtend(Imm8, 8, 8)), cvt_single_to_int32_rm(extractMInt( getParentValue(R2, RSMap), 224, 256), handleImmediateWithSignExtend(Imm8, 8, 8)))))))))
)

    </regstate>
    


// vroundps-ymm-ymm-imm8-semantics


// blendpd-xmm-xmm-imm8

  rule <k>
    execinstr (blendpd Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 192) #else extractMInt( getParentValue(R2, RSMap), 128, 192) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 192, 256) #else extractMInt( getParentValue(R2, RSMap), 192, 256) #fi)))
)

    </regstate>
    


// blendpd-xmm-xmm-imm8-semantics


// movw-r16-imm16

  rule <k>
    execinstr (movw Imm16:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), handleImmediateWithSignExtend(Imm16, 16, 16))
)

    </regstate>
    


// movw-r16-imm16-semantics


// sbbl-r32-imm8

  rule <k>
    execinstr (sbbl Imm8:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sbbl-r32-imm8-semantics


// addq-rax-imm32

  rule <k>
    execinstr (addq Imm32:Imm, %rax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 1, 65)

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 60, 61))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32)))), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// addq-rax-imm32-semantics


// btw-r16-imm8

  rule <k>
    execinstr (btw Imm8:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), uvalueMInt(mi(16, svalueMInt(andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 15)))))), 15, 16)

"PF" |-> (undefMInt)

"AF" |-> (undefMInt)

"SF" |-> (undefMInt)

"OF" |-> (undefMInt)
)

    </regstate>
    


// btw-r16-imm8-semantics


// vcmpps-xmm-xmm-xmm-imm8

  rule <k>
    execinstr (vcmpps Imm8:Imm, R2:Xmm, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( cmp_single_pred(extractMInt( getParentValue(R3, RSMap), 128, 160), extractMInt( getParentValue(R2, RSMap), 128, 160), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt eqMInt( cmp_single_pred(extractMInt( getParentValue(R3, RSMap), 160, 192), extractMInt( getParentValue(R2, RSMap), 160, 192), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(32, 4294967295) #else mi(32, 0) #fi), concatenateMInt( (#ifMInt eqMInt( cmp_single_pred(extractMInt( getParentValue(R3, RSMap), 192, 224), extractMInt( getParentValue(R2, RSMap), 192, 224), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(32, 4294967295) #else mi(32, 0) #fi), (#ifMInt eqMInt( cmp_single_pred(extractMInt( getParentValue(R3, RSMap), 224, 256), extractMInt( getParentValue(R2, RSMap), 224, 256), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(1, 1)) #then mi(32, 4294967295) #else mi(32, 0) #fi)))))
)

    </regstate>
    


// vcmpps-xmm-xmm-xmm-imm8-semantics


// extractps-r64-xmm-imm8

  rule <k>
    execinstr (extractps Imm8:Imm, R2:Xmm, R3:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( mi(32, 0), extractMInt( lshrMInt( extractMInt( getParentValue(R2, RSMap), 128, 256), uvalueMInt(shlMInt( concatenateMInt( mi(126, 0), extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 8)), uvalueMInt(mi(128, 5))))), 96, 128))
)

    </regstate>
    


// extractps-r64-xmm-imm8-semantics


// vpblendw-xmm-xmm-xmm-imm8

  rule <k>
    execinstr (vpblendw Imm8:Imm, R2:Xmm, R3:Xmm, R4:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R4) |-> concatenateMInt( mi(128, 0), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 128, 144) #else extractMInt( getParentValue(R2, RSMap), 128, 144) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 144, 160) #else extractMInt( getParentValue(R2, RSMap), 144, 160) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 160, 176) #else extractMInt( getParentValue(R2, RSMap), 160, 176) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 176, 192) #else extractMInt( getParentValue(R2, RSMap), 176, 192) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 192, 208) #else extractMInt( getParentValue(R2, RSMap), 192, 208) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 208, 224) #else extractMInt( getParentValue(R2, RSMap), 208, 224) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 224, 240) #else extractMInt( getParentValue(R2, RSMap), 224, 240) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 0)) #then extractMInt( getParentValue(R3, RSMap), 240, 256) #else extractMInt( getParentValue(R2, RSMap), 240, 256) #fi)))))))))
)

    </regstate>
    


// vpblendw-xmm-xmm-xmm-imm8-semantics


// subw-r16-imm16

  rule <k>
    execinstr (subw Imm16:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 16, 17), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 15, 16), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 14, 15), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 13, 14), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 11, 12), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 10, 11), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 9, 10), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 11, 12), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 12, 13))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 17), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm16, 16, 16))), mi(17, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// subw-r16-imm16-semantics


// sbbl-eax-imm32

  rule <k>
    execinstr (sbbl Imm32:Imm, %eax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( mi(32, 0), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 1, 33))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 28, 29))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(%rax, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sbbl-eax-imm32-semantics


// testl-eax-imm32

  rule <k>
    execinstr (testl Imm32:Imm, %eax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 31, 32)), mi(1, 1)) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 30, 31)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 29, 30)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 28, 29)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 26, 27)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 25, 26)), mi(1, 1))) xorBool eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 24, 25)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( andMInt( extractMInt( getParentValue(%rax, RSMap), 32, 64), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> andMInt( extractMInt( getParentValue(%rax, RSMap), 32, 33), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// testl-eax-imm32-semantics


// cmpl-r32-imm32

  rule <k>
    execinstr (cmpl Imm32:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm32, 32, 32))), mi(33, 1)), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// cmpl-r32-imm32-semantics


// orw-r16-imm16

  rule <k>
    execinstr (orw Imm16:Imm, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), orMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), handleImmediateWithSignExtend(Imm16, 16, 16)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 15, 16)), mi(1, 1)) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 14, 15)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 13, 14)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 12, 13)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 11, 12)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 10, 11)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 9, 10)), mi(1, 1))) xorBool eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 8, 9)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( orMInt( extractMInt( getParentValue(R2, RSMap), 48, 64), handleImmediateWithSignExtend(Imm16, 16, 16)), mi(16, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> orMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), extractMInt( handleImmediateWithSignExtend(Imm16, 16, 16), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// orw-r16-imm16-semantics


// sarl-r32-imm8

  rule <k>
    execinstr (sarl Imm8:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 32))

"CF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 32, 33), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 31, 32), mi(1, 1)) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 25, 26), mi(1, 1))) xorBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 24, 25), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 32), mi(32, 0))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( ashrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 32, 64), mi(1, 0)), uvalueMInt(concatenateMInt( mi(25, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool false) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sarl-r32-imm8-semantics


// sbbq-rax-imm32

  rule <k>
    execinstr (sbbq Imm32:Imm, %rax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 1, 65)

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 64, 65), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 63, 64), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 62, 63), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 61, 62), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 60, 61), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 59, 60), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 58, 59), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 57, 58), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28), extractMInt( getParentValue(%rax, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 60, 61))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 1, 65), mi(64, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(%rax, RSMap), 0, 1), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( mi(64, svalueMInt(handleImmediateWithSignExtend(Imm32, 32, 32))))), mi(65, 1)) #fi), concatenateMInt( mi(1, 0), getParentValue(%rax, RSMap))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sbbq-rax-imm32-semantics


// shrb-rh-imm8

  rule <k>
    execinstr (shrb Imm8:Imm, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 8)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> (#ifMInt ((ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 8)) andBool (undefBool)) orBool ((notBool ugeMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 8))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 8, 9), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("CF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (notBool (((((((eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 7, 8), mi(1, 1)) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 1, 2), mi(1, 1))) xorBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("PF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("AF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"ZF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 8), mi(8, 0))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("ZF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> (#ifMInt (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool eqMInt( extractMInt( lshrMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 48, 56), mi(1, 0)), uvalueMInt(concatenateMInt( mi(1, 0), andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31))))), 0, 1), mi(1, 1))) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("SF", RSMap), mi(1,1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"OF" |-> (#ifMInt ((eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1)) andBool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) orBool ((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 1))) andBool (((notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0))) andBool (undefBool)) orBool ((notBool (notBool eqMInt( andMInt( handleImmediateWithSignExtend(Imm8, 8, 8), mi(8, 31)), mi(8, 0)))) andBool eqMInt(getFlag("OF", RSMap), mi(1,1)))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// shrb-rh-imm8-semantics


// xorl-eax-imm32

  rule <k>
    execinstr (xorl Imm32:Imm, %eax,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
"RAX" |-> concatenateMInt( mi(32, 0), xorMInt( extractMInt( getParentValue(%rax, RSMap), 32, 64), handleImmediateWithSignExtend(Imm32, 32, 32)))

"CF" |-> mi(1, 0)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 63, 64), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 31, 32)), mi(1, 1)) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 62, 63), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 30, 31)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 61, 62), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 29, 30)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 60, 61), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 28, 29)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 59, 60), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 27, 28)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 58, 59), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 26, 27)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 57, 58), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 25, 26)), mi(1, 1))) xorBool eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 56, 57), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 24, 25)), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> (undefMInt)

"ZF" |-> (#ifMInt eqMInt( xorMInt( extractMInt( getParentValue(%rax, RSMap), 32, 64), handleImmediateWithSignExtend(Imm32, 32, 32)), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> xorMInt( extractMInt( getParentValue(%rax, RSMap), 32, 33), extractMInt( handleImmediateWithSignExtend(Imm32, 32, 32), 0, 1))

"OF" |-> mi(1, 0)
)

    </regstate>
    


// xorl-eax-imm32-semantics


// addl-r32-imm8

  rule <k>
    execinstr (addl Imm8:Imm, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( mi(32, 0), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33))

"CF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 32, 33), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 31, 32), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 30, 31), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 29, 30), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 27, 28), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 26, 27), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 25, 26), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 28, 29))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 33), mi(32, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 32, 33), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8))), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( concatenateMInt( mi(1, 0), mi(32, svalueMInt(handleImmediateWithSignExtend(Imm8, 8, 8)))), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 32, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// addl-r32-imm8-semantics


// adcb-rh-imm8

  rule <k>
    execinstr (adcb Imm8:Imm, R2:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 48), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9)), extractMInt( getParentValue(R2, RSMap), 56, 64))

"CF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 0, 1)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 51, 52)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 48, 49), mi(1, 1))) andBool (notBool (eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then addMInt( concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)), mi(9, 1)) #else concatenateMInt( mi(1, 0), handleImmediateWithSignExtend(Imm8, 8, 8)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 48, 56))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// adcb-rh-imm8-semantics


// shufps-xmm-xmm-imm8

  rule <k>
    execinstr (shufps Imm8:Imm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> concatenateMInt( extractMInt( getParentValue(R3, RSMap), 0, 128), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 1, 2), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R2, RSMap), 192, 224) #fi) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 224, 256) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 128, 160) #else extractMInt( getParentValue(R2, RSMap), 192, 224) #fi) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 2, 3), mi(1, 1)) #then extractMInt( getParentValue(R2, RSMap), 160, 192) #else extractMInt( getParentValue(R2, RSMap), 224, 256) #fi) #fi), concatenateMInt( (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 5, 6), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 128, 160) #else extractMInt( getParentValue(R3, RSMap), 192, 224) #fi) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 4, 5), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 160, 192) #else extractMInt( getParentValue(R3, RSMap), 224, 256) #fi) #fi), (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 7, 8), mi(1, 1)) #then (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 128, 160) #else extractMInt( getParentValue(R3, RSMap), 192, 224) #fi) #else (#ifMInt eqMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 6, 7), mi(1, 1)) #then extractMInt( getParentValue(R3, RSMap), 160, 192) #else extractMInt( getParentValue(R3, RSMap), 224, 256) #fi) #fi)))))
)

    </regstate>
    


// shufps-xmm-xmm-imm8-semantics


// sbbb-r8-imm8

  rule <k>
    execinstr (sbbb Imm8:Imm, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> concatenateMInt( extractMInt( getParentValue(R2, RSMap), 0, 56), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9))

"CF" |-> (#ifMInt (notBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 0, 1), mi(1, 1))) #then mi(1, 1) #else mi(1, 0) #fi)

"PF" |-> (#ifMInt (notBool (((((((eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 8, 9), mi(1, 1)) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 7, 8), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 6, 7), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 5, 6), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 3, 4), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 2, 3), mi(1, 1))) xorBool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1)))) #then mi(1, 1) #else mi(1, 0) #fi)

"AF" |-> xorMInt( xorMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 3, 4), extractMInt( getParentValue(R2, RSMap), 59, 60)), extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 4, 5))

"ZF" |-> (#ifMInt eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 9), mi(8, 0)) #then mi(1, 1) #else mi(1, 0) #fi)

"SF" |-> extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2)

"OF" |-> (#ifMInt ((eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( getParentValue(R2, RSMap), 56, 57), mi(1, 1))) andBool (notBool (eqMInt( negMInt( extractMInt( handleImmediateWithSignExtend(Imm8, 8, 8), 0, 1)), mi(1, 1)) ==Bool eqMInt( extractMInt( addMInt( (#ifMInt eqMInt(getFlag("CF", RSMap), mi(1,1)) #then concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))) #else addMInt( concatenateMInt( mi(1, 0), negMInt( handleImmediateWithSignExtend(Imm8, 8, 8))), mi(9, 1)) #fi), concatenateMInt( mi(1, 0), extractMInt( getParentValue(R2, RSMap), 56, 64))), 1, 2), mi(1, 1))))) #then mi(1, 1) #else mi(1, 0) #fi)
)

    </regstate>
    


// sbbb-r8-imm8-semantics


// movl-m32-r32

  context execinstr(movl:Opcode (_:R32, HOLE:Mem, .Operands):Operands) [result(MemOffset)]
  rule <k> 
    execinstr (movl R1:R32,  memOffset( MemOff:MInt ):MemOffset, .Operands) => storeToMemory(getRegisterValue(R1, RSMap), MemOff, 32)
  ...</k>
  <regstate> RSMap </regstate>



/*@
  Push (R): 
  1. ValTostore = (R)
  2. *(RSP-8)  = ValTostore
  3. RSP = RSP - 2
*/  
// pushw-m16

  context execinstr(pushw:Opcode (HOLE:Mem, .Operands):Operands) [result(MemOffset)]
  rule <k> 
    execinstr (pushw memOffset ( MemOff:MInt ):MemOffset, .Operands) =>
      loadFromMemory(MemOff, 16) ~> execinstr (pushw memOffset ( MemOff ), .Operands)
  ...</k>


  rule <k> 
    memLoadValue(MemVal:MInt):MemLoadValue ~> execinstr (pushw memOffset ( MemOff:MInt ):MemOffset, .Operands)
  =>
      storeToMemory(MemVal, 
          subMInt(getRegisterValue(%rsp, RSMap), mi(64, 2)), 
          16)  ~>  
      decRSPInBytes(2)
  ...</k>
  <regstate> RSMap </regstate>


// incl-m32


  context execinstr(incl:Opcode (HOLE:Mem, .Operands):Operands) [result(MemOffset)]

  rule <k>
    execinstr (incl memOffset( MemOff:MInt):MemOffset,  .Operands) => 
      loadFromMemory( MemOff, 32) ~> execinstr (incl memOffset( MemOff), .Operands)
  ...</k>


    rule <k>
      memLoadValue(MemVal:MInt):MemLoadValue ~> execinstr (incl memOffset( MemOff), .Operands)
      =>  storeToMemory(
        extractMInt(concatenateMInt(mi(32, 0), extractMInt(addMInt(mi(33, 1), concatenateMInt(mi(1, 0), MemVal)), 1, 33)), 32, 64), MemOff, 32)                         
    ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "SF" |-> (extractMInt(addMInt(mi(33, 1), concatenateMInt(mi(1, 0), MemVal)), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(32, 1), MemVal), extractMInt(addMInt(mi(33, 1), concatenateMInt(mi(1, 0), MemVal)), 1, 33)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(mi(33, 1), concatenateMInt(mi(1, 0), MemVal)), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(mi(1, 0), extractMInt(MemVal, 0, 1))  andBool   notBool  ( eqMInt(mi(1, 0), extractMInt(addMInt(mi(33, 1), concatenateMInt(mi(1, 0), MemVal)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(mi(33, 1), concatenateMInt(mi(1, 0), MemVal)), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>


// movb-r8-m8

  context execinstr(movb:Opcode (HOLE:Mem, _:R8, .Operands):Operands) [result(MemOffset)]
  rule <k> 
    execinstr (movb memOffset( MemOff:MInt):MemOffset ,  R1:R8, .Operands) => 
      setRegisterValue( loadFromMemory( MemOff, 8), R1)                         
  ...</k>
  <regstate> RSMap </regstate>


// cmpl-r32-m32

  context execinstr(cmpl:Opcode ( HOLE:Mem, _:R32, .Operands):Operands) [result(MemOffset)]

  rule <k>
    execinstr (cmpl memOffset( MemOff:MInt):MemOffset, R2:R32,  .Operands) => 
      loadFromMemory( MemOff, 32) ~> execinstr (cmpl memOffset( MemOff), R2:R32,  .Operands)
  ...</k>

  rule <k>
    memLoadValue(MemVal:MInt):MemLoadValue ~> execinstr (cmpl memOffset( MemOff:MInt):MemOffset, R2:R32,  .Operands) => .
  ...</k>
    <regstate>       
      RSMap:Map => updateMap(RSMap,
       "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), MemVal)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), 0, 1)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), MemVal)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), 0, 1)), mi(17, 65535)), 9, 17))), 0, 1) )
      
       "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), MemVal)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), 1, 2) )
      
       "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(32, -1), MemVal), extractMInt(getParentValue(R2, RSMap), 32, 64)), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), MemVal)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), 1, 33)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
      
       "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), MemVal)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
      
       "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(MemVal, 32, 33)), extractMInt(getParentValue(R2, RSMap), 32, 33))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(MemVal, 32, 33)), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), MemVal)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )
      
       "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), MemVal)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )
      )
    </regstate>


// movq-m64-imm64

  context execinstr(movq:Opcode (_:Imm, HOLE:Mem, .Operands):Operands) [result(MemOffset)]

  rule <k> 
    execinstr(movq I1_64:Imm, memOffset( MemOff:MInt ):MemOffset, .Operands) =>
      storeToMemory(handleImmediateWithSignExtend(I1_64, 64, 64 ), MemOff, 64)
  ...</k>
  


// movq-m64-r64

  context execinstr(movq:Opcode (_:R64, HOLE:Mem, .Operands):Operands) [result(MemOffset)]
  rule <k> 
    execinstr (movq R1:R64,  memOffset( MemOff:MInt ):MemOffset, .Operands) => 
      storeToMemory(getRegisterValue(R1, RSMap), MemOff, 64)
  ...</k>
  <regstate> RSMap </regstate>


/*@
  Pop (R): 
  1. RSP = RSP + 8
  2. ValTostore = *(RSP - 8)
  3. *R =  ValTostore
*/  
// popq-m64


  rule <k> 
    execinstr (popq M64:Mem, .Operands) =>
      incRSPInBytes(8) ~> 
      loadFromMemory(getRegisterValue(%rsp, RSMap), 64) ~>
      execinstr (popq M64, .Operands)
  ...</k>
  <regstate> RSMap </regstate>

  rule <k> 
    memLoadValue(MemVal:MInt):MemLoadValue ~> execinstr (popq M64:Mem, .Operands) =>
      evaluateMemOffset(M64) ~> execinstr (popq M64:Mem, MemVal, .Operands)                          
  ...</k>

  rule <k> 
    evaluateMemOffset( memOffset(MemOff:MInt):MemOffset ) ~> execinstr (popq _:Mem, MemVal:MInt, .Operands) => storeToMemory(MemVal, MemOff, 64) 
  ...</k>


// cmpl-m32-imm32

  context execinstr(cmpl:Opcode ( _:Imm, HOLE:Mem, .Operands):Operands) [result(MemOffset)]


  rule <k>
    execinstr (cmpl I:Imm, memOffset( MemOff:MInt):MemOffset,  .Operands) => 
      loadFromMemory( MemOff, 32) ~> execinstr (cmpl I:Imm, memOffset( MemOff),  .Operands)
  ...</k>

         
  rule <k>
    memLoadValue(MemVal:MInt):MemLoadValue ~> execinstr (cmpl I:Imm, memOffset( MemOff:MInt):MemOffset,  .Operands) 
      => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), handleImmediateWithSignExtend(I, 32, 32))), concatenateMInt(mi(1, 0), MemVal)), mi(33, 1)), 0, 1)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), handleImmediateWithSignExtend(I, 32, 32))), concatenateMInt(mi(1, 0), MemVal)), mi(33, 1)), 0, 1)), mi(17, 65535)), 9, 17))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), handleImmediateWithSignExtend(I, 32, 32))), concatenateMInt(mi(1, 0), MemVal)), mi(33, 1)), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(32, -1), handleImmediateWithSignExtend(I, 32, 32)), MemVal), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), handleImmediateWithSignExtend(I, 32, 32))), concatenateMInt(mi(1, 0), MemVal)), mi(33, 1)), 1, 33)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), handleImmediateWithSignExtend(I, 32, 32))), concatenateMInt(mi(1, 0), MemVal)), mi(33, 1)), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(handleImmediateWithSignExtend(I, 32, 32), 0, 1)), extractMInt(MemVal, 0, 1))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(handleImmediateWithSignExtend(I, 32, 32), 0, 1)), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), handleImmediateWithSignExtend(I, 32, 32))), concatenateMInt(mi(1, 0), MemVal)), mi(33, 1)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), handleImmediateWithSignExtend(I, 32, 32))), concatenateMInt(mi(1, 0), MemVal)), mi(33, 1)), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>


// cmpl-r32-r32-semantics

/*
TargetInstr:
cmpl %ecx, %ebx
RWSet:
maybe read:{ %ecx %ebx }
must read:{ %ecx %ebx }
maybe write:{ %cf %pf %af %zf %sf %of }
must write:{ %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:subl %ecx, %ebx  #  1     0    2      OPC=subl_r32_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmpl %ecx, %ebx

  maybe read:      { %ecx %ebx }
  must read:       { %ecx %ebx }
  maybe write:     { %cf %pf %af %zf %sf %of }
  must write:      { %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%cf    : (((0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[32:32] = 0x1₁ ? 0x0₉ : 0xff₉) + ((0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[32:32] = 0x1₁ ? 0x0₉ : 0xff₉))[8:8] = 0x1₁
%pf    : !((0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[7:7] = 0x1₁)
%af    : (0x0₁ ∘ (%rcx[3:0] ⊕ 0xf₄) + 0x0₁ ∘ %rbx[3:0])[4:4] = 0x1₁
%zf    : (0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[31:0] = 0x0₃₂
%sf    : (0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[31:31] = 0x1₁
%of    : ((%rcx[31:31] ⊕ 0x1₁) = 0x1₁ ↔ %rbx[31:31] = 0x1₁) ∧ !((%rcx[31:31] ⊕ 0x1₁) = 0x1₁ ↔ (0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[31:31] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/


/*@
  Push (R): 
  1. ValTostore = *(R)
  2. *(RSP-8)  = ValTostore
  3. RSP = RSP - 8
*/  
// pushq-m64

  context execinstr(pushq:Opcode (HOLE:Mem, .Operands):Operands) [result(MemOffset)]
  rule <k> 
    execinstr (pushq memOffset ( MemOff:MInt ):MemOffset, .Operands) =>
      loadFromMemory(MemOff, 64) ~> execinstr (pushq memOffset ( MemOff ), .Operands)
  ...</k>


  rule <k> 
    memLoadValue(MemVal:MInt):MemLoadValue ~> execinstr (pushq memOffset ( MemOff:MInt ):MemOffset, .Operands)
  =>
      storeToMemory(MemVal, 
          subMInt(getRegisterValue(%rsp, RSMap), mi(64, 8)), 
          64)  ~>  
      decRSPInBytes(8)
  ...</k>
  <regstate> RSMap </regstate>


/*@
  Pop (R): 
  1. RSP = RSP + 2
  2. ValTostore = *(RSP - 2)
  3. *R =  ValTostore
*/  
// popq-m64


  rule <k> 
    execinstr (popw M16:Mem, .Operands) =>
      incRSPInBytes(2) ~> 
      loadFromMemory(getRegisterValue(%rsp, RSMap), 16) ~>
      execinstr (popw M16, .Operands)
  ...</k>
  <regstate> RSMap </regstate>

  rule <k> 
    memLoadValue(MemVal:MInt):MemLoadValue ~> execinstr (popw M16:Mem, .Operands) =>
      evaluateMemOffset(M16) ~> execinstr (popw M16:Mem, MemVal, .Operands)                          
  ...</k>

  rule <k> 
    evaluateMemOffset( memOffset(MemOff:MInt):MemOffset ) ~> execinstr (popw _:Mem, MemVal:MInt, .Operands) => storeToMemory(MemVal, MemOff, 16) 
  ...</k>




// movq-m64-label

  rule <k> 
    execinstr (movq:Opcode  $ (LabelId):X86Id,  M:Mem, .Operands) => 
      execinstr (movq $ uvalueMInt(Target),  M:Mem, .Operands)    
  ...</k>
    <functargets>...  LabelId:X86Id |-> Target:MInt  ...</functargets>


// cmpl-m32-r32

  context execinstr(cmpl:Opcode (R1:R32,  HOLE:Mem, .Operands):Operands) [result(MemOffset)]

  rule <k>
    execinstr (cmpl R1:R32, memOffset( MemOff:MInt):MemOffset,  .Operands) => 
      loadFromMemory( MemOff, 32) ~> execinstr (cmpl R1:R32, memOffset( MemOff), .Operands)
  ...</k>


  rule <k>
    memLoadValue(MemVal:MInt):MemLoadValue ~> 
      execinstr (cmpl R1:R32, memOffset( MemOff:MInt):MemOffset, .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(getParentValue(R1, RSMap), 32, 64))), concatenateMInt(mi(1, 0), MemVal)), mi(33, 1)), 0, 1)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(getParentValue(R1, RSMap), 32, 64))), concatenateMInt(mi(1, 0), MemVal)), mi(33, 1)), 0, 1)), mi(17, 65535)), 9, 17))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(getParentValue(R1, RSMap), 32, 64))), concatenateMInt(mi(1, 0), MemVal)), mi(33, 1)), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(32, -1), extractMInt(getParentValue(R1, RSMap), 32, 64)), MemVal), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(getParentValue(R1, RSMap), 32, 64))), concatenateMInt(mi(1, 0), MemVal)), mi(33, 1)), 1, 33)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(getParentValue(R1, RSMap), 32, 64))), concatenateMInt(mi(1, 0), MemVal)), mi(33, 1)), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(getParentValue(R1, RSMap), 32, 33)), extractMInt(MemVal, 0, 1))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(getParentValue(R1, RSMap), 32, 33)), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(getParentValue(R1, RSMap), 32, 64))), concatenateMInt(mi(1, 0), MemVal)), mi(33, 1)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), extractMInt(getParentValue(R1, RSMap), 32, 64))), concatenateMInt(mi(1, 0), MemVal)), mi(33, 1)), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>


// cmpl-r32-r32-semantics

/*
TargetInstr:
cmpl %ecx, %ebx
RWSet:
maybe read:{ %ecx %ebx }
must read:{ %ecx %ebx }
maybe write:{ %cf %pf %af %zf %sf %of }
must write:{ %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:subl %ecx, %ebx  #  1     0    2      OPC=subl_r32_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmpl %ecx, %ebx

  maybe read:      { %ecx %ebx }
  must read:       { %ecx %ebx }
  maybe write:     { %cf %pf %af %zf %sf %of }
  must write:      { %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%cf    : (((0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[32:32] = 0x1₁ ? 0x0₉ : 0xff₉) + ((0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[32:32] = 0x1₁ ? 0x0₉ : 0xff₉))[8:8] = 0x1₁
%pf    : !((0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[0:0] = 0x1₁ ⊕ (0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[1:1] = 0x1₁ ⊕ (0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[2:2] = 0x1₁ ⊕ (0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[3:3] = 0x1₁ ⊕ (0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[4:4] = 0x1₁ ⊕ (0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[5:5] = 0x1₁ ⊕ (0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[6:6] = 0x1₁ ⊕ (0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[7:7] = 0x1₁)
%af    : (0x0₁ ∘ (%rcx[3:0] ⊕ 0xf₄) + 0x0₁ ∘ %rbx[3:0])[4:4] = 0x1₁
%zf    : (0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[31:0] = 0x0₃₂
%sf    : (0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[31:31] = 0x1₁
%of    : ((%rcx[31:31] ⊕ 0x1₁) = 0x1₁ ↔ %rbx[31:31] = 0x1₁) ∧ !((%rcx[31:31] ⊕ 0x1₁) = 0x1₁ ↔ (0x0₁ ∘ (%rcx[31:0] ⊕ 0xffffffff₃₂) + 0x1₃₃ + 0x0₁ ∘ %rbx[31:0])[31:31] = 0x1₁)

sigfpe  : sigfpe
sigbus  : sigbus
sigsegv : sigsegv

*/

// movl-r32-m32

  context execinstr(movl:Opcode ( HOLE:Mem, _:R32, .Operands):Operands) [result(MemOffset)]
  rule <k>
    execinstr (movl memOffset( MemOff:MInt):MemOffset, R1:R32, .Operands) => 
      setRegisterValue( loadFromMemory( MemOff, 32), R1)                                   
  ...</k>
    <regstate> RSMap:Map </regstate>


// leaq-r64-m64

  context execinstr(leaq:Opcode (HOLE:Mem, _:R64, .Operands):Operands) [result(MemOffset)]

  rule <k> 
    execinstr (leaq memOffset( MemOff:MInt ):MemOffset,  R2:R64, .Operands) => setRegisterValue( MemOff, R2)
  ...</k>


// movl-m32-imm32

  context execinstr(movl:Opcode (_:Imm, HOLE:Mem, .Operands):Operands) [result(MemOffset)]
  rule <k> 
    execinstr(movl IMM:Imm , memOffset( MemOff ):MemOffset , .Operands) => storeToMemory(handleImmediateWithSignExtend(IMM, 32, 32), MemOff,   32)
  ...</k>
  <regstate> RSMap </regstate>


// subl-r32-m32

  context execinstr(subl:Opcode ( HOLE:Mem, _:R32, .Operands):Operands) [result(MemOffset)]

  rule <k>
    execinstr (subl memOffset( MemOff:MInt):MemOffset, R2:R32,  .Operands) => 
      loadFromMemory( MemOff, 32) ~> execinstr (subl memOffset( MemOff), R2:R32,  .Operands)  
  ...</k>
      <regstate> RSMap:Map </regstate>

  rule <k>
    memLoadValue(MemVal:MInt):MemLoadValue ~> execinstr (subl memOffset( MemOff:MInt):MemOffset, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), MemVal)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), 0, 1)), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), MemVal)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), 0, 1)), mi(17, 65535)), 9, 17))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), MemVal)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(mi(32, -1), MemVal), extractMInt(getParentValue(R2, RSMap), 32, 64)), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), MemVal)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), 1, 33)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), MemVal)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(xorMInt(mi(1, 1), extractMInt(MemVal, 32, 33)), extractMInt(getParentValue(R2, RSMap), 32, 33))  andBool   notBool  ( eqMInt(xorMInt(mi(1, 1), extractMInt(MemVal, 32, 33)), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), MemVal)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(mi(32, 0), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), MemVal)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), 1, 33)) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), xorMInt(mi(32, -1), MemVal)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 32, 64))), mi(33, 1)), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>


// movq-r64-m64

  context execinstr(movq:Opcode (HOLE:Mem, _:R64, .Operands):Operands) [result(MemOffset)]

  rule <k> 
    execinstr (movq memOffset( MemOff:MInt ):MemOffset,  R2:R64, .Operands) => 
      loadFromMemory(MemOff, 64)  ~> execinstr (movq memOffset( MemOff ),  R2, .Operands)
  ...</k>

  rule <k> 
   memLoadValue (MemVal:MInt) ~> execinstr (movq memOffset ( MemOff:MInt ):MemOffset,  R2:R64, .Operands) => setRegisterValue( MemVal, R2)                         
  ...</k>
  <regstate> RSMap </regstate>


// addl-m32-imm

  context execinstr(addl:Opcode (_:Imm,  HOLE:Mem, .Operands):Operands) [result(MemOffset)]

  rule <k>
    execinstr (addl I:Imm, memOffset( MemOff:MInt):MemOffset,  .Operands) => 
      loadFromMemory( MemOff, 32) ~> execinstr (addl I, memOffset( MemOff), .Operands)                 
  ...</k>

  rule <k>
    memLoadValue(MemVal:MInt):MemLoadValue ~> execinstr (addl I:Imm, memOffset( MemOff:MInt):MemOffset, .Operands) => 
      storeToMemory(
          extractMInt(
            (concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), MemVal), concatenateMInt(mi(1, 0), handleImmediateWithSignExtend(I, 32, 32))), 1, 33)) ), 
            32, 64),
          MemOff, 32)
  ...</k>
  
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), MemVal), concatenateMInt(mi(1, 0), handleImmediateWithSignExtend(I, 32, 32))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), MemVal), concatenateMInt(mi(1, 0), handleImmediateWithSignExtend(I, 32, 32))), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MemVal, handleImmediateWithSignExtend(I, 32, 32)), extractMInt(addMInt(concatenateMInt(mi(1, 0), MemVal), concatenateMInt(mi(1, 0), handleImmediateWithSignExtend(I, 32, 32))), 1, 33)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), MemVal), concatenateMInt(mi(1, 0), handleImmediateWithSignExtend(I, 32, 32))), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MemVal, 0, 1), extractMInt(handleImmediateWithSignExtend(I, 32, 32), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(MemVal, 0, 1), extractMInt(addMInt(concatenateMInt(mi(1, 0), MemVal), concatenateMInt(mi(1, 0), handleImmediateWithSignExtend(I, 32, 32))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), MemVal), concatenateMInt(mi(1, 0), handleImmediateWithSignExtend(I, 32, 32))), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>



// leaq-r32-m32

  context execinstr(leal:Opcode (HOLE:Mem, _:R32, .Operands):Operands) [result(MemOffset)]

  rule <k> 
    execinstr (leal memOffset( MemOff:MInt ):MemOffset,  R2:R32, .Operands) => .
  ...</k>
    <regstate>
      RSMap:Map => updateMap(RSMap, 
          convToRegKeys(R2) |-> concatenateMInt(mi(32, 0), extractMInt(MemOff, 32, 64)))
    </regstate>



// movsbl-r32-m8

  context execinstr(movsbl:Opcode (HOLE:Mem, _:R32, .Operands):Operands)  [result(MemOffset)]

  rule <k> execinstr(movsbl:Opcode memOffset(MemOff:MInt):MemOffset, R2:R32, .Operands) => 
    loadFromMemory( MemOff, 8) ~> execinstr(movsbl memOffset(MemOff), R2, .Operands)
  ...</k>

  rule <k>
    memLoadValue (MemVal:MInt) ~> execinstr( movsbl memOffset(MemOff:MInt):MemOffset, R2:R32, .Operands) =>
      setRegisterValue( mi(32, svalueMInt(MemVal)), R2)
  ...</k>


// addl-m32-r32

  context execinstr(addl:Opcode (_:R32,  HOLE:Mem, .Operands):Operands) [result(MemOffset)]

  rule <k>
    execinstr (addl R1:R32, memOffset( MemOff:MInt):MemOffset,  .Operands) => 
      loadFromMemory( MemOff, 32) ~> execinstr (addl R1, memOffset( MemOff), .Operands)                 
  ...</k>

  rule <k>
    memLoadValue(MemVal:MInt):MemLoadValue ~> execinstr (addl R1:R32, memOffset( MemOff:MInt):MemOffset, .Operands) => 
      storeToMemory(
          extractMInt(
            (concatenateMInt(mi(32, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), MemVal), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 1, 33)) ), 
            32, 64),
          MemOff, 32)
  ...</k>
  
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), MemVal), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), MemVal), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MemVal, extractMInt(getParentValue(R1, RSMap), 32, 64)), extractMInt(addMInt(concatenateMInt(mi(1, 0), MemVal), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 1, 33)), 4), mi(32, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), MemVal), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 25, 33), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(MemVal, 0, 1), extractMInt(getParentValue(R1, RSMap), 32, 33))  andBool   notBool  ( eqMInt(extractMInt(MemVal, 0, 1), extractMInt(addMInt(concatenateMInt(mi(1, 0), MemVal), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), MemVal), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 32, 64))), 1, 33), mi(32, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>



// pushw-r16

  rule <k> 
    execinstr (pushw R1:R16, .Operands) =>
      storeToMemory(
          getRegisterValue(R1, RSMap), 
          subMInt(getRegisterValue(%rsp, RSMap), mi(64, 2)),
          16) ~>    
      decRSPInBytes(2)
  ...</k>
  <regstate> RSMap </regstate>



// retq

  rule <k> 
    execinstr (ret .Operands) => 
    incRSPInBytes(8) ~>
    loadFromMemory(getRegisterValue(%rsp, RSMap), 64)
    ~> execinstr(ret .Operands)
  ...</k>
    <regstate> RSMap </regstate>


  rule <k> 
    memLoadValue(MemVal:MInt):MemLoadValue ~> execinstr (ret .Operands) =>  .
  ...</k>
      <regstate>... "RIP" |-> ( PC => MemVal)  ...</regstate>

// jge-label

  rule <k> 
    execinstr (jge LabelId:X86Id, .Operands) => .
  ...</k>
      <regstate> RSMap => updateMap(RSMap, ("RIP" |-> Target))
      </regstate>
      <functargets>... LabelId |-> Target  ...</functargets>
        requires  eqMInt({RSMap["SF"]}:>MInt, {RSMap["OF"]}:>MInt)

  rule <k> 
    execinstr (jge LabelId:X86Id, .Operands) => .
  ...</k>
      <regstate> RSMap:Map </regstate> 
        requires  notBool eqMInt({RSMap["SF"]}:>MInt, {RSMap["OF"]}:>MInt)



// jmpq-label

  rule <k> 
    execinstr (jmp LabelId:X86Id, .Operands) => .
  ...</k>
      <regstate> RSMap => updateMap(RSMap, ("RIP" |-> Target))
      </regstate>
      <functargets>... LabelId |-> Target  ...</functargets>


// jl-label

  rule <k> 
    execinstr (jl LabelId:X86Id, .Operands) => .
  ...</k>
      <regstate> RSMap => updateMap(RSMap, ("RIP" |-> Target))
      </regstate>
      <functargets>... LabelId |-> Target  ...</functargets>
        requires notBool eqMInt({RSMap["SF"]}:>MInt, {RSMap["OF"]}:>MInt)
                
  rule <k> 
    execinstr (jl LabelId:X86Id, .Operands) => .
  ...</k>
      <regstate> RSMap:Map </regstate> 
        requires eqMInt({RSMap["SF"]}:>MInt, {RSMap["OF"]}:>MInt)


// popw-r16

  rule <k> 
    execinstr (popw R1:R16, .Operands) =>
      incRSPInBytes(2) ~>
      setRegisterValue(
          loadFromMemory(getRegisterValue(%rsp, RSMap), 16), 
          R1) 
  ...</k>
  <regstate> RSMap </regstate>



// je-label

  rule <k> 
    execinstr (je LabelId:X86Id, .Operands) => .
  ...</k>
      <regstate> RSMap => updateMap(RSMap, ("RIP" |-> Target))
      </regstate>
      <functargets>... LabelId |-> Target  ...</functargets>
        requires eqMInt({RSMap["ZF"]}:>MInt, mi(1, 1))

  rule <k> 
    execinstr (je LabelId:X86Id, .Operands) => .
  ...</k>
      <regstate> RSMap:Map </regstate> 
        requires notBool eqMInt({RSMap["ZF"]}:>MInt, mi(1, 1))



// callq-m64

  context execinstr(call:Opcode (HOLE:Mem, .Operands):Operands) [result(MemOffset)]

  rule <k> 
    execinstr (call memOffset(MemOff:MInt):MemOffset, .Operands) => 
      loadFromMemory(MemOff, 64) ~> execinstr (call memOffset ( MemOff ), .Operands)
  ...</k>

  rule <k> 
    memLoadValue(MemVal:MInt):MemLoadValue ~> execinstr (call memOffset(MemOff:MInt):MemOffset, .Operands) => 
      storeToMemory({RSMap["RIP"]}:>MInt, subMInt(getRegisterValue(%rsp, RSMap), mi(64, 8)), 64)  
      ~>  decRSPInBytes(8)
  ...</k>
      <regstate> RSMap => updateMap(RSMap, ("RIP" |-> MemVal))</regstate>



// jmpq-m64

  context execinstr(jmp:Opcode (HOLE:Mem, .Operands):Operands) [result(MemOffset)]

  rule <k> 
    execinstr (jmp memOffset(MemOff:MInt):MemOffset, .Operands) => 
      loadFromMemory(MemOff, 64) ~> execinstr (jmp memOffset ( MemOff ), .Operands)
  ...</k>

  rule <k> 
    memLoadValue(MemVal:MInt):MemLoadValue ~> execinstr (jmp memOffset(MemOff:MInt):MemOffset, .Operands) => .
  ...</k>
      <regstate> RSMap => updateMap(RSMap, ("RIP" |-> MemVal))</regstate>



/*@
  Push R: 
  1. ValTostore = R
  2. *(RSP-8)  = ValTostore
  3. RSP = RSP - 8
*/  
// pushq-r64

  rule <k> 
    execinstr (pushq R1:R64, .Operands) =>
      storeToMemory(
          getRegisterValue(R1, RSMap), 
          subMInt(getRegisterValue(%rsp, RSMap), mi(64, 8)), 
          64)  ~>  
      decRSPInBytes(8)
  ...</k>
  <regstate> RSMap </regstate>



// retq

  rule <k> 
    execinstr (leave .Operands) => 
      execinstr(movq %rbp, %rsp, .Operands) ~> 
      execinstr(popq %rbp, .Operands)
  ...</k>



// callq-label

  rule <k> 
    execinstr (call LabelId:X86Id, .Operands) => 
      storeToMemory({RSMap["RIP"]}:>MInt, subMInt(getRegisterValue(%rsp, RSMap), mi(64, 8)), 64)  
      ~>  decRSPInBytes(8)
  ...</k>
      <regstate> RSMap => updateMap(RSMap, ("RIP" |-> Target))
      </regstate>
      <functargets>... LabelId |-> Target  ...</functargets>

// jle-label

  rule <k> 
    execinstr (jle LabelId:X86Id, .Operands) => .
  ...</k>
      <regstate> RSMap => updateMap(RSMap, ("RIP" |-> Target))
      </regstate>
      <functargets>... LabelId |-> Target  ...</functargets>
        requires  eqMInt({RSMap["ZF"]}:>MInt, mi(1, 1)) 
                    orBool 
                  (notBool eqMInt({RSMap["SF"]}:>MInt, {RSMap["OF"]}:>MInt))

  rule <k> 
    execinstr (jle LabelId:X86Id, .Operands) => .
  ...</k>
      <regstate> RSMap:Map </regstate> 
        requires  notBool eqMInt({RSMap["ZF"]}:>MInt, mi(1, 1)) 
                    andBool 
                  eqMInt({RSMap["SF"]}:>MInt, {RSMap["OF"]}:>MInt)


/*@
  Pop R: 
  1. RSP = RSP + 8
  2. ValTostore = *(RSP - 8)
  3. R =  ValTostore)
*/  
// popq-r64

  rule <k> 
    execinstr (popq R1:R64, .Operands) =>
      incRSPInBytes(8) ~>
      setRegisterValue(
          loadFromMemory(getRegisterValue(%rsp, RSMap), 64), 
          R1) 
  ...</k>
  <regstate> RSMap </regstate>



// jne-label

  rule <k> 
    execinstr (jne LabelId:X86Id, .Operands) => .
  ...</k>
      <regstate> RSMap => updateMap(RSMap, ("RIP" |-> Target))
      </regstate>
      <functargets>... LabelId |-> Target  ...</functargets>
        requires eqMInt({RSMap["ZF"]}:>MInt, mi(1, 0))

  rule <k> 
    execinstr (jne LabelId:X86Id, .Operands) => .
  ...</k>
      <regstate> RSMap:Map </regstate> 
        requires notBool eqMInt({RSMap["ZF"]}:>MInt, mi(1, 0))

// jg-label

  rule <k> 
    execinstr (jg LabelId:X86Id, .Operands) => .
  ...</k>
      <regstate> RSMap => updateMap(RSMap, ("RIP" |-> Target))
      </regstate>
      <functargets>... LabelId |-> Target  ...</functargets>
        requires  eqMInt({RSMap["ZF"]}:>MInt, mi(1, 0)) 
                    andBool 
                  eqMInt({RSMap["SF"]}:>MInt, {RSMap["OF"]}:>MInt)

  rule <k> 
    execinstr (jg LabelId:X86Id, .Operands) => .
  ...</k>
      <regstate> RSMap:Map </regstate> 
        requires  notBool eqMInt({RSMap["ZF"]}:>MInt, mi(1, 0)) 
                    orBool 
                  notBool eqMInt({RSMap["SF"]}:>MInt, {RSMap["OF"]}:>MInt)




// jmpq-r64

  rule <k> 
    execinstr (jmp R1:R64, .Operands) => .
  ...</k>
      <regstate> RSMap => updateMap(RSMap, ("RIP" |-> getRegisterValue(R1, RSMap)))</regstate>




// callq-r64

  rule <k> 
    execinstr (call R1:R64, .Operands) => 
      storeToMemory({RSMap["RIP"]}:>MInt, subMInt(getRegisterValue(%rsp, RSMap), mi(64, 8)), 64)  
      ~>  decRSPInBytes(8)
  ...</k>
      <regstate> RSMap => updateMap(RSMap, ("RIP" |-> getRegisterValue(R1, RSMap)))</regstate>

endmodule