// Autogenerated using stratification.
requires "x86-configuration.k"

module ANDNQ-R64-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (andnq R1:R64, R2:R64, R3:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )

 "SF" |-> (xorMInt(extractMInt(getParentValue(R2, RSMap), 0, 1), orMInt(extractMInt(getParentValue(R2, RSMap), 0, 1), extractMInt(getParentValue(R1, RSMap), 0, 1))) )

 "AF" |-> (undef)

 "PF" |-> (undef)

 "OF" |-> (mi(1, 0) )

convToRegKeys(R3) |-> (xorMInt(getParentValue(R2, RSMap), orMInt(getParentValue(R2, RSMap), getParentValue(R1, RSMap))) )

 "ZF" |-> ((#ifMInt (eqMInt(xorMInt(getParentValue(R2, RSMap), orMInt(getParentValue(R2, RSMap), getParentValue(R1, RSMap))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module ANDNQ-R64-R64-R64-SEMANTICS
  imports ANDNQ-R64-R64-R64
endmodule
/*
TargetInstr:
andnq %rdx, %rcx, %rbx
RWSet:
maybe read:{ %rcx %rdx }
must read:{ %rcx %rdx }
maybe write:{ %rbx %cf %zf %sf %of }
must write:{ %rbx %cf %zf %sf %of }
maybe undef:{ %pf %af }
must undef:{ %pf %af }
required flags:{ bmi1 }

Circuit:
circuit:orq %rcx, %rdx   #  1     0    3      OPC=orq_r64_r64
circuit:xorq %rcx, %rdx  #  2     0x3  3      OPC=xorq_r64_r64
circuit:movq %rdx, %rbx  #  3     0x6  3      OPC=movq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

andnq %rdx, %rcx, %rbx

  maybe read:      { %rcx %rdx }
  must read:       { %rcx %rdx }
  maybe write:     { %rbx %cf %zf %sf %of }
  must write:      { %rbx %cf %zf %sf %of }
  maybe undef:     { %pf %af }
  must undef:      { %pf %af }
  required flags:  { bmi1 }

Circuits:

%rbx   : (^ (| <%rdx|64> <%rcx|64>) <%rcx|64>)

%cf    : FALSE
%zf    : (== (^ (| <%rdx|64> <%rcx|64>) <%rcx|64>) <0x0|64>)
%sf    : (== (^ (| <%rdx|64>[63:63] <%rcx|64>[63:63]) <%rcx|64>[63:63]) <0x1|1>)
%of    : FALSE

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/