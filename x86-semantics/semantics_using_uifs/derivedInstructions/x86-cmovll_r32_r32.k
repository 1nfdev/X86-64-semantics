// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVLL-R32-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovll R1:R32, R2:R32,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ((#ifMInt (eqMInt(xorMInt(xorMInt(concatenateMInt(mi(7, 0), getFlag("SF", RSMap)), concatenateMInt(mi(7, 0), getFlag("OF", RSMap))), mi(8, 1)), mi(8, 0)) ) #then ( concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64)) ) #else ( concatenateMInt(mi(32, 0), extractMInt(getParentValue(R2, RSMap), 32, 64)) ) #fi)  )


)

    </regstate>
endmodule

module CMOVLL-R32-R32-SEMANTICS
  imports CMOVLL-R32-R32
endmodule
/*
TargetInstr:
cmovll %ecx, %ebx
RWSet:
maybe read:{ %ecx %sf %of }
must read:{ %ecx %sf %of }
maybe write:{ %rbx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:vpxor %xmm2, %xmm2, %xmm1           #  1     0     4      OPC=vpxor_xmm_xmm_xmm
circuit:callq .move_byte_25_of_ymm1_to_r8b  #  2     0x4   5      OPC=callq_label
circuit:setnl %r14b                         #  3     0x9   4      OPC=setnl_r8
circuit:xaddb %r14b, %r8b                   #  4     0xd   4      OPC=xaddb_r8_r8
circuit:cmovel %ecx, %ebx                   #  5     0x11  3      OPC=cmovel_r32_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovll %ecx, %ebx

  maybe read:      { %ecx %sf %of }
  must read:       { %ecx %sf %of }
  maybe write:     { %rbx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

Circuits:

%rbx   : (concat <0x0|32> (if (== (^ <0x1|8> (^ (if <%of> then <0x1|8> else <0x0|8>) (if <%sf> then <0x1|8> else <0x0|8>))) <0x0|8>) then <%rcx|64>[31:0] else <%rbx|64>[31:0]))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/