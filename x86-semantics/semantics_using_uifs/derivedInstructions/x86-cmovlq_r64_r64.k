// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVLQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovlq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ((#ifMInt (eqMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 48, 64)), concatenateMInt(mi(1, 0), xorMInt(mi(16, 65535), extractMInt(getParentValue(R1, RSMap), 48, 64)))), concatenateMInt(mi(16, 0), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), xorMInt(xorMInt(getFlag("SF", RSMap), getFlag("OF", RSMap)), mi(1, 1))), mi(17, 65535)), 9, 17)), concatenateMInt(mi(1, 0), extractMInt(addMInt(concatenateMInt(mi(16, 0), xorMInt(xorMInt(getFlag("SF", RSMap), getFlag("OF", RSMap)), mi(1, 1))), mi(17, 65535)), 9, 17))), 0, 1))), 1, 17), mi(16, 0)) ) #then ( getParentValue(R1, RSMap) ) #else ( getParentValue(R2, RSMap) ) #fi)  )


)

    </regstate>
endmodule

module CMOVLQ-R64-R64-SEMANTICS
  imports CMOVLQ-R64-R64
endmodule
/*
TargetInstr:
cmovlq %rcx, %rbx
RWSet:
maybe read:{ %rcx %sf %of }
must read:{ %rcx %sf %of }
maybe write:{ %rbx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:setnl %al           #  1     0    3      OPC=setnl_r8
circuit:sarb $0x1, %al      #  2     0x3  2      OPC=sarb_r8_one
circuit:cmovnbq %rcx, %rbx  #  3     0x5  4      OPC=cmovnbq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovlq %rcx, %rbx

  maybe read:      { %rcx %sf %of }
  must read:       { %rcx %sf %of }
  maybe write:     { %rbx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

Circuits:

%rbx   : (if (== (plus (if (== (plus (if (or (and TRUE (== (s_shr (concat (sign-extend-64 (^ <0x1|8> (^ (if <%of> then <0x1|8> else <0x0|8>) (if <%sf> then <0x1|8> else <0x0|8>)))) <0x0|1>) (concat <0x0|57> <0x1|8>))[0:0] <0x1|1>)) FALSE) then <0x0|9> else <0xff|9>) (if (or (and TRUE (== (s_shr (concat (sign-extend-64 (^ <0x1|8> (^ (if <%of> then <0x1|8> else <0x0|8>) (if <%sf> then <0x1|8> else <0x0|8>)))) <0x0|1>) (concat <0x0|57> <0x1|8>))[0:0] <0x1|1>)) FALSE) then <0x0|9> else <0xff|9>))[8:8] <0x1|1>) then (plus (concat <0x0|1> <%rcx|64>[15:0]) <0x1|17>) else (concat <0x0|1> <%rcx|64>[15:0])) (concat <0x0|1> (^ <%rcx|64>[15:0] <0xffff|16>)))[15:0] <0x0|16>) then <%rcx|64> else <%rbx|64>)

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/