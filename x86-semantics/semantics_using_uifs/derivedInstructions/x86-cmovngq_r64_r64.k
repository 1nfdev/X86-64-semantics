// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVNGQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovngq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ((#ifMInt (eqMInt(xorMInt((#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1, 0)) ) #then ( xorMInt(xorMInt(concatenateMInt(mi(7, 0), getFlag("SF", RSMap)), concatenateMInt(mi(7, 0), getFlag("OF", RSMap))), mi(8, 1)) ) #else ( mi(8, 0) ) #fi) , mi(8, 0)), mi(8, 0)) ) #then ( getParentValue(R1, RSMap) ) #else ( getParentValue(R2, RSMap) ) #fi)  )


)

    </regstate>
endmodule

module CMOVNGQ-R64-R64-SEMANTICS
  imports CMOVNGQ-R64-R64
endmodule
/*
TargetInstr:
cmovngq %rcx, %rbx
RWSet:
maybe read:{ %rcx %zf %sf %of }
must read:{ %rcx %zf %sf %of }
maybe write:{ %rbx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:cmovleq %rcx, %rbx  #  1     0    4      OPC=cmovleq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovngq %rcx, %rbx

  maybe read:      { %rcx %zf %sf %of }
  must read:       { %rcx %zf %sf %of }
  maybe write:     { %rbx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

Circuits:

%rbx   : (if (== (plus (if (== (if (== (if <%zf> then <0x0|8> else (^ <0x0|8> (^ <0x1|8> (^ (if <%of> then <0x1|8> else <0x0|8>) (if <%sf> then <0x1|8> else <0x0|8>))))) <0x0|8>) then <0x1|32> else <0x0|32>) <0x0|32>) then <0x1|9> else <0x0|9>) (if (== (if (== (if <%zf> then <0x0|8> else (^ <0x0|8> (^ <0x1|8> (^ (if <%of> then <0x1|8> else <0x0|8>) (if <%sf> then <0x1|8> else <0x0|8>))))) <0x0|8>) then <0x1|32> else <0x0|32>) <0x0|32>) then <0x1|9> else <0x0|9>))[7:0] <0x0|8>) then <%rcx|64> else <%rbx|64>)

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/