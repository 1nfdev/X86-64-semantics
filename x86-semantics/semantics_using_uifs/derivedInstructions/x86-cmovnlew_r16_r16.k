// Autogenerated using stratification.
requires "x86-configuration.k"

module CMOVNLEW-R16-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cmovnlew R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> ((#ifMInt (eqMInt(getFlag("ZF", RSMap), mi(1, 0)) ) #then ( (#ifMInt (eqMInt(xorMInt(getFlag("SF", RSMap), getFlag("OF", RSMap)), mi(1, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), extractMInt(getParentValue(R1, RSMap), 48, 64)) ) #else ( getParentValue(R2, RSMap) ) #fi) ) #else ( getParentValue(R2, RSMap) ) #fi)  )


)

    </regstate>
endmodule

module CMOVNLEW-R16-R16-SEMANTICS
  imports CMOVNLEW-R16-R16
endmodule
/*
TargetInstr:
cmovnlew %cx, %bx
RWSet:
maybe read:{ %cx %zf %sf %of }
must read:{ %cx %zf %sf %of }
maybe write:{ %bx }
must write:{ }
maybe undef:{ }
must undef:{ }
required flags:{ cmov }

Circuit:
circuit:cmovgw %cx, %bx  #  1     0    4      OPC=cmovgw_r16_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cmovnlew %cx, %bx

  maybe read:      { %cx %zf %sf %of }
  must read:       { %cx %zf %sf %of }
  maybe write:     { %bx }
  must write:      { }
  maybe undef:     { }
  must undef:      { }
  required flags:  { cmov }

Circuits:

%rbx   : (concat <%rbx|64>[63:16] (if <%zf> then <%rbx|64>[15:0] else (if (== (^ (if <%of> then <0x1|1> else <0x0|1>) (if <%sf> then <0x1|1> else <0x0|1>)) <0x1|1>) then <%rbx|64>[15:0] else <%rcx|64>[15:0])))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/