// Autogenerated using stratification.
requires "x86-configuration.k"

module CWTD
  imports X86-CONFIGURATION

  rule <k>
    execinstr (cwtd  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "RDX" |-> (concatenateMInt(extractMInt(getParentValue(%rdx, RSMap), 0, 48), extractMInt(mi(64, svalueMInt(extractMInt(getParentValue(%rax, RSMap), 48, 64))), 16, 32)) )


)

    </regstate>
endmodule

module CWTD-SEMANTICS
  imports CWTD
endmodule
/*
TargetInstr:
cwtd
RWSet:
maybe read:{ %ax }
must read:{ %ax }
maybe write:{ %dx }
must write:{ %dx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movswq %ax, %rbx                   #  1     0     4      OPC=movswq_r64_r16
circuit:callq .move_064_032_rbx_r10d_r11d  #  2     0x4   5      OPC=callq_label
circuit:movq $0xffffffffffffffff, %rdx     #  3     0x9   10     OPC=movq_r64_imm64
circuit:xaddw %dx, %r11w                   #  4     0x13  5      OPC=xaddw_r16_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

cwtd 

  maybe read:      { %ax }
  must read:       { %ax }
  maybe write:     { %dx }
  must write:      { %dx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rdx   : (concat <%rdx|64>[63:16] (sign-extend-64 <%rax|64>[15:0])[47:32])

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/