// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVB-R8-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movb R1:R8, R2:R8,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 56), extractMInt(getParentValue(R1, RSMap), 56, 64)) )


)

    </regstate>
endmodule

module MOVB-R8-R8-SEMANTICS
  imports MOVB-R8-R8
endmodule
/*
TargetInstr:
movb %cl, %bl
RWSet:
maybe read:{ %cl }
must read:{ %cl }
maybe write:{ %bl }
must write:{ %bl }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movq $0x1, %rbx          #  1     0     10     OPC=movq_r64_imm64
circuit:callq .set_szp_for_rbx   #  2     0xa   5      OPC=callq_label
circuit:movzbq %cl, %r15         #  3     0xf   4      OPC=movzbq_r64_r8
circuit:callq .read_sf_into_rbx  #  4     0x13  5      OPC=callq_label
circuit:xaddb %r15b, %bl         #  5     0x18  4      OPC=xaddb_r8_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movb %cl, %bl

  maybe read:      { %cl }
  must read:       { %cl }
  maybe write:     { %bl }
  must write:      { %bl }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (concat <%rbx|64>[63:8] <%rcx|64>[7:0])

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/