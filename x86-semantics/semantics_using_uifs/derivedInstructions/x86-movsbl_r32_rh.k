// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVSBL-R32-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movsbl R1:Rh, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(32, 0), extractMInt(mi(64, svalueMInt(extractMInt(getParentValue(R1, RSMap), 48, 56))), 32, 64)) )


)

    </regstate>
endmodule

module MOVSBL-R32-RH-SEMANTICS
  imports MOVSBL-R32-RH
endmodule
/*
TargetInstr:
movsbl %ah, %ebx
RWSet:
maybe read:{ %ah }
must read:{ %ah }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movb %ah, %cl     #  1     0    2      OPC=movb_r8_rh
circuit:movsbl %cl, %ebp  #  2     0x2  3      OPC=movsbl_r32_r8
circuit:movq %rbp, %rbx   #  3     0x5  3      OPC=movq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movsbl %ah, %ebx

  maybe read:      { %ah }
  must read:       { %ah }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (concat <0x0|32> (sign-extend-64 <%rax|64>[15:8])[31:0])

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/