// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVZWL-R32-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movzwl R1:R16, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(48, 0), extractMInt(getParentValue(R1, RSMap), 48, 64)) )


)

    </regstate>
endmodule

module MOVZWL-R32-R16-SEMANTICS
  imports MOVZWL-R32-R16
endmodule
/*
TargetInstr:
movzwl %cx, %ebx
RWSet:
maybe read:{ %cx }
must read:{ %cx }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movq $0x20, %rbx                  #  1     0     10     OPC=movq_r64_imm64
circuit:callq .move_016_008_cx_r12b_r13b  #  2     0xa   5      OPC=callq_label
circuit:callq .move_008_016_r12b_r13b_bx  #  3     0xf   5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movzwl %cx, %ebx

  maybe read:      { %cx }
  must read:       { %cx }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (concat <0x0|48> <%rcx|64>[15:0])

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/