// Autogenerated using stratification.
requires "x86-configuration.k"

module MOVZWQ-R64-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (movzwq R1:R16, R2:R64,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(48, 0), extractMInt(getParentValue(R1, RSMap), 48, 64)) )


)

    </regstate>
endmodule

module MOVZWQ-R64-R16-SEMANTICS
  imports MOVZWQ-R64-R16
endmodule
/*
TargetInstr:
movzwq %cx, %rbx
RWSet:
maybe read:{ %cx }
must read:{ %cx }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movq $0x0, %rbx  #  1     0     10     OPC=movq_r64_imm64
circuit:decw %bx         #  2     0xa   3      OPC=decw_r16
circuit:xaddw %bx, %cx   #  3     0xd   4      OPC=xaddw_r16_r16
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

movzwq %cx, %rbx

  maybe read:      { %cx }
  must read:       { %cx }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (concat <0x0|48> <%rcx|64>[15:0])

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/