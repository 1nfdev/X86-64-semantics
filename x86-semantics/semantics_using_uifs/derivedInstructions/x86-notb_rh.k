// Autogenerated using stratification.
requires "x86-configuration.k"

module NOTB-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (notb R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(xorMInt(extractMInt(getParentValue(R1, RSMap), 48, 56), mi(8, 255)), extractMInt(getParentValue(R1, RSMap), 56, 64))) )


)

    </regstate>
endmodule

module NOTB-RH-SEMANTICS
  imports NOTB-RH
endmodule
/*
TargetInstr:
notb %ah
RWSet:
maybe read:{ %ah }
must read:{ %ah }
maybe write:{ %ah }
must write:{ %ah }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movq $0xfffffffffffffffd, %rdx  #  1     0     10     OPC=movq_r64_imm64
circuit:callq .write_dl_to_zf           #  2     0xa   5      OPC=callq_label
circuit:callq .read_zf_into_rbx         #  3     0xf   5      OPC=callq_label
circuit:stc                             #  4     0x14  1      OPC=stc
circuit:adcw %dx, %bx                   #  5     0x15  3      OPC=adcw_r16_r16
circuit:xorb %bl, %ah                   #  6     0x18  2      OPC=xorb_rh_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

notb %ah

  maybe read:      { %ah }
  must read:       { %ah }
  maybe write:     { %ah }
  must write:      { %ah }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : (concat (concat <%rax|64>[63:16] (^ <0xff|8> <%rax|64>[15:8])) <%rax|64>[7:0])

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/