// Autogenerated using stratification.
requires "x86-configuration.k"

module NOTQ-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (notq R1:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (xorMInt(mi(64, 18446744073709551615), getParentValue(R1, RSMap)) )


)

    </regstate>
endmodule

module NOTQ-R64-SEMANTICS
  imports NOTQ-R64
endmodule
/*
TargetInstr:
notq %rbx
RWSet:
maybe read:{ %rbx }
must read:{ %rbx }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movq $0xfffffffffffffffe, %rdx  #  1     0    10     OPC=movq_r64_imm64
circuit:incb %dl                        #  2     0xa  2      OPC=incb_r8
circuit:xorq %rdx, %rbx                 #  3     0xc  3      OPC=xorq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

notq %rbx

  maybe read:      { %rbx }
  must read:       { %rbx }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (^ <%rbx|64> <0xffffffffffffffff|64>)

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/