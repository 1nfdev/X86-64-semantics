// Autogenerated using stratification.
requires "x86-configuration.k"

module NOTW-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (notw R1:R16,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), xorMInt(mi(16, 65535), extractMInt(getParentValue(R1, RSMap), 48, 64))) )


)

    </regstate>
endmodule

module NOTW-R16-SEMANTICS
  imports NOTW-R16
endmodule
/*
TargetInstr:
notw %bx
RWSet:
maybe read:{ %bx }
must read:{ %bx }
maybe write:{ %bx }
must write:{ %bx }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movq $0xffffffffffffffff, %r14  #  1     0     10     OPC=movq_r64_imm64
circuit:movswq %bx, %r12                #  2     0xa   4      OPC=movswq_r64_r16
circuit:xorw %r14w, %r12w               #  3     0xe   4      OPC=xorw_r16_r16
circuit:movslq %r12d, %rbx              #  4     0x12  3      OPC=movslq_r64_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

notw %bx

  maybe read:      { %bx }
  must read:       { %bx }
  maybe write:     { %bx }
  must write:      { %bx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (concat <%rbx|64>[63:16] (^ <%rbx|64>[15:0] <0xffff|16>))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/