// Autogenerated using stratification.
requires "x86-configuration.k"

module ORW-R16-R16
  imports X86-CONFIGURATION

  rule <k>
    execinstr (orw R1:R16, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )

 "SF" |-> (orMInt(extractMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))), 0, 1), extractMInt(mi(64, svalueMInt(extractMInt(getParentValue(R1, RSMap), 48, 64))), 0, 1)) )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ( (  ( countOnes(orMInt(extractMInt(getParentValue(R2, RSMap), 56, 64), extractMInt(getParentValue(R1, RSMap), 56, 64)), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> (mi(1, 0) )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), orMInt(extractMInt(getParentValue(R2, RSMap), 48, 64), extractMInt(getParentValue(R1, RSMap), 48, 64))) )

 "ZF" |-> ((#ifMInt (eqMInt(orMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))), mi(64, svalueMInt(extractMInt(getParentValue(R1, RSMap), 48, 64)))), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module ORW-R16-R16-SEMANTICS
  imports ORW-R16-R16
endmodule
/*
TargetInstr:
orw %cx, %bx
RWSet:
maybe read:{ %cx %bx }
must read:{ %cx %bx }
maybe write:{ %bx %cf %pf %zf %sf %of }
must write:{ %bx %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:movswq %cx, %rdx   #  1     0     4      OPC=movswq_r64_r16
circuit:xchgw %cx, %bx     #  2     0x4   3      OPC=xchgw_r16_r16
circuit:movswq %cx, %rax   #  3     0x7   4      OPC=movswq_r64_r16
circuit:orq %rax, %rdx     #  4     0xb   3      OPC=orq_r64_r64
circuit:movslq %edx, %rbx  #  5     0xe   3      OPC=movslq_r64_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

orw %cx, %bx

  maybe read:      { %cx %bx }
  must read:       { %cx %bx }
  maybe write:     { %bx %cf %pf %zf %sf %of }
  must write:      { %bx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Circuits:

%rbx   : (concat <%rbx|64>[63:16] (| <%rcx|64>[15:0] <%rbx|64>[15:0]))

%cf    : FALSE
%pf    : (not (xor (xor (xor (xor (xor (xor (xor (== (| <%rcx|64>[0:0] <%rbx|64>[0:0]) <0x1|1>) (== (| <%rcx|64>[1:1] <%rbx|64>[1:1]) <0x1|1>)) (== (| <%rcx|64>[2:2] <%rbx|64>[2:2]) <0x1|1>)) (== (| <%rcx|64>[3:3] <%rbx|64>[3:3]) <0x1|1>)) (== (| <%rcx|64>[4:4] <%rbx|64>[4:4]) <0x1|1>)) (== (| <%rcx|64>[5:5] <%rbx|64>[5:5]) <0x1|1>)) (== (| <%rcx|64>[6:6] <%rbx|64>[6:6]) <0x1|1>)) (== (| <%rcx|64>[7:7] <%rbx|64>[7:7]) <0x1|1>)))
%zf    : (== (| (sign-extend-64 <%rcx|64>[15:0]) (sign-extend-64 <%rbx|64>[15:0])) <0x0|64>)
%sf    : (== (| (sign-extend-64 <%rcx|64>[15:0])[63:63] (sign-extend-64 <%rbx|64>[15:0])[63:63]) <0x1|1>)
%of    : FALSE

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/