// Autogenerated using stratification.
requires "x86-configuration.k"

module PADDQ-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (paddq R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 128), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 128, 192)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 128, 192))), 1, 65), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R1, RSMap), 192, 256)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 192, 256))), 1, 65))) )


)

    </regstate>
endmodule

module PADDQ-XMM-XMM-SEMANTICS
  imports PADDQ-XMM-XMM
endmodule
/*
TargetInstr:
paddq %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 }
must read:{ %xmm1 %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse2 }

Circuit:
circuit:callq .move_128_064_xmm2_r10_r11  #  1     0     5      OPC=callq_label
circuit:callq .move_128_064_xmm1_r8_r9    #  2     0x5   5      OPC=callq_label
circuit:addq %r10, %r8                    #  3     0xa   3      OPC=addq_r64_r64
circuit:xchgw %r8w, %r8w                  #  4     0xd   4      OPC=xchgw_r16_r16
circuit:addq %r11, %r9                    #  5     0x11  3      OPC=addq_r64_r64
circuit:callq .move_064_128_r8_r9_xmm1    #  6     0x14  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

paddq %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 }
  must read:       { %xmm1 %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse2 }

Circuits:

%ymm1  : (concat <%ymm1|256>[255:128] (concat (plus (concat <0x0|1> <%ymm2|256>[127:64]) (concat <0x0|1> <%ymm1|256>[127:64]))[63:0] (plus (concat <0x0|1> <%ymm2|256>[63:0]) (concat <0x0|1> <%ymm1|256>[63:0]))[63:0]))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/