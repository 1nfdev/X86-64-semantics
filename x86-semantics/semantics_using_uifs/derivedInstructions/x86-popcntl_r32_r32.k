// Autogenerated using stratification.
requires "x86-configuration.k"

module POPCNTL-R32-R32
  imports X86-CONFIGURATION

  rule <k>
    execinstr (popcntl R1:R32, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (mi(1, 0) )

 "SF" |-> (mi(1, 0) )

 "AF" |-> (mi(1, 0) )

 "PF" |-> (mi(1, 0) )

 "OF" |-> (mi(1, 0) )

convToRegKeys(R2) |-> (mi(64, countOnes(extractMInt(getParentValue(R1, RSMap), 32, 64), 0)) )

 "ZF" |-> ((#ifMInt (eqMInt(concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 32, 64)), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module POPCNTL-R32-R32-SEMANTICS
  imports POPCNTL-R32-R32
endmodule
/*
TargetInstr:
popcntl %ecx, %ebx
RWSet:
maybe read:{ %ecx }
must read:{ %ecx }
maybe write:{ %rbx %cf %pf %af %zf %sf %of }
must write:{ %rbx %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ popcnt }

Circuit:
circuit:movl %ecx, %r8d    #  1     0    3      OPC=movl_r32_r32
circuit:popcntq %r8, %rbx  #  2     0x3  5      OPC=popcntq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

popcntl %ecx, %ebx

  maybe read:      { %ecx }
  must read:       { %ecx }
  maybe write:     { %rbx %cf %pf %af %zf %sf %of }
  must write:      { %rbx %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { popcnt }

Circuits:

%rbx   : (concat <0x0|32> (plus (concat <0x0|16> (plus (concat <0x0|8> (plus (concat <0x0|4> (plus (concat <0x0|2> (plus (concat <0x0|1> <%rcx|64>[31:31]) (concat <0x0|1> <%rcx|64>[30:30]))) (concat <0x0|2> (plus (concat <0x0|1> <%rcx|64>[29:29]) (concat <0x0|1> <%rcx|64>[28:28]))))) (concat <0x0|4> (plus (concat <0x0|2> (plus (concat <0x0|1> <%rcx|64>[27:27]) (concat <0x0|1> <%rcx|64>[26:26]))) (concat <0x0|2> (plus (concat <0x0|1> <%rcx|64>[25:25]) (concat <0x0|1> <%rcx|64>[24:24]))))))) (concat <0x0|8> (plus (concat <0x0|4> (plus (concat <0x0|2> (plus (concat <0x0|1> <%rcx|64>[23:23]) (concat <0x0|1> <%rcx|64>[22:22]))) (concat <0x0|2> (plus (concat <0x0|1> <%rcx|64>[21:21]) (concat <0x0|1> <%rcx|64>[20:20]))))) (concat <0x0|4> (plus (concat <0x0|2> (plus (concat <0x0|1> <%rcx|64>[19:19]) (concat <0x0|1> <%rcx|64>[18:18]))) (concat <0x0|2> (plus (concat <0x0|1> <%rcx|64>[17:17]) (concat <0x0|1> <%rcx|64>[16:16]))))))))) (concat <0x0|16> (plus (concat <0x0|8> (plus (concat <0x0|4> (plus (concat <0x0|2> (plus (concat <0x0|1> <%rcx|64>[15:15]) (concat <0x0|1> <%rcx|64>[14:14]))) (concat <0x0|2> (plus (concat <0x0|1> <%rcx|64>[13:13]) (concat <0x0|1> <%rcx|64>[12:12]))))) (concat <0x0|4> (plus (concat <0x0|2> (plus (concat <0x0|1> <%rcx|64>[11:11]) (concat <0x0|1> <%rcx|64>[10:10]))) (concat <0x0|2> (plus (concat <0x0|1> <%rcx|64>[9:9]) (concat <0x0|1> <%rcx|64>[8:8]))))))) (concat <0x0|8> (plus (concat <0x0|4> (plus (concat <0x0|2> (plus (concat <0x0|1> <%rcx|64>[7:7]) (concat <0x0|1> <%rcx|64>[6:6]))) (concat <0x0|2> (plus (concat <0x0|1> <%rcx|64>[5:5]) (concat <0x0|1> <%rcx|64>[4:4]))))) (concat <0x0|4> (plus (concat <0x0|2> (plus (concat <0x0|1> <%rcx|64>[3:3]) (concat <0x0|1> <%rcx|64>[2:2]))) (concat <0x0|2> (plus (concat <0x0|1> <%rcx|64>[1:1]) (concat <0x0|1> <%rcx|64>[0:0])))))))))))

%cf    : FALSE
%pf    : FALSE
%af    : FALSE
%zf    : (== (concat <0x0|32> <%rcx|64>[31:0]) <0x0|64>)
%sf    : FALSE
%of    : FALSE

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/