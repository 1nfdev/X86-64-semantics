// Autogenerated using stratification.
requires "x86-configuration.k"

module RCLB-R8-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (rclb $0x1, R2:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64))), concatenateMInt(mi(8, 0), getFlag("CF", RSMap))), 0, 1) )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 56, 57), extractMInt(getParentValue(R2, RSMap), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 56, 57), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64))), concatenateMInt(mi(8, 0), getFlag("CF", RSMap))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 56), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(getParentValue(R2, RSMap), 56, 64))), concatenateMInt(mi(8, 0), getFlag("CF", RSMap))), 1, 9)) )


)

    </regstate>
endmodule

module RCLB-R8-ONE-SEMANTICS
  imports RCLB-R8-ONE
endmodule
/*
TargetInstr:
rclb $0x1, %bl
RWSet:
maybe read:{ %bl %cf }
must read:{ %bl %cf }
maybe write:{ %bl %cf %of }
must write:{ %bl %cf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movzbl %bl, %eax  #  1     0    3      OPC=movzbl_r32_r8
circuit:movq %rax, %rbx   #  2     0x3  3      OPC=movq_r64_r64
circuit:adcb %bl, %bl     #  3     0x6  2      OPC=adcb_r8_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

rclb $0x1, %bl

  maybe read:      { %bl %cf }
  must read:       { %bl %cf }
  maybe write:     { %bl %cf %of }
  must write:      { %bl %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (concat <%rbx|64>[63:8] (plus (if <%cf> then (plus (concat <0x0|1> <%rbx|64>[7:0]) <0x1|9>) else (concat <0x0|1> <%rbx|64>[7:0])) (concat <0x0|1> <%rbx|64>[7:0]))[7:0])

%cf    : (== (plus (if <%cf> then (plus (concat <0x0|1> <%rbx|64>[7:0]) <0x1|9>) else (concat <0x0|1> <%rbx|64>[7:0])) (concat <0x0|1> <%rbx|64>[7:0]))[8:8] <0x1|1>)
%of    : (and (== (== <%rbx|64>[7:7] <0x1|1>) (== <%rbx|64>[7:7] <0x1|1>)) (not (== (== <%rbx|64>[7:7] <0x1|1>) (== (plus (if <%cf> then (plus (concat <0x0|1> <%rbx|64>[7:0]) <0x1|9>) else (concat <0x0|1> <%rbx|64>[7:0])) (concat <0x0|1> <%rbx|64>[7:0]))[7:7] <0x1|1>))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/