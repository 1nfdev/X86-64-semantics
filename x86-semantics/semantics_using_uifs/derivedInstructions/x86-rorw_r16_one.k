// Autogenerated using stratification.
requires "x86-configuration.k"

module RORW-R16-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (rorw $0x1, R2:R16,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56))), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R2, RSMap), 63, 64))), 1, 9), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56))), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R2, RSMap), 63, 64))), 1, 9)))))), 1), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56))), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R2, RSMap), 63, 64))), 1, 9), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56))), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R2, RSMap), 63, 64))), 1, 9)))))), 1), 56, 64))), 0, 1) )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56))), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R2, RSMap), 63, 64))), 1, 9), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56))), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R2, RSMap), 63, 64))), 1, 9)))))), 1), 56, 57), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56))), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R2, RSMap), 63, 64))), 1, 9), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56))), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R2, RSMap), 63, 64))), 1, 9)))))), 1), 56, 57))  andBool   notBool  ( eqMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56))), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R2, RSMap), 63, 64))), 1, 9), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56))), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R2, RSMap), 63, 64))), 1, 9)))))), 1), 56, 57), extractMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56))), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R2, RSMap), 63, 64))), 1, 9), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56))), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R2, RSMap), 63, 64))), 1, 9)))))), 1), 56, 64)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56))), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R2, RSMap), 63, 64))), 1, 9), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56))), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R2, RSMap), 63, 64))), 1, 9)))))), 1), 56, 64))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 48), concatenateMInt(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(concatenateMInt(extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56))), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R2, RSMap), 63, 64))), 1, 9), extractMInt(addMInt(addMInt(concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56)), concatenateMInt(mi(1, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 48, 56))), concatenateMInt(mi(8, 0), extractMInt(getParentValue(R2, RSMap), 63, 64))), 1, 9)))))), 1), 56, 64), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 48, 64))))), 1), 56, 64))) )


)

    </regstate>
endmodule

module RORW-R16-ONE-SEMANTICS
  imports RORW-R16-ONE
endmodule
/*
TargetInstr:
rorw $0x1, %bx
RWSet:
maybe read:{ %bx }
must read:{ %bx }
maybe write:{ %bx %cf %of }
must write:{ %bx %cf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:sarw $0x1, %bx  #  1     0    3      OPC=sarw_r16_one
circuit:rclb $0x1, %bh  #  2     0x3  2      OPC=rclb_rh_one
circuit:rorb $0x1, %bh  #  3     0x5  2      OPC=rorb_rh_one
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

rorw $0x1, %bx

  maybe read:      { %bx }
  must read:       { %bx }
  maybe write:     { %bx %cf %of }
  must write:      { %bx %cf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (concat <%rbx|64>[63:16] (concat (s_shr (concat (sign-extend-64 (concat (plus (if (or (and TRUE (== (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[0:0] <0x1|1>)) FALSE) then (plus (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]) <0x1|9>) else (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9])) (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]))[7:0] (plus (if (or (and TRUE (== (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[0:0] <0x1|1>)) FALSE) then (plus (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]) <0x1|9>) else (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9])) (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]))[7:0])) <0x0|1>) (concat <0x0|57> <0x1|8>))[8:1] (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[8:1]))

%cf    : (== (plus (concat <0x0|1> (s_shr (concat (sign-extend-64 (concat (plus (if (or (and TRUE (== (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[0:0] <0x1|1>)) FALSE) then (plus (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]) <0x1|9>) else (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9])) (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]))[7:0] (plus (if (or (and TRUE (== (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[0:0] <0x1|1>)) FALSE) then (plus (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]) <0x1|9>) else (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9])) (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]))[7:0])) <0x0|1>) (concat <0x0|57> <0x1|8>))[8:1]) (concat <0x0|1> (s_shr (concat (sign-extend-64 (concat (plus (if (or (and TRUE (== (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[0:0] <0x1|1>)) FALSE) then (plus (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]) <0x1|9>) else (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9])) (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]))[7:0] (plus (if (or (and TRUE (== (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[0:0] <0x1|1>)) FALSE) then (plus (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]) <0x1|9>) else (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9])) (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]))[7:0])) <0x0|1>) (concat <0x0|57> <0x1|8>))[8:1]))[8:8] <0x1|1>)
%of    : (and (== (== (s_shr (concat (sign-extend-64 (concat (plus (if (or (and TRUE (== (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[0:0] <0x1|1>)) FALSE) then (plus (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]) <0x1|9>) else (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9])) (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]))[7:0] (plus (if (or (and TRUE (== (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[0:0] <0x1|1>)) FALSE) then (plus (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]) <0x1|9>) else (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9])) (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]))[7:0])) <0x0|1>) (concat <0x0|57> <0x1|8>))[8:8] <0x1|1>) (== (s_shr (concat (sign-extend-64 (concat (plus (if (or (and TRUE (== (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[0:0] <0x1|1>)) FALSE) then (plus (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]) <0x1|9>) else (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9])) (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]))[7:0] (plus (if (or (and TRUE (== (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[0:0] <0x1|1>)) FALSE) then (plus (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]) <0x1|9>) else (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9])) (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]))[7:0])) <0x0|1>) (concat <0x0|57> <0x1|8>))[8:8] <0x1|1>)) (not (== (== (s_shr (concat (sign-extend-64 (concat (plus (if (or (and TRUE (== (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[0:0] <0x1|1>)) FALSE) then (plus (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]) <0x1|9>) else (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9])) (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]))[7:0] (plus (if (or (and TRUE (== (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[0:0] <0x1|1>)) FALSE) then (plus (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]) <0x1|9>) else (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9])) (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]))[7:0])) <0x0|1>) (concat <0x0|57> <0x1|8>))[8:8] <0x1|1>) (== (plus (concat <0x0|1> (s_shr (concat (sign-extend-64 (concat (plus (if (or (and TRUE (== (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[0:0] <0x1|1>)) FALSE) then (plus (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]) <0x1|9>) else (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9])) (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]))[7:0] (plus (if (or (and TRUE (== (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[0:0] <0x1|1>)) FALSE) then (plus (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]) <0x1|9>) else (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9])) (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]))[7:0])) <0x0|1>) (concat <0x0|57> <0x1|8>))[8:1]) (concat <0x0|1> (s_shr (concat (sign-extend-64 (concat (plus (if (or (and TRUE (== (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[0:0] <0x1|1>)) FALSE) then (plus (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]) <0x1|9>) else (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9])) (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]))[7:0] (plus (if (or (and TRUE (== (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[0:0] <0x1|1>)) FALSE) then (plus (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]) <0x1|9>) else (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9])) (concat <0x0|1> (s_shr (concat (sign-extend-64 <%rbx|64>[15:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[16:9]))[7:0])) <0x0|1>) (concat <0x0|57> <0x1|8>))[8:1]))[7:7] <0x1|1>))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/