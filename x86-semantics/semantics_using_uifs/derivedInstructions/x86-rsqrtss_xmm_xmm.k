// Autogenerated using stratification.
requires "x86-configuration.k"

module RSQRTSS-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (rsqrtss R1:Xmm, R2:Xmm,  .Typedoperands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(extractMInt(getParentValue(R2, RSMap), 0, 224),  approx_reciprocal_sqrt_single ( extractMInt(getParentValue(R1, RSMap), 224, 256) ) ) )


)

    </regstate>
endmodule

module RSQRTSS-XMM-XMM-SEMANTICS
  imports RSQRTSS-XMM-XMM
endmodule
/*
TargetInstr:
rsqrtss %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 }
must read:{ %xmm1 %xmm2 }
maybe write:{ %xmm1 }
must write:{ %xmm1 }
maybe undef:{ }
must undef:{ }
required flags:{ sse }

Circuit:
circuit:vdivps %xmm2, %xmm1, %xmm8                      #  1     0     4      OPC=vdivps_xmm_xmm_xmm
circuit:callq .move_128_032_xmm2_xmm8_xmm9_xmm10_xmm11  #  2     0x4   5      OPC=callq_label
circuit:vrsqrtps %ymm8, %ymm2                           #  3     0x9   5      OPC=vrsqrtps_ymm_ymm
circuit:movss %xmm2, %xmm1                              #  4     0xe   4      OPC=movss_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

rsqrtss %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 }
  must read:       { %xmm1 %xmm2 }
  maybe write:     { %xmm1 }
  must write:      { %xmm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { sse }

Circuits:

%ymm1  : (concat <%ymm1|256>[255:128] (concat <%ymm1|256>[127:32] approx_reciprocal_sqrt_single(<%ymm2|256>[31:0])))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/