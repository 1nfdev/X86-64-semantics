// Autogenerated using stratification.
requires "x86-configuration.k"

module SARL-R32-ONE
  imports X86-CONFIGURATION

  rule <k>
    execinstr (sarl $0x1, R2:R32,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(getParentValue(R2, RSMap), 63, 64) )

 "SF" |-> (extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 32, 64))))), 1), 0, 1) )

 "AF" |-> (undef)

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 32, 64))))), 1), 56, 64), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> (mi(1, 0) )

convToRegKeys(R2) |-> (concatenateMInt(mi(32, 0), extractMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 32, 64))))), 1), 32, 64)) )

 "ZF" |-> ((#ifMInt (eqMInt(ashrMInt(mi(64, svalueMInt(mi(64, svalueMInt(extractMInt(getParentValue(R2, RSMap), 32, 64))))), 1), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
endmodule

module SARL-R32-ONE-SEMANTICS
  imports SARL-R32-ONE
endmodule
/*
TargetInstr:
sarl $0x1, %ebx
RWSet:
maybe read:{ %ebx }
must read:{ %ebx }
maybe write:{ %rbx %cf %pf %zf %sf %of }
must write:{ %rbx %cf %pf %zf %sf %of }
maybe undef:{ %af }
must undef:{ %af }
required flags:{ }

Circuit:
circuit:movslq %ebx, %rbx  #  1     0    3      OPC=movslq_r64_r32
circuit:sarq $0x1, %rbx    #  2     0x3  3      OPC=sarq_r64_one
circuit:movl %ebx, %ebx    #  3     0x6  2      OPC=movl_r32_r32
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

sarl $0x1, %ebx

  maybe read:      { %ebx }
  must read:       { %ebx }
  maybe write:     { %rbx %cf %pf %zf %sf %of }
  must write:      { %rbx %cf %pf %zf %sf %of }
  maybe undef:     { %af }
  must undef:      { %af }
  required flags:  { }

Circuits:

%rbx   : (concat <0x0|32> (s_shr (concat (sign-extend-64 <%rbx|64>[31:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[32:1])

%cf    : (or (and TRUE (== (s_shr (concat (sign-extend-64 <%rbx|64>[31:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[0:0] <0x1|1>)) FALSE)
%pf    : (not (xor (xor (xor (xor (xor (xor (xor (== (s_shr (concat (sign-extend-64 <%rbx|64>[31:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[1:1] <0x1|1>) (== (s_shr (concat (sign-extend-64 <%rbx|64>[31:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[2:2] <0x1|1>)) (== (s_shr (concat (sign-extend-64 <%rbx|64>[31:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[3:3] <0x1|1>)) (== (s_shr (concat (sign-extend-64 <%rbx|64>[31:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[4:4] <0x1|1>)) (== (s_shr (concat (sign-extend-64 <%rbx|64>[31:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[5:5] <0x1|1>)) (== (s_shr (concat (sign-extend-64 <%rbx|64>[31:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[6:6] <0x1|1>)) (== (s_shr (concat (sign-extend-64 <%rbx|64>[31:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[7:7] <0x1|1>)) (== (s_shr (concat (sign-extend-64 <%rbx|64>[31:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[8:8] <0x1|1>)))
%zf    : (== (s_shr (concat (sign-extend-64 <%rbx|64>[31:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[64:1] <0x0|64>)
%sf    : (== (s_shr (concat (sign-extend-64 <%rbx|64>[31:0]) <0x0|1>) (concat <0x0|57> <0x1|8>))[64:64] <0x1|1>)
%of    : FALSE

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/