// Autogenerated using stratification.
requires "x86-configuration.k"

module SETB-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setb R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), getFlag("CF", RSMap)), extractMInt(getParentValue(R1, RSMap), 56, 64))) )


)

    </regstate>
endmodule

module SETB-RH-SEMANTICS
  imports SETB-RH
endmodule
/*
TargetInstr:
setb %ah
RWSet:
maybe read:{ %cf }
must read:{ %cf }
maybe write:{ %ah }
must write:{ %ah }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:setnae %ah  #  1     0    3      OPC=setnae_rh
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setb %ah

  maybe read:      { %cf }
  must read:       { %cf }
  maybe write:     { %ah }
  must write:      { %ah }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : (concat (concat <%rax|64>[63:16] (if <%cf> then <0x1|8> else <0x0|8>)) <%rax|64>[7:0])

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/