// Autogenerated using stratification.
requires "x86-configuration.k"

module SETNBE-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setnbe R1:R8,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> ((#ifMInt (eqMInt(concatenateMInt(mi(16, 0), concatenateMInt(concatenateMInt(mi(7, 0), getFlag("CF", RSMap)), concatenateMInt(mi(7, 0), getFlag("ZF", RSMap)))), mi(32, 0)) ) #then ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), mi(8, 1)) ) #else ( concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 56), mi(8, 0)) ) #fi)  )


)

    </regstate>
endmodule

module SETNBE-R8-SEMANTICS
  imports SETNBE-R8
endmodule
/*
TargetInstr:
setnbe %bl
RWSet:
maybe read:{ %cf %zf }
must read:{ %cf %zf }
maybe write:{ %bl }
must write:{ %bl }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .read_zf_into_rbx            #  1     0     5      OPC=callq_label
circuit:setnae %bh                         #  2     0x5   3      OPC=setnae_rh
circuit:callq .move_064_032_rbx_r12d_r13d  #  3     0x8   5      OPC=callq_label
circuit:callq .move_032_064_r12d_r13d_rbx  #  4     0xd   5      OPC=callq_label
circuit:xaddl %r13d, %ebx                  #  5     0x12  4      OPC=xaddl_r32_r32
circuit:callq .read_zf_into_rbx            #  6     0x16  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setnbe %bl

  maybe read:      { %cf %zf }
  must read:       { %cf %zf }
  maybe write:     { %bl }
  must write:      { %bl }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rbx   : (concat <%rbx|64>[63:8] (if (== (concat (if <%cf> then <0x1|24> else <0x0|24>) (if <%zf> then <0x1|8> else <0x0|8>)) <0x0|32>) then <0x1|8> else <0x0|8>))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/