// Autogenerated using stratification.
requires "x86-configuration.k"

module SETP-RH
  imports X86-CONFIGURATION

  rule <k>
    execinstr (setp R1:Rh,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R1) |-> (concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 48), concatenateMInt(concatenateMInt(mi(7, 0), getFlag("PF", RSMap)), extractMInt(getParentValue(R1, RSMap), 56, 64))) )


)

    </regstate>
endmodule

module SETP-RH-SEMANTICS
  imports SETP-RH
endmodule
/*
TargetInstr:
setp %ah
RWSet:
maybe read:{ %pf }
must read:{ %pf }
maybe write:{ %ah }
must write:{ %ah }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:callq .read_pf_into_rbx  #  1     0    5      OPC=callq_label
circuit:xorl %eax, %eax          #  2     0x5  2      OPC=xorl_r32_r32
circuit:addb %bl, %ah            #  3     0x7  2      OPC=addb_rh_r8
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

setp %ah

  maybe read:      { %pf }
  must read:       { %pf }
  maybe write:     { %ah }
  must write:      { %ah }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rax   : (concat (concat <%rax|64>[63:16] (if <%pf> then <0x1|8> else <0x0|8>)) <%rax|64>[7:0])

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/