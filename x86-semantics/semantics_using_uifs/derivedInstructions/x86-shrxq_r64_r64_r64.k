// Autogenerated using stratification.
requires "x86-configuration.k"

module SHRXQ-R64-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (shrxq R1:R64, R2:R64, R3:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> ((#ifMInt (ultMInt(andMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), mi(8, 63)), mi(8, 64)) ) #then ( lshrMInt(getParentValue(R2, RSMap), uvalueMInt(andMInt(extractMInt(getParentValue(R1, RSMap), 56, 64), mi(8, 63)))) ) #else ( mi(64, 0) ) #fi)  )


)

    </regstate>
endmodule

module SHRXQ-R64-R64-R64-SEMANTICS
  imports SHRXQ-R64-R64-R64
endmodule
/*
TargetInstr:
shrxq %rdx, %rcx, %rbx
RWSet:
maybe read:{ %rcx %rdx }
must read:{ %rcx %rdx }
maybe write:{ %rbx }
must write:{ %rbx }
maybe undef:{ }
must undef:{ }
required flags:{ bmi2 }

Circuit:
circuit:movq %rcx, %rbx  #  1     0    3      OPC=movq_r64_r64
circuit:xaddb %cl, %dl   #  2     0x3  3      OPC=xaddb_r8_r8
circuit:xchgw %bx, %bx   #  3     0x6  3      OPC=xchgw_r16_r16
circuit:shrq %cl, %rbx   #  4     0x9  3      OPC=shrq_r64_cl
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

shrxq %rdx, %rcx, %rbx

  maybe read:      { %rcx %rdx }
  must read:       { %rcx %rdx }
  maybe write:     { %rbx }
  must write:      { %rbx }
  maybe undef:     { }
  must undef:      { }
  required flags:  { bmi2 }

Circuits:

%rbx   : (>> (concat <%rcx|64> <0x0|1>) (concat <0x0|57> (& <%rdx|64>[7:0] <0x3f|8>)))[64:1]

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/