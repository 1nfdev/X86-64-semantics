// Autogenerated using stratification.
requires "x86-configuration.k"

module VADDPD-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vaddpd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt( add_double ( extractMInt(getParentValue(R1, RSMap), 128, 192), extractMInt(getParentValue(R2, RSMap), 128, 192) ) ,  add_double ( extractMInt(getParentValue(R1, RSMap), 192, 256), extractMInt(getParentValue(R2, RSMap), 192, 256) ) )) )


)

    </regstate>
endmodule

module VADDPD-XMM-XMM-XMM-SEMANTICS
  imports VADDPD-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vaddpd %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 %xmm3 }
must read:{ %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:callq .move_128_064_xmm2_r10_r11  #  1     0     5      OPC=callq_label
circuit:callq .move_128_064_xmm3_r8_r9    #  2     0x5   5      OPC=callq_label
circuit:vzeroall                          #  3     0xa   3      OPC=vzeroall
circuit:callq .move_064_128_r10_r11_xmm1  #  4     0xd   5      OPC=callq_label
circuit:callq .move_064_128_r8_r9_xmm3    #  5     0x12  5      OPC=callq_label
circuit:vaddpd %ymm3, %ymm1, %ymm1        #  6     0x17  4      OPC=vaddpd_ymm_ymm_ymm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vaddpd %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm2 %xmm3 }
  must read:       { %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%ymm1  : (concat <0x0|64> (concat <0x0|64> (concat add_double(<%ymm2|256>[127:64], <%ymm3|256>[127:64]) add_double(<%ymm2|256>[63:0], <%ymm3|256>[63:0]))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/