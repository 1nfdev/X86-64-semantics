// Autogenerated using stratification.
requires "x86-configuration.k"

module VANDNPS-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vandnps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(orMInt(extractMInt(getParentValue(R1, RSMap), 128, 192), extractMInt(getParentValue(R2, RSMap), 128, 192)), extractMInt(getParentValue(R2, RSMap), 128, 192)), xorMInt(orMInt(extractMInt(getParentValue(R1, RSMap), 192, 256), extractMInt(getParentValue(R2, RSMap), 192, 256)), extractMInt(getParentValue(R2, RSMap), 192, 256)))) )


)

    </regstate>
endmodule

module VANDNPS-XMM-XMM-XMM-SEMANTICS
  imports VANDNPS-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vandnps %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 %xmm3 }
must read:{ %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:vorpd %xmm2, %xmm3, %xmm10  #  1     0    4      OPC=vorpd_xmm_xmm_xmm
circuit:vpxor %xmm10, %xmm2, %xmm1  #  2     0x4  5      OPC=vpxor_xmm_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vandnps %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm2 %xmm3 }
  must read:       { %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%ymm1  : (concat <0x0|128> (concat (^ <%ymm2|256>[127:64] (| <%ymm2|256>[127:64] <%ymm3|256>[127:64])) (^ <%ymm2|256>[63:0] (| <%ymm2|256>[63:0] <%ymm3|256>[63:0]))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/