// Autogenerated using stratification.
requires "x86-configuration.k"

module VFMADD213PS-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vfmadd213ps R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(concatenateMInt(concatenateMInt( vfmsub132_single ( mi(32, 0), mi(32, 0), mi(32, 0) ) ,  vfmsub132_single ( mi(32, 0), mi(32, 0), mi(32, 0) ) ), concatenateMInt( vfmsub132_single ( mi(32, 0), mi(32, 0), mi(32, 0) ) ,  vfmsub132_single ( mi(32, 0), mi(32, 0), mi(32, 0) ) )), concatenateMInt(concatenateMInt( vfmsub132_single ( extractMInt(getParentValue(R2, RSMap), 128, 160), vfnmsub132_single ( mi(32, 0), extractMInt(getParentValue(R1, RSMap), 128, 160), extractMInt(getParentValue(R1, RSMap), 128, 160) ), extractMInt(getParentValue(R3, RSMap), 128, 160) ) ,  vfmsub132_single ( extractMInt(getParentValue(R2, RSMap), 160, 192), vfnmsub132_single ( mi(32, 0), extractMInt(getParentValue(R1, RSMap), 160, 192), extractMInt(getParentValue(R1, RSMap), 160, 192) ), extractMInt(getParentValue(R3, RSMap), 160, 192) ) ), concatenateMInt( vfmsub132_single ( extractMInt(getParentValue(R2, RSMap), 192, 224), vfnmsub132_single ( mi(32, 0), extractMInt(getParentValue(R1, RSMap), 192, 224), extractMInt(getParentValue(R1, RSMap), 192, 224) ), extractMInt(getParentValue(R3, RSMap), 192, 224) ) ,  vfmsub132_single ( extractMInt(getParentValue(R2, RSMap), 224, 256), vfnmsub132_single ( mi(32, 0), extractMInt(getParentValue(R1, RSMap), 224, 256), extractMInt(getParentValue(R1, RSMap), 224, 256) ), extractMInt(getParentValue(R3, RSMap), 224, 256) ) ))) )


)

    </regstate>
endmodule

module VFMADD213PS-XMM-XMM-XMM-SEMANTICS
  imports VFMADD213PS-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vfmadd213ps %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 %xmm3 }
must read:{ %xmm1 %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ fma }

Circuit:
circuit:pxor %xmm9, %xmm9                  #  1     0     5      OPC=pxor_xmm_xmm
circuit:vandps %xmm9, %xmm3, %xmm10        #  2     0x5   5      OPC=vandps_xmm_xmm_xmm
circuit:vfnmsub231ps %xmm3, %xmm10, %xmm3  #  3     0xa   5      OPC=vfnmsub231ps_xmm_xmm_xmm
circuit:vfmsub132ps %xmm1, %xmm3, %xmm2    #  4     0xf   5      OPC=vfmsub132ps_xmm_xmm_xmm
circuit:vorpd %ymm2, %ymm10, %ymm1         #  5     0x14  4      OPC=vorpd_ymm_ymm_ymm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vfmadd213ps %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 %xmm3 }
  must read:       { %xmm1 %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { fma }

Circuits:

%ymm1  : (concat (concat (| (concat vfmsub132_single(<0x0|32>, <0x0|32>, <0x0|32>) vfmsub132_single(<0x0|32>, <0x0|32>, <0x0|32>)) <0x0|64>) (| (concat vfmsub132_single(<0x0|32>, <0x0|32>, <0x0|32>) vfmsub132_single(<0x0|32>, <0x0|32>, <0x0|32>)) <0x0|64>)) (concat (| (concat vfmsub132_single(<%ymm2|256>[127:96], vfnmsub132_single((^ (^ <0x0|32> <%ymm3|256>[127:96]) (| <0x0|32> (^ <0x0|32> <%ymm3|256>[127:96]))), <%ymm3|256>[127:96], <%ymm3|256>[127:96]), <%ymm1|256>[127:96]) vfmsub132_single(<%ymm2|256>[95:64], vfnmsub132_single((^ (^ <0x0|32> <%ymm3|256>[95:64]) (| <0x0|32> (^ <0x0|32> <%ymm3|256>[95:64]))), <%ymm3|256>[95:64], <%ymm3|256>[95:64]), <%ymm1|256>[95:64])) (^ (^ <0x0|64> <%ymm3|256>[127:64]) (| <0x0|64> (^ <0x0|64> <%ymm3|256>[127:64])))) (| (concat vfmsub132_single(<%ymm2|256>[63:32], vfnmsub132_single((^ (^ <0x0|32> <%ymm3|256>[63:32]) (| <0x0|32> (^ <0x0|32> <%ymm3|256>[63:32]))), <%ymm3|256>[63:32], <%ymm3|256>[63:32]), <%ymm1|256>[63:32]) vfmsub132_single(<%ymm2|256>[31:0], vfnmsub132_single((^ (^ <0x0|32> <%ymm3|256>[31:0]) (| <0x0|32> (^ <0x0|32> <%ymm3|256>[31:0]))), <%ymm3|256>[31:0], <%ymm3|256>[31:0]), <%ymm1|256>[31:0])) (^ (^ <0x0|64> <%ymm3|256>[63:0]) (| <0x0|64> (^ <0x0|64> <%ymm3|256>[63:0]))))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/