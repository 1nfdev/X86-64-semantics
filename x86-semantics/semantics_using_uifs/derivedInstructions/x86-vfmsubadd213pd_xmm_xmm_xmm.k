// Autogenerated using stratification.
requires "x86-configuration.k"

module VFMSUBADD213PD-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vfmsubadd213pd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt( vfmsub132_double ( extractMInt(getParentValue(R2, RSMap), 128, 192), xorMInt(mi(64, 0), extractMInt(getParentValue(R1, RSMap), 128, 192)), extractMInt(getParentValue(R3, RSMap), 128, 192) ) ,  vfmsub132_double ( extractMInt(getParentValue(R2, RSMap), 192, 256), vfmsub132_double ( vfnmsub132_double ( mincmp_double ( concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 128, 160)), mi(64, 0) ), concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 128, 160)), mincmp_double ( concatenateMInt(mi(32, 0), extractMInt(getParentValue(R1, RSMap), 128, 160)), mi(64, 0) ) ), extractMInt(getParentValue(R1, RSMap), 192, 256), extractMInt(getParentValue(R1, RSMap), 192, 256) ), extractMInt(getParentValue(R3, RSMap), 192, 256) ) )) )


)

    </regstate>
endmodule

module VFMSUBADD213PD-XMM-XMM-XMM-SEMANTICS
  imports VFMSUBADD213PD-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vfmsubadd213pd %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm1 %xmm2 %xmm3 }
must read:{ %xmm1 %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ fma }

Circuit:
circuit:callq .move_128_032_xmm3_xmm8_xmm9_xmm10_xmm11  #  1     0     5      OPC=callq_label
circuit:vfnmsub213sd %xmm3, %xmm11, %xmm3               #  2     0x5   5      OPC=vfnmsub213sd_xmm_xmm_xmm
circuit:callq .move_256_128_ymm3_xmm10_xmm11            #  3     0xa   5      OPC=callq_label
circuit:vfmsub213pd %xmm10, %xmm2, %xmm1                #  4     0xf   5      OPC=vfmsub213pd_xmm_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vfmsubadd213pd %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm1 %xmm2 %xmm3 }
  must read:       { %xmm1 %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { fma }

Circuits:

%ymm1  : (concat (concat (concat <0x0|128> vfmsub132_double(<%ymm2|256>[127:64], (^ <%ymm3|256>[127:64] <0x0|64>), <%ymm1|256>[127:64])[63:8]) vfmsub132_double(<%ymm2|256>[127:64], (^ <%ymm3|256>[127:64] <0x0|64>), <%ymm1|256>[127:64])[7:0]) vfmsub132_double(<%ymm2|256>[63:0], vfmsub132_double(vnfmsub132_double((if (== mincmp_double(<0x0|64>, (concat <0x0|32> <%ymm3|256>[127:96])) <0x1|1>) then <0x0|64> else (concat <0x0|32> <%ymm3|256>[127:96])), (concat <0x0|32> <%ymm3|256>[127:96]), (if (== mincmp_double(<0x0|64>, (concat <0x0|32> <%ymm3|256>[127:96])) <0x1|1>) then <0x0|64> else (concat <0x0|32> <%ymm3|256>[127:96]))), <%ymm3|256>[63:0], <%ymm3|256>[63:0]), <%ymm1|256>[63:0]))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/