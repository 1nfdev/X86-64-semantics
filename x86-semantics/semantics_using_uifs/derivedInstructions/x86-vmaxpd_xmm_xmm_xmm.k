// Autogenerated using stratification.
requires "x86-configuration.k"

module VMAXPD-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vmaxpd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt( maxcmp_double ( extractMInt(getParentValue(R1, RSMap), 128, 192), extractMInt(getParentValue(R2, RSMap), 128, 192) ) ,  maxcmp_double ( extractMInt(getParentValue(R1, RSMap), 192, 256), extractMInt(getParentValue(R2, RSMap), 192, 256) ) )) )


)

    </regstate>
endmodule

module VMAXPD-XMM-XMM-XMM-SEMANTICS
  imports VMAXPD-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vmaxpd %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 %xmm3 }
must read:{ %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:vmovapd %xmm3, %xmm5         #  1     0    4      OPC=vmovapd_xmm_xmm
circuit:vmaxps %xmm2, %xmm2, %xmm11  #  2     0x4  4      OPC=vmaxps_xmm_xmm_xmm
circuit:vmaxpd %ymm5, %ymm11, %ymm1  #  3     0x8  4      OPC=vmaxpd_ymm_ymm_ymm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vmaxpd %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm2 %xmm3 }
  must read:       { %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%ymm1  : (concat <0x0|64> (concat <0x0|64> (concat (if (== maxcmp_double(<%ymm2|256>[127:64], <%ymm3|256>[127:64]) <0x1|1>) then <%ymm2|256>[127:64] else <%ymm3|256>[127:64]) (if (== maxcmp_double(<%ymm2|256>[63:0], <%ymm3|256>[63:0]) <0x1|1>) then <%ymm2|256>[63:0] else <%ymm3|256>[63:0]))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/