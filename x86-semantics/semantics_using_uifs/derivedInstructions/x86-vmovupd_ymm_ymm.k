// Autogenerated using stratification.
requires "x86-configuration.k"

module VMOVUPD-YMM-YMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vmovupd R1:Ymm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (getParentValue(R1, RSMap) )


)

    </regstate>
endmodule

module VMOVUPD-YMM-YMM-SEMANTICS
  imports VMOVUPD-YMM-YMM
endmodule
/*
TargetInstr:
vmovupd %ymm2, %ymm1
RWSet:
maybe read:{ %ymm2 }
must read:{ %ymm2 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:callq .move_128_064_xmm2_r12_r13  #  1     0    5      OPC=callq_label
circuit:vminps %ymm2, %ymm2, %ymm1        #  2     0x5  4      OPC=vminps_ymm_ymm_ymm
circuit:callq .move_064_128_r12_r13_xmm1  #  3     0x9  5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vmovupd %ymm2, %ymm1

  maybe read:      { %ymm2 }
  must read:       { %ymm2 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%ymm1  : <%ymm2|256>

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/