// Autogenerated using stratification.
requires "x86-configuration.k"

module VPBROADCASTQ-YMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vpbroadcastq R1:Xmm, R2:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(concatenateMInt(extractMInt(getParentValue(R1, RSMap), 192, 256), extractMInt(getParentValue(R1, RSMap), 192, 256)), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 192, 256), extractMInt(getParentValue(R1, RSMap), 192, 256))) )


)

    </regstate>
endmodule

module VPBROADCASTQ-YMM-XMM-SEMANTICS
  imports VPBROADCASTQ-YMM-XMM
endmodule
/*
TargetInstr:
vpbroadcastq %xmm2, %ymm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx2 }

Circuit:
circuit:vpbroadcastq %xmm2, %xmm1           #  1     0     5      OPC=vpbroadcastq_xmm_xmm
circuit:vmovupd %xmm1, %xmm8                #  2     0x5   4      OPC=vmovupd_xmm_xmm
circuit:vmovdqa %ymm1, %ymm9                #  3     0x9   4      OPC=vmovdqa_ymm_ymm
circuit:callq .move_128_256_xmm8_xmm9_ymm1  #  4     0xd   5      OPC=callq_label
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vpbroadcastq %xmm2, %ymm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx2 }

Circuits:

%ymm1  : (concat (concat <%ymm2|256>[63:0] <%ymm2|256>[63:0]) (concat <%ymm2|256>[63:0] <%ymm2|256>[63:0]))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/