// Autogenerated using stratification.
requires "x86-configuration.k"

module VPMOVSXBD-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vpmovsxbd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(mi(64, 18446743528248704896), concatenateMInt(extractMInt(addMInt(concatenateMInt(mi(57, 0), extractMInt(getParentValue(R1, RSMap), 224, 232)), mi(65, 4294967168)), 33, 65), extractMInt(addMInt(concatenateMInt(mi(1, 0), concatenateMInt(concatenateMInt(mi(24, 0), extractMInt(getParentValue(R1, RSMap), 232, 240)), mi(32, -128))), concatenateMInt(mi(57, 0), extractMInt(getParentValue(R1, RSMap), 232, 240))), 33, 65))), xorMInt(mi(64, 18446743528248704896), concatenateMInt(extractMInt(addMInt(mi(65, 18446743528248704896), concatenateMInt(mi(1, 0), concatenateMInt(mi(32, -128), concatenateMInt(mi(24, 0), extractMInt(getParentValue(R1, RSMap), 240, 248))))), 33, 65), extractMInt(addMInt(mi(65, 18446743528248704896), concatenateMInt(mi(1, 0), concatenateMInt(mi(32, -128), concatenateMInt(mi(24, 0), extractMInt(getParentValue(R1, RSMap), 248, 256))))), 33, 65))))) )


)

    </regstate>
endmodule

module VPMOVSXBD-XMM-XMM-SEMANTICS
  imports VPMOVSXBD-XMM-XMM
endmodule
/*
TargetInstr:
vpmovsxbd %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:callq .move_128_064_xmm2_r10_r11  #  1     0     5      OPC=callq_label
circuit:vzeroall                          #  2     0x5   3      OPC=vzeroall
circuit:callq .move_064_128_r10_r11_xmm1  #  3     0x8   5      OPC=callq_label
circuit:pmovsxbd %xmm1, %xmm1             #  4     0xd   5      OPC=pmovsxbd_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vpmovsxbd %xmm2, %xmm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%ymm1  : (concat <0x0|128> (concat (concat (^ (concat (plus (concat <0x0|1> (concat <0x0|32> (concat <0x0|24> <%ymm2|256>[31:24]))) (concat <0x0|1> <0xffffff80|64>))[31:0] (plus (concat <0x0|1> (concat (concat <0x0|24> <%ymm2|256>[23:16]) <0xffffff80|32>)) (concat <0x0|1> (concat <0x0|32> (concat <0x0|24> <%ymm2|256>[23:16]))))[31:0]) <0xffffff80ffffff80|64>) (^ (plus (concat <0x0|1> <0xffffff80ffffff80|64>) (concat <0x0|1> (concat <0xffffff80|32> (concat <0x0|24> <%ymm2|256>[15:8]))))[31:0] <0xffffff80|32>)) (^ (plus (concat <0x0|1> <0xffffff80ffffff80|64>) (concat <0x0|1> (concat <0xffffff80|32> (concat <0x0|24> <%ymm2|256>[7:0]))))[31:0] <0xffffff80|32>)))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/