// Autogenerated using stratification.
requires "x86-configuration.k"

module VPUNPCKHWD-XMM-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vpunpckhwd R1:Xmm, R2:Xmm, R3:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(mi(128, 0), concatenateMInt(xorMInt(xorMInt(orMInt(concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 144, 160)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 144, 160))), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 128, 160), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 144, 160), extractMInt(getParentValue(R1, RSMap), 144, 160)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 144, 160)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 144, 160)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 128, 144)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 144, 160)))), xorMInt(xorMInt(orMInt(concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 176, 192)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 176, 192))), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 160, 192), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 176, 192), extractMInt(getParentValue(R1, RSMap), 176, 192)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 176, 192)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 176, 192)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 160, 176)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 176, 192)))))) )


)

    </regstate>
endmodule

module VPUNPCKHWD-XMM-XMM-XMM-SEMANTICS
  imports VPUNPCKHWD-XMM-XMM-XMM
endmodule
/*
TargetInstr:
vpunpckhwd %xmm3, %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 %xmm3 }
must read:{ %xmm2 %xmm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:callq .move_128_64_xmm2_xmm8_xmm9    #  1     0     5      OPC=callq_label
circuit:callq .move_128_064_xmm3_r12_r13     #  2     0x5   5      OPC=callq_label
circuit:callq .move_064_128_r12_r13_xmm2     #  3     0xa   5      OPC=callq_label
circuit:callq .move_128_64_xmm2_xmm10_xmm11  #  4     0xf   5      OPC=callq_label
circuit:vpunpcklwd %xmm11, %xmm9, %xmm1      #  5     0x14  5      OPC=vpunpcklwd_xmm_xmm_xmm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vpunpckhwd %xmm3, %xmm2, %xmm1

  maybe read:      { %xmm2 %xmm3 }
  must read:       { %xmm2 %xmm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%ymm1  : (concat <0x0|128> (concat (^ (concat (concat <0x0|16> <%ymm2|256>[127:112]) (concat <0x0|16> <%ymm2|256>[111:96])) (^ (concat (concat <0x0|16> <%ymm3|256>[111:96]) (concat <0x0|16> <%ymm3|256>[111:96])) (| (concat <%ymm3|256>[127:96] (concat <%ymm3|256>[111:96] <%ymm3|256>[111:96])) (concat (concat <0x0|16> <%ymm3|256>[111:96]) (concat <0x0|16> <%ymm3|256>[111:96]))))) (^ (concat (concat <0x0|16> <%ymm2|256>[95:80]) (concat <0x0|16> <%ymm2|256>[79:64])) (^ (concat (concat <0x0|16> <%ymm3|256>[79:64]) (concat <0x0|16> <%ymm3|256>[79:64])) (| (concat <%ymm3|256>[95:64] (concat <%ymm3|256>[79:64] <%ymm3|256>[79:64])) (concat (concat <0x0|16> <%ymm3|256>[79:64]) (concat <0x0|16> <%ymm3|256>[79:64])))))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/