// Autogenerated using stratification.
requires "x86-configuration.k"

module VPUNPCKHWD-YMM-YMM-YMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vpunpckhwd R1:Ymm, R2:Ymm, R3:Ymm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R3) |-> (concatenateMInt(concatenateMInt(xorMInt(xorMInt(orMInt(concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 16, 32)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 16, 32))), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 0, 32), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 16, 32), extractMInt(getParentValue(R1, RSMap), 16, 32)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 16, 32)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 16, 32)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 0, 16)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 16, 32)))), xorMInt(xorMInt(orMInt(concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 48, 64)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 48, 64))), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 32, 64), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 48, 64), extractMInt(getParentValue(R1, RSMap), 48, 64)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 48, 64)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 48, 64)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 32, 48)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 48, 64))))), concatenateMInt(xorMInt(xorMInt(orMInt(concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 144, 160)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 144, 160))), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 128, 160), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 144, 160), extractMInt(getParentValue(R1, RSMap), 144, 160)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 144, 160)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 144, 160)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 128, 144)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 144, 160)))), xorMInt(xorMInt(orMInt(concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 176, 192)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 176, 192))), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 160, 192), concatenateMInt(extractMInt(getParentValue(R1, RSMap), 176, 192), extractMInt(getParentValue(R1, RSMap), 176, 192)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 176, 192)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R1, RSMap), 176, 192)))), concatenateMInt(concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 160, 176)), concatenateMInt(mi(16, 0), extractMInt(getParentValue(R2, RSMap), 176, 192)))))) )


)

    </regstate>
endmodule

module VPUNPCKHWD-YMM-YMM-YMM-SEMANTICS
  imports VPUNPCKHWD-YMM-YMM-YMM
endmodule
/*
TargetInstr:
vpunpckhwd %ymm3, %ymm2, %ymm1
RWSet:
maybe read:{ %ymm2 %ymm3 }
must read:{ %ymm2 %ymm3 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx2 }

Circuit:
circuit:vpunpckhqdq %ymm3, %ymm2, %ymm4  #  1     0    4      OPC=vpunpckhqdq_ymm_ymm_ymm
circuit:vunpckhpd %ymm4, %ymm4, %ymm5    #  2     0x4  4      OPC=vunpckhpd_ymm_ymm_ymm
circuit:vpunpcklwd %ymm5, %ymm4, %ymm1   #  3     0x8  4      OPC=vpunpcklwd_ymm_ymm_ymm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vpunpckhwd %ymm3, %ymm2, %ymm1

  maybe read:      { %ymm2 %ymm3 }
  must read:       { %ymm2 %ymm3 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx2 }

Circuits:

%ymm1  : (concat (concat (^ (concat (concat <0x0|16> <%ymm2|256>[255:240]) (concat <0x0|16> <%ymm2|256>[239:224])) (^ (concat (concat <0x0|16> <%ymm3|256>[239:224]) (concat <0x0|16> <%ymm3|256>[239:224])) (| (concat <%ymm3|256>[255:224] (concat <%ymm3|256>[239:224] <%ymm3|256>[239:224])) (concat (concat <0x0|16> <%ymm3|256>[239:224]) (concat <0x0|16> <%ymm3|256>[239:224]))))) (^ (concat (concat <0x0|16> <%ymm2|256>[223:208]) (concat <0x0|16> <%ymm2|256>[207:192])) (^ (concat (concat <0x0|16> <%ymm3|256>[207:192]) (concat <0x0|16> <%ymm3|256>[207:192])) (| (concat <%ymm3|256>[223:192] (concat <%ymm3|256>[207:192] <%ymm3|256>[207:192])) (concat (concat <0x0|16> <%ymm3|256>[207:192]) (concat <0x0|16> <%ymm3|256>[207:192])))))) (concat (^ (concat (concat <0x0|16> <%ymm2|256>[127:112]) (concat <0x0|16> <%ymm2|256>[111:96])) (^ (concat (concat <0x0|16> <%ymm3|256>[111:96]) (concat <0x0|16> <%ymm3|256>[111:96])) (| (concat <%ymm3|256>[127:96] (concat <%ymm3|256>[111:96] <%ymm3|256>[111:96])) (concat (concat <0x0|16> <%ymm3|256>[111:96]) (concat <0x0|16> <%ymm3|256>[111:96]))))) (^ (concat (concat <0x0|16> <%ymm2|256>[95:80]) (concat <0x0|16> <%ymm2|256>[79:64])) (^ (concat (concat <0x0|16> <%ymm3|256>[79:64]) (concat <0x0|16> <%ymm3|256>[79:64])) (| (concat <%ymm3|256>[95:64] (concat <%ymm3|256>[79:64] <%ymm3|256>[79:64])) (concat (concat <0x0|16> <%ymm3|256>[79:64]) (concat <0x0|16> <%ymm3|256>[79:64])))))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/