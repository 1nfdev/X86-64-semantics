// Autogenerated using stratification.
requires "x86-configuration.k"

module VSQRTPD-XMM-XMM
  imports X86-CONFIGURATION

  rule <k>
    execinstr (vsqrtpd R1:Xmm, R2:Xmm,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
convToRegKeys(R2) |-> (concatenateMInt(mi(128, 0), concatenateMInt( sqrt_double ( extractMInt(getParentValue(R1, RSMap), 128, 192) ) ,  sqrt_double ( extractMInt(getParentValue(R1, RSMap), 192, 256) ) )) )


)

    </regstate>
endmodule

module VSQRTPD-XMM-XMM-SEMANTICS
  imports VSQRTPD-XMM-XMM
endmodule
/*
TargetInstr:
vsqrtpd %xmm2, %xmm1
RWSet:
maybe read:{ %xmm2 }
must read:{ %xmm2 }
maybe write:{ %ymm1 }
must write:{ %ymm1 }
maybe undef:{ }
must undef:{ }
required flags:{ avx }

Circuit:
circuit:callq .move_128_064_xmm2_r8_r9  #  1     0     5      OPC=callq_label
circuit:callq .move_064_128_r8_r9_xmm3  #  2     0x5   5      OPC=callq_label
circuit:vmovdqu %xmm3, %xmm2            #  3     0xa   4      OPC=vmovdqu_xmm_xmm
circuit:vsqrtpd %ymm2, %ymm1            #  4     0xe   4      OPC=vsqrtpd_ymm_ymm
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

vsqrtpd %xmm2, %xmm1

  maybe read:      { %xmm2 }
  must read:       { %xmm2 }
  maybe write:     { %ymm1 }
  must write:      { %ymm1 }
  maybe undef:     { }
  must undef:      { }
  required flags:  { avx }

Circuits:

%ymm1  : (concat <0x0|64> (concat <0x0|64> (concat sqrt_double(<%ymm2|256>[127:64]) sqrt_double(<%ymm2|256>[63:0]))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/