// Autogenerated using stratification.
requires "x86-configuration.k"

module XADDQ-R64-R64
  imports X86-CONFIGURATION

  rule <k>
    execinstr (xaddq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R1, RSMap))), 0, 1) )

 "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R1, RSMap))), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(getParentValue(R2, RSMap), getParentValue(R1, RSMap)), extractMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R1, RSMap))), 1, 65)), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R1, RSMap))), 57, 65), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R1) |-> (getParentValue(R2, RSMap) )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 0, 1), extractMInt(getParentValue(R1, RSMap), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 0, 1), extractMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R1, RSMap))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R1, RSMap))), 1, 65) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R1, RSMap))), 1, 65), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
      requires notBool sameRegisters(R1, R2)

  rule <k>
    execinstr (xaddq R1:R64, R2:R64,  .Operands) => .
  ...</k>
    <regstate>
RSMap:Map => updateMap(RSMap,
 "CF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R1, RSMap))), 0, 1) )

  "SF" |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R1, RSMap))), 1, 2) )

 "AF" |-> ((#ifMInt ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(getParentValue(R2, RSMap), getParentValue(R1, RSMap)), extractMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R1, RSMap))), 1, 65)), 4), mi(64, 1)))  ==K  0 )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "PF" |-> ((#ifMInt ( (  ( countOnes(extractMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R1, RSMap))), 57, 65), 0)  &Int  1 )  ==K  0 )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

 "OF" |-> ((#ifMInt ( ( eqMInt(extractMInt(getParentValue(R2, RSMap), 0, 1), extractMInt(getParentValue(R1, RSMap), 0, 1))  andBool   notBool  ( eqMInt(extractMInt(getParentValue(R2, RSMap), 0, 1), extractMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R1, RSMap))), 1, 2)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)  )

convToRegKeys(R2) |-> (extractMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R1, RSMap))), 1, 65) )

 "ZF" |-> ((#ifMInt (eqMInt(extractMInt(addMInt(concatenateMInt(mi(1, 0), getParentValue(R2, RSMap)), concatenateMInt(mi(1, 0), getParentValue(R1, RSMap))), 1, 65), mi(64, 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi)    )


)

    </regstate>
      requires sameRegisters(R1, R2)
endmodule

module XADDQ-R64-R64-SEMANTICS
  imports XADDQ-R64-R64
endmodule
/*
TargetInstr:
xaddq %rcx, %rbx
RWSet:
maybe read:{ %rcx %rbx }
must read:{ %rcx %rbx }
maybe write:{ %rcx %rbx %cf %pf %af %zf %sf %of }
must write:{ %rcx %rbx %cf %pf %af %zf %sf %of }
maybe undef:{ }
must undef:{ }
required flags:{ }

Circuit:
circuit:movq %rbx, %rsi   #  1     0    3      OPC=movq_r64_r64
circuit:addq %rsi, %rcx   #  2     0x3  3      OPC=addq_r64_r64
circuit:xchgq %rcx, %rbx  #  3     0x6  3      OPC=xchgq_r64_r64
BVF:
WARNING: No live out values provided, assuming { }
WARNING: No def in values provided; assuming { %mxcsr::rc[0] }
Target

xaddq %rcx, %rbx

  maybe read:      { %rcx %rbx }
  must read:       { %rcx %rbx }
  maybe write:     { %rcx %rbx %cf %pf %af %zf %sf %of }
  must write:      { %rcx %rbx %cf %pf %af %zf %sf %of }
  maybe undef:     { }
  must undef:      { }
  required flags:  { }

Circuits:

%rcx   : <%rbx|64>
%rbx   : (plus (concat <0x0|1> <%rbx|64>) (concat <0x0|1> <%rcx|64>))[63:0]

%cf    : (== (plus (concat <0x0|1> <%rbx|64>) (concat <0x0|1> <%rcx|64>))[64:64] <0x1|1>)
%pf    : (not (xor (xor (xor (xor (xor (xor (xor (== (plus (concat <0x0|1> <%rbx|64>) (concat <0x0|1> <%rcx|64>))[0:0] <0x1|1>) (== (plus (concat <0x0|1> <%rbx|64>) (concat <0x0|1> <%rcx|64>))[1:1] <0x1|1>)) (== (plus (concat <0x0|1> <%rbx|64>) (concat <0x0|1> <%rcx|64>))[2:2] <0x1|1>)) (== (plus (concat <0x0|1> <%rbx|64>) (concat <0x0|1> <%rcx|64>))[3:3] <0x1|1>)) (== (plus (concat <0x0|1> <%rbx|64>) (concat <0x0|1> <%rcx|64>))[4:4] <0x1|1>)) (== (plus (concat <0x0|1> <%rbx|64>) (concat <0x0|1> <%rcx|64>))[5:5] <0x1|1>)) (== (plus (concat <0x0|1> <%rbx|64>) (concat <0x0|1> <%rcx|64>))[6:6] <0x1|1>)) (== (plus (concat <0x0|1> <%rbx|64>) (concat <0x0|1> <%rcx|64>))[7:7] <0x1|1>)))
%af    : (== (plus (concat <0x0|1> <%rbx|64>[3:0]) (concat <0x0|1> <%rcx|64>[3:0]))[4:4] <0x1|1>)
%zf    : (== (plus (concat <0x0|1> <%rbx|64>) (concat <0x0|1> <%rcx|64>))[63:0] <0x0|64>)
%sf    : (== (plus (concat <0x0|1> <%rbx|64>) (concat <0x0|1> <%rcx|64>))[63:63] <0x1|1>)
%of    : (and (== (== <%rbx|64>[63:63] <0x1|1>) (== <%rcx|64>[63:63] <0x1|1>)) (not (== (== <%rbx|64>[63:63] <0x1|1>) (== (plus (concat <0x0|1> <%rbx|64>) (concat <0x0|1> <%rcx|64>))[63:63] <0x1|1>))))

sigfpe  : <sigfpe>
sigbus  : <sigbus>
sigsegv : <sigsegv>

*/
