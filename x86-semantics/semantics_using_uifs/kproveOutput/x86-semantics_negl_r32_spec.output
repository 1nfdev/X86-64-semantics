-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(notl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorl(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(setnb(.KList@BASIC-K),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(addl(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmc(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_731:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I6_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_730:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_733:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_732:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_736:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _73_739:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _78_744:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _72_738:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _75_741:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _74_740:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _71_737:K@SORT-K String@STRING-SYNTAX(#""RAX"") |-> _76_742:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _77_743:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _79_745:K@SORT-K   ),, <regstatequeue>(_80_746:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(notl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorl(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(setnb(.KList@BASIC-K),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(addl(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmc(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_731:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I6_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_730:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_733:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_732:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_736:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(xorl(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(setnb(.KList@BASIC-K),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(addl(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmc(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_731:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I6_735:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_730:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_733:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_732:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> xorMInt(MInt@MINT(#"64'4294967295"),, concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_736:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(setnb(.KList@BASIC-K),, typeoperandlist(%al(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(addl(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmc(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> xorMInt(MInt@MINT(#"64'4294967295"),, concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(addl(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmc(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""RBX"") |-> xorMInt(MInt@MINT(#"64'4294967295"),, concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(cmc(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'1")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"33"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"25"),, Int@INT-SYNTAX(#"33")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(xorMInt(MInt@MINT(#"1'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33"))),, MInt@MINT(#"1'0")),, notBool_(eqMInt(xorMInt(MInt@MINT(#"1'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"33"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"33")),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"16'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, MInt@MINT(#"17'65535")),, Int@INT-SYNTAX(#"9"),, Int@INT-SYNTAX(#"17"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"16'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, MInt@MINT(#"17'65535")),, Int@INT-SYNTAX(#"9"),, Int@INT-SYNTAX(#"17")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'1")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"33"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"25"),, Int@INT-SYNTAX(#"33")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(xorMInt(MInt@MINT(#"1'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33"))),, MInt@MINT(#"1'0")),, notBool_(eqMInt(xorMInt(MInt@MINT(#"1'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"33"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"33")),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"16'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, MInt@MINT(#"17'65535")),, Int@INT-SYNTAX(#"9"),, Int@INT-SYNTAX(#"17"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"16'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, MInt@MINT(#"17'65535")),, Int@INT-SYNTAX(#"9"),, Int@INT-SYNTAX(#"17")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'1")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"33"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"25"),, Int@INT-SYNTAX(#"33")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(xorMInt(MInt@MINT(#"1'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33"))),, MInt@MINT(#"1'0")),, notBool_(eqMInt(xorMInt(MInt@MINT(#"1'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"33"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"33")),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"16'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, MInt@MINT(#"17'65535")),, Int@INT-SYNTAX(#"9"),, Int@INT-SYNTAX(#"17"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"16'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, MInt@MINT(#"17'65535")),, Int@INT-SYNTAX(#"9"),, Int@INT-SYNTAX(#"17")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'1")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"33"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"25"),, Int@INT-SYNTAX(#"33")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(xorMInt(MInt@MINT(#"1'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33"))),, MInt@MINT(#"1'0")),, notBool_(eqMInt(xorMInt(MInt@MINT(#"1'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"33"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"33")),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"16'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, MInt@MINT(#"17'65535")),, Int@INT-SYNTAX(#"9"),, Int@INT-SYNTAX(#"17"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"16'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, MInt@MINT(#"17'65535")),, Int@INT-SYNTAX(#"9"),, Int@INT-SYNTAX(#"17")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'1")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"33"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"25"),, Int@INT-SYNTAX(#"33")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(xorMInt(MInt@MINT(#"1'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33"))),, MInt@MINT(#"1'0")),, notBool_(eqMInt(xorMInt(MInt@MINT(#"1'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"33"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"33"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, xorMInt(MInt@MINT(#"32'-1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_734:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"33'1")),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"33")),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for _&Int_
[Warning] Critical: missing SMTLib translation for countOnes
[Warning] Critical: missing SMTLib translation for mi
[Warning] Critical: missing SMTLib translation for svalueMInt
74.20user 0.99system 0:20.84elapsed 360%CPU (0avgtext+0avgdata 1774976maxresident)k
8inputs+3664outputs (0major+414261minor)pagefaults 0swaps
