-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(saveRegister(%ymm1(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), execinstr(__(vmaxps(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm6(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vmaxss(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%xmm10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vsubpd(.KList@BASIC-K),, typeoperandlist(%ymm6(.KList@BASIC-K),, typeoperandlist(%ymm10(.KList@BASIC-K),, typeoperandlist(%ymm7(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(movapd(.KList@BASIC-K),, typeoperandlist(%xmm7(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> _75_729:K@SORT-K String@STRING-SYNTAX(#""YMM1"") |-> _73_727:K@SORT-K String@STRING-SYNTAX(#""YMM10"") |-> _74_728:K@SORT-K String@STRING-SYNTAX(#""YMM6"") |-> _76_730:K@SORT-K String@STRING-SYNTAX(#""SPAD1"") |-> _72_726:K@SORT-K String@STRING-SYNTAX(#""YMM7"") |-> _77_731:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _71_725:K@SORT-K   ),, <regstatequeue>(_78_732:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(saveRegister(%ymm1(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), execinstr(__(vmaxps(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm6(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vmaxss(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%xmm10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vsubpd(.KList@BASIC-K),, typeoperandlist(%ymm6(.KList@BASIC-K),, typeoperandlist(%ymm10(.KList@BASIC-K),, typeoperandlist(%ymm7(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(movapd(.KList@BASIC-K),, typeoperandlist(%xmm7(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vmaxps(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm6(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vmaxss(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%xmm10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vsubpd(.KList@BASIC-K),, typeoperandlist(%ymm6(.KList@BASIC-K),, typeoperandlist(%ymm10(.KList@BASIC-K),, typeoperandlist(%ymm7(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(movapd(.KList@BASIC-K),, typeoperandlist(%xmm7(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vmaxss(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%xmm10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vsubpd(.KList@BASIC-K),, typeoperandlist(%ymm6(.KList@BASIC-K),, typeoperandlist(%ymm10(.KList@BASIC-K),, typeoperandlist(%ymm7(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(movapd(.KList@BASIC-K),, typeoperandlist(%xmm7(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vsubpd(.KList@BASIC-K),, typeoperandlist(%ymm6(.KList@BASIC-K),, typeoperandlist(%ymm10(.KList@BASIC-K),, typeoperandlist(%ymm7(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(movapd(.KList@BASIC-K),, typeoperandlist(%xmm7(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"224"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vsubpd(.KList@BASIC-K),, typeoperandlist(%ymm7(.KList@BASIC-K),, typeoperandlist(concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(_(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, _(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))))),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movapd(.KList@BASIC-K),, typeoperandlist(%xmm7(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"224"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(_(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, _(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))))),, %ymm7(.KList@BASIC-K)), execinstr(__(movapd(.KList@BASIC-K),, typeoperandlist(%xmm7(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"224"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movapd(.KList@BASIC-K),, typeoperandlist(%xmm7(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM10"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"224"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(_(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, _(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, concatenateMInt(_(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, _(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""YMM10"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"224"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(_(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, _(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, concatenateMInt(_(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, _(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))))),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, concatenateMInt(_(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, _(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""YMM10"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"224"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(_(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, _(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, concatenateMInt(_(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, _(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""YMM10"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"224"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(_(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, _(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, concatenateMInt(_(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, _(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""YMM10"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"224"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(_(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, _(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, concatenateMInt(_(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, _(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""YMM10"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"224"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(_(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, _(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, concatenateMInt(_(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, _(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""YMM10"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"224"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"128'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(_(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, _(_,_)(UIFBinOperation@MINT-WRAPPER-SYNTAX(#"sub_double"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I2_724:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, ?I1_723:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for _(_,_)
[Warning] Critical: missing SMTLib translation for mi
78.40user 1.01system 0:20.44elapsed 388%CPU (0avgtext+0avgdata 2185328maxresident)k
0inputs+3672outputs (0major+469747minor)pagefaults 0swaps
