// Autogenerated using stratification.
requires "x86-configuration.k"

module DECB-R8
  imports X86-CONFIGURATION

  rule <k>
    execinstr (decb R1:R8,  .Typedoperands) => .
  ...</k>
    <regstate> ...
// "RBP" |-> ( MI404 => MI404 )

// "CF" |-> ( _ => (#ifMInt ( (  ( ultMInt(addMInt(mi(8, 255), extractMInt(MI398, 56, 64)), mi(8, 255))  orBool  ultMInt(addMInt(mi(8, 255), extractMInt(MI398, 56, 64)), extractMInt(MI398, 56, 64)) )  orBool  ( ultMInt(addMInt(mi(8, 255), extractMInt(MI398, 56, 64)), addMInt(mi(8, 255), extractMInt(MI398, 56, 64)))  orBool  ultMInt(addMInt(mi(8, 255), extractMInt(MI398, 56, 64)), mi(8, 0)) )  )  ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi):>MInt  )

 "AF" |-> ( _ => fromBool((#ifBool ( notBool  (  ( uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(8, 1), extractMInt(MI398, 56, 64)), addMInt(mi(8, 255), extractMInt(MI398, 56, 64))), 4), mi(bitwidthMInt(addMInt(mi(8, 255), extractMInt(MI398, 56, 64))), 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi):>Bool , 1) )

// "RCX" |-> ( _ => mi(64, 0) )

// "R8" |-> ( MI405 => MI405 )

// "R9" |-> ( _ => mi(64, 18446744073709551615) )

// "RDX" |-> ( MI400 => MI400 )

// "RAX" |-> ( MI397 => MI397 )

convToRegKeys(R1) |-> ( MI398 => plugInMask(MI398, addMInt(mi(8, 255), extractMInt(MI398, 56, 64)), 0) )

// "RSI" |-> ( MI401 => MI401 )

 "ZF" |-> ( _ => #ifMInt (eqMInt(addMInt(mi(8, 255), extractMInt(MI398, 56, 64)), mi(bitwidthMInt(addMInt(mi(8, 255), extractMInt(MI398, 56, 64))), 0)) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi  )

// "RSP" |-> ( MI403 => MI403 )

// "R10" |-> ( MI431 => MI431 )

// "R12" |-> ( MI433 => MI433 )

// "R11" |-> ( MI432 => MI432 )

 "SF" |-> ( _ => #ifMInt (eqMInt(mi(bitwidthMInt(addMInt(mi(8, 255), extractMInt(MI398, 56, 64))), 1), lshrMInt(addMInt(mi(8, 255), extractMInt(MI398, 56, 64)),  ( bitwidthMInt(addMInt(mi(8, 255), extractMInt(MI398, 56, 64)))  -Int  1 ) )) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi  )

// "R14" |-> ( MI435 => MI435 )

// "R13" |-> ( MI434 => MI434 )

// "RDI" |-> ( MI402 => MI402 )

 "PF" |-> ( _ => fromBool((#ifBool ( notBool  (  ( uvalueMInt(xorMInt(andMInt(mi(64, countOnes(extractMask(addMInt(mi(8, 255), extractMInt(MI398, 56, 64)), 8, 0), 0)), mi(64, 1)), mi(64, 1)))  ==K  0 )  )  ) #then ( true ) #else ( false ) #fi):>Bool , 1) )

// "R15" |-> ( MI436 => MI436 )

 "OF" |-> ( _ => #ifMInt (eqMInt(mi(bitwidthMInt(addMInt(mi(8, 255), extractMInt(MI398, 56, 64))), 2), addMInt(xorMInt(lshrMInt(mi(8, 255),  ( bitwidthMInt(addMInt(mi(8, 255), extractMInt(MI398, 56, 64)))  -Int  1 ) ), lshrMInt(addMInt(mi(8, 255), extractMInt(MI398, 56, 64)),  ( bitwidthMInt(addMInt(mi(8, 255), extractMInt(MI398, 56, 64)))  -Int  1 ) )), xorMInt(lshrMInt(extractMInt(MI398, 56, 64),  ( bitwidthMInt(addMInt(mi(8, 255), extractMInt(MI398, 56, 64)))  -Int  1 ) ), lshrMInt(addMInt(mi(8, 255), extractMInt(MI398, 56, 64)),  ( bitwidthMInt(addMInt(mi(8, 255), extractMInt(MI398, 56, 64)))  -Int  1 ) )))) ) #then ( mi(1, 1) ) #else ( mi(1, 0) ) #fi  )


    ...</regstate>
endmodule

module DECB-SEMANTICS
  imports DECB-R8
endmodule
  
