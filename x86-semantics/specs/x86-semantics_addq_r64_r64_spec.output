
InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _446:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _447:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _458:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _461:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _455:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _457:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _462:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _456:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _454:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _460:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _459:K@SORT-K   ),, <regstatequeue>(_463:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _446:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _447:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, .List{"typeoperandlist"}(.KList@BASIC-K))))))), execinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _446:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _447:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""OF"")), updateZeroFlag(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)), updateSignFlag(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)), setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _446:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _447:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)), updateSignFlag(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)), setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _446:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)), setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _446:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)), setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _446:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)), setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)), setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, typeoperandlist(MInt@MINT(#"64'0"),, .List{"typeoperandlist"}(.KList@BASIC-K))))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, typeoperandlist(MInt@MINT(#"64'0"),, typeoperandlist(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, typeoperandlist(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, .List{"typeoperandlist"}(.KList@BASIC-K))))))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateOverflowAdd(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))), updateZeroFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))), updateSignFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))), updateAuxCarryFlag(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))), updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))), updateParityFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))), setRegisterValue(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))), updateSignFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))), updateAuxCarryFlag(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))), updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))), updateParityFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))), setRegisterValue(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))), updateAuxCarryFlag(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))), updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))), updateParityFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))), setRegisterValue(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateAuxCarryFlag(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))), updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))), updateParityFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))), setRegisterValue(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))), updateParityFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))), setRegisterValue(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))), setRegisterValue(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _448:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _451:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
63.84user 3.72system 0:22.56elapsed 299%CPU (0avgtext+0avgdata 1821892maxresident)k
0inputs+3760outputs (0major+81232minor)pagefaults 0swaps
