
InitialTerm: 
<T>(<k>(KItem@BASIC-K(#"fetch")),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _441:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _438:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _442:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> _414:K@SORT-K String@STRING-SYNTAX(#""CF"") |-> _423:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _425:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _409:K@SORT-K String@STRING-SYNTAX(#""R8"") |-> _415:K@SORT-K String@STRING-SYNTAX(#""RDX"") |-> _410:K@SORT-K String@STRING-SYNTAX(#""R9"") |-> _416:K@SORT-K String@STRING-SYNTAX(#""RAX"") |-> _407:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _408:K@SORT-K String@STRING-SYNTAX(#""RSI"") |-> _411:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _426:K@SORT-K String@STRING-SYNTAX(#""RSP"") |-> _413:K@SORT-K String@STRING-SYNTAX(#""R10"") |-> _417:K@SORT-K String@STRING-SYNTAX(#""R12"") |-> _419:K@SORT-K String@STRING-SYNTAX(#""R11"") |-> _418:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _427:K@SORT-K String@STRING-SYNTAX(#""R14"") |-> _421:K@SORT-K String@STRING-SYNTAX(#""R13"") |-> _420:K@SORT-K String@STRING-SYNTAX(#""RDI"") |-> _412:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _424:K@SORT-K String@STRING-SYNTAX(#""R15"") |-> _422:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _428:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _406:K@SORT-K   ),, <regstatequeue>(_429:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(KItem@BASIC-K(#"fetch")),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _441:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _438:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _442:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _441:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _438:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _442:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, typeoperandlist(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, .List{"typeoperandlist"}(.KList@BASIC-K))))))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _441:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _438:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _442:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""OF"")), updateZeroFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))), updateSignFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _441:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _438:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _442:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))), updateSignFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _440:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _441:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _438:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _441:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _438:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _438:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _438:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))), setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _438:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(KItem@BASIC-K(#"fetch")),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ),, <regstatequeue>(ListItem(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ))) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'2")   ),, <regstatequeue>(ListItem(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ))) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, typeoperandlist(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, typeoperandlist(MInt@MINT(#"64'0"),, .List{"typeoperandlist"}(.KList@BASIC-K))))))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'2")   ),, <regstatequeue>(ListItem(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ))) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, typeoperandlist(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, typeoperandlist(MInt@MINT(#"64'0"),, typeoperandlist(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, typeoperandlist(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, .List{"typeoperandlist"}(.KList@BASIC-K))))))))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'2")   ),, <regstatequeue>(ListItem(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ))) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateOverflowAdd(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))), updateZeroFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))), updateSignFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))), updateAuxCarryFlag(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))), updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))), updateParityFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))), setRegisterValue(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, %rbx(.KList@BASIC-K)), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'2")   ),, <regstatequeue>(ListItem(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ))) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))), updateSignFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))), updateAuxCarryFlag(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))), updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))), updateParityFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))), setRegisterValue(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, %rbx(.KList@BASIC-K)), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"2")),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, xorMInt(lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'2")   ),, <regstatequeue>(ListItem(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ))) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))), updateAuxCarryFlag(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))), updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))), updateParityFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))), setRegisterValue(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, %rbx(.KList@BASIC-K)), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"2")),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, xorMInt(lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'2")   ),, <regstatequeue>(ListItem(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ))) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateAuxCarryFlag(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))), updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))), updateParityFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))), setRegisterValue(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, %rbx(.KList@BASIC-K)), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"2")),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, xorMInt(lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'2")   ),, <regstatequeue>(ListItem(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ))) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))), updateParityFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))), setRegisterValue(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, %rbx(.KList@BASIC-K)), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"2")),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, xorMInt(lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'2")   ),, <regstatequeue>(ListItem(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ))) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))), setRegisterValue(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, %rbx(.KList@BASIC-K)), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, _orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"2")),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, xorMInt(lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'2")   ),, <regstatequeue>(ListItem(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ))) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, %rbx(.KList@BASIC-K)), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, _orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"2")),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, xorMInt(lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'2")   ),, <regstatequeue>(ListItem(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ))) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, _orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"2")),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, xorMInt(lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'2")   ),, <regstatequeue>(ListItem(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ))) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(KItem@BASIC-K(#"fetch")),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, _orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"2")),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, xorMInt(lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'2")   ),, <regstatequeue>(_List_(ListItem(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ), ListItem(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, _orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"2")),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, xorMInt(lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'2")   )))) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, _orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"2")),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, xorMInt(lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'3")   ),, <regstatequeue>(_List_(ListItem(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ), ListItem(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, _orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"2")),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, xorMInt(lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'2")   )))) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, _orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"2")),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, xorMInt(lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'3")   ),, <regstatequeue>(_List_(ListItem(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ), ListItem(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, _orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"2")),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, xorMInt(lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'2")   )))) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, _orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"2")),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, xorMInt(lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'3")   ),, <regstatequeue>(_List_(ListItem(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ), ListItem(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, _orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"2")),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, xorMInt(lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'2")   )))) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(loc(MInt@MINT(#"64'1")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))) loc(MInt@MINT(#"64'2")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))) loc(MInt@MINT(#"64'0")) |-> storedinstr(__(Opcode@X86-SYNTAX(#"orq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))   ),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, _orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"2")),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, xorMInt(lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'3")   ),, <regstatequeue>(_List_(ListItem(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")),, lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'1")   ), ListItem(String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _404:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, _orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _405:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _400:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _430:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _397:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _401:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _403:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _431:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _433:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _432:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _435:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _434:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _402:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> fromBool(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMask(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(mi(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"2")),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))),, xorMInt(lshrMInt(orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1"))),, lshrMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX))),, _-Int_(bitwidthMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _399:Int@INT-SYNTAX),, orMInt(mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _398:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"1")))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'2")   )))) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for bitwidthMInt
[Warning] Critical: missing SMTLib translation for extractMask
[Warning] Critical: missing SMTLib translation for mi
