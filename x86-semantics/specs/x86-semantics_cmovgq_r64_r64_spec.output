-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(cmovnleq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> _545:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _544:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _542:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _541:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _543:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _546:K@SORT-K   ),, <regstatequeue>(_547:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(cmovnleq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(addMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _539:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX)),, MInt@MINT(#"1'1")),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _539:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX)),, MInt@MINT(#"1'1")),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(addMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _539:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX)),, MInt@MINT(#"1'1")),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _539:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX)),, MInt@MINT(#"1'1")),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(addMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _539:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX)),, MInt@MINT(#"1'1")),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _539:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX)),, MInt@MINT(#"1'1")),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(addMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _539:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX)),, MInt@MINT(#"1'1")),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"16'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX),, MInt@MINT(#"1'0")),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _539:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX)),, MInt@MINT(#"1'1")),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _540:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
99.24user 2.66system 0:27.52elapsed 370%CPU (0avgtext+0avgdata 2590864maxresident)k
8inputs+3712outputs (0major+448828minor)pagefaults 0swaps
