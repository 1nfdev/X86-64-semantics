-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(cmovlq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> _542:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _541:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _539:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _538:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _540:K@SORT-K   ),, <regstatequeue>(_543:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(cmovlq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(#ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))),, xorMInt(MInt@MINT(#"16'65535"),, #ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, concatenateMInt(MInt@MINT(#"15'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, #ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(#ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))),, xorMInt(MInt@MINT(#"16'65535"),, #ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, concatenateMInt(MInt@MINT(#"15'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, #ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(#ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))),, xorMInt(MInt@MINT(#"16'65535"),, #ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, concatenateMInt(MInt@MINT(#"15'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, #ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> #ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(#ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))),, xorMInt(MInt@MINT(#"16'65535"),, #ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, concatenateMInt(MInt@MINT(#"15'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"48")),, #ifMInt_#then_#else_#fi(eqMInt(#ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(concatenateMInt(MInt@MINT(#"7'0"),, xorMInt(xorMInt(mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"1'1"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")),, MInt@MINT(#"1'0")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _534:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
112.60user 3.19system 0:31.57elapsed 366%CPU (0avgtext+0avgdata 2783612maxresident)k
0inputs+3688outputs (0major+494004minor)pagefaults 0swaps
