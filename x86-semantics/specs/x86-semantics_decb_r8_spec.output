
InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"ffffffffffffffff")),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"adcb"),, typeoperandlist(%r9b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _556:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _548:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _549:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _546:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _547:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _545:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> _584:K@SORT-K String@STRING-SYNTAX(#""RAX"") |-> _582:K@SORT-K String@STRING-SYNTAX(#""YMM12"") |-> _579:K@SORT-K String@STRING-SYNTAX(#""YMM13"") |-> _580:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _575:K@SORT-K String@STRING-SYNTAX(#""RDI"") |-> _587:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _576:K@SORT-K String@STRING-SYNTAX(#""RBP"") |-> _589:K@SORT-K String@STRING-SYNTAX(#""CF"") |-> _571:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _573:K@SORT-K String@STRING-SYNTAX(#""R8"") |-> _563:K@SORT-K String@STRING-SYNTAX(#""RDX"") |-> _585:K@SORT-K String@STRING-SYNTAX(#""R9"") |-> _564:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _583:K@SORT-K String@STRING-SYNTAX(#""RSI"") |-> _586:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _574:K@SORT-K String@STRING-SYNTAX(#""RSP"") |-> _588:K@SORT-K String@STRING-SYNTAX(#""R10"") |-> _565:K@SORT-K String@STRING-SYNTAX(#""YMM2"") |-> _578:K@SORT-K String@STRING-SYNTAX(#""YMM1"") |-> _577:K@SORT-K String@STRING-SYNTAX(#""R12"") |-> _567:K@SORT-K String@STRING-SYNTAX(#""R11"") |-> _566:K@SORT-K String@STRING-SYNTAX(#""R14"") |-> _569:K@SORT-K String@STRING-SYNTAX(#""R13"") |-> _568:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _572:K@SORT-K String@STRING-SYNTAX(#""R15"") |-> _570:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _581:K@SORT-K   ),, <regstatequeue>(_536:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"ffffffffffffffff")),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"adcb"),, typeoperandlist(%r9b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _556:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _548:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _549:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _546:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _547:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _545:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(MInt@MINT(#"64'18446744073709551615"),, %r9(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"adcb"),, typeoperandlist(%r9b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _556:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _548:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _549:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _546:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, _537:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _547:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _545:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"adcb"),, typeoperandlist(%r9b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _556:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _548:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _549:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _546:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _547:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _545:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _556:Int@INT-SYNTAX),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _556:Int@INT-SYNTAX),, typeoperandlist(MInt@MINT(#"64'0"),, .List{"typeoperandlist"}(.KList@BASIC-K))))))), execinstr(__(Opcode@X86-SYNTAX(#"adcb"),, typeoperandlist(%r9b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _556:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _548:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _549:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _546:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _547:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _545:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""OF"")), updateZeroFlag(MInt@MINT(#"64'0")), updateSignFlag(MInt@MINT(#"64'0")), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(MInt@MINT(#"64'0")), setRegisterValue(MInt@MINT(#"64'0"),, %rcx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"adcb"),, typeoperandlist(%r9b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _556:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _548:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _549:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _546:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _547:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _545:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(MInt@MINT(#"64'0")), updateSignFlag(MInt@MINT(#"64'0")), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(MInt@MINT(#"64'0")), setRegisterValue(MInt@MINT(#"64'0"),, %rcx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"adcb"),, typeoperandlist(%r9b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _556:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _548:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _546:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _547:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _545:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(MInt@MINT(#"64'0")), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(MInt@MINT(#"64'0")), setRegisterValue(MInt@MINT(#"64'0"),, %rcx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"adcb"),, typeoperandlist(%r9b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _556:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _548:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _546:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _545:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(MInt@MINT(#"64'0")), setRegisterValue(MInt@MINT(#"64'0"),, %rcx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"adcb"),, typeoperandlist(%r9b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _556:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _546:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _545:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(MInt@MINT(#"64'0")), setRegisterValue(MInt@MINT(#"64'0"),, %rcx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"adcb"),, typeoperandlist(%r9b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _556:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _544:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _545:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(MInt@MINT(#"64'0")), setRegisterValue(MInt@MINT(#"64'0"),, %rcx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"adcb"),, typeoperandlist(%r9b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _556:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _545:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(MInt@MINT(#"64'0"),, %rcx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"adcb"),, typeoperandlist(%r9b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _556:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"adcb"),, typeoperandlist(%r9b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"adcb"),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(MInt@MINT(#"8'255"),, typeoperandlist(extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, typeoperandlist(MInt@MINT(#"8'0"),, .List{"typeoperandlist"}(.KList@BASIC-K))))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"adcb"),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(MInt@MINT(#"8'255"),, typeoperandlist(extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, typeoperandlist(MInt@MINT(#"8'0"),, typeoperandlist(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, typeoperandlist(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, .List{"typeoperandlist"}(.KList@BASIC-K))))))))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateOverflowAdd(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))), updateZeroFlag(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))), updateSignFlag(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))), updateAuxCarryFlag(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))), updateCarryFlagAdd(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"8'0"),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))), updateParityFlag(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))), setRegisterValue(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, %bl(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))), updateSignFlag(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))), updateAuxCarryFlag(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))), updateCarryFlagAdd(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"8'0"),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))), updateParityFlag(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))), setRegisterValue(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, %bl(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))), updateAuxCarryFlag(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))), updateCarryFlagAdd(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"8'0"),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))), updateParityFlag(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))), setRegisterValue(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, %bl(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateAuxCarryFlag(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))), updateCarryFlagAdd(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"8'0"),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))), updateParityFlag(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))), setRegisterValue(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, %bl(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateCarryFlagAdd(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"8'0"),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))), updateParityFlag(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))), setRegisterValue(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, %bl(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))), setRegisterValue(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, %bl(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"8'255")),, ultMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, %bl(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"8'255")),, ultMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"8'255")),, ultMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> plugInMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"0")) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"8'255")),, ultMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> plugInMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"0")) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"8'255")),, ultMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> plugInMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"0")) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> mi(Int@INT-SYNTAX(#"64"),, _554:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM12"") |-> mi(Int@INT-SYNTAX(#"256"),, _552:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM13"") |-> mi(Int@INT-SYNTAX(#"256"),, _553:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RDI"") |-> mi(Int@INT-SYNTAX(#"64"),, _559:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'2"),, addMInt(xorMInt(MInt@MINT(#"8'1"),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))),, xorMInt(lshrMInt(extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"7")),, lshrMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"7"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RBP"") |-> mi(Int@INT-SYNTAX(#"64"),, _561:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"8'255")),, ultMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, _562:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'18446744073709551615") String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, _557:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RBX"") |-> plugInMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"0")) String@STRING-SYNTAX(#""RSI"") |-> mi(Int@INT-SYNTAX(#"64"),, _558:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RSP"") |-> mi(Int@INT-SYNTAX(#"64"),, _560:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, _538:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _551:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _550:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, _540:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, _539:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R14"") |-> mi(Int@INT-SYNTAX(#"64"),, _542:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, _541:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(MInt@MINT(#"8'255"),, extractMask(mi(Int@INT-SYNTAX(#"64"),, _555:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"0"))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R15"") |-> mi(Int@INT-SYNTAX(#"64"),, _543:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for bitwidthMInt
[Warning] Critical: missing SMTLib translation for extractMask
[Warning] Critical: missing SMTLib translation for mi
105.61user 0.80system 0:32.63elapsed 326%CPU (0avgtext+0avgdata 947656maxresident)k
16inputs+520outputs (0major+250578minor)pagefaults 0swaps
