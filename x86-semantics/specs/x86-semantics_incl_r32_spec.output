
InitialTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), setFlag(MInt@MINT(#"1'1"),, String@STRING-SYNTAX(#""PF"")), readFlagToRegister(String@STRING-SYNTAX(#""PF""),, %rcx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"adcl"),, typeoperandlist(%ecx(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%ebx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _483:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _484:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _482:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _486:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _481:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> _491:K@SORT-K String@STRING-SYNTAX(#""CF"") |-> _494:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _492:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _489:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _490:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _495:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _487:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _493:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _488:K@SORT-K   ),, <regstatequeue>(_496:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), setFlag(MInt@MINT(#"1'1"),, String@STRING-SYNTAX(#""PF"")), readFlagToRegister(String@STRING-SYNTAX(#""PF""),, %rcx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"adcl"),, typeoperandlist(%ecx(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%ebx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _483:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _484:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _482:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _486:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _481:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'1"),, String@STRING-SYNTAX(#""PF"")), readFlagToRegister(String@STRING-SYNTAX(#""PF""),, %rcx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"adcl"),, typeoperandlist(%ecx(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%ebx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _483:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _484:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _482:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _486:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _481:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(readFlagToRegister(String@STRING-SYNTAX(#""PF""),, %rcx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"adcl"),, typeoperandlist(%ecx(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%ebx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _483:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _484:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _486:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _481:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(MInt@MINT(#"64'1"),, %rcx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"adcl"),, typeoperandlist(%ecx(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%ebx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _483:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _484:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _486:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _481:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"adcl"),, typeoperandlist(%ecx(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%ebx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _483:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _484:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _486:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _481:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"adcl"),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(MInt@MINT(#"32'1"),, typeoperandlist(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, typeoperandlist(MInt@MINT(#"32'0"),, .List{"typeoperandlist"}(.KList@BASIC-K))))))), setSZPForRegister(%ebx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _483:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _484:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _486:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _481:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"adcl"),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(MInt@MINT(#"32'1"),, typeoperandlist(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, typeoperandlist(MInt@MINT(#"32'0"),, typeoperandlist(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, typeoperandlist(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, .List{"typeoperandlist"}(.KList@BASIC-K))))))))), setSZPForRegister(%ebx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _483:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _484:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _486:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _481:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateOverflowAdd(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), updateZeroFlag(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), updateSignFlag(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), updateAuxCarryFlag(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), updateCarryFlagAdd(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'0"),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), updateParityFlag(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %rbx(.KList@BASIC-K)), setSZPForRegister(%ebx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _483:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _484:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _486:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _481:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), updateSignFlag(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), updateAuxCarryFlag(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), updateCarryFlagAdd(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'0"),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), updateParityFlag(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %rbx(.KList@BASIC-K)), setSZPForRegister(%ebx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _483:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _484:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(MInt@MINT(#"32'0"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _481:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), updateAuxCarryFlag(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), updateCarryFlagAdd(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'0"),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), updateParityFlag(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %rbx(.KList@BASIC-K)), setSZPForRegister(%ebx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _483:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _484:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(MInt@MINT(#"32'0"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateAuxCarryFlag(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), updateCarryFlagAdd(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'0"),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), updateParityFlag(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %rbx(.KList@BASIC-K)), setSZPForRegister(%ebx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _484:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(MInt@MINT(#"32'0"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateCarryFlagAdd(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'0"),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), updateParityFlag(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %rbx(.KList@BASIC-K)), setSZPForRegister(%ebx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(MInt@MINT(#"32'0"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %rbx(.KList@BASIC-K)), setSZPForRegister(%ebx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'1")),, ultMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(MInt@MINT(#"32'0"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %rbx(.KList@BASIC-K)), setSZPForRegister(%ebx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'1")),, ultMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(MInt@MINT(#"32'0"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setSZPForRegister(%ebx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'1")),, ultMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(MInt@MINT(#"32'0"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), updateZeroFlag(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), updateParityFlag(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'1")),, ultMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(MInt@MINT(#"32'0"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), updateParityFlag(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'1")),, ultMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(MInt@MINT(#"32'0"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'1")),, ultMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(MInt@MINT(#"32'0"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'1")),, ultMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(MInt@MINT(#"32'0"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'1")),, ultMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(MInt@MINT(#"32'0"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'1")),, ultMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(MInt@MINT(#"32'0"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'1")),, ultMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'1") String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(MInt@MINT(#"32'0"),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(MInt@MINT(#"32'1"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _485:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
62.55user 0.69system 0:22.74elapsed 278%CPU (0avgtext+0avgdata 1822516maxresident)k
0inputs+3768outputs (0major+435293minor)pagefaults 0swaps
