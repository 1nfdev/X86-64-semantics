
InitialTerm: 
<T>(<k>(#KSequence(splitXmmToRegsIn32(%xmm2(.KList@BASIC-K),, %xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K)), combineRegsIn32ToXmm(%xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _438:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> _443:K@SORT-K String@STRING-SYNTAX(#""YMM1"") |-> _442:K@SORT-K String@STRING-SYNTAX(#""YMM4"") |-> _444:K@SORT-K String@STRING-SYNTAX(#""YMM6"") |-> _446:K@SORT-K String@STRING-SYNTAX(#""YMM5"") |-> _445:K@SORT-K String@STRING-SYNTAX(#""YMM7"") |-> _441:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _440:K@SORT-K   ),, <regstatequeue>(_447:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(splitXmmToRegsIn32(%xmm2(.KList@BASIC-K),, %xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K)), combineRegsIn32ToXmm(%xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _438:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))),, %xmm4(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))),, %xmm5(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %xmm6(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, %xmm7(.KList@BASIC-K)), combineRegsIn32ToXmm(%xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _438:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))),, %xmm5(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %xmm6(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, %xmm7(.KList@BASIC-K)), combineRegsIn32ToXmm(%xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _438:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %xmm6(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, %xmm7(.KList@BASIC-K)), combineRegsIn32ToXmm(%xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _438:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, %xmm7(.KList@BASIC-K)), combineRegsIn32ToXmm(%xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _438:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineRegsIn32ToXmm(%xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _438:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(concatenateMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")),, extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128"))),, concatenateMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")),, extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _438:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"256"),, _438:Int@INT-SYNTAX),, MInt@MINT(#"256'-340282366920938463463374607431768211456")),, mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(concatenateMInt(concatenateMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")),, extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128"))),, concatenateMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")),, extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128"))))))) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"256"),, _438:Int@INT-SYNTAX),, MInt@MINT(#"256'-340282366920938463463374607431768211456")),, mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(concatenateMInt(concatenateMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")),, extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128"))),, concatenateMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")),, extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128"))))))) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"256"),, _438:Int@INT-SYNTAX),, MInt@MINT(#"256'-340282366920938463463374607431768211456")),, mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(concatenateMInt(concatenateMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")),, extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128"))),, concatenateMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")),, extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128"))))))) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"256"),, _438:Int@INT-SYNTAX),, MInt@MINT(#"256'-340282366920938463463374607431768211456")),, mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(concatenateMInt(concatenateMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")),, extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128"))),, concatenateMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")),, extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128"))))))) String@STRING-SYNTAX(#""YMM4"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM6"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""YMM5"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""YMM7"") |-> mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(mi(Int@INT-SYNTAX(#"128"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
64.44user 3.54system 0:22.48elapsed 302%CPU (0avgtext+0avgdata 1885028maxresident)k
0inputs+3704outputs (0major+81626minor)pagefaults 0swaps
