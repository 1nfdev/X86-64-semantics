
InitialTerm: 
<T>(<k>(#KSequence(split2NToN(%xmm2(.KList@BASIC-K),, %r12(.KList@BASIC-K),, %r13(.KList@BASIC-K),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%r12(.KList@BASIC-K),, typeoperandlist(%r13(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r12(.KList@BASIC-K),, %r13(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _495:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R13"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> _499:K@SORT-K String@STRING-SYNTAX(#""YMM1"") |-> _498:K@SORT-K String@STRING-SYNTAX(#""R12"") |-> _500:K@SORT-K String@STRING-SYNTAX(#""R13"") |-> _501:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _497:K@SORT-K   ),, <regstatequeue>(_502:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%xmm2(.KList@BASIC-K),, %r12(.KList@BASIC-K),, %r13(.KList@BASIC-K),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%r12(.KList@BASIC-K),, typeoperandlist(%r13(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r12(.KList@BASIC-K),, %r13(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _495:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R13"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, %r12(.KList@BASIC-K)), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, %r13(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%r12(.KList@BASIC-K),, typeoperandlist(%r13(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r12(.KList@BASIC-K),, %r13(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _495:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R13"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, %r13(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%r12(.KList@BASIC-K),, typeoperandlist(%r13(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r12(.KList@BASIC-K),, %r13(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _495:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R13"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%r12(.KList@BASIC-K),, typeoperandlist(%r13(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r12(.KList@BASIC-K),, %r13(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _495:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R13"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, %r13(.KList@BASIC-K)), combineNTo2N(%r12(.KList@BASIC-K),, %r13(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _495:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R13"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineNTo2N(%r12(.KList@BASIC-K),, %r13(.KList@BASIC-K),, %xmm1(.KList@BASIC-K),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"64")), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _495:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R13"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, %xmm1(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _495:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R13"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""R12"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R13"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""R12"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R13"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""R12"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R13"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _495:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""R12"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")) String@STRING-SYNTAX(#""R13"") |-> extractMInt(mi(Int@INT-SYNTAX(#"256"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
70.10user 1.58system 0:19.93elapsed 359%CPU (0avgtext+0avgdata 998512maxresident)k
0inputs+3672outputs (0major+90105minor)pagefaults 0swaps
