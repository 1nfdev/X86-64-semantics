
InitialTerm: 
<T>(<k>(#KSequence(split2NToN(%xmm2(.KList@BASIC-K),, %r8(.KList@BASIC-K),, %r9(.KList@BASIC-K)), combineNTo2N(%r8(.KList@BASIC-K),, %r9(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> _440:K@SORT-K String@STRING-SYNTAX(#""YMM1"") |-> _442:K@SORT-K String@STRING-SYNTAX(#""R8"") |-> _441:K@SORT-K String@STRING-SYNTAX(#""R9"") |-> _439:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _438:K@SORT-K   ),, <regstatequeue>(_443:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%xmm2(.KList@BASIC-K),, %r8(.KList@BASIC-K),, %r9(.KList@BASIC-K)), combineNTo2N(%r8(.KList@BASIC-K),, %r9(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, %r8(.KList@BASIC-K)), setRegisterValue(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, %r9(.KList@BASIC-K)), combineNTo2N(%r8(.KList@BASIC-K),, %r9(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, %r9(.KList@BASIC-K)), combineNTo2N(%r8(.KList@BASIC-K),, %r9(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineNTo2N(%r8(.KList@BASIC-K),, %r9(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, %xmm1(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"256"),, _437:Int@INT-SYNTAX),, MInt@MINT(#"256'-340282366920938463463374607431768211456")),, mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""R8"") |-> extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"256"),, _437:Int@INT-SYNTAX),, MInt@MINT(#"256'-340282366920938463463374607431768211456")),, mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""R8"") |-> extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"256"),, _437:Int@INT-SYNTAX),, MInt@MINT(#"256'-340282366920938463463374607431768211456")),, mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""R8"") |-> extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"256"),, _437:Int@INT-SYNTAX),, MInt@MINT(#"256'-340282366920938463463374607431768211456")),, mi(Int@INT-SYNTAX(#"256"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))))) String@STRING-SYNTAX(#""R8"") |-> extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")) String@STRING-SYNTAX(#""R9"") |-> extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _436:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
65.58user 4.44system 0:23.35elapsed 299%CPU (0avgtext+0avgdata 2035496maxresident)k
0inputs+3744outputs (0major+76995minor)pagefaults 0swaps
