
InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(Derivedopcode@X86-SYNTAX(#"movzwl"),, typeoperandlist(%cx(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), split2NToN(%rbx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"ffffffffffffffc0")),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Derivedopcode@X86-SYNTAX(#"movw"),, typeoperandlist(%r8w(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Derivedopcode@X86-SYNTAX(#"xchgl"),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%r9d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> _498:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _501:K@SORT-K String@STRING-SYNTAX(#""R9"") |-> _499:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _497:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _500:K@SORT-K   ),, <regstatequeue>(_502:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Derivedopcode@X86-SYNTAX(#"movzwl"),, typeoperandlist(%cx(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), split2NToN(%rbx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"ffffffffffffffc0")),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Derivedopcode@X86-SYNTAX(#"movw"),, typeoperandlist(%r8w(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Derivedopcode@X86-SYNTAX(#"xchgl"),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%r9d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _495:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%rbx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"ffffffffffffffc0")),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Derivedopcode@X86-SYNTAX(#"movw"),, typeoperandlist(%r8w(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Derivedopcode@X86-SYNTAX(#"xchgl"),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%r9d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))),, %r8(.KList@BASIC-K)), setRegisterValue(MInt@MINT(#"64'0"),, %r9(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"ffffffffffffffc0")),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Derivedopcode@X86-SYNTAX(#"movw"),, typeoperandlist(%r8w(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Derivedopcode@X86-SYNTAX(#"xchgl"),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%r9d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(MInt@MINT(#"64'0"),, %r9(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"ffffffffffffffc0")),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Derivedopcode@X86-SYNTAX(#"movw"),, typeoperandlist(%r8w(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Derivedopcode@X86-SYNTAX(#"xchgl"),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%r9d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"ffffffffffffffc0")),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Derivedopcode@X86-SYNTAX(#"movw"),, typeoperandlist(%r8w(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Derivedopcode@X86-SYNTAX(#"xchgl"),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%r9d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(MInt@MINT(#"64'18446744073709551552"),, %rbx(.KList@BASIC-K)), execinstr(__(Derivedopcode@X86-SYNTAX(#"movw"),, typeoperandlist(%r8w(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Derivedopcode@X86-SYNTAX(#"xchgl"),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%r9d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Derivedopcode@X86-SYNTAX(#"movw"),, typeoperandlist(%r8w(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Derivedopcode@X86-SYNTAX(#"xchgl"),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%r9d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> MInt@MINT(#"64'18446744073709551552") String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Derivedopcode@X86-SYNTAX(#"xchgl"),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%r9d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"48'281474976710655"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, %r9(.KList@BASIC-K)), execinstr(__(Derivedopcode@X86-SYNTAX(#"xchgl"),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%r9d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"48'281474976710655"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Derivedopcode@X86-SYNTAX(#"xchgl"),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%r9d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"48'281474976710655"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(MInt@MINT(#"16'65535"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(MInt@MINT(#"16'65535"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(MInt@MINT(#"16'65535"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(MInt@MINT(#"16'65535"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _496:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
143.69user 6.04system 0:55.13elapsed 271%CPU (0avgtext+0avgdata 2580924maxresident)k
0inputs+3888outputs (0major+110041minor)pagefaults 0swaps
