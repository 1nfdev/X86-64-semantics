
InitialTerm: 
<T>(<k>(#KSequence(splitXmmToRegsIn32(%xmm2(.KList@BASIC-K),, %xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K)), combineRegsIn32ToXmm(%xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> _482:K@SORT-K String@STRING-SYNTAX(#""YMM1"") |-> _481:K@SORT-K String@STRING-SYNTAX(#""YMM4"") |-> _479:K@SORT-K String@STRING-SYNTAX(#""YMM6"") |-> _478:K@SORT-K String@STRING-SYNTAX(#""YMM5"") |-> _480:K@SORT-K String@STRING-SYNTAX(#""YMM7"") |-> _483:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _477:K@SORT-K   ),, <regstatequeue>(_484:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(splitXmmToRegsIn32(%xmm2(.KList@BASIC-K),, %xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K)), combineRegsIn32ToXmm(%xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))),, %xmm4(.KList@BASIC-K)), setRegisterValue(concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))),, %xmm5(.KList@BASIC-K)), setRegisterValue(concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))),, %xmm6(.KList@BASIC-K)), setRegisterValue(concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))),, %xmm7(.KList@BASIC-K)), combineRegsIn32ToXmm(%xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))),, %xmm5(.KList@BASIC-K)), setRegisterValue(concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))),, %xmm6(.KList@BASIC-K)), setRegisterValue(concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))),, %xmm7(.KList@BASIC-K)), combineRegsIn32ToXmm(%xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))),, %xmm6(.KList@BASIC-K)), setRegisterValue(concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))),, %xmm7(.KList@BASIC-K)), combineRegsIn32ToXmm(%xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))),, %xmm7(.KList@BASIC-K)), combineRegsIn32ToXmm(%xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192")))) String@STRING-SYNTAX(#""YMM5"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineRegsIn32ToXmm(%xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192")))) String@STRING-SYNTAX(#""YMM5"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, %xmm1(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192")))) String@STRING-SYNTAX(#""YMM5"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _475:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192")))) String@STRING-SYNTAX(#""YMM5"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _475:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192")))) String@STRING-SYNTAX(#""YMM5"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _475:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192")))) String@STRING-SYNTAX(#""YMM5"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _475:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192")))) String@STRING-SYNTAX(#""YMM5"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")))) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(MInt@MINT(#"96'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _476:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
64.14user 0.78system 0:22.72elapsed 285%CPU (0avgtext+0avgdata 1775384maxresident)k
0inputs+3800outputs (0major+418183minor)pagefaults 0swaps
