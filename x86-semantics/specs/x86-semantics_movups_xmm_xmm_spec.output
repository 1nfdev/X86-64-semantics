
InitialTerm: 
<T>(<k>(#KSequence(saveRegister(%ymm1(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), splitXmmToR32(%xmm2(.KList@BASIC-K),, %xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, Int@INT-SYNTAX(#"128")), combineR32ToXmm(%xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> _503:K@SORT-K String@STRING-SYNTAX(#""YMM1"") |-> _502:K@SORT-K String@STRING-SYNTAX(#""YMM4"") |-> _504:K@SORT-K String@STRING-SYNTAX(#""YMM6"") |-> _506:K@SORT-K String@STRING-SYNTAX(#""YMM5"") |-> _505:K@SORT-K String@STRING-SYNTAX(#""SPAD1"") |-> _501:K@SORT-K String@STRING-SYNTAX(#""YMM7"") |-> _507:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _500:K@SORT-K   ),, <regstatequeue>(_508:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(saveRegister(%ymm1(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), splitXmmToR32(%xmm2(.KList@BASIC-K),, %xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, Int@INT-SYNTAX(#"128")), combineR32ToXmm(%xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(splitXmmToR32(%xmm2(.KList@BASIC-K),, %xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, Int@INT-SYNTAX(#"128")), combineR32ToXmm(%xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")),, %xmm4(.KList@BASIC-K)), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")),, %xmm5(.KList@BASIC-K)), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192")),, %xmm6(.KList@BASIC-K)), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160")),, %xmm7(.KList@BASIC-K)), combineR32ToXmm(%xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224")),, %xmm5(.KList@BASIC-K)), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192")),, %xmm6(.KList@BASIC-K)), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160")),, %xmm7(.KList@BASIC-K)), combineR32ToXmm(%xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192")),, %xmm6(.KList@BASIC-K)), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160")),, %xmm7(.KList@BASIC-K)), combineR32ToXmm(%xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM6"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM5"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160")),, %xmm7(.KList@BASIC-K)), combineR32ToXmm(%xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM5"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineR32ToXmm(%xmm4(.KList@BASIC-K),, %xmm5(.KList@BASIC-K),, %xmm6(.KList@BASIC-K),, %xmm7(.KList@BASIC-K),, %xmm1(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM5"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, %xmm1(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM5"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM5"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))),, %ymm1(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM5"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM5"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM5"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM5"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256"))) String@STRING-SYNTAX(#""YMM6"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"160"),, Int@INT-SYNTAX(#"192"))) String@STRING-SYNTAX(#""YMM5"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"224'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _499:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"160"))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _498:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
55.75user 2.78system 0:19.39elapsed 301%CPU (0avgtext+0avgdata 1710196maxresident)k
0inputs+3736outputs (0major+83168minor)pagefaults 0swaps
