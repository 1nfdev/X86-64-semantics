-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _529:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _533:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _528:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _531:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _530:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _527:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _532:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _534:K@SORT-K   ),, <regstatequeue>(_535:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %rbx(.KList@BASIC-K)), execinstr(__(adcl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(adcl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(adcl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, typeoperandlist(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, typeoperandlist(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, .List{"typeoperandlist"}(.KList@BASIC-K))))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(adcl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, typeoperandlist(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, typeoperandlist(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, typeoperandlist(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, typeoperandlist(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, .List{"typeoperandlist"}(.KList@BASIC-K))))))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateOverflowAdd(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))), updateZeroFlag(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))), updateSignFlag(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))), updateAuxCarryFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))), updateCarryFlagAdd(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))), updateParityFlag(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))), updateSignFlag(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))), updateAuxCarryFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))), updateCarryFlagAdd(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))), updateParityFlag(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))), updateAuxCarryFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))), updateCarryFlagAdd(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))), updateParityFlag(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateAuxCarryFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))), updateCarryFlagAdd(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))), updateParityFlag(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateCarryFlagAdd(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))), updateParityFlag(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"32'0"),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, _orBool_(ultMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, ultMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"32'0"),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, _orBool_(ultMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, ultMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"32'0"),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, _orBool_(ultMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, ultMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"32'0"),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, _orBool_(ultMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, ultMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"32'0"),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, _orBool_(ultMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, ultMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"32'0"),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, _orBool_(ultMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, ultMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"32'0"),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"32'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"24"),, Int@INT-SYNTAX(#"32")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX)))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _524:Int@INT-SYNTAX))),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
84.37user 3.18system 0:21.61elapsed 405%CPU (0avgtext+0avgdata 1923004maxresident)k
40inputs+3784outputs (0major+171242minor)pagefaults 0swaps
