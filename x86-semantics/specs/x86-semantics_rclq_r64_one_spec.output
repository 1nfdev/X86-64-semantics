
InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _501:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _503:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _505:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _509:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _507:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _508:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _502:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _506:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _504:K@SORT-K   ),, <regstatequeue>(_510:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _501:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, typeoperandlist(concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)),, .List{"typeoperandlist"}(.KList@BASIC-K))))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _501:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"adcq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, typeoperandlist(concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)),, typeoperandlist(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, typeoperandlist(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, .List{"typeoperandlist"}(.KList@BASIC-K))))))))), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _501:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateOverflowAdd(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))), updateZeroFlag(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))), updateSignFlag(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))), updateAuxCarryFlag(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))), updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))), updateParityFlag(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))), setRegisterValue(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, %rbx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _501:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))), updateSignFlag(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))), updateAuxCarryFlag(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))), updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))), updateParityFlag(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))), setRegisterValue(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, %rbx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))), updateAuxCarryFlag(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))), updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))), updateParityFlag(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))), setRegisterValue(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, %rbx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateAuxCarryFlag(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))), updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))), updateParityFlag(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))), setRegisterValue(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, %rbx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))), updateParityFlag(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))), setRegisterValue(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, %rbx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))), setRegisterValue(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, %rbx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX))),, _orBool_(ultMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX))),, ultMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, %rbx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX))),, _orBool_(ultMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX))),, ultMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX))),, _orBool_(ultMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX))),, ultMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX))),, _orBool_(ultMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX))),, ultMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX))),, _orBool_(ultMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX))),, ultMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, ultMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX))),, _orBool_(ultMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX))),, ultMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX)))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, _500:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _499:Int@INT-SYNTAX))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
73.61user 1.51system 0:21.24elapsed 353%CPU (0avgtext+0avgdata 955460maxresident)k
0inputs+3736outputs (0major+84127minor)pagefaults 0swaps
