-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(xorl(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%esp(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(rcll(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%esp(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(rcll(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _526:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _527:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RSP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _531:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _537:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _530:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _533:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _532:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _529:K@SORT-K String@STRING-SYNTAX(#""RAX"") |-> _534:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _535:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _538:K@SORT-K String@STRING-SYNTAX(#""RSP"") |-> _536:K@SORT-K   ),, <regstatequeue>(_539:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(xorl(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, typeoperandlist(%eax(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%esp(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(rcll(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%esp(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(rcll(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _526:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _527:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RSP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%esp(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(rcll(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%esp(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(rcll(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""RSP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(rcll(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%esp(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(rcll(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""RSP"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(rcll(.KList@BASIC-K),, typeoperandlist($0x_(HexConstant@X86-SYNTAX(#"1")),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""RSP"") |-> concatenateMInt(MInt@MINT(#"32'0"),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, _orBool_(ultMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, ultMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""RSP"") |-> concatenateMInt(MInt@MINT(#"32'0"),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, _orBool_(ultMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, ultMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""RSP"") |-> concatenateMInt(MInt@MINT(#"32'0"),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, _orBool_(ultMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, ultMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""RSP"") |-> concatenateMInt(MInt@MINT(#"32'0"),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, _orBool_(ultMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, ultMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'2"),, addMInt(xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, Int@INT-SYNTAX(#"31"))),, xorMInt(lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"31")),, lshrMInt(addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, Int@INT-SYNTAX(#"31"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RAX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, addMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"31'0"),, #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))))) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""RSP"") |-> concatenateMInt(MInt@MINT(#"32'0"),, addMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _528:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
80.71user 3.10system 0:21.07elapsed 397%CPU (0avgtext+0avgdata 2132492maxresident)k
0inputs+3672outputs (0major+288592minor)pagefaults 0swaps
