-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(split2NToN(%rbx(.KList@BASIC-K),, %r12d(.KList@BASIC-K),, %r13d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), combineNTo2N(%r12d(.KList@BASIC-K),, %r13d(.KList@BASIC-K),, %rcx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(addq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_612:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R13"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_613:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> _74_620:K@SORT-K String@STRING-SYNTAX(#""CF"") |-> _71_617:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _79_625:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _70_616:K@SORT-K String@STRING-SYNTAX(#""R13"") |-> _75_621:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _73_619:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _78_624:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _72_618:K@SORT-K String@STRING-SYNTAX(#""R9"") |-> _76_622:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _69_615:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _77_623:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _80_626:K@SORT-K   ),, <regstatequeue>(_81_627:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%rbx(.KList@BASIC-K),, %r12d(.KList@BASIC-K),, %r13d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), combineNTo2N(%r12d(.KList@BASIC-K),, %r13d(.KList@BASIC-K),, %rcx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(addq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_612:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R13"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_613:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, %r12(.KList@BASIC-K)), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))),, %r13(.KList@BASIC-K)), combineNTo2N(%r12d(.KList@BASIC-K),, %r13d(.KList@BASIC-K),, %rcx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(addq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_612:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R13"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_613:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))),, %r13(.KList@BASIC-K)), combineNTo2N(%r12d(.KList@BASIC-K),, %r13d(.KList@BASIC-K),, %rcx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(addq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_612:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R13"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_613:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineNTo2N(%r12d(.KList@BASIC-K),, %r13d(.KList@BASIC-K),, %rcx(.KList@BASIC-K),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"32")), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(addq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_612:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_613:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, %rcx(.KList@BASIC-K)), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(addq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_612:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RCX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_613:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(addq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_612:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_613:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, %r9(.KList@BASIC-K)), execinstr(__(addq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_612:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_613:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(addq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%r9(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(xchgw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_612:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_613:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(xchgw(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(adcq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(adcq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, typeoperandlist(concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, typeoperandlist(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, .List{"typeoperandlist"}(.KList@BASIC-K)))))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateOverflowAdd(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))), updateZeroFlag(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))), updateSignFlag(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))), updateAuxCarryFlag(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))), updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))), updateParityFlag(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))), setRegisterValue(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))), updateSignFlag(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))), updateAuxCarryFlag(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))), updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))), updateParityFlag(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))), setRegisterValue(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))), updateAuxCarryFlag(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))), updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))), updateParityFlag(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))), setRegisterValue(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateAuxCarryFlag(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))), updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))), updateParityFlag(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))), setRegisterValue(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateCarryFlagAdd(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))), updateParityFlag(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))), setRegisterValue(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))), setRegisterValue(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, concatenateMInt(MInt@MINT(#"64'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, concatenateMInt(MInt@MINT(#"64'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, concatenateMInt(MInt@MINT(#"64'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, concatenateMInt(MInt@MINT(#"64'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, concatenateMInt(MInt@MINT(#"64'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, concatenateMInt(MInt@MINT(#"64'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(MInt@MINT(#"64'0"),, addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")),, extractMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"63'0"),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX)),, concatenateMInt(MInt@MINT(#"1'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I3_614:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for _&Int_
[Warning] Critical: missing SMTLib translation for countOnes
[Warning] Critical: missing SMTLib translation for mi
[Warning] Critical: missing SMTLib translation for svalueMInt
119.93user 7.22system 0:31.10elapsed 408%CPU (0avgtext+0avgdata 2919624maxresident)k
0inputs+3912outputs (0major+92947minor)pagefaults 0swaps
