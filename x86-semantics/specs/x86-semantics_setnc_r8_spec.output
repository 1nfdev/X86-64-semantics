-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(saveRegister(%rbx(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), readFlagToRegister(String@STRING-SYNTAX(#""CF""),, %rbx(.KList@BASIC-K)), execinstr(__(orl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(setge(.KList@BASIC-K),, typeoperandlist(%r10b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%r10b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> _533:K@SORT-K String@STRING-SYNTAX(#""CF"") |-> _530:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _535:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _529:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _532:K@SORT-K String@STRING-SYNTAX(#""SPAD1"") |-> _528:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _531:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _527:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _534:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _536:K@SORT-K   ),, <regstatequeue>(_537:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(saveRegister(%rbx(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), readFlagToRegister(String@STRING-SYNTAX(#""CF""),, %rbx(.KList@BASIC-K)), execinstr(__(orl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(setge(.KList@BASIC-K),, typeoperandlist(%r10b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%r10b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(readFlagToRegister(String@STRING-SYNTAX(#""CF""),, %rbx(.KList@BASIC-K)), execinstr(__(orl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(setge(.KList@BASIC-K),, typeoperandlist(%r10b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%r10b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, %rbx(.KList@BASIC-K)), execinstr(__(orl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(setge(.KList@BASIC-K),, typeoperandlist(%r10b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%r10b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(orl(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(setge(.KList@BASIC-K),, typeoperandlist(%r10b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%r10b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""PF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> MInt@MINT(#"1'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(setge(.KList@BASIC-K),, typeoperandlist(%r10b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%r10b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(xorb(.KList@BASIC-K),, typeoperandlist(%r10b(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"56'0"),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1"))) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"63'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, MInt@MINT(#"32'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"56'0"),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1"))) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'1"),, lshrMInt(xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"7"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"56'0"),, xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"56'0"),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1"))) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'1"),, lshrMInt(xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"7"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"56'0"),, xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"56'0"),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1"))) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'1"),, lshrMInt(xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"7"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"56'0"),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1"))) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'1"),, lshrMInt(xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"7"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"56'0"),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1"))) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'1"),, lshrMInt(xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"7"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"56'0"),, xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1"))) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"8'1"),, lshrMInt(xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"7"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _526:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(xorMInt(xorMInt(concatenateMInt(MInt@MINT(#"7'0"),, #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"32'1"),, lshrMInt(concatenateMInt(MInt@MINT(#"31'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"31"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"8'0")),, MInt@MINT(#"8'1")),, concatenateMInt(MInt@MINT(#"7'0"),, mi(Int@INT-SYNTAX(#"1"),, _525:Int@INT-SYNTAX))),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
77.77user 4.45system 0:19.65elapsed 418%CPU (0avgtext+0avgdata 2281256maxresident)k
0inputs+3720outputs (0major+192424minor)pagefaults 0swaps
