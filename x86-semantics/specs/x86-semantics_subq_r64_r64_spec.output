-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(stc(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(notq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(adcq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmc(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _531:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _530:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _533:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _532:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _540:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _545:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _539:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _542:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _544:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _541:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _538:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _543:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _546:K@SORT-K   ),, <regstatequeue>(_547:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(stc(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(notq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(adcq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmc(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _531:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _530:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _533:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _532:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(notq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))), execinstr(__(adcq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmc(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _530:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _533:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _532:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(adcq(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(cmc(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _530:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _533:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _532:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(adcq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, typeoperandlist(MInt@MINT(#"64'1"),, .List{"typeoperandlist"}(.KList@BASIC-K))))))), execinstr(__(cmc(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _530:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _533:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _532:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(adcq(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, typeoperandlist(MInt@MINT(#"64'1"),, typeoperandlist(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, typeoperandlist(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, .List{"typeoperandlist"}(.KList@BASIC-K))))))))), execinstr(__(cmc(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _530:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _533:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _532:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateOverflowAdd(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))), updateZeroFlag(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))), updateSignFlag(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))), updateAuxCarryFlag(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))), updateCarryFlagAdd(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"),, addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))), updateParityFlag(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))), setRegisterValue(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, %rbx(.KList@BASIC-K)), execinstr(__(cmc(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _530:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _533:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _532:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))), updateSignFlag(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))), updateAuxCarryFlag(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))), updateCarryFlagAdd(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"),, addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))), updateParityFlag(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))), setRegisterValue(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, %rbx(.KList@BASIC-K)), execinstr(__(cmc(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _530:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _533:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _537:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))), updateAuxCarryFlag(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))), updateCarryFlagAdd(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"),, addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))), updateParityFlag(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))), setRegisterValue(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, %rbx(.KList@BASIC-K)), execinstr(__(cmc(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _536:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _530:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _533:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateAuxCarryFlag(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))), updateCarryFlagAdd(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"),, addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))), updateParityFlag(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))), setRegisterValue(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, %rbx(.KList@BASIC-K)), execinstr(__(cmc(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _530:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _533:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateCarryFlagAdd(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"),, addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))), updateParityFlag(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))), setRegisterValue(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, %rbx(.KList@BASIC-K)), execinstr(__(cmc(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'1") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _533:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))), setRegisterValue(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, %rbx(.KList@BASIC-K)), execinstr(__(cmc(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX))),, ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, _orBool_(ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _533:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, %rbx(.KList@BASIC-K)), execinstr(__(cmc(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX))),, ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, _orBool_(ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(cmc(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX))),, ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, _orBool_(ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX))),, ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, _orBool_(ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX))),, ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, _orBool_(ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX))),, ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, _orBool_(ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX))),, ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, _orBool_(ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX))),, ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, _orBool_(ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX))),, ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, _orBool_(ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX))),, ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, _orBool_(ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX))),, ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, _orBool_(ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX))),, ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, _orBool_(ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> #ifMInt_#then_#else_#fi(ultMInt(addMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX))),, ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, _orBool_(ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX))),, ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, _orBool_(ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"15'0"),, #ifMInt_#then_#else_#fi(_orBool_(_orBool_(ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX))),, ultMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, _orBool_(ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX))),, ultMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1")))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))),, MInt@MINT(#"16'65535")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'2"),, addMInt(xorMInt(lshrMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))),, xorMInt(lshrMInt(mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"63")),, lshrMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, Int@INT-SYNTAX(#"63"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(addMInt(addMInt(xorMInt(MInt@MINT(#"64'18446744073709551615"),, mi(Int@INT-SYNTAX(#"64"),, _535:Int@INT-SYNTAX)),, mi(Int@INT-SYNTAX(#"64"),, _534:Int@INT-SYNTAX)),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
84.64user 2.84system 0:22.74elapsed 384%CPU (0avgtext+0avgdata 1995808maxresident)k
0inputs+3744outputs (0major+255544minor)pagefaults 0swaps
