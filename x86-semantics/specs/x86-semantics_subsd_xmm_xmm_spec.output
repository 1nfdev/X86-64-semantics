
InitialTerm: 
<T>(<k>(#KSequence(saveRegister(%ymm1(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vmovss(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, typeoperandlist(%xmm7(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vsubpd(.KList@BASIC-K),, typeoperandlist(%xmm7(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%xmm4(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(movsd(.KList@BASIC-K),, typeoperandlist(%xmm4(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> _511:K@SORT-K String@STRING-SYNTAX(#""YMM1"") |-> _510:K@SORT-K String@STRING-SYNTAX(#""YMM4"") |-> _512:K@SORT-K String@STRING-SYNTAX(#""SPAD1"") |-> _508:K@SORT-K String@STRING-SYNTAX(#""YMM7"") |-> _513:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _507:K@SORT-K String@STRING-SYNTAX(#""YMM0"") |-> _509:K@SORT-K   ),, <regstatequeue>(_514:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(saveRegister(%ymm1(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vmovss(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, typeoperandlist(%xmm7(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vsubpd(.KList@BASIC-K),, typeoperandlist(%xmm7(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%xmm4(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(movsd(.KList@BASIC-K),, typeoperandlist(%xmm4(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%xmm2(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(vmovss(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, typeoperandlist(%xmm7(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vsubpd(.KList@BASIC-K),, typeoperandlist(%xmm7(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%xmm4(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(movsd(.KList@BASIC-K),, typeoperandlist(%xmm4(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> MInt@MINT(#"256'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vmovss(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, typeoperandlist(%xmm0(.KList@BASIC-K),, typeoperandlist(%xmm7(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(vsubpd(.KList@BASIC-K),, typeoperandlist(%xmm7(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%xmm4(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(movsd(.KList@BASIC-K),, typeoperandlist(%xmm4(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"192'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vsubpd(.KList@BASIC-K),, typeoperandlist(%xmm7(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, typeoperandlist(%xmm4(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(movsd(.KList@BASIC-K),, typeoperandlist(%xmm4(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"64'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"192'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movsd(.KList@BASIC-K),, typeoperandlist(%xmm4(.KList@BASIC-K),, typeoperandlist(%xmm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(Float2MInt(_-Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, Float@FLOAT-SYNTAX(#"0e+00")),, Int@INT-SYNTAX(#"64")),, Float2MInt(_-Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"64'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"192'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"128"),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"192")),, Float2MInt(_-Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(Float2MInt(_-Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, Float@FLOAT-SYNTAX(#"0e+00")),, Int@INT-SYNTAX(#"64")),, Float2MInt(_-Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"64'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"192'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"192")),, Float2MInt(_-Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64"))),, %ymm1(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"192")),, Float2MInt(_-Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(Float2MInt(_-Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, Float@FLOAT-SYNTAX(#"0e+00")),, Int@INT-SYNTAX(#"64")),, Float2MInt(_-Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"64'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"192'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"192")),, Float2MInt(_-Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(Float2MInt(_-Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, Float@FLOAT-SYNTAX(#"0e+00")),, Int@INT-SYNTAX(#"64")),, Float2MInt(_-Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"64'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"192'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"192")),, Float2MInt(_-Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(Float2MInt(_-Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, Float@FLOAT-SYNTAX(#"0e+00")),, Int@INT-SYNTAX(#"64")),, Float2MInt(_-Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"64'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"192'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"192")),, Float2MInt(_-Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(Float2MInt(_-Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, Float@FLOAT-SYNTAX(#"0e+00")),, Int@INT-SYNTAX(#"64")),, Float2MInt(_-Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"64'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"192'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"192")),, Float2MInt(_-Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""YMM4"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(Float2MInt(_-Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, Float@FLOAT-SYNTAX(#"0e+00")),, Int@INT-SYNTAX(#"64")),, Float2MInt(_-Float_(MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11")),, MInt2Float(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"53"),, Int@INT-SYNTAX(#"11"))),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SPAD1"") |-> mi(Int@INT-SYNTAX(#"256"),, _505:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM7"") |-> concatenateMInt(MInt@MINT(#"128'0"),, concatenateMInt(concatenateMInt(MInt@MINT(#"64'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"224"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"224"),, Int@INT-SYNTAX(#"256")))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM0"") |-> concatenateMInt(MInt@MINT(#"192'0"),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _506:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for Float2MInt
[Warning] Critical: missing SMTLib translation for mi
63.80user 4.60system 0:15.15elapsed 451%CPU (0avgtext+0avgdata 1860452maxresident)k
0inputs+3656outputs (0major+91644minor)pagefaults 0swaps
