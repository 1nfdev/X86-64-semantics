-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(vandps(.KList@BASIC-K),, typeoperandlist(%ymm3(.KList@BASIC-K),, typeoperandlist(%ymm2(.KList@BASIC-K),, typeoperandlist(%ymm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _532:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> _537:K@SORT-K String@STRING-SYNTAX(#""YMM1"") |-> _536:K@SORT-K String@STRING-SYNTAX(#""YMM3"") |-> _538:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _535:K@SORT-K   ),, <regstatequeue>(_539:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(vandps(.KList@BASIC-K),, typeoperandlist(%ymm3(.KList@BASIC-K),, typeoperandlist(%ymm2(.KList@BASIC-K),, typeoperandlist(%ymm1(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K)))))), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _532:Int@INT-SYNTAX) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")))),, xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"))))),, concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")))),, xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))))) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")))),, xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"))))),, concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")))),, xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))))) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")))),, xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"))))),, concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")))),, xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))))) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""YMM2"") |-> mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> concatenateMInt(concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"64")))),, xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"128"))))),, concatenateMInt(xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"192")))),, xorMInt(orMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256"))),, xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")),, extractMInt(mi(Int@INT-SYNTAX(#"256"),, _533:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"192"),, Int@INT-SYNTAX(#"256")))))) String@STRING-SYNTAX(#""YMM3"") |-> mi(Int@INT-SYNTAX(#"256"),, _534:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
70.29user 2.14system 0:21.09elapsed 343%CPU (0avgtext+0avgdata 2186540maxresident)k
0inputs+3680outputs (0major+368278minor)pagefaults 0swaps
