
InitialTerm: 
<T>(<k>(#KSequence(splitXmmToRegsIn32(%xmm1(.KList@BASIC-K),, %r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, %r12d(.KList@BASIC-K),, %r13d(.KList@BASIC-K)), combineNTo2N(%r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R13"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> _443:K@SORT-K String@STRING-SYNTAX(#""YMM1"") |-> _446:K@SORT-K String@STRING-SYNTAX(#""R12"") |-> _441:K@SORT-K String@STRING-SYNTAX(#""R11"") |-> _444:K@SORT-K String@STRING-SYNTAX(#""R13"") |-> _442:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _440:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _445:K@SORT-K   ),, <regstatequeue>(_447:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(splitXmmToRegsIn32(%xmm1(.KList@BASIC-K),, %r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, %r12d(.KList@BASIC-K),, %r13d(.KList@BASIC-K)), combineNTo2N(%r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R13"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))),, %r10d(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))),, %r11d(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %r12d(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, %r13d(.KList@BASIC-K)), combineNTo2N(%r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R13"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))),, %r11d(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %r12d(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, %r13d(.KList@BASIC-K)), combineNTo2N(%r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R13"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %r12d(.KList@BASIC-K)), setRegisterValue(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, %r13d(.KList@BASIC-K)), combineNTo2N(%r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""R13"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, %r13d(.KList@BASIC-K)), combineNTo2N(%r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""R13"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineNTo2N(%r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, %rbx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))) String@STRING-SYNTAX(#""YMM1"") |-> mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""R11"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))) String@STRING-SYNTAX(#""R13"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"64"),, Int@INT-SYNTAX(#"96")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(mi(Int@INT-SYNTAX(#"32"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"256"),, _439:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"128"),, Int@INT-SYNTAX(#"256")),, Int@INT-SYNTAX(#"96"),, Int@INT-SYNTAX(#"128")))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
65.05user 4.48system 0:23.09elapsed 301%CPU (0avgtext+0avgdata 1892316maxresident)k
0inputs+3728outputs (0major+76044minor)pagefaults 0swaps
