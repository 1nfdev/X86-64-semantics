-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(saveRegister(%rcx(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), saveRegister(%rbx(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD2"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), execinstr(__(movsbl(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movsbl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%r15d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movsbq(.KList@BASIC-K),, typeoperandlist(%r15b(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%r13b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rcx(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD2""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_628:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_627:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_630:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_629:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> _73_639:K@SORT-K String@STRING-SYNTAX(#""SPAD2"") |-> _71_637:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _72_638:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _79_645:K@SORT-K String@STRING-SYNTAX(#""SPAD1"") |-> _70_636:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _78_644:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _81_647:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _80_646:K@SORT-K String@STRING-SYNTAX(#""R13"") |-> _76_642:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _75_641:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _74_640:K@SORT-K String@STRING-SYNTAX(#""R15"") |-> _77_643:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _69_635:K@SORT-K   ),, <regstatequeue>(_82_648:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(saveRegister(%rcx(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD1"")), saveRegister(%rbx(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD2"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), execinstr(__(movsbl(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movsbl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%r15d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movsbq(.KList@BASIC-K),, typeoperandlist(%r15b(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%r13b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rcx(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD2""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_628:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_627:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_630:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_629:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(saveRegister(%rbx(.KList@BASIC-K),, String@STRING-SYNTAX(#""SPAD2"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), execinstr(__(movsbl(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movsbl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%r15d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movsbq(.KList@BASIC-K),, typeoperandlist(%r15b(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%r13b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rcx(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD2""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_628:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD2"") |-> MInt@MINT(#"256'0") String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_627:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_630:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_629:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), execinstr(__(movsbl(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movsbl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%r15d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movsbq(.KList@BASIC-K),, typeoperandlist(%r15b(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%r13b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rcx(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD2""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I2_628:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_627:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_630:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_629:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movsbl(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movsbl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%r15d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movsbq(.KList@BASIC-K),, typeoperandlist(%r15b(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%r13b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rcx(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD2""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_627:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_630:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_629:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movsbl(.KList@BASIC-K),, typeoperandlist(%bl(.KList@BASIC-K),, typeoperandlist(%r15d(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movsbq(.KList@BASIC-K),, typeoperandlist(%r15b(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%r13b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rcx(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD2""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_627:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_630:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_629:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movsbq(.KList@BASIC-K),, typeoperandlist(%r15b(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%r13b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rcx(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD2""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_627:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_630:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_629:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, %rcx(.KList@BASIC-K)), execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%r13b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rcx(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD2""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_627:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_630:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_629:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%cl(.KList@BASIC-K),, typeoperandlist(%r13b(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rcx(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD2""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_627:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_630:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_629:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(adcb(.KList@BASIC-K),, typeoperandlist(%r13b(.KList@BASIC-K),, typeoperandlist(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, typeoperandlist(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, typeoperandlist(MInt@MINT(#"8'0"),, typeoperandlist(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, .List{"typeoperandlist"}(.KList@BASIC-K)))))))), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rcx(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD2""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_627:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_630:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_629:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateOverflowAdd(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))), updateZeroFlag(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))), updateSignFlag(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))), updateAuxCarryFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))), updateCarryFlagAdd(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")), updateParityFlag(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))), setRegisterValue(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, %r13b(.KList@BASIC-K)), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rcx(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD2""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_627:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_630:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I3_629:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R15"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))), updateSignFlag(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))), updateAuxCarryFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))), updateCarryFlagAdd(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")), updateParityFlag(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))), setRegisterValue(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, %r13b(.KList@BASIC-K)), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rcx(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD2""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_627:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I8_634:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_630:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R15"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))), updateAuxCarryFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))), updateCarryFlagAdd(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")), updateParityFlag(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))), setRegisterValue(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, %r13b(.KList@BASIC-K)), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rcx(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD2""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_627:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I7_633:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_630:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R15"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateAuxCarryFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))), updateCarryFlagAdd(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")), updateParityFlag(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))), setRegisterValue(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, %r13b(.KList@BASIC-K)), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rcx(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD2""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I1_627:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_630:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R15"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateCarryFlagAdd(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"8'0")), updateParityFlag(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))), setRegisterValue(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, %r13b(.KList@BASIC-K)), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rcx(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD2""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_630:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R15"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))), setRegisterValue(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, %r13b(.KList@BASIC-K)), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rcx(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD2""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, ?I4_630:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R15"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, %r13b(.KList@BASIC-K)), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rcx(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD2""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R15"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%r13d(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rcx(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD2""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"56"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R15"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"56")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))))),, %rbx(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rcx(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD2""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"56"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R15"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(restoreRegister(String@STRING-SYNTAX(#""SPAD1""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rcx(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD2""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"56")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"56"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R15"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, %rcx(.KList@BASIC-K)), restoreRegister(String@STRING-SYNTAX(#""SPAD2""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"56")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"56"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R15"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(restoreRegister(String@STRING-SYNTAX(#""SPAD2""),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8"),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"56")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"56"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R15"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"56")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"56"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R15"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"56"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R15"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"56"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R15"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"56"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R15"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"1")) String@STRING-SYNTAX(#""SPAD2"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""AF"") |-> #ifMInt_#then_#else_#fi(notBool_(_==K_(uvalueMInt(andMInt(lshrMInt(xorMInt(xorMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))),, Int@INT-SYNTAX(#"4")),, MInt@MINT(#"8'1"))),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""SPAD1"") |-> concatenateMInt(MInt@MINT(#"192'0"),, mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX)) String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"56")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, MInt@MINT(#"8'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""SF"") |-> extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2")) String@STRING-SYNTAX(#""R13"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"56"))),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9"))) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(_==K_(_&Int_(countOnes(extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"9")),, Int@INT-SYNTAX(#"0")),, Int@INT-SYNTAX(#"1")),, Int@INT-SYNTAX(#"0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> #ifMInt_#then_#else_#fi(_andBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57"))),, notBool_(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"57")),, extractMInt(addMInt(concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, concatenateMInt(MInt@MINT(#"1'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I6_632:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"1"),, Int@INT-SYNTAX(#"2"))))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R15"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I5_631:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for _&Int_
[Warning] Critical: missing SMTLib translation for countOnes
[Warning] Critical: missing SMTLib translation for mi
[Warning] Critical: missing SMTLib translation for svalueMInt
128.02user 8.06system 0:37.10elapsed 366%CPU (0avgtext+0avgdata 3611280maxresident)k
0inputs+3952outputs (0major+201815minor)pagefaults 0swaps
