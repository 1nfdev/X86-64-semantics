-Xms64m -Xmx1024m -Xss32m -XX:+TieredCompilation -Xmx8g

InitialTerm: 
<T>(<k>(#KSequence(execinstr(__(movswq(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), split2NToN(%ecx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), split2NToN(%rbx(.KList@BASIC-K),, %r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %ebx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> _70_618:K@SORT-K String@STRING-SYNTAX(#""R11"") |-> _71_619:K@SORT-K String@STRING-SYNTAX(#""R8"") |-> _72_620:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _75_623:K@SORT-K String@STRING-SYNTAX(#""R9"") |-> _73_621:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _69_617:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _74_622:K@SORT-K   ),, <regstatequeue>(_76_624:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movswq(.KList@BASIC-K),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), split2NToN(%ecx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), split2NToN(%rbx(.KList@BASIC-K),, %r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %ebx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, %r10(.KList@BASIC-K)), execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), split2NToN(%ecx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), split2NToN(%rbx(.KList@BASIC-K),, %r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %ebx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movslq(.KList@BASIC-K),, typeoperandlist(%ebx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), split2NToN(%ecx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), split2NToN(%rbx(.KList@BASIC-K),, %r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %ebx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, %rbx(.KList@BASIC-K)), split2NToN(%ecx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), split2NToN(%rbx(.KList@BASIC-K),, %r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %ebx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%ecx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, Int@INT-SYNTAX(#"16")), split2NToN(%rbx(.KList@BASIC-K),, %r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %ebx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, %r8w(.KList@BASIC-K)), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48")),, %r9w(.KList@BASIC-K)), split2NToN(%rbx(.KList@BASIC-K),, %r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %ebx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48")),, %r9w(.KList@BASIC-K)), split2NToN(%rbx(.KList@BASIC-K),, %r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %ebx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%rbx(.KList@BASIC-K),, %r10d(.KList@BASIC-K),, %r11d(.KList@BASIC-K),, Int@INT-SYNTAX(#"32")), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %ebx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, %r10(.KList@BASIC-K)), setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))),, %r11(.KList@BASIC-K)), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %ebx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))),, %r11(.KList@BASIC-K)), execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %ebx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(movq(.KList@BASIC-K),, typeoperandlist(%r10(.KList@BASIC-K),, typeoperandlist(%rcx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %ebx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, %rcx(.KList@BASIC-K)), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %ebx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %ebx(.KList@BASIC-K),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"16")), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, %rbx(.KList@BASIC-K)), execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(nop(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R10"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R11"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I1_615:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"48'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, ?I2_616:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
126.80user 6.56system 0:36.30elapsed 367%CPU (0avgtext+0avgdata 2857532maxresident)k
0inputs+3800outputs (0major+83095minor)pagefaults 0swaps
