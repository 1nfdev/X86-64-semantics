
InitialTerm: 
<T>(<k>(#KSequence(split2NToN(%rbx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K)), split2NToN(%edx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> _478:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _481:K@SORT-K String@STRING-SYNTAX(#""RDX"") |-> _479:K@SORT-K String@STRING-SYNTAX(#""R9"") |-> _480:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _476:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _477:K@SORT-K   ),, <regstatequeue>(_482:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%rbx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K)), split2NToN(%edx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, %r8d(.KList@BASIC-K)), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")),, %r9d(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K)), split2NToN(%edx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")),, %r9d(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K)), split2NToN(%edx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K)), split2NToN(%edx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX),, %rbx(.KList@BASIC-K)), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K)), split2NToN(%edx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K)), split2NToN(%edx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))),, %edx(.KList@BASIC-K)), split2NToN(%edx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%edx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, %r8w(.KList@BASIC-K)), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")),, %r9w(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")),, %r9w(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, %rcx(.KList@BASIC-K)), execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(BaseOpcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _475:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"48"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R9"") |-> concatenateMInt(concatenateMInt(MInt@MINT(#"32'0"),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"))),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"))) String@STRING-SYNTAX(#""RDX"") |-> concatenateMInt(MInt@MINT(#"32'0"),, concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, _474:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
90.81user 2.06system 0:26.75elapsed 347%CPU (0avgtext+0avgdata 901632maxresident)k
0inputs+3696outputs (0major+77286minor)pagefaults 0swaps
