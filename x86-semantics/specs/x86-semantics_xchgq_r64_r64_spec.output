
InitialTerm: 
<T>(<k>(#KSequence(split2NToN(%rbx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K)), split2NToN(%edx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> _440:K@SORT-K String@STRING-SYNTAX(#""R8"") |-> _444:K@SORT-K String@STRING-SYNTAX(#""R9"") |-> _441:K@SORT-K String@STRING-SYNTAX(#""RDX"") |-> _443:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _439:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _442:K@SORT-K   ),, <regstatequeue>(_445:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%rbx(.KList@BASIC-K),, %r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K)), split2NToN(%edx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, %r8d(.KList@BASIC-K)), setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")),, %r9d(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K)), split2NToN(%edx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")),, %r9d(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K)), split2NToN(%edx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"movq"),, typeoperandlist(%rcx(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K)), split2NToN(%edx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX),, %rbx(.KList@BASIC-K)), combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K)), split2NToN(%edx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineNTo2N(%r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K),, %edx(.KList@BASIC-K)), split2NToN(%edx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))),, %edx(.KList@BASIC-K)), split2NToN(%edx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))) String@STRING-SYNTAX(#""RDX"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%edx(.KList@BASIC-K),, %r8w(.KList@BASIC-K),, %r9w(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32")),, %r8w(.KList@BASIC-K)), setRegisterValue(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16")),, %r9w(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16")),, %r9w(.KList@BASIC-K)), combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"))))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32"))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineNTo2N(%r8d(.KList@BASIC-K),, %r9d(.KList@BASIC-K),, %rcx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"))))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"))))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))),, %rcx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"))))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"))))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R8"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"))))) String@STRING-SYNTAX(#""R9"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"))))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R8"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"))))) String@STRING-SYNTAX(#""R9"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"))))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R8"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"))))) String@STRING-SYNTAX(#""R9"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"))))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _437:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RCX"") |-> concatenateMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64"))) String@STRING-SYNTAX(#""R8"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"16"),, Int@INT-SYNTAX(#"32"))))) String@STRING-SYNTAX(#""R9"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"16"))))) String@STRING-SYNTAX(#""RDX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"32")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _438:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"32"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
65.19user 3.81system 0:23.17elapsed 297%CPU (0avgtext+0avgdata 1888400maxresident)k
0inputs+3784outputs (0major+75360minor)pagefaults 0swaps
