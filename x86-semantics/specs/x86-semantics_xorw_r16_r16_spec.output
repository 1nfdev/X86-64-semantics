
InitialTerm: 
<T>(<k>(#KSequence(split2NToN(%cx(.KList@BASIC-K),, %r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, %bx(.KList@BASIC-K)), setSZPForRegister(%bx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""SF""),, %rbx(.KList@BASIC-K)), combineNTo2N(%r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, %bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%r12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _456:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _454:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

TargetTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> _466:K@SORT-K String@STRING-SYNTAX(#""SF"") |-> _460:K@SORT-K String@STRING-SYNTAX(#""CF"") |-> _462:K@SORT-K String@STRING-SYNTAX(#""AF"") |-> _458:K@SORT-K String@STRING-SYNTAX(#""R8"") |-> _464:K@SORT-K String@STRING-SYNTAX(#""RCX"") |-> _465:K@SORT-K String@STRING-SYNTAX(#""PF"") |-> _468:K@SORT-K String@STRING-SYNTAX(#""OF"") |-> _459:K@SORT-K String@STRING-SYNTAX(#""R9"") |-> _467:K@SORT-K String@STRING-SYNTAX(#""RIP"") |-> _457:K@SORT-K String@STRING-SYNTAX(#""RBX"") |-> _461:K@SORT-K String@STRING-SYNTAX(#""ZF"") |-> _463:K@SORT-K   ),, <regstatequeue>(_469:List@LIST)) /\ _==K_(Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"true"))



IntermediateTerm: 
<T>(<k>(#KSequence(split2NToN(%cx(.KList@BASIC-K),, %r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, %bx(.KList@BASIC-K)), setSZPForRegister(%bx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""SF""),, %rbx(.KList@BASIC-K)), combineNTo2N(%r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, %bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%r12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _456:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _454:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, %r8b(.KList@BASIC-K)), setRegisterValue(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")),, %r9b(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, %bx(.KList@BASIC-K)), setSZPForRegister(%bx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""SF""),, %rbx(.KList@BASIC-K)), combineNTo2N(%r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, %bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%r12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _456:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _454:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")),, %r9b(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, %bx(.KList@BASIC-K)), setSZPForRegister(%bx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""SF""),, %rbx(.KList@BASIC-K)), combineNTo2N(%r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, %bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%r12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _456:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _454:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%bx(.KList@BASIC-K),, typeoperandlist(%r12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), combineNTo2N(%r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, %bx(.KList@BASIC-K)), setSZPForRegister(%bx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""SF""),, %rbx(.KList@BASIC-K)), combineNTo2N(%r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, %bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%r12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _456:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _454:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, %r12(.KList@BASIC-K)), combineNTo2N(%r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, %bx(.KList@BASIC-K)), setSZPForRegister(%bx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""SF""),, %rbx(.KList@BASIC-K)), combineNTo2N(%r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, %bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%r12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _456:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _454:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineNTo2N(%r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, %bx(.KList@BASIC-K)), setSZPForRegister(%bx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""SF""),, %rbx(.KList@BASIC-K)), combineNTo2N(%r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, %bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%r12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _456:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _454:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, %bx(.KList@BASIC-K)), setSZPForRegister(%bx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""SF""),, %rbx(.KList@BASIC-K)), combineNTo2N(%r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, %bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%r12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _456:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _454:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setSZPForRegister(%bx(.KList@BASIC-K)), readFlagToRegister(String@STRING-SYNTAX(#""SF""),, %rbx(.KList@BASIC-K)), combineNTo2N(%r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, %bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%r12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _456:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _454:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))), updateZeroFlag(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))), updateParityFlag(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))), readFlagToRegister(String@STRING-SYNTAX(#""SF""),, %rbx(.KList@BASIC-K)), combineNTo2N(%r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, %bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%r12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> mi(Int@INT-SYNTAX(#"1"),, _451:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _456:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _454:Int@INT-SYNTAX)   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))), updateParityFlag(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))), readFlagToRegister(String@STRING-SYNTAX(#""SF""),, %rbx(.KList@BASIC-K)), combineNTo2N(%r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, %bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%r12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""ZF"") |-> mi(Int@INT-SYNTAX(#"1"),, _454:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _456:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))), readFlagToRegister(String@STRING-SYNTAX(#""SF""),, %rbx(.KList@BASIC-K)), combineNTo2N(%r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, %bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%r12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> mi(Int@INT-SYNTAX(#"1"),, _456:Int@INT-SYNTAX) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(readFlagToRegister(String@STRING-SYNTAX(#""SF""),, %rbx(.KList@BASIC-K)), combineNTo2N(%r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, %bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%r12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, %rbx(.KList@BASIC-K)), combineNTo2N(%r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, %bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%r12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(combineNTo2N(%r8b(.KList@BASIC-K),, %r9b(.KList@BASIC-K),, %bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%r12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64"))),, %bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%r12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%rbx(.KList@BASIC-K),, typeoperandlist(%r12(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"xorq"),, typeoperandlist(%r12(.KList@BASIC-K),, typeoperandlist(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, typeoperandlist(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, typeoperandlist(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, .List{"typeoperandlist"}(.KList@BASIC-K))))))), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""OF"")), updateZeroFlag(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))))), updateSignFlag(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))))), setRegisterValue(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, %r12(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""OF"") |-> mi(Int@INT-SYNTAX(#"1"),, _450:Int@INT-SYNTAX) String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))))), updateSignFlag(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))))), setRegisterValue(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, %r12(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))))), setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))))), setRegisterValue(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, %r12(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(undef(.KList@BASIC-K),, String@STRING-SYNTAX(#""AF"")), setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))))), setRegisterValue(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, %r12(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> mi(Int@INT-SYNTAX(#"1"),, _449:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setFlag(MInt@MINT(#"1'0"),, String@STRING-SYNTAX(#""CF"")), updateParityFlag(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))))), setRegisterValue(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, %r12(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> mi(Int@INT-SYNTAX(#"1"),, _453:Int@INT-SYNTAX) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))))), setRegisterValue(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, %r12(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, %r12(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"movswq"),, typeoperandlist(%r12w(.KList@BASIC-K),, typeoperandlist(%rbx(.KList@BASIC-K),, .List{"typeoperandlist"}(.KList@BASIC-K))))), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setRegisterValue(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, %rbx(.KList@BASIC-K)), setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(setSZPForRegister(%bx(.KList@BASIC-K)), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateSignFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))), updateZeroFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))), updateParityFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""R12"") |-> xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"64'1"),, lshrMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"63"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0") String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0"))   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateZeroFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))), updateParityFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, MInt@MINT(#"64'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(updateParityFlag(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))), execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#KSequence(execinstr(__(Opcode@X86-SYNTAX(#"nop"),, .List{"typeoperandlist"}(.KList@BASIC-K))), KItem@BASIC-K(#"inforegisters"), KItem@BASIC-K(#"fetch"))),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(#EmptyK()),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

IntermediateTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")

FinalTerm: 
<T>(<k>(exit_0(.KList@BASIC-K)),, <entrypoint>(MInt@MINT(#"64'0")),, <nextLoc>(MInt@MINT(#"64'0")),, <memstate>(<cmem>(.Map),, <dmem>(.Map)),, <regstate>(String@STRING-SYNTAX(#""CF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""AF"") |-> undef(.KList@BASIC-K) String@STRING-SYNTAX(#""R8"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))) String@STRING-SYNTAX(#""RCX"") |-> mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX) String@STRING-SYNTAX(#""R9"") |-> mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))) String@STRING-SYNTAX(#""RBX"") |-> mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))) String@STRING-SYNTAX(#""ZF"") |-> #ifMInt_#then_#else_#fi(eqMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, MInt@MINT(#"16'0")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""R12"") |-> xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))) String@STRING-SYNTAX(#""SF"") |-> #ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""PF"") |-> #ifMInt_#then_#else_#fi(#ifBool_#then_#else_#fi(notBool_(_==K_(uvalueMInt(xorMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, countOnes(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(xorMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(#ifMInt_#then_#else_#fi(eqMInt(MInt@MINT(#"16'1"),, lshrMInt(extractMInt(orMInt(andMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"15"))),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")))),, MInt@MINT(#"64'-65536")),, mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(concatenateMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"0"),, Int@INT-SYNTAX(#"8")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")),, extractMInt(mi(Int@INT-SYNTAX(#"64"),, uvalueMInt(extractMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _455:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")))),, Int@INT-SYNTAX(#"56"),, Int@INT-SYNTAX(#"64")))))),, mi(Int@INT-SYNTAX(#"64"),, svalueMInt(extractMInt(mi(Int@INT-SYNTAX(#"64"),, _452:Int@INT-SYNTAX),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64"))))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")))),, Int@INT-SYNTAX(#"48"),, Int@INT-SYNTAX(#"64")),, Int@INT-SYNTAX(#"8"),, Int@INT-SYNTAX(#"16")),, Int@INT-SYNTAX(#"0"))),, MInt@MINT(#"64'1")),, MInt@MINT(#"64'1"))),, Int@INT-SYNTAX(#"0"))),, Bool@BOOL-SYNTAX(#"true"),, Bool@BOOL-SYNTAX(#"false")),, MInt@MINT(#"1'1"),, MInt@MINT(#"1'0")) String@STRING-SYNTAX(#""OF"") |-> MInt@MINT(#"1'0") String@STRING-SYNTAX(#""RIP"") |-> MInt@MINT(#"64'0")   ),, <regstatequeue>(.List())) /\ Bool@BOOL-SYNTAX(#"true")
true
[Warning] Critical: missing SMTLib translation for mi
81.73user 4.16system 0:26.56elapsed 323%CPU (0avgtext+0avgdata 2059224maxresident)k
0inputs+4240outputs (0major+133369minor)pagefaults 0swaps
