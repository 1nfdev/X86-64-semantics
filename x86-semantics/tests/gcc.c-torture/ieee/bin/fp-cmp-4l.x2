	.file	"fp-cmp-4l.c"
	.section	.text.unlikely,"ax",@progbits
.LCOLDB1:
	.text
.LHOTB1:
	.p2align 4,,15
	.globl	test_isunordered
	.type	test_isunordered, @function
test_isunordered:
	subq	$8, %rsp
	fldt	32(%rsp)
	fldt	16(%rsp)
	fucomip	%st(1), %st
	fstp	%st(0)
	jp	.L8
	testl	%edi, %edi
	jne	.L4
.L5:
	addq	$8, %rsp
	ret
	.p2align 4,,10
	.p2align 3
.L8:
	testl	%edi, %edi
	jne	.L5
.L4:
	call	abort
	.size	test_isunordered, .-test_isunordered
	.section	.text.unlikely
.LCOLDE1:
	.text
.LHOTE1:
	.section	.text.unlikely
.LCOLDB2:
	.text
.LHOTB2:
	.p2align 4,,15
	.globl	test_isless
	.type	test_isless, @function
test_isless:
	subq	$8, %rsp
	fldt	32(%rsp)
	fldt	16(%rsp)
	fxch	%st(1)
	fucomip	%st(1), %st
	fstp	%st(0)
	jbe	.L10
	testl	%edi, %edi
	je	.L12
.L13:
	addq	$8, %rsp
	ret
	.p2align 4,,10
	.p2align 3
.L10:
	testl	%edi, %edi
	je	.L13
.L12:
	call	abort
	.size	test_isless, .-test_isless
	.section	.text.unlikely
.LCOLDE2:
	.text
.LHOTE2:
	.section	.text.unlikely
.LCOLDB3:
	.text
.LHOTB3:
	.p2align 4,,15
	.globl	test_islessequal
	.type	test_islessequal, @function
test_islessequal:
	subq	$8, %rsp
	fldt	32(%rsp)
	fldt	16(%rsp)
	fxch	%st(1)
	fucomip	%st(1), %st
	fstp	%st(0)
	jb	.L16
	testl	%edi, %edi
	je	.L18
.L19:
	addq	$8, %rsp
	ret
	.p2align 4,,10
	.p2align 3
.L16:
	testl	%edi, %edi
	je	.L19
.L18:
	call	abort
	.size	test_islessequal, .-test_islessequal
	.section	.text.unlikely
.LCOLDE3:
	.text
.LHOTE3:
	.section	.text.unlikely
.LCOLDB4:
	.text
.LHOTB4:
	.p2align 4,,15
	.globl	test_isgreater
	.type	test_isgreater, @function
test_isgreater:
	subq	$8, %rsp
	fldt	32(%rsp)
	fldt	16(%rsp)
	fucomip	%st(1), %st
	fstp	%st(0)
	jbe	.L22
	testl	%edi, %edi
	je	.L24
.L25:
	addq	$8, %rsp
	ret
	.p2align 4,,10
	.p2align 3
.L22:
	testl	%edi, %edi
	je	.L25
.L24:
	call	abort
	.size	test_isgreater, .-test_isgreater
	.section	.text.unlikely
.LCOLDE4:
	.text
.LHOTE4:
	.section	.text.unlikely
.LCOLDB5:
	.text
.LHOTB5:
	.p2align 4,,15
	.globl	test_isgreaterequal
	.type	test_isgreaterequal, @function
test_isgreaterequal:
	subq	$8, %rsp
	fldt	32(%rsp)
	fldt	16(%rsp)
	fucomip	%st(1), %st
	fstp	%st(0)
	jb	.L28
	testl	%edi, %edi
	je	.L30
.L31:
	addq	$8, %rsp
	ret
	.p2align 4,,10
	.p2align 3
.L28:
	testl	%edi, %edi
	je	.L31
.L30:
	call	abort
	.size	test_isgreaterequal, .-test_isgreaterequal
	.section	.text.unlikely
.LCOLDE5:
	.text
.LHOTE5:
	.section	.text.unlikely
.LCOLDB6:
	.text
.LHOTB6:
	.p2align 4,,15
	.globl	test_islessgreater
	.type	test_islessgreater, @function
test_islessgreater:
	subq	$8, %rsp
	fldt	32(%rsp)
	fldt	16(%rsp)
	fucomip	%st(1), %st
	fstp	%st(0)
	je	.L34
	testl	%edi, %edi
	je	.L36
.L37:
	addq	$8, %rsp
	ret
	.p2align 4,,10
	.p2align 3
.L34:
	testl	%edi, %edi
	je	.L37
.L36:
	call	abort
	.size	test_islessgreater, .-test_islessgreater
	.section	.text.unlikely
.LCOLDE6:
	.text
.LHOTE6:
	.section	.text.unlikely
.LCOLDB7:
	.section	.text.startup,"ax",@progbits
.LHOTB7:
	.p2align 4,,15
	.globl	main
	.type	main, @function
main:
	pushq	%r12
	movl	$data.2290+16, %r12d
	pushq	%rbp
	xorl	%ebp, %ebp
	pushq	%rbx
	subq	$32, %rsp
	.p2align 4,,10
	.p2align 3
.L40:
	fldt	(%r12)
	movslq	%ebp, %rax
	subq	$32, %rsp
	addl	$1, %ebp
	addq	$48, %r12
	fldt	-64(%r12)
	fxch	%st(1)
	leaq	(%rax,%rax,2), %rax
	fld	%st(0)
	fstpt	32(%rsp)
	salq	$4, %rax
	movzbl	data.2290+32(%rax), %ebx
	fstpt	16(%rsp)
	movl	%ebx, %edi
	fld	%st(0)
	fstpt	48(%rsp)
	andl	$1, %edi
	fstpt	(%rsp)
	call	test_isunordered
	movl	%ebx, %edi
	addq	$32, %rsp
	pushq	8(%rsp)
	shrb	%dil
	pushq	8(%rsp)
	andl	$1, %edi
	pushq	40(%rsp)
	pushq	40(%rsp)
	call	test_isless
	movl	%ebx, %edi
	addq	$32, %rsp
	pushq	8(%rsp)
	shrb	$2, %dil
	pushq	8(%rsp)
	andl	$1, %edi
	pushq	40(%rsp)
	pushq	40(%rsp)
	call	test_islessequal
	movl	%ebx, %edi
	addq	$32, %rsp
	pushq	8(%rsp)
	shrb	$3, %dil
	pushq	8(%rsp)
	andl	$1, %edi
	pushq	40(%rsp)
	pushq	40(%rsp)
	call	test_isgreater
	movl	%ebx, %edi
	addq	$32, %rsp
	shrb	$5, %bl
	pushq	8(%rsp)
	shrb	$4, %dil
	pushq	8(%rsp)
	andl	$1, %edi
	pushq	40(%rsp)
	pushq	40(%rsp)
	call	test_isgreaterequal
	addq	$32, %rsp
	movl	%ebx, %edi
	pushq	8(%rsp)
	andl	$1, %edi
	pushq	8(%rsp)
	pushq	40(%rsp)
	pushq	40(%rsp)
	call	test_islessgreater
	addq	$32, %rsp
	cmpl	$6, %ebp
	jne	.L40
	xorl	%edi, %edi
	call	exit
	.size	main, .-main
	.section	.text.unlikely
.LCOLDE7:
	.section	.text.startup
.LHOTE7:
	.section	.rodata
	.align 64
	.type	data.2290, @object
	.size	data.2290, 288
data.2290:
	.long	0
	.long	3221225472
	.long	32767
	.long	0
	.long	0
	.long	3221225472
	.long	32767
	.long	0
	.byte	1
	.zero	15
	.long	0
	.long	0
	.long	0
	.long	0
	.long	0
	.long	3221225472
	.long	32767
	.long	0
	.byte	1
	.zero	15
	.long	0
	.long	3221225472
	.long	32767
	.long	0
	.long	0
	.long	0
	.long	0
	.long	0
	.byte	1
	.zero	15
	.long	0
	.long	0
	.long	0
	.long	0
	.long	0
	.long	0
	.long	0
	.long	0
	.byte	20
	.zero	15
	.long	0
	.long	2147483648
	.long	16383
	.long	0
	.long	0
	.long	2147483648
	.long	16384
	.long	0
	.byte	38
	.zero	15
	.long	0
	.long	2147483648
	.long	16384
	.long	0
	.long	0
	.long	2147483648
	.long	16383
	.long	0
	.byte	56
	.zero	15
	.ident	"GCC: (Ubuntu 4.9.4-2ubuntu1) 4.9.4"
	.section	.note.GNU-stack,"",@progbits
