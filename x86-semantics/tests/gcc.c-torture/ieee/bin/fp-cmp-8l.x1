	.file	"fp-cmp-8l.c"
	.text
	.type	test_isunordered, @function
test_isunordered:
	fldt	8(%rsp)
	fldt	24(%rsp)
	fucomip	%st(1), %st
	fstp	%st(0)
	fldt	56(%rsp)
	fldt	40(%rsp)
	fcmovnu	%st(1), %st
	fstp	%st(1)
	ret
	.size	test_isunordered, .-test_isunordered
	.type	test_not_isunordered, @function
test_not_isunordered:
	fldt	8(%rsp)
	fldt	24(%rsp)
	fucomip	%st(1), %st
	fstp	%st(0)
	fldt	56(%rsp)
	fldt	40(%rsp)
	fcmovu	%st(1), %st
	fstp	%st(1)
	ret
	.size	test_not_isunordered, .-test_not_isunordered
	.type	test_isless, @function
test_isless:
	fldt	8(%rsp)
	fldt	24(%rsp)
	fucomip	%st(1), %st
	fstp	%st(0)
	fldt	56(%rsp)
	fldt	40(%rsp)
	fcmovbe	%st(1), %st
	fstp	%st(1)
	ret
	.size	test_isless, .-test_isless
	.type	test_not_isless, @function
test_not_isless:
	fldt	8(%rsp)
	fldt	24(%rsp)
	fucomip	%st(1), %st
	fstp	%st(0)
	fldt	56(%rsp)
	fldt	40(%rsp)
	fcmovnbe	%st(1), %st
	fstp	%st(1)
	ret
	.size	test_not_isless, .-test_not_isless
	.type	test_islessequal, @function
test_islessequal:
	fldt	8(%rsp)
	fldt	24(%rsp)
	fucomip	%st(1), %st
	fstp	%st(0)
	fldt	56(%rsp)
	fldt	40(%rsp)
	fcmovb	%st(1), %st
	fstp	%st(1)
	ret
	.size	test_islessequal, .-test_islessequal
	.type	test_not_islessequal, @function
test_not_islessequal:
	fldt	8(%rsp)
	fldt	24(%rsp)
	fucomip	%st(1), %st
	fstp	%st(0)
	fldt	56(%rsp)
	fldt	40(%rsp)
	fcmovnb	%st(1), %st
	fstp	%st(1)
	ret
	.size	test_not_islessequal, .-test_not_islessequal
	.type	test_isgreater, @function
test_isgreater:
	fldt	8(%rsp)
	fldt	24(%rsp)
	fxch	%st(1)
	fucomip	%st(1), %st
	fstp	%st(0)
	fldt	56(%rsp)
	fldt	40(%rsp)
	fcmovbe	%st(1), %st
	fstp	%st(1)
	ret
	.size	test_isgreater, .-test_isgreater
	.type	test_not_isgreater, @function
test_not_isgreater:
	fldt	8(%rsp)
	fldt	24(%rsp)
	fxch	%st(1)
	fucomip	%st(1), %st
	fstp	%st(0)
	fldt	56(%rsp)
	fldt	40(%rsp)
	fcmovnbe	%st(1), %st
	fstp	%st(1)
	ret
	.size	test_not_isgreater, .-test_not_isgreater
	.type	test_isgreaterequal, @function
test_isgreaterequal:
	fldt	8(%rsp)
	fldt	24(%rsp)
	fxch	%st(1)
	fucomip	%st(1), %st
	fstp	%st(0)
	fldt	56(%rsp)
	fldt	40(%rsp)
	fcmovb	%st(1), %st
	fstp	%st(1)
	ret
	.size	test_isgreaterequal, .-test_isgreaterequal
	.type	test_not_isgreaterequal, @function
test_not_isgreaterequal:
	fldt	8(%rsp)
	fldt	24(%rsp)
	fxch	%st(1)
	fucomip	%st(1), %st
	fstp	%st(0)
	fldt	56(%rsp)
	fldt	40(%rsp)
	fcmovnb	%st(1), %st
	fstp	%st(1)
	ret
	.size	test_not_isgreaterequal, .-test_not_isgreaterequal
	.type	test_islessgreater, @function
test_islessgreater:
	fldt	8(%rsp)
	fldt	24(%rsp)
	fucomip	%st(1), %st
	fstp	%st(0)
	fldt	56(%rsp)
	fldt	40(%rsp)
	fcmove	%st(1), %st
	fstp	%st(1)
	ret
	.size	test_islessgreater, .-test_islessgreater
	.type	test_not_islessgreater, @function
test_not_islessgreater:
	fldt	8(%rsp)
	fldt	24(%rsp)
	fucomip	%st(1), %st
	fstp	%st(0)
	fldt	56(%rsp)
	fldt	40(%rsp)
	fcmovne	%st(1), %st
	fstp	%st(1)
	ret
	.size	test_not_islessgreater, .-test_not_islessgreater
	.type	one_test, @function
one_test:
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	movq	64(%rsp), %r13
	movl	72(%rsp), %r14d
	movl	%edi, %ebp
	movq	%rdx, %r12
	pushq	$16384
	pushq	$0
	movl	$-2147483648, 4(%rsp)
	pushq	$16383
	pushq	$0
	movl	$-2147483648, 4(%rsp)
	pushq	%r14
	pushq	%r13
	pushq	104(%rsp)
	pushq	104(%rsp)
	call	*%rsi
	addq	$64, %rsp
	fld1
	fucomip	%st(1), %st
	fstp	%st(0)
	setnp	%bl
	movzbl	%bl, %ebx
	movl	$0, %eax
	cmovne	%eax, %ebx
	cmpl	%ebp, %ebx
	je	.L48
	call	abort
.L48:
	pushq	$16385
	pushq	$0
	movl	$-2147483648, 4(%rsp)
	pushq	$16384
	pushq	$0
	movl	$-1073741824, 4(%rsp)
	pushq	%r14
	pushq	%r13
	pushq	104(%rsp)
	pushq	104(%rsp)
	call	*%r12
	addq	$64, %rsp
	fldt	.LC5(%rip)
	fucomip	%st(1), %st
	fstp	%st(0)
	setnp	%al
	movzbl	%al, %eax
	movl	$0, %edx
	cmovne	%edx, %eax
	cmpl	%eax, %ebx
	je	.L47
	call	abort
.L47:
	popq	%rbx
	popq	%rbp
	popq	%r12
	popq	%r13
	popq	%r14
	ret
	.size	one_test, .-one_test
	.globl	main
	.type	main, @function
main:
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbp
	pushq	%rbx
	movl	$data.2330+32, %r12d
	movl	$data.2330+928, %r14d
	movl	$tests.2342+104, %r13d
	jmp	.L52
.L53:
	movq	-8(%rbx), %rsi
	pushq	-8(%r12)
	pushq	-16(%r12)
	pushq	-24(%r12)
	pushq	-32(%r12)
	movq	(%rbx), %rdx
	movl	0(%rbp), %edi
	call	one_test
	addq	$16, %rbx
	addq	$4, %rbp
	addq	$32, %rsp
	cmpq	%r13, %rbx
	jne	.L53
	addq	$64, %r12
	cmpq	%r14, %r12
	je	.L54
.L52:
	movl	$tests.2342+8, %ebx
	movq	%r12, %rbp
	jmp	.L53
.L54:
	movl	$0, %edi
	call	exit
	.size	main, .-main
	.section	.rodata
	.align 64
	.type	data.2330, @object
	.size	data.2330, 896
data.2330:
	.long	0
	.long	3221225472
	.long	32767
	.long	0
	.long	0
	.long	3221225472
	.long	32767
	.long	0
	.long	1
	.long	0
	.long	0
	.long	0
	.long	0
	.long	0
	.zero	8
	.long	0
	.long	0
	.long	0
	.long	0
	.long	0
	.long	3221225472
	.long	32767
	.long	0
	.long	1
	.long	0
	.long	0
	.long	0
	.long	0
	.long	0
	.zero	8
	.long	0
	.long	3221225472
	.long	32767
	.long	0
	.long	0
	.long	0
	.long	0
	.long	0
	.long	1
	.long	0
	.long	0
	.long	0
	.long	0
	.long	0
	.zero	8
	.long	0
	.long	0
	.long	0
	.long	0
	.long	0
	.long	0
	.long	0
	.long	0
	.long	0
	.long	0
	.long	1
	.long	0
	.long	1
	.long	0
	.zero	8
	.long	0
	.long	2147483648
	.long	16383
	.long	0
	.long	0
	.long	2147483648
	.long	16384
	.long	0
	.long	0
	.long	1
	.long	1
	.long	0
	.long	0
	.long	1
	.zero	8
	.long	0
	.long	2147483648
	.long	16384
	.long	0
	.long	0
	.long	2147483648
	.long	16383
	.long	0
	.long	0
	.long	0
	.long	0
	.long	1
	.long	1
	.long	1
	.zero	8
	.long	0
	.long	2147483648
	.long	32767
	.long	0
	.long	0
	.long	0
	.long	0
	.long	0
	.long	0
	.long	0
	.long	0
	.long	1
	.long	1
	.long	1
	.zero	8
	.long	0
	.long	2147483648
	.long	16383
	.long	0
	.long	0
	.long	2147483648
	.long	32767
	.long	0
	.long	0
	.long	1
	.long	1
	.long	0
	.long	0
	.long	1
	.zero	8
	.long	0
	.long	2147483648
	.long	32767
	.long	0
	.long	0
	.long	2147483648
	.long	32767
	.long	0
	.long	0
	.long	0
	.long	1
	.long	0
	.long	1
	.long	0
	.zero	8
	.long	0
	.long	0
	.long	0
	.long	0
	.long	0
	.long	2147483648
	.long	65535
	.long	0
	.long	0
	.long	0
	.long	0
	.long	1
	.long	1
	.long	1
	.zero	8
	.long	0
	.long	2147483648
	.long	65535
	.long	0
	.long	0
	.long	2147483648
	.long	16383
	.long	0
	.long	0
	.long	1
	.long	1
	.long	0
	.long	0
	.long	1
	.zero	8
	.long	0
	.long	2147483648
	.long	65535
	.long	0
	.long	0
	.long	2147483648
	.long	65535
	.long	0
	.long	0
	.long	0
	.long	1
	.long	0
	.long	1
	.long	0
	.zero	8
	.long	0
	.long	2147483648
	.long	32767
	.long	0
	.long	0
	.long	2147483648
	.long	65535
	.long	0
	.long	0
	.long	0
	.long	0
	.long	1
	.long	1
	.long	1
	.zero	8
	.long	0
	.long	2147483648
	.long	65535
	.long	0
	.long	0
	.long	2147483648
	.long	32767
	.long	0
	.long	0
	.long	1
	.long	1
	.long	0
	.long	0
	.long	1
	.zero	8
	.align 64
	.type	tests.2342, @object
	.size	tests.2342, 96
tests.2342:
	.quad	test_isunordered
	.quad	test_not_isunordered
	.quad	test_isless
	.quad	test_not_isless
	.quad	test_islessequal
	.quad	test_not_islessequal
	.quad	test_isgreater
	.quad	test_not_isgreater
	.quad	test_isgreaterequal
	.quad	test_not_isgreaterequal
	.quad	test_islessgreater
	.quad	test_not_islessgreater
	.section	.rodata.cst16,"aM",@progbits,16
	.align 16
.LC5:
	.long	0
	.long	2147483648
	.long	16385
	.long	0
	.ident	"GCC: (Ubuntu 4.9.4-2ubuntu1) 4.9.4"
	.section	.note.GNU-stack,"",@progbits
