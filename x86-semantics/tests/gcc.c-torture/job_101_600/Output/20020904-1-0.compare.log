grep  -A 39  "ListItem"  Output/20020904-1-0.kstate  | sed -e '/RIP/d' 1> /tmp/tmpfileJjRNK 2>&1 
numOfInstrs: 23

	0:	55	push   %rbp
	1:	48 89 e5	mov    %rsp,%rbp
	2:	bf 02 00 00 00	mov    $0x2,%edi
	3:	e8 d5 ff ff ff	callq  0x400184 <fun>
	4:	55	push   %rbp
	5:	48 89 e5	mov    %rsp,%rbp
	6:	89 f8	mov    %edi,%eax
	7:	88 45 ec	mov    %al,-0x14(%rbp)
	8:	b8 ff ff ff ff	mov    $0xffffffff,%eax
	9:	0f b6 c0	movzbl %al,%eax
	10:	f6 75 ec	divb   -0x14(%rbp)
	11:	88 45 ff	mov    %al,-0x1(%rbp)
	12:	0f b6 45 ff	movzbl -0x1(%rbp),%eax
	13:	5d	pop    %rbp
	14:	c3	retq   
	15:	3c 7f	cmp    $0x7f,%al
	16:	74 05	je     0x4001b8 <L23>
	17:	b8 00 00 00 00	mov    $0x0,%eax
	18:	5d	pop    %rbp
	19:	c3	retq   


Count 0) reg	kstate	xstate		55	push   %rbp
---------------------
rax	64'0	0
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'0	0
rsp	64'248	140737488343360
rbp	64'248	0
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 1) reg	kstate	xstate		48 89 e5	mov    %rsp,%rbp
---------------------
rax	64'0	0
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'0	0
rsp	64'240	140737488343352
rbp	64'248	0
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 2) reg	kstate	xstate		bf 02 00 00 00	mov    $0x2,%edi
---------------------
rax	64'0	0
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'0	0
rsp	64'240	140737488343352
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 3) reg	kstate	xstate		e8 d5 ff ff ff	callq  0x400184 <fun>
---------------------
rax	64'0	0
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'2	2
rsp	64'240	140737488343352
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 4) reg	kstate	xstate		55	push   %rbp
---------------------
rax	64'0	0
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'2	2
rsp	64'232	140737488343344
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 5) reg	kstate	xstate		48 89 e5	mov    %rsp,%rbp
---------------------
rax	64'0	0
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'2	2
rsp	64'224	140737488343336
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 6) reg	kstate	xstate		89 f8	mov    %edi,%eax
---------------------
rax	64'0	0
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'2	2
rsp	64'224	140737488343336
rbp	64'224	140737488343336
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 7) reg	kstate	xstate		88 45 ec	mov    %al,-0x14(%rbp)
---------------------
rax	64'2	2
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'2	2
rsp	64'224	140737488343336
rbp	64'224	140737488343336
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 8) reg	kstate	xstate		b8 ff ff ff ff	mov    $0xffffffff,%eax
---------------------
rax	64'2	2
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'2	2
rsp	64'224	140737488343336
rbp	64'224	140737488343336
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 9) reg	kstate	xstate		0f b6 c0	movzbl %al,%eax
---------------------
rax	64'4294967295	4294967295
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'2	2
rsp	64'224	140737488343336
rbp	64'224	140737488343336
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 10) reg	kstate	xstate		f6 75 ec	divb   -0x14(%rbp)
---------------------
rax	64'255	255
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'2	2
rsp	64'224	140737488343336
rbp	64'224	140737488343336
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	1'0	0
pf	1'0	0
af	1'0	0
zf	1'0	0
sf	1'0	0
of	1'0	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 11) reg	kstate	xstate		88 45 ff	mov    %al,-0x1(%rbp)
---------------------
rax	concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) )	383
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'2	2
rsp	64'224	140737488343336
rbp	64'224	140737488343336
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	undefMInt	0
pf	undefMInt	0
af	undefMInt	0
zf	undefMInt )	0
sf	undefMInt	0
of	undefMInt	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 12) reg	kstate	xstate		0f b6 45 ff	movzbl -0x1(%rbp),%eax
---------------------
rax	concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) )	383
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'2	2
rsp	64'224	140737488343336
rbp	64'224	140737488343336
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	undefMInt	0
pf	undefMInt	0
af	undefMInt	0
zf	undefMInt )	0
sf	undefMInt	0
of	undefMInt	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 13) reg	kstate	xstate		5d	pop    %rbp
---------------------
rax	concatenateMInt ( 56'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) )	127
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'2	2
rsp	64'224	140737488343336
rbp	64'224	140737488343336
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	undefMInt	0
pf	undefMInt	0
af	undefMInt	0
zf	undefMInt )	0
sf	undefMInt	0
of	undefMInt	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 14) reg	kstate	xstate		c3	retq   
---------------------
rax	concatenateMInt ( 56'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) )	127
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'2	2
rsp	64'232	140737488343344
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	undefMInt	0
pf	undefMInt	0
af	undefMInt	0
zf	undefMInt )	0
sf	undefMInt	0
of	undefMInt	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 15) reg	kstate	xstate		3c 7f	cmp    $0x7f,%al
---------------------
rax	concatenateMInt ( 56'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) )	127
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'2	2
rsp	64'240	140737488343352
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	undefMInt	0
pf	undefMInt	0
af	undefMInt	0
zf	undefMInt )	0
sf	undefMInt	0
of	undefMInt	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 16) reg	kstate	xstate		74 05	je     0x4001b8 <L23>
---------------------
rax	concatenateMInt ( 56'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) )	127
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'2	2
rsp	64'240	140737488343352
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	#ifMInt notBool eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 0 , 1 ) , 1'1 ) #then 1'1 #else 1'0 #fi	0
pf	#ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 8 , 9 ) , 1'1 ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 7 , 8 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 6 , 7 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 5 , 6 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 4 , 5 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 3 , 4 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 2 , 3 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 2 ) , 1'1 ) #then 1'1 #else 1'0 #fi	1
af	xorMInt ( xorMInt ( 1'1 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 59 , 60 ) ) , extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 4 , 5 ) )	0
zf	#ifMInt eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 9 ) , 8'0 ) #then 1'1 #else 1'0 #fi )	1
sf	extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 2 )	0
of	#ifMInt true ==K eqMInt ( extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 57 ) , 1'1 ) andBool notBool true ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 2 ) , 1'1 ) #then 1'1 #else 1'0 #fi	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 17) reg	kstate	xstate		b8 00 00 00 00	mov    $0x0,%eax
---------------------
rax	concatenateMInt ( 56'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) )	127
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'2	2
rsp	64'240	140737488343352
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	#ifMInt notBool eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 0 , 1 ) , 1'1 ) #then 1'1 #else 1'0 #fi	0
pf	#ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 8 , 9 ) , 1'1 ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 7 , 8 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 6 , 7 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 5 , 6 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 4 , 5 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 3 , 4 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 2 , 3 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 2 ) , 1'1 ) #then 1'1 #else 1'0 #fi	1
af	xorMInt ( xorMInt ( 1'1 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 59 , 60 ) ) , extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 4 , 5 ) )	0
zf	#ifMInt eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 9 ) , 8'0 ) #then 1'1 #else 1'0 #fi )	1
sf	extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 2 )	0
of	#ifMInt true ==K eqMInt ( extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 57 ) , 1'1 ) andBool notBool true ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 2 ) , 1'1 ) #then 1'1 #else 1'0 #fi	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 18) reg	kstate	xstate		5d	pop    %rbp
---------------------
rax	concatenateMInt ( 56'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) )	0
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'2	2
rsp	64'232	140737488343352
rbp	64'240	140737488343352
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	#ifMInt notBool eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 0 , 1 ) , 1'1 ) #then 1'1 #else 1'0 #fi	0
pf	#ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 8 , 9 ) , 1'1 ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 7 , 8 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 6 , 7 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 5 , 6 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 4 , 5 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 3 , 4 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 2 , 3 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 2 ) , 1'1 ) #then 1'1 #else 1'0 #fi	1
af	xorMInt ( xorMInt ( 1'1 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 59 , 60 ) ) , extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 4 , 5 ) )	0
zf	#ifMInt eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 9 ) , 8'0 ) #then 1'1 #else 1'0 #fi )	1
sf	extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 2 )	0
of	#ifMInt true ==K eqMInt ( extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 57 ) , 1'1 ) andBool notBool true ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 2 ) , 1'1 ) #then 1'1 #else 1'0 #fi	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 19) reg	kstate	xstate		c3	retq   
---------------------
rax	concatenateMInt ( 56'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) )	0
rbx	64'0	0
rcx	64'0	0
rdx	64'0	0
rsi	64'0	0
rdi	64'2	2
rsp	64'224	140737488343360
rbp	64'240	0
r8	64'0	0
r9	64'0	0
r10	64'0	0
r11	64'0	0
r12	64'0	0
r13	64'0	0
r14	64'0	0
r15	64'0	0
cf	#ifMInt notBool eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 0 , 1 ) , 1'1 ) #then 1'1 #else 1'0 #fi	0
pf	#ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 8 , 9 ) , 1'1 ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 7 , 8 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 6 , 7 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 5 , 6 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 4 , 5 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 3 , 4 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 2 , 3 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 2 ) , 1'1 ) #then 1'1 #else 1'0 #fi	1
af	xorMInt ( xorMInt ( 1'1 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 59 , 60 ) ) , extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 4 , 5 ) )	0
zf	#ifMInt eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 9 ) , 8'0 ) #then 1'1 #else 1'0 #fi )	1
sf	extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 2 )	0
of	#ifMInt true ==K eqMInt ( extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 57 ) , 1'1 ) andBool notBool true ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 2 ) , 1'1 ) #then 1'1 #else 1'0 #fi	0
ymm0	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm1	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm2	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm3	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm4	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm5	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm6	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm7	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm8	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm9	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm10	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm11	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm12	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm13	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm14	256'0	0x0000000000000000000000000000000000000000000000000000000000000000
ymm15	256'0	0x0000000000000000000000000000000000000000000000000000000000000000

Count 20) reg	kstate	xstate	
---------------------
rax	concatenateMInt ( 56'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) )	
rbx	64'0	
rcx	64'0	
rdx	64'0	
rsi	64'0	
rdi	64'2	
rsp	64'224	
rbp	64'224	
r8	64'0	
r9	64'0	
r10	64'0	
r11	64'0	
r12	64'0	
r13	64'0	
r14	64'0	
r15	64'0	
cf	#ifMInt notBool eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 0 , 1 ) , 1'1 ) #then 1'1 #else 1'0 #fi	
pf	#ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 8 , 9 ) , 1'1 ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 7 , 8 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 6 , 7 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 5 , 6 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 4 , 5 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 3 , 4 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 2 , 3 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 2 ) , 1'1 ) #then 1'1 #else 1'0 #fi	
af	xorMInt ( xorMInt ( 1'1 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 59 , 60 ) ) , extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 4 , 5 ) )	
zf	#ifMInt eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 9 ) , 8'0 ) #then 1'1 #else 1'0 #fi )	
sf	extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 2 )	
of	#ifMInt true ==K eqMInt ( extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 57 ) , 1'1 ) andBool notBool true ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 2 ) , 1'1 ) #then 1'1 #else 1'0 #fi	
ymm0	256'0	
ymm1	256'0	
ymm2	256'0	
ymm3	256'0	
ymm4	256'0	
ymm5	256'0	
ymm6	256'0	
ymm7	256'0	
ymm8	256'0	
ymm9	256'0	
ymm10	256'0	
ymm11	256'0	
ymm12	256'0	
ymm13	256'0	
ymm14	256'0	
ymm15	256'0	

Count 21) reg	kstate	xstate	
---------------------
rax	64'-1	
rbx	64'0	
rcx	64'0	
rdx	64'0	
rsi	64'0	
rdi	64'2	
rsp	64'224	
rbp	64'224	
r8	64'0	
r9	64'0	
r10	64'0	
r11	64'0	
r12	64'0	
r13	64'0	
r14	64'0	
r15	64'0	
cf	#ifMInt notBool eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 0 , 1 ) , 1'1 ) #then 1'1 #else 1'0 #fi	
pf	#ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 8 , 9 ) , 1'1 ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 7 , 8 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 6 , 7 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 5 , 6 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 4 , 5 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 3 , 4 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 2 , 3 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 2 ) , 1'1 ) #then 1'1 #else 1'0 #fi	
af	xorMInt ( xorMInt ( 1'1 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 59 , 60 ) ) , extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 4 , 5 ) )	
zf	#ifMInt eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 9 ) , 8'0 ) #then 1'1 #else 1'0 #fi )	
sf	extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 2 )	
of	#ifMInt true ==K eqMInt ( extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 57 ) , 1'1 ) andBool notBool true ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 2 ) , 1'1 ) #then 1'1 #else 1'0 #fi	
ymm0	256'0	
ymm1	256'0	
ymm2	256'0	
ymm3	256'0	
ymm4	256'0	
ymm5	256'0	
ymm6	256'0	
ymm7	256'0	
ymm8	256'0	
ymm9	256'0	
ymm10	256'0	
ymm11	256'0	
ymm12	256'0	
ymm13	256'0	
ymm14	256'0	
ymm15	256'0	

Count 22) reg	kstate	xstate	
---------------------
rax	64'-1	
rbx	64'0	
rcx	64'0	
rdx	64'0	
rsi	64'0	
rdi	64'2	
rsp	64'224	
rbp	64'224	
r8	64'0	
r9	64'0	
r10	64'0	
r11	64'0	
r12	64'0	
r13	64'0	
r14	64'0	
r15	64'0	
cf	#ifMInt notBool eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 0 , 1 ) , 1'1 ) #then 1'1 #else 1'0 #fi	
pf	#ifMInt notBool notBool ( notBool ( notBool ( notBool ( notBool ( notBool ( notBool eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 8 , 9 ) , 1'1 ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 7 , 8 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 6 , 7 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 5 , 6 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 4 , 5 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 3 , 4 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 2 , 3 ) , 1'1 ) ) ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 2 ) , 1'1 ) #then 1'1 #else 1'0 #fi	
af	xorMInt ( xorMInt ( 1'1 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 59 , 60 ) ) , extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 4 , 5 ) )	
zf	#ifMInt eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 9 ) , 8'0 ) #then 1'1 #else 1'0 #fi )	
sf	extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 2 )	
of	#ifMInt true ==K eqMInt ( extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 57 ) , 1'1 ) andBool notBool true ==K eqMInt ( extractMInt ( addMInt ( 9'129 , concatenateMInt ( 1'0 , extractMInt ( concatenateMInt ( concatenateMInt ( 48'0 , div_remainder_int8 ( 16'255 , 8'2 ) ) , div_quotient_int8 ( 16'255 , 8'2 ) ) , 56 , 64 ) ) ) , 1 , 2 ) , 1'1 ) #then 1'1 #else 1'0 #fi	
ymm0	256'0	
ymm1	256'0	
ymm2	256'0	
ymm3	256'0	
ymm4	256'0	
ymm5	256'0	
ymm6	256'0	
ymm7	256'0	
ymm8	256'0	
ymm9	256'0	
ymm10	256'0	
ymm11	256'0	
ymm12	256'0	
ymm13	256'0	
ymm14	256'0	
ymm15	256'0	
[4m[1m[34m20020904-1-0 Compare Results :[0m
Failed:[4m[1m[91m20020904-1-0: kstate xstate count unequal[0m
kstates = 874
xstates = 760

Failed:[4m[1m[91mFail[0m
000000000000 != 00000000017f
rax at instrcount: 11

Failed:[4m[1m[91mFail[0m
000000000000 != 00000000017f
rax at instrcount: 12

Failed:[4m[1m[91mFail[0m
00000000000000 != 0000000000007f
rax at instrcount: 13

Failed:[4m[1m[91mFail[0m
00000000000000 != 0000000000007f
rax at instrcount: 14

Failed:[4m[1m[91mFail[0m
00000000000000 != 0000000000007f
rax at instrcount: 15

Failed:[4m[1m[91mFail[0m
00000000000000 != 0000000000007f
rax at instrcount: 16

Failed:[4m[1m[91mFail[0m
129 != 0
cf at instrcount: 17

Failed:[4m[1m[91mFail[0m
129 != 1
pf at instrcount: 17

Failed:[4m[1m[91mFail[0m
1 != 0
af at instrcount: 17

Failed:[4m[1m[91mFail[0m
129 != 1
zf at instrcount: 17

Failed:[4m[1m[91mFail[0m
129 != 0
sf at instrcount: 17

Failed:[4m[1m[91mFail[0m
00000000000000 != 0000000000007f
rax at instrcount: 17

Failed:[4m[1m[91mFail[0m
129 != 0
cf at instrcount: 18

Failed:[4m[1m[91mFail[0m
129 != 1
pf at instrcount: 18

Failed:[4m[1m[91mFail[0m
1 != 0
af at instrcount: 18

Failed:[4m[1m[91mFail[0m
129 != 1
zf at instrcount: 18

Failed:[4m[1m[91mFail[0m
129 != 0
sf at instrcount: 18

Failed:[4m[1m[91mFail[0m
129 != 0
cf at instrcount: 19

Failed:[4m[1m[91mFail[0m
129 != 1
pf at instrcount: 19

Failed:[4m[1m[91mFail[0m
1 != 0
af at instrcount: 19

Failed:[4m[1m[91mFail[0m
129 != 1
zf at instrcount: 19

Failed:[4m[1m[91mFail[0m
129 != 0
sf at instrcount: 19

Failed:[4m[1m[91mFail[0m
129 != 0
cf at instrcount: 20

Failed:[4m[1m[91mFail[0m
129 != 1
pf at instrcount: 20

Failed:[4m[1m[91mFail[0m
1 != 0
af at instrcount: 20

Failed:[4m[1m[91mFail[0m
129 != 1
zf at instrcount: 20

Failed:[4m[1m[91mFail[0m
129 != 0
sf at instrcount: 20

Passed:[4m[1m[92mPassed[0m
